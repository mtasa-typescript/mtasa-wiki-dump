from src.fetch.function import CompoundFunctionData, FunctionData, FunctionArgument, ListType, FunctionUrl, \
 FunctionType, FunctionDoc, FunctionOOP

DATA = [
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='engineFreeModel', return_types=['bool'], arguments=[FunctionArgument(name='modelID', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'modelID': ': the model ID you want to have un-assigned.'}, result="Returns ''true'' if the model was successfully freed, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/EngineFreeModel', name='engineFreeModel', category='Engine functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='engineGetModelIDFromName', return_types=['int'], arguments=[FunctionArgument(name='modelName', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='This function gets the model ID of an object model from object name. This function is the counterpart of [[engineGetModelNameFromID]].', arguments={'modelName': 'The model name of the object'}, result="Returns an ''int'' with the ID of the object model, false otherwise."), oop=None, url=FunctionUrl(url='/wiki/EngineGetModelIDFromName', name='engineGetModelIDFromName', category='Engine functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='engineGetModelLODDistance', return_types=['float'], arguments=[FunctionArgument(name='model', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function gets the LOD distance for any object / model ID.', arguments={'model': 'The model / object ID number you want to get the LOD distance of.'}, result="Returns a float representing the LOD distance of the model, or ''false'' if the model argument is incorrect."), oop=None, url=FunctionUrl(url='/wiki/EngineGetModelLODDistance', name='engineGetModelLODDistance', category='Engine functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='engineGetModelNameFromID', return_types=['string'], arguments=[FunctionArgument(name='modelID', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function gets the model name of an object model from model ID. This function is the counterpart of [[engineGetModelIDFromName]].', arguments={'modelID': 'The model ID of the object'}, result="Returns a ''string'' with the name of the object model, false otherwise."), oop=None, url=FunctionUrl(url='/wiki/EngineGetModelNameFromID', name='engineGetModelNameFromID', category='Engine functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='engineGetModelPhysicalPropertiesGroup', return_types=['int'], arguments=[FunctionArgument(name='modelID', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'modelID': ': the id of model which you wish to get physical properties group of.'}, result="Returns '''id''' of physical properties group that requested model uses, in range of ''0-160'', if the object doesn't have a group assigned, ''-1'' is returned. If passed arguments were wrong, error is triggered."), oop=None, url=FunctionUrl(url='/wiki/EngineGetModelPhysicalPropertiesGroup', name='engineGetModelPhysicalPropertiesGroup', category='Engine functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='engineGetObjectGroupPhysicalProperty', return_types=['var'], arguments=[FunctionArgument(name='groupID', argument_type='int', default_value=None, optional=False), FunctionArgument(name='modifiable', argument_type='objectgroup', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'groupID': ': the id of physical properties group which you wish to get a property from.', 'objectgroup-modifiable': ': the property which you wish to get, as per table below.'}, result='Returns the value contained in given property if everything went well, error is raised otherwise.'), oop=None, url=FunctionUrl(url='/wiki/EngineGetObjectGroupPhysicalProperty', name='engineGetObjectGroupPhysicalProperty', category='Engine functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='engineGetModelTextures', return_types=['table'], arguments=[FunctionArgument(name='int', argument_type='string', default_value=None, optional=False), FunctionArgument(name='table', argument_type='string', default_value=None, optional=True)]), docs=FunctionDoc(description='', arguments={'model': ': either the model ID or model name.', 'textureNames': ': Only return textures with specified name(s). You can provide a single string or a table of strings. Wildcard matching e.g. ro?ds* can be used.'}, result="Returns a table of texture elements [textureName, texture], '''false''' otherwise."), oop=None, url=FunctionUrl(url='/wiki/EngineGetModelTextures', name='engineGetModelTextures', category='Engine functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='engineGetModelTextureNames', return_types=['table'], arguments=[FunctionArgument(name='modelId', argument_type='string', default_value='""', optional=False)]), docs=FunctionDoc(description='This function returns a table of the world textures which are applied to the specified model.', arguments={'modelId ': 'You can either use the model id or the model name.'}, result='Returns a table if this function succeeds, false if it fails for some reason.'), oop=None, url=FunctionUrl(url='/wiki/EngineGetModelTextureNames', name='engineGetModelTextureNames', category='Engine functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='engineGetModelVisibleTime', return_types=['int', 'int'], arguments=[FunctionArgument(name='modelID', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'modelID': ': ID of the model'}, result="Returns '''timeOn''', '''timeOff'''"), oop=None, url=FunctionUrl(url='/wiki/EngineGetModelVisibleTime', name='engineGetModelVisibleTime', category='Engine functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='engineGetSurfaceProperties', return_types=['mixed'], arguments=[FunctionArgument(name='surfaceID', argument_type='int', default_value=None, optional=False), FunctionArgument(name='property', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'surfaceID': 'Material IDs|Material ID from 0 to 178', 'property': 'Property name'}, result='Returns the current property value. See the table below for possible values.'), oop=None, url=FunctionUrl(url='/wiki/EngineGetSurfaceProperties', name='engineGetSurfaceProperties', category='Engine functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='engineGetVisibleTextureNames', return_types=['table'], arguments=[FunctionArgument(name='nameFilter', argument_type='string', default_value='"*"', optional=False), FunctionArgument(name='modelId', argument_type='string', default_value='""', optional=False)]), docs=FunctionDoc(description='This function returns a list of the world textures which are being used to draw the current scene.', arguments={'nameFilter': 'Only include textures that match the wildcard string.', 'modelId ': 'Only include textures that are used by the model id (or model name)'}, result='Returns a table of texture names.'), oop=None, url=FunctionUrl(url='/wiki/EngineGetVisibleTextureNames', name='engineGetVisibleTextureNames', category='Engine functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='engineImportTXD', return_types=['bool'], arguments=[FunctionArgument(name='texture', argument_type='txd', default_value=None, optional=False), FunctionArgument(name='model_id', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description="This function imports (adds) a loaded RenderWare Texture Dictionary into a specific model. This is necessary in order for the DFF loader to find any new textures. Please '''call this function before loading the DFF model file''', in order to allow the DFF loading process to find the new textures. This function can also replace default GTA textures, so that it becomes possible to e.g. put custom images on existing billboards. Ped and weapon textures are also supported.\nSee here for [[Optimize_Custom_TXD|tips on reducing the size of TXD files]].\n* CJ clothing component textures can be replaced by using the ids listed on [[Clothing Component IDs|this page]]\n}}", arguments={'texture': 'The TXD that was loaded with engineLoadTXD', 'model_id': 'The model id to import the TXD into'}, result="Returns ''true'' if the function executed succesfully, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/EngineImportTXD', name='engineImportTXD', category='Engine functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='engineLoadCOL', return_types=['col'], arguments=[FunctionArgument(name='col_file', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='This function loads a RenderWare Collision (COL 1/2/3) file into GTA. The collisions can then be used to provide collisions for in-game objects.\nFor vehicles, please omit this function by embedding your [[COL]] file into your [[DFF]] file. This way, you can be sure that the COL file is correctly (and automatically) loaded when calling [[engineLoadDFF]].\nThis is a client side function. Be sure to transfer your COL file by including it in the meta file.', arguments={'col_file / raw_data': 'The filepath to the COL file you want to load or whole data buffer of the COL file.'}, result="Returns a [[COL]] if the file was loaded, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/EngineLoadCOL', name='engineLoadCOL', category='Engine functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='engineLoadDFF', return_types=['dff'], arguments=[FunctionArgument(name='dff_file', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='This function loads a RenderWare Model (DFF) file into GTA.\nTo successfully load your model with textures, be sure to use [[engineLoadTXD]] and [[engineImportTXD]] before calling this function. If some error occurs while loading the DFF, MTA will output a message - check out [[DFF error messages]] to know what they mean.\nThis is a client side function. Be sure to transfer your DFF file by including it in the meta file.\nThe returned [[DFF]] element is an element in the element tree, just like vehicles and objects. When the dff is destroyed, ie on resource unload or using [[destroyElement]], any elements that use the DFF, such as vehicles or objects will be reset.', arguments={'dff_file / raw_data': 'The filepath to the DFF file you want to load or whole data buffer of the DFF file.'}, result="Returns a [[DFF]] element if the dff file loaded, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/EngineLoadDFF', name='engineLoadDFF', category='Engine functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='engineLoadIFP', return_types=['ifp'], arguments=[FunctionArgument(name='ifp_file', argument_type='string', default_value=None, optional=False), FunctionArgument(name='custom_block_name', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description="This function loads an animation library (IFP) file into GTA with a custom block name. All three IFP formats are supported ANPK, ANP2, and ANP3. Unfortunately, GTA 3 animations are not supported, however, you can load GTA:VC IFP files using this function. You don't have to replace any animation to play a custom one, to play a custom animation, load the IFP file using this function, then use [[SetPedAnimation|setPedAnimation]].\nIf you wish to replace a GTA internal animation with a custom one, you can use [[EngineReplaceAnimation|engineReplaceAnimation]]. To unload the IFP file, use [[DestroyElement|destroyElement]], restarting or stopping the resource can also unload the IFP file automatically.}}", arguments={'ifp_file / raw_data': 'the filepath|filepath to the IFP file you want to load or whole data buffer of the IFP file.', 'custom_block_name': 'the new block name for the IFP file. You cannot use the GTA default Animations|internal block names. You should namespace this name using a string like resource.blockname'}, result="Returns an [[IFP]] element if the IFP file loaded, ''false'' otherwise.\n{{Tip|If you want to synchronize animations, you can check [[https://drive.google.com/open?id=1L2NkQYuLS0YdoHECvxVRMdPBbEgaYUfH ifp_demo]] resource}}"), oop=None, url=FunctionUrl(url='/wiki/EngineLoadIFP', name='engineLoadIFP', category='Engine functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='engineLoadTXD', return_types=['txd'], arguments=[FunctionArgument(name='txd_file', argument_type='string', default_value=None, optional=False), FunctionArgument(name='filteringEnabled', argument_type='bool', default_value='true', optional=True)]), docs=FunctionDoc(description='This function loads a RenderWare Texture Dictionary (TXD) file into GTA. The texture dictionary can then be used to provide textures.\nThis is a client side function. Be sure to transfer your TXD file by including it in the meta file.', arguments={'txd_file / raw_data': 'The filepath to the TXD file you want to load or whole data buffer of the TXD file.', 'filteringEnabled': 'Whether to enable texture filtering.'}, result="Returns a [[TXD]] if the file was loaded, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/EngineLoadTXD', name='engineLoadTXD', category='Engine functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='engineRemoveShaderFromWorldTexture', return_types=['bool'], arguments=[FunctionArgument(name='shader', argument_type='element', default_value=None, optional=False), FunctionArgument(name='textureName', argument_type='string', default_value=None, optional=False), FunctionArgument(name='targetElement', argument_type='element', default_value='nil', optional=True)]), docs=FunctionDoc(description='This function removes a [[shader]] from one or more world textures.', arguments={'shader': 'The shader which is to be removed', 'textureName': 'The name of the world texture to remove the shader from. It should be exactly the same string as used with engineApplyShaderToWorldTexture when the shader was initially applied.\n{{New feature/item|3.0130|1.3.0|4140|', 'targetElement': 'The element to remove the shader from. It should be the same element as used with engineApplyShaderToWorldTexture when the shader was initially applied.\n}}'}, result="Returns ''true'' if the shader was successfully removed, ''false'' otherwise."), oop=FunctionOOP(class_name='shader', method_name="removeFromWorldTexture}}}}\n\n===Required Arguments=== \n*'''shader:''' The shader which is to be removed\n*'''textureName:''' The name of the world texture to remove the shader from. It should be exactly the same string as used with [[engineApplyShaderToWorldTexture]] when the shader was initially applied.\n\n===Optional Arguments=== \n{{New feature/item", field='3.0130'), url=FunctionUrl(url='/wiki/EngineRemoveShaderFromWorldTexture', name='engineRemoveShaderFromWorldTexture', category='Engine functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='engineResetModelLODDistance', return_types=['bool'], arguments=[FunctionArgument(name='model', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'model': 'The model / object ID number you want to reset the LOD distance of.'}, result="Returns ''true'' if the LOD distance was reset to default, or ''false'' if the model argument is incorrect, or the LOD distance hasn't been changed."), oop=None, url=FunctionUrl(url='/wiki/EngineResetModelLODDistance', name='engineResetModelLODDistance', category='Engine functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='engineResetSurfaceProperties', return_types=['mixed'], arguments=[FunctionArgument(name='surfaceID', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'surfaceID': 'Material IDs|Material ID from 0 to 178'}, result="Returns ''true'' if the function executed succesfully, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/EngineResetSurfaceProperties', name='engineResetSurfaceProperties', category='Engine functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='engineReplaceAnimation', return_types=['bool'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False), FunctionArgument(name='InternalBlockName', argument_type='string', default_value=None, optional=False), FunctionArgument(name='InternalAnimName', argument_type='string', default_value=None, optional=False), FunctionArgument(name='CustomBlockName', argument_type='string', default_value=None, optional=False), FunctionArgument(name='CustomAnimName', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='This function replaces a specific internal (default) animation with a custom one that has been loaded using [[EngineLoadIFP|engineLoadIFP]] function. This function only affects a specific [[player]] or [[ped]], the [[Animations|internal animation]] is not replaced for everyone, for instance, different players and peds are able to have completely different crouching, walking, and fighting etc., animations running simultaneously at the same time. Also, it\'s not synchronized, you\'ll need to execute this function on every client in Lua to synchronize it.\nInternal animations replaced using this function can still be played with [[SetPedAnimation|setPedAnimation]]. You can restore replaced animations back with [[EngineRestoreAnimation|engineRestoreAnimation]].\nIt should be noted that partial animations are not supported, you can still replace them, but they won\'t work as intended, for example, "FightA_block" animation from "ped" block is a partial animation, you can\'t replace it properly, only a few animations are partial, rest of them are not, so it shouldn\'t be a problem.}}', arguments={'thePed': 'the player or ped you want to replace an animation for.', 'InternalBlockName': 'the Animations|internal block name.', 'InternalAnimName': 'the Animations|internal animation name inside InternalBlockName.', 'CustomBlockName': 'the custom block name of the loaded IFP file that you passed to EngineLoadIFP|engineLoadIFP as second parameter.', 'CustomAnimName': 'the custom animation name inside the loaded IFP file with CustomBlockName.'}, result="Returns ''true'' on success, ''false'' in case of failure."), oop=None, url=FunctionUrl(url='/wiki/EngineReplaceAnimation', name='engineReplaceAnimation', category='Engine functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='engineReplaceCOL', return_types=['bool'], arguments=[FunctionArgument(name='theCol', argument_type='col', default_value=None, optional=False), FunctionArgument(name='modelID', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function replaces the collision file of the given model id to the collision file passed. Use [[engineLoadCOL]] to load the collision file first.', arguments={'theCol': 'The collision file to replace with', 'modelID': 'The model ID whose collision file you want to replace'}, result="Returns ''true'' if the collision was successfully replaced, ''false'' or ''nil'' if the collision could not be replaced for a reason."), oop=None, url=FunctionUrl(url='/wiki/EngineReplaceCOL', name='engineReplaceCOL', category='Engine functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='engineReplaceModel', return_types=['bool'], arguments=[FunctionArgument(name='theModel', argument_type='dff', default_value=None, optional=False), FunctionArgument(name='modelID', argument_type='int', default_value=None, optional=False), FunctionArgument(name='alphaTransparency', argument_type='bool', default_value='false', optional=True)]), docs=FunctionDoc(description='This function replaces the given model ID with the model contained in a DFF file loaded by [[engineLoadDFF]]. This function supports [[vehicle|vehicles]], [[object|objects]], [[ped|peds]] and [[player|players]] but not CJ clothing and body parts.\nTo replace weapon models you must use their object IDs, not weapon IDs. There is a weapon model list available at [[weapons]].\n* Default GTA map objects behave inconsistently when using this function on them. If you want to replace models in the original GTA map, use one of the [[EngineReplaceModel notes|methods shown here]].}}', arguments={'theModel': 'The model to replace the given model ID with', 'modelID': 'The model it to replace the model of', 'alphaTransparency': 'Set to true if model uses semi-transparent textures, e.g. windows. This will ensure other objects behind the semi-transparent textures are rendered correctly. (Can slightly impact performance, so only set when required)'}, result="Returns ''true'' if the model was successfully replaced, ''false'' if it failed for some reason, ie. the DFF or the model ID is not valid."), oop=None, url=FunctionUrl(url='/wiki/EngineReplaceModel', name='engineReplaceModel', category='Engine functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='engineRequestModel', return_types=['int'], arguments=[FunctionArgument(name='elementType', argument_type='str', default_value=None, optional=False), FunctionArgument(name='parentID', argument_type='int', default_value=None, optional=True)]), docs=FunctionDoc(description='*before release 1.5.8-20716 this must be "ped".\n}}', arguments={'elementType': ': ped, vehicle and object.', 'parentID': ': The Vehicle IDs|vehicle ID of the vehicle being allocated. (By default this is: 1337 - objects, 400 - vehicles, 7 or PSYCHO for peds)'}, result="{{New feature/item|3.0158|1.5.7|20147| Returns an ''integer'' of the model ID that was available to be assigned to the element type, ''false'' if no free model ID available or invalid element type.}}\nDo not rely on the model numbers returned being consistent across multiple clients or multiple runs of resources. There is no guarantee for the order of the numbers or that the same numbers will always correspond to the same element type. Any patterns are coincidental"), oop=None, url=FunctionUrl(url='/wiki/EngineRequestModel', name='engineRequestModel', category='Engine functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='engineRestoreAnimation', return_types=['bool'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False), FunctionArgument(name='InternalBlockName', argument_type='string', default_value=None, optional=True), FunctionArgument(name='InternalAnimName', argument_type='string', default_value=None, optional=True)]), docs=FunctionDoc(description='This function restores internal (default) animations that were replaced using [[EngineReplaceAnimation|engineReplaceAnimation]] function. This function only affects a specific [[player]] or [[ped]] just like [[EngineReplaceAnimation|engineReplaceAnimation]]. \nIf only 1st parameter ([[Ped|ped]]) is provided to this function, all replaced animations are restored. \nIf block name is also provided for 2nd parameter, then replaced animations within that block are restored.\nIf 3rd parameter (animation name) is provided, then only that specific animation within that specific block is restored.}}', arguments={'thePed': 'the player or ped you want to restore an animation(s) for.\n{{OptionalArg}}', 'InternalBlockName': 'the Animations|internal block name.', 'InternalAnimName': 'the Animations|internal animation name inside InternalBlockName.'}, result="Returns ''true'' on success, ''false'' in case of failure."), oop=None, url=FunctionUrl(url='/wiki/EngineRestoreAnimation', name='engineRestoreAnimation', category='Engine functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='engineRestoreCOL', return_types=['bool'], arguments=[FunctionArgument(name='modelID', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description="<!-- Describe in plain english what this function does. Don't go into details, just give an overview -->\nThis function restores the original collision model of the given model ID. Reverses the effect of [[engineReplaceCOL]].", arguments={'modelID': 'The ID of the model to restore the model of'}, result="<!-- Make this descriptive. Explain what cases will return false. If you're unsure, add a tag to it so we can check -->\nReturns ''true'' if this function succeeds, ''false'' or ''nil'' if it fails for some reason."), oop=None, url=FunctionUrl(url='/wiki/EngineRestoreCOL', name='engineRestoreCOL', category='Engine functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='engineRestoreModel', return_types=['bool'], arguments=[FunctionArgument(name='modelID', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description="<!-- Describe in plain english what this function does. Don't go into details, just give an overview -->\nThis function restores the visual DFF model of the given model ID. This restores the result of [[engineReplaceModel]].", arguments={'modelID': 'The model ID to restore the visuals of'}, result="<!-- Make this descriptive. Explain what cases will return false. If you're unsure, add a tag to it so we can check -->\nReturns ''true'' if the model was successfully restored, ''false'' or ''nil'' if it failed for some reason."), oop=None, url=FunctionUrl(url='/wiki/EngineRestoreModel', name='engineRestoreModel', category='Engine functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='engineRestoreModelPhysicalPropertiesGroup', return_types=['bool'], arguments=[FunctionArgument(name='modelID', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'modelID': ': the id of model which you wish to restore original physical properties group of.'}, result="Returns '''true''' if there were no issues, if passed arguments were invalid an error is raised."), oop=None, url=FunctionUrl(url='/wiki/EngineRestoreModelPhysicalPropertiesGroup', name='engineRestoreModelPhysicalPropertiesGroup', category='Engine functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='engineRestoreObjectGroupPhysicalProperties', return_types=['bool'], arguments=[FunctionArgument(name='groupID', argument_type='int', default_value=None, optional=False), FunctionArgument(name='modifiable', argument_type='objectgroup', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'groupID': ': the id of physical properties group which you wish to restore a property of.', 'objectgroup-modifiable': ': the property which you wish to restore, as per table below.'}, result="Returns '''true''' if everything went well, error is raised otherwise."), oop=None, url=FunctionUrl(url='/wiki/EngineRestoreObjectGroupPhysicalProperties', name='engineRestoreObjectGroupPhysicalProperties', category='Engine functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='engineRestreamWorld', return_types=['bool'], arguments=[]), docs=FunctionDoc(description='', arguments={}, result="Returns ''true'' if the world was restreamed successfully, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/EngineRestreamWorld', name='engineRestreamWorld', category='Engine functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='engineSetAsynchronousLoading', return_types=['bool'], arguments=[FunctionArgument(name='enable', argument_type='bool', default_value=None, optional=False), FunctionArgument(name='force', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description='This function enables or disables asynchronous model loading. Enabling asynchronous model loading may reduce the small pauses that occur when a new model is displayed for the first time. However, it can cause the new models to appear slightly later than they might have otherwise.', arguments={'enable': 'Set to true/false to enable/disable asynchronous loading. Only works if the clients preferences has Asynchronous Loading set to Auto.', 'force': 'If set to true, ignores the clients preferences.'}, result="Returns ''true'' if the function executed successfully, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/EngineSetAsynchronousLoading', name='engineSetAsynchronousLoading', category='Engine functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='engineSetModelLODDistance', return_types=['bool'], arguments=[FunctionArgument(name='model', argument_type='int', default_value=None, optional=False), FunctionArgument(name='distance', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description="This function sets a custom LOD distance for any object / model ID. This is the distance at which objects of that model ID are switched to their LOD model, or (if there is no LOD model) become invisible.\n'''Notes:'''\nThe actual draw distance used is modified by the draw distance slider in the settings 'Video' tab of the MTA client.\n*When the 'Video' tab draw distance slider is 0%, the engineSetModelLODDistance setting approximately matches the draw distance used.\n:''e.g. engineSetModelLODDistance(1337,100) will mean model 1337 will be visible up to a distance of '''100''' units.''\n*When the 'Video' tab draw distance slider is 100%, the engineSetModelLODDistance setting is approximately doubled before use.\n:''e.g. engineSetModelLODDistance(1337,100) will mean model 1337 will be visible up to a distance of '''200''' units.''\nHowever, there is a general draw distance limit of 300 units. So engineSetModelLODDistance(1337,400) will mean model 1337 will be visible up to a distance of 300 units no matter what the 'Video' tab says.\nTherefore, unless it's really important, engineSetModelLODDistance should not be set to anything greater than 170.<br>\n170 will still give the maximum draw distance (of 300 units) on clients that have a 'Video' tab draw distance setting of 100%, and it will help reduce lag for players who chose a lower draw distance in their settings.\nFor low LOD elements, engineSetModelLODDistance still has a limit of 300 units, but the actual draw distance used is 5 times the setting value. Also, low LOD elements ignore the 'Video' tab draw distance slider. So a setting of 200 will mean a low LOD element will always have a draw distance of '''1000''' units.\n}}", arguments={'model': 'The model / object ID number you want to change the LOD distance of.', 'distance': 'New LOD distance value in San Andreas units.'}, result="Returns ''true'' if the function executed succesfully, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/EngineSetModelLODDistance', name='engineSetModelLODDistance', category='Engine functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='engineSetModelPhysicalPropertiesGroup', return_types=['bool'], arguments=[FunctionArgument(name='modelID', argument_type='int', default_value=None, optional=False), FunctionArgument(name='groupID', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'modelID': ': the id of model which you wish to set physical properties group of.', 'groupID': ': the id of new physical properties group to be used by given model.'}, result="Returns '''true''' if there were no issues with group change, otherwise an error is raised"), oop=None, url=FunctionUrl(url='/wiki/EngineSetModelPhysicalPropertiesGroup', name='engineSetModelPhysicalPropertiesGroup', category='Engine functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='engineSetModelVisibleTime', return_types=['bool'], arguments=[FunctionArgument(name='modelID', argument_type='int', default_value=None, optional=False), FunctionArgument(name='timeOn', argument_type='int', default_value=None, optional=False), FunctionArgument(name='timeOff', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'modelID': ': ID of the model', 'timeOn': ': value between 23 and 0 that states when the model should appear', 'timeOff': ': value between 23 and 0 that states when the model should disappear'}, result="Returns '''true''' if the change was successful, '''false''' otherwise."), oop=None, url=FunctionUrl(url='/wiki/EngineSetModelVisibleTime', name='engineSetModelVisibleTime', category='Engine functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='engineSetObjectGroupPhysicalProperty', return_types=['bool'], arguments=[FunctionArgument(name='groupID', argument_type='int', default_value=None, optional=False), FunctionArgument(name='modifiable', argument_type='objectgroup', default_value=None, optional=False), FunctionArgument(name='newValue', argument_type='var', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'groupID': ': the id of physical properties group which you wish to set a property of.', 'objectgroup-modifiable': ': the property which you wish to set, as per table below.', 'newValue': ': new value of the property, with proper type as specified in table below'}, result="Returns '''true''' if everything went well, error is raised otherwise."), oop=None, url=FunctionUrl(url='/wiki/EngineSetObjectGroupPhysicalProperty', name='engineSetObjectGroupPhysicalProperty', category='Engine functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='engineSetSurfaceProperties', return_types=['bool'], arguments=[FunctionArgument(name='surfaceID', argument_type='int', default_value=None, optional=False), FunctionArgument(name='property', argument_type='string', default_value=None, optional=False), FunctionArgument(name='value', argument_type='mixed', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'surfaceID': 'Material IDs|Material ID from 0 to 178', 'property': 'Property name', 'value': 'New value from table below'}, result="Returns ''true'' if the function executed succesfully, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/EngineSetSurfaceProperties', name='engineSetSurfaceProperties', category='Engine functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='triggerLatentServerEvent', return_types=['bool'], arguments=[FunctionArgument(name='event', argument_type='string', default_value=None, optional=False), FunctionArgument(name='bandwidth', argument_type='int', default_value='5000', optional=False), FunctionArgument(name='persist', argument_type='bool', default_value='false', optional=False), FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False), FunctionArgument(name='...args', argument_type='any[]', default_value=None, optional=True)]), docs=FunctionDoc(description='This function is the same as [[triggerServerEvent]] except the transmission rate of the data contained in the arguments can be limited and other network traffic is not blocked while the data is being transferred.', arguments={'event': 'The name of the event to trigger server-side. You should register this event with addEvent and add at least one event handler using addEventHandler.', 'theElement': 'The element that is the Event system#Event handlers|source of the event. This could be another player, or if this isnt relevant, use the root element.', 'bandwidth': 'The bytes per second rate to send the data contained in the arguments.', 'persist': 'A bool indicating whether the transmission should be allowed to continue even after the resource that triggered it has since stopped.', 'arguments...': 'A list of arguments to trigger with the event. You can pass any Lua data type (except functions). You can also pass elements. The total amount of data should not exceed 100MB.'}, result="Returns ''true'' if the event trigger has been sent, ''false'' if invalid arguments were specified."), oop=None, url=FunctionUrl(url='/wiki/TriggerLatentServerEvent', name='triggerLatentServerEvent', category='Event functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='triggerServerEvent', return_types=['bool'], arguments=[FunctionArgument(name='event', argument_type='string', default_value=None, optional=False), FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False), FunctionArgument(name='...args', argument_type='any[]', default_value=None, optional=True)]), docs=FunctionDoc(description="<!--{{Needs_Checking|Something needs to be said about the steps required to help keep an event inside a resource. i.e. Setting 'theElement' to resourceRoot here, and setting the matching event handler's 'attachedTo' also to resourceRoot.}}-->__NOTOC__\nThis function triggers an event previously registered on the server. This is the primary means of passing information between the client and the server. Servers have a similar [[triggerClientEvent]] function that can do the reverse. You can treat this function as if it was an asynchronous function call, using [[triggerClientEvent]] to pass back any returned information if necessary.\nAlmost any data types can be passed as expected, including [[element]]s and complex nested [[table]]s. Non-element MTA data types like xmlNodes or resource pointers will not be able to be passed as they do not necessarily have a valid representation on the client. '''Elements of the Vector or Matrix classes cannot be passed!'''\nEvents are sent reliably, so the server will receive them, but there may be (but shouldn't be) a significant delay before they are received. You should take this into account when using them.\nKeep in mind the bandwidth issues when using events - don't pass a large list of arguments unless you really need to. '''It is marginally more efficient to pass one large event than two smaller ones'''.", arguments={'event': 'The name of the event to trigger server-side. You should register this event with addEvent and add at least one event handler using addEventHandler.', 'theElement': "The element that is the Event system#Event handlers|source of the event.\n{{Note|To save server CPU, you should avoid setting '''theElement''' to the [[root element]] where possible. Using [[GetThisResource|resourceRoot]] is usually sufficient if the event is handled by the same resource on the server.}}", 'arguments...': 'A list of arguments to trigger with the event. You can pass any lua data type (except functions). You can also pass elements.'}, result="Returns ''true'' if the event trigger has been sent, ''false'' if invalid arguments were specified or a client side element was a parameter."), oop=None, url=FunctionUrl(url='/wiki/TriggerServerEvent', name='triggerServerEvent', category='Event functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='createFire', return_types=['bool'], arguments=[FunctionArgument(name='x', argument_type='float', default_value=None, optional=False), FunctionArgument(name='y', argument_type='float', default_value=None, optional=False), FunctionArgument(name='z', argument_type='float', default_value=None, optional=False), FunctionArgument(name='size', argument_type='float', default_value='1.8', optional=True)]), docs=FunctionDoc(description="[[Image:Fire.png|thumb|200px|Fire with default size (1.8)]]\nCreates a patch of fire that will spread a bit and die out after a while. Because it's a client side only function, other players won't see it, so custom events or custom objects will be needed to make a fire visible to some players.", arguments={'x, y, z': 'the coordinates when the initial patch of fire will be created.', 'size': 'a float value indicating the size of the initial patch of fire. It will also make the fire to stay alive more or less time.'}, result="Returns ''true'' if successful, ''false'' if bad arguments were passed or the limit of active fires was reached. There can be a maximum of 60 active fires."), oop=None, url=FunctionUrl(url='/wiki/CreateFire', name='createFire', category='Fire functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='extinguishFire', return_types=['bool'], arguments=[FunctionArgument(name='x', argument_type='float', default_value=None, optional=False), FunctionArgument(name='y', argument_type='float', default_value=None, optional=False), FunctionArgument(name='z', argument_type='float', default_value=None, optional=False), FunctionArgument(name='radius', argument_type='float', default_value='1.0', optional=True)]), docs=FunctionDoc(description='', arguments={'x, y, z': 'the coordinates at which any fire will be extinguished.', 'radius': 'a float value indicating the radius in which to extinguish fire.'}, result="Returns ''true'' if successful, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/ExtinguishFire', name='extinguishFire', category='Fire functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiBringToFront', return_types=['bool'], arguments=[FunctionArgument(name='guiElement', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='This function brings a GUI element on top of others.', arguments={'guiElement': 'the GUI element that you want to move to the front.'}, result="Returns ''true'' if the function was successful, ''false'' otherwise."), oop=FunctionOOP(class_name='GuiElement', method_name='bringToFront', field=None), url=FunctionUrl(url='/wiki/GuiBringToFront', name='guiBringToFront', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='getChatboxLayout', return_types=['bool|int|table'], arguments=[FunctionArgument(name='CVar', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description="Returns information about how the chatbox looks.\nThese values come from the file called: [[Chatboxpresets.xml]] but it depends on what type of preset you currently have, which is chosen from your settings in the 'Interface' tab.", arguments={'CVar': 'the name of the property you want returned. Can be the following values:', 'chat_font': '- Returns the chatbox font', 'chat_lines': '- Returns how many lines the chatbox has', 'chat_color': '- Returns the background color of the chatbox', 'chat_text_color': '- Returns the chatbox text color', 'chat_input_color': '- Returns the background color of the chatbox input', 'chat_input_prefix_color': '- Returns the color of the input prefix text', 'chat_input_text_color': '- Returns the color of the text in the chatbox input', 'chat_scale': '- Returns the scale of the text in the chatbox', 'chat_position_offset_x': '- Returns the x position offset setting', 'chat_position_offset_y': '- Returns the y position offset setting', 'chat_position_horizontal': '- Returns the horizontal alignment setting', 'chat_position_vertical': '- Returns the vertical alignment setting', 'chat_text_alignment': '- Returns the text alignment setting', 'chat_width': '- Returns the scale of the background width', 'chat_css_style_text': '- Returns whether text fades out over time', 'chat_css_style_background': '- Returns whether the background fades out over time', 'chat_line_life': '- Returns how long it takes for text to start fading out', 'chat_line_fade_out': '- Returns how long takes for text to fade out', 'chat_use_cegui': '- Returns whether CEGUI is used to render the chatbox', 'text_scale': '- Returns text scale'}, result='*4 numbers if the CVar contains "color"\n*2 numbers if \'\'\'chat_scale\'\'\' was entered\n*1 number if any other CVar was specified\n*a table of all CVar values, if CVar was not specified\n*\'\'false\'\' if an invalid CVar was specified'), oop=None, url=FunctionUrl(url='/wiki/GetChatboxLayout', name='getChatboxLayout', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiCreateFont', return_types=['element'], arguments=[FunctionArgument(name='filepath', argument_type='string', default_value=None, optional=False), FunctionArgument(name='size', argument_type='int', default_value='9', optional=True)]), docs=FunctionDoc(description="This function creates a [[GUI font]] element that can be used in [[guiSetFont]]. Successful font creation is not guaranteed, and may fail due to hardware or memory limitations.\nTo see if creation is likely to fail, use [[dxGetStatus]]. (When '''VideoMemoryFreeForMTA''' is zero, failure ''is'' guaranteed.)", arguments={'filepath': 'the name of the file containing the font', 'size': 'size of the font'}, result="Returns a [[GUI font]] element if successful, ''false'' if invalid arguments were passed to the function, or there is insufficient resources available.\n'''You should always check to see if this function has returned false.'''"), oop=None, url=FunctionUrl(url='/wiki/GuiCreateFont', name='guiCreateFont', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiBlur', return_types=['bool'], arguments=[FunctionArgument(name='guiElement', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'guiElement': 'the GUI element that you want to defocus'}, result="Returns ''true'' if the function was successful, ''false'' otherwise."), oop=FunctionOOP(class_name='GuiElement', method_name='blur', field=None), url=FunctionUrl(url='/wiki/GuiBlur', name='guiBlur', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiFocus', return_types=['bool'], arguments=[FunctionArgument(name='guiElement', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'guiElement': 'the GUI element that you want to focus'}, result="Returns ''true'' if the function was successful, ''false'' otherwise."), oop=FunctionOOP(class_name='GuiElement', method_name='focus', field=None), url=FunctionUrl(url='/wiki/GuiFocus', name='guiFocus', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiGetAlpha', return_types=['float'], arguments=[FunctionArgument(name='guiElement', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description="Alpha represents the transparency of a gui element.  This function allows retrieval of a gui element's current alpha.", arguments={'guiElement': 'The gui element in which you want to retrieve the alpha of.'}, result="This function returns a positive integer in between 0 and 1 of the gui element's current alpha, or false if it could not be retrieved."), oop=FunctionOOP(class_name='GuiElement', method_name='getAlpha', field='alpha'), url=FunctionUrl(url='/wiki/GuiGetAlpha', name='guiGetAlpha', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiGetCursorType', return_types=['string'], arguments=[]), docs=FunctionDoc(description='This function is used to get the type of the current cursor image.\n}}', arguments={}, result='Returns a string containing the cursor type:\n* \'\'\'"none"\'\'\'            // cursor has no image\n* \'\'\'"arrow"\'\'\'           // default cursor\n* \'\'\'"sizing_ns"\'\'\'       // N-S (up-down) sizing cursor\n* \'\'\'"sizing_ew"\'\'\'       // E-W (left-right) sizing cursor\n* \'\'\'"sizing_nwse"\'\'\'     // NW-SE diagonal sizing cursor\n* \'\'\'"sizing_nesw"\'\'\'     // NE-SW diagonal sizing cursor\n* \'\'\'"sizing_eswe"\'\'\'     // ES-WE horizontal sizing cursor\n* \'\'\'"move"\'\'\'            // move cursor\n* \'\'\'"container_drag"\'\'\'  // drag container cursor (note: not in use)\n* \'\'\'"segment_moving"\'\'\'  // segment moving cursor (note: not in use)\n* \'\'\'"segment_sizing"\'\'\'  // segment sizing cursor (note: not in use)'), oop=FunctionOOP(class_name='GuiElement', method_name='getCursorType', field='cursorType'), url=FunctionUrl(url='/wiki/GuiGetCursorType', name='guiGetCursorType', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiGetEnabled', return_types=['bool'], arguments=[FunctionArgument(name='guiElement', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='This function determines if a GUI element is enabled.', arguments={'guiElement': 'the GUI element to be checked.'}, result="Returns ''true'' if the element is enabled, ''false'' otherwise."), oop=FunctionOOP(class_name='GuiElement', method_name='getEnabled', field='enabled'), url=FunctionUrl(url='/wiki/GuiGetEnabled', name='guiGetEnabled', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiGetFont', return_types=['string', 'element'], arguments=[FunctionArgument(name='guiElement', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description="<!-- Describe in plain english what this function does. Don't go into details, just give an overview -->\nThis function is used to get the current font that is used to draw text in GUI elements.", arguments={'guiElement': 'element you wish to get the font of.'}, result="<!-- Make this descriptive. Explain what cases will return false. If you're unsure, add a tag to it so we can check -->\n*'''string''' A string containing the name of the element's current font, or false if the gui element passed to the function is invalid.\n*'''element ''' The custom [[GUI font]] that is used, or nil otherwise"), oop=FunctionOOP(class_name='GuiElement', method_name='getFont', field='font'), url=FunctionUrl(url='/wiki/GuiGetFont', name='guiGetFont', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiGetInputEnabled', return_types=['bool'], arguments=[]), docs=FunctionDoc(description='This function checks whether user input is focused on the GUI or the game.', arguments={}, result="Returns ''true'' if input is focused on GUI, ''false'' if it's focused on the game."), oop=FunctionOOP(class_name='GuiElement', method_name='isInputEnabled', field='inputEnabled'), url=FunctionUrl(url='/wiki/GuiGetInputEnabled', name='guiGetInputEnabled', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiGetInputMode', return_types=['string'], arguments=[]), docs=FunctionDoc(description='This function returns the current input mode as set by [[guiSetInputMode]].\nDefault mode is \'\'"allow_binds"\'\'.', arguments={}, result='Returns a string defining the current input mode, potential values are:\n* \'\'\'"allow_binds":\'\'\' binds are enabled, hence using a key such as t in an editbox will still activate the chatbox\n* \'\'\'"no_binds":\'\'\' binds are disabled, hence using a key such as t in an editbox will not activate the chatbox\n* \'\'\'"no_binds_when_editing":\'\'\' binds are always enabled except when an editable editbox or memo has input focus'), oop=FunctionOOP(class_name='GuiElement', method_name='getInputMode', field='inputMode'), url=FunctionUrl(url='/wiki/GuiGetInputMode', name='guiGetInputMode', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiGetPosition', return_types=['float', 'float'], arguments=[FunctionArgument(name='guiElement', argument_type='element', default_value=None, optional=False), FunctionArgument(name='relative', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description="This function allows retrieval of a GUI element's current position, relative to its parent.", arguments={'guiElement': 'The gui element of which you wish to retrieve the position.', 'relative': 'A boolean representing whether the position should be relative to the elements parent width, or the number of offset pixels from the parents origin.'}, result="Returns floats representing the ''x'' and ''y'' position of the element, or false if the position could not be retrieved."), oop=FunctionOOP(class_name='GuiElement', method_name='getPosition', field='position'), url=FunctionUrl(url='/wiki/GuiGetPosition', name='guiGetPosition', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiGetProperties', return_types=['table'], arguments=[FunctionArgument(name='guiElement', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='This function gets a list of the CEGUI property names and values of a GUI element. To find out what the different properties mean, check out the [http://static.cegui.org.uk/static/WindowsLookProperties.html CEGUI properties page].', arguments={'guiElement': 'the GUI element you wish to get the properties of.'}, result="If the function succeeds, the return value is a table. Its keys are property names, the corresponding values are the values of the properties (both names and values are always strings). If the function fails, it returns ''false''."), oop=FunctionOOP(class_name='GuiElement', method_name='getProperties', field='properties'), url=FunctionUrl(url='/wiki/GuiGetProperties', name='guiGetProperties', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiGetProperty', return_types=['string'], arguments=[FunctionArgument(name='guiElement', argument_type='element', default_value=None, optional=False), FunctionArgument(name='property', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='This function gets the value of a specific CEGUI property of a GUI element. For a list of properties and their meaning, see the [http://static.cegui.org.uk/static/WindowsLookProperties.html CEGUI properties page].', arguments={'guiElement': 'the GUI element you wish to get a property of.', 'property': 'the name of of property you want the value of.'}, result="If the function succeeds, it returns a string with the value of the property. If it fails, it returns ''false''."), oop=FunctionOOP(class_name='GuiElement', method_name='getProperty', field=None), url=FunctionUrl(url='/wiki/GuiGetProperty', name='guiGetProperty', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiGetScreenSize', return_types=['float', 'float'], arguments=[]), docs=FunctionDoc(description='This function retrieves the local screen size according to the resolution they are using.', arguments={}, result="This returns two floats representing the player's screen resolution, ''width'' and ''height''."), oop=FunctionOOP(class_name='GuiElement', method_name='getScreenSize', field=None), url=FunctionUrl(url='/wiki/GuiGetScreenSize', name='guiGetScreenSize', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiGetSize', return_types=['float', 'float'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False), FunctionArgument(name='relative', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description='This function gets the size of a GUI element.', arguments={'theElement': 'The GUI element to get size of.', 'relative': 'A boolean representing whether the size should be relative to the elements parent width, or an absolute size in pixels.'}, result="Returns the GUI element size ''x'' and ''y'' if the function has been successful, ''false'' otherwise."), oop=FunctionOOP(class_name='GuiElement', method_name='getSize', field=None), url=FunctionUrl(url='/wiki/GuiGetSize', name='guiGetSize', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiGetText', return_types=['string'], arguments=[FunctionArgument(name='guiElement', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description="<!-- Describe in plain english what this function does. Don't go into details, just give an overview -->\nThis function is used to get the text of GUI elements like edit boxes, labels, buttons etc.", arguments={'guiElement': 'element you wish to get text of.'}, result="<!-- Make this descriptive. Explain what cases will return false. If you're unsure, add a tag to it so we can check -->\nReturns a string containing the requested element's text, or false if the gui element passed to the function is invalid."), oop=FunctionOOP(class_name='GuiElement', method_name='getText', field='text'), url=FunctionUrl(url='/wiki/GuiGetText', name='guiGetText', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiGetVisible', return_types=['bool'], arguments=[FunctionArgument(name='guiElement', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='This function determines if a GUI element is visible.', arguments={'guiElement': 'the GUI element to be checked'}, result="Returns ''true'' if the element is visible, ''false'' otherwise."), oop=FunctionOOP(class_name='GuiElement', method_name='getVisible', field='visible'), url=FunctionUrl(url='/wiki/GuiGetVisible', name='guiGetVisible', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiMoveToBack', return_types=['bool'], arguments=[FunctionArgument(name='guiElement', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='This function moves a GUI element to the very back of all other GUI elements.', arguments={'guiElement': 'the GUI element that you want to move to the back'}, result="Returns ''true'' if the function was successful, ''false'' otherwise."), oop=FunctionOOP(class_name='GuiElement', method_name='moveToBack', field=None), url=FunctionUrl(url='/wiki/GuiMoveToBack', name='guiMoveToBack', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiSetAlpha', return_types=['bool'], arguments=[FunctionArgument(name='guielement', argument_type='element', default_value=None, optional=False), FunctionArgument(name='alpha', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='This changes the alpha level (the visibleness/transparency) of a GUI element', arguments={'guiElement': 'the GUI element whose visibility is to be changed', 'alpha': 'The visibility/transparency of the GUI element. Ranges from 0 (fully transparent) to 1 (fully opaque). Default value is 0.80.'}, result="Returns ''true'' if the gui element's alpha was successfully changed, ''false'' otherwise."), oop=FunctionOOP(class_name='GuiElement', method_name='setAlpha', field='alpha'), url=FunctionUrl(url='/wiki/GuiSetAlpha', name='guiSetAlpha', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiSetEnabled', return_types=['bool'], arguments=[FunctionArgument(name='guiElement', argument_type='element', default_value=None, optional=False), FunctionArgument(name='enabled', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description="This function enables/disables a GUI element. A disabled GUI element can't be used, gets a gray aspect and doesn't receive any events.", arguments={'guiElement': 'the GUI element you wish to enable or disable', 'enabled': 'the new state'}, result="If the function succeeds it returns ''true'', if it fails it returns ''false''."), oop=FunctionOOP(class_name='GuiElement', method_name='setEnabled', field='enabled'), url=FunctionUrl(url='/wiki/GuiSetEnabled', name='guiSetEnabled', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiSetFont', return_types=['bool'], arguments=[FunctionArgument(name='guiElement', argument_type='element', default_value=None, optional=False), FunctionArgument(name='font', argument_type='mixed', default_value=None, optional=False)]), docs=FunctionDoc(description='This function sets the font of a [[GUI_widgets|GUI element]] to be used when drawing text.', arguments={'guiElement': 'The GUI element you wish to change the font of', 'font': 'Either a custom GUI font element or the name of a built-in GUI font. See Standard GUI Font Names'}, result="Returns ''true'' if the font has been successfully set on the gui element, ''false'' otherwise."), oop=FunctionOOP(class_name='GuiElement', method_name='setFont', field='font'), url=FunctionUrl(url='/wiki/GuiSetFont', name='guiSetFont', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiSetInputEnabled', return_types=['bool'], arguments=[FunctionArgument(name='enabled', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description="This function enables or disables input focus for the GUI.  This means that any keybinds or MTA binds are overidden so that text can be input into an editbox, for example.  In other words, keys such as ''t'' and ''y'' which activate the chatbox are disabled.\n[[guiSetInputMode]] can be used as an extended version of ''guiSetInputEnabled'' since it provides the same functionality with one added feature.\n}}", arguments={'enabled': 'true if input should go to GUI, false if it should go to the game.'}, result="Returns ''true'' if input mode could be changed, ''false'' if invalid parameters are passed."), oop=FunctionOOP(class_name='GuiElement', method_name='setInputEnabled', field='inputEnabled'), url=FunctionUrl(url='/wiki/GuiSetInputEnabled', name='guiSetInputEnabled', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiSetInputMode', return_types=['bool'], arguments=[FunctionArgument(name='mode', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='This function controls the input mode to define whether or not (and when) keybinds or MTA binds are overridden (disabled) so that text can be input into an editbox, for example.\nThe binds can be either: \n* never disabled (hence using a key such as t in an editbox will still activate the chatbox)\n* always disabled (hence using a key such as t in an editbox will not activate the chatbox)\n* only disabled when actually editing an editbox or a memo (binds are always enabled except when an editbox or memo has input focus)', arguments={'mode': 'a string representing the desired input mode. Accepted values are:', '"allow_binds"': 'binds are enabled, hence using a key such as t in an editbox will still activate the chatbox (default)', '"no_binds"': 'binds are disabled, hence using a key such as t in an editbox will not activate the chatbox', '"no_binds_when_editing"': 'binds are always enabled except when an editable editbox or memo has input focus'}, result="Returns ''true'' if input mode could be changed, ''false'' if invalid parameters are passed."), oop=FunctionOOP(class_name='GuiElement', method_name='setInputMode', field='inputMode'), url=FunctionUrl(url='/wiki/GuiSetInputMode', name='guiSetInputMode', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiSetPosition', return_types=['bool'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False), FunctionArgument(name='x', argument_type='float', default_value=None, optional=False), FunctionArgument(name='y', argument_type='float', default_value=None, optional=False), FunctionArgument(name='relative', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description='This function sets the position of a GUI element.', arguments={'theElement': 'The GUI element to change position for', 'x': 'Position over the X axis', 'y': 'Position over the Y axis', 'relative': 'Bool that indicates if the x/y positions are relative to the elements parent element.'}, result="<!-- Make this descriptive. Explain what cases will return false. If you're unsure, add a tag to it so we can check -->\nReturns ''true'' if the position has been successfully set, ''false'' otherwise."), oop=FunctionOOP(class_name='GuiElement', method_name='setPosition', field='position'), url=FunctionUrl(url='/wiki/GuiSetPosition', name='guiSetPosition', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiSetProperty', return_types=['bool'], arguments=[FunctionArgument(name='guiElement', argument_type='element', default_value=None, optional=False), FunctionArgument(name='property', argument_type='string', default_value=None, optional=False), FunctionArgument(name='value', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='This function sets the value of a specific CEGUI property of a GUI element. For a list of properties and their meaning, see the [http://static.cegui.org.uk/static/WindowsLookProperties.html CEGUI properties page].', arguments={'guiElement': 'the GUI element you wish to get a property of.', 'property': 'the name of of property you want the value of.', 'value': 'the new value for the property.'}, result="If the function succeeds it returns ''true'', if it fails it returns ''false''."), oop=FunctionOOP(class_name='GuiElement', method_name='setProperty', field=None), url=FunctionUrl(url='/wiki/GuiSetProperty', name='guiSetProperty', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiSetSize', return_types=['bool'], arguments=[FunctionArgument(name='guiElement', argument_type='element', default_value=None, optional=False), FunctionArgument(name='width', argument_type='float', default_value=None, optional=False), FunctionArgument(name='height', argument_type='float', default_value=None, optional=False), FunctionArgument(name='relative', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description='This function sets the dimensions (size) of a GUI element. It refers to the bounding box size for GUI elements. It does not make GUI elements smaller or larger in appearance.', arguments={'guiElement': 'the GUI element whose visibility is to be changed', 'width': 'The desired width setting for the gui element', 'height': 'The desired height setting for the gui element', 'relative': 'This is whether sizes and positioning are relative.  If this is true, then all x,y,width,height floats must be between 0 and 1, representing sizes relative to the parent.'}, result="Returns ''true'' if the gui element's size was set successfully, ''false'' otherwise."), oop=FunctionOOP(class_name='GuiElement', method_name='setSize', field=None), url=FunctionUrl(url='/wiki/GuiSetSize', name='guiSetSize', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiSetText', return_types=['bool'], arguments=[FunctionArgument(name='guiElement', argument_type='element', default_value=None, optional=False), FunctionArgument(name='text', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='This function sets the text of a GUI element.', arguments={'guiElement': 'The GUI element you wish to change the text of', 'text': 'The new text'}, result="Returns ''true'' if text has been successfully set on the gui element, ''false'' otherwise."), oop=FunctionOOP(class_name='GuiElement', method_name='setText', field='text'), url=FunctionUrl(url='/wiki/GuiSetText', name='guiSetText', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiSetVisible', return_types=['bool'], arguments=[FunctionArgument(name='guiElement', argument_type='element', default_value=None, optional=False), FunctionArgument(name='state', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description='This function changes the visibility state of a GUI element.', arguments={'guiElement': 'the GUI element whose visibility is to be changed', 'state': 'the new visibility state'}, result="Returns ''true'' if the element's visibility could be changed, ''false'' otherwise."), oop=FunctionOOP(class_name='GuiElement', method_name='setVisible', field='visible'), url=FunctionUrl(url='/wiki/GuiSetVisible', name='guiSetVisible', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='isChatBoxInputActive', return_types=['bool'], arguments=[]), docs=FunctionDoc(description='This function returns whether the ingame chatbox is being used (accepting chatbox input) or not.', arguments={}, result="Returns ''true'' if the chatbox is receiving input, ''false'' if not active."), oop=FunctionOOP(class_name='GuiElement', method_name='isChatBoxInputActive', field='chatBoxInputActive'), url=FunctionUrl(url='/wiki/IsChatBoxInputActive', name='isChatBoxInputActive', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='isConsoleActive', return_types=['bool'], arguments=[]), docs=FunctionDoc(description='This function returns whether the ingame console window is visible or not.', arguments={}, result="Returns ''true'' if the console is visible, ''false'' if not."), oop=FunctionOOP(class_name='GuiElement', method_name='isConsoleActive', field='consoleActive'), url=FunctionUrl(url='/wiki/IsConsoleActive', name='isConsoleActive', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='isDebugViewActive', return_types=['bool'], arguments=[]), docs=FunctionDoc(description='This function returns whether the ingame debug window is visible or not. This is the debugwindow visible using the "debugscript <level>" command.', arguments={}, result="Returns ''true'' if the debug view is visible, ''false'' if not."), oop=FunctionOOP(class_name='GuiElement', method_name='isDebugViewActive', field='debugViewActive'), url=FunctionUrl(url='/wiki/IsDebugViewActive', name='isDebugViewActive', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='isMainMenuActive', return_types=['bool'], arguments=[]), docs=FunctionDoc(description='This function returns whether the user is in the mainmenu or not.', arguments={}, result="Returns ''true'' if the mainmenu is visible, ''false'' if not."), oop=None, url=FunctionUrl(url='/wiki/IsMainMenuActive', name='isMainMenuActive', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='isMTAWindowActive', return_types=['bool'], arguments=[]), docs=FunctionDoc(description='This function returns whether any system windows that take focus are active. This includes:\n* Chatbox input\n* Console window\n* Main menu\n* Transferbox\nTo get the status of the debug view, see [[isDebugViewActive]].', arguments={}, result="Returns ''true'' if the focus is on the MTA window, ''false'' if it isn't."), oop=None, url=FunctionUrl(url='/wiki/IsMTAWindowActive', name='isMTAWindowActive', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='isTransferBoxActive', return_types=['bool'], arguments=[]), docs=FunctionDoc(description="This function returns whether the file downloading dialog box is active or not. This appears when a resource is started and the client doesn't have all the files that resource requires the client to have.\nIt's important to note that resources aren't started on the client until they're completely downloaded, so a resource cannot use this function to detect if it's own files are downloaded. A client-side resource triggers the [[onClientResourceStart]] event when the files it requires are downloaded.", arguments={}, result="Returns ''true'' if the file transfer box is visible, ''false'' if not."), oop=FunctionOOP(class_name='GuiElement', method_name='isTransferBoxActive', field=None), url=FunctionUrl(url='/wiki/IsTransferBoxActive', name='isTransferBoxActive', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='setDebugViewActive', return_types=['bool'], arguments=[FunctionArgument(name='enabled', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description='This function enables or disables the debug window.', arguments={'enabled': 'true if debug window should be visible, false otherwise.'}, result="Returns ''true'', ''false'' if invalid parameters are passed."), oop=FunctionOOP(class_name='GuiElement', method_name='setDebugViewActive', field='debugViewActive'), url=FunctionUrl(url='/wiki/SetDebugViewActive', name='setDebugViewActive', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiCreateButton', return_types=['element'], arguments=[FunctionArgument(name='x', argument_type='float', default_value=None, optional=False), FunctionArgument(name='y', argument_type='float', default_value=None, optional=False), FunctionArgument(name='width', argument_type='float', default_value=None, optional=False), FunctionArgument(name='height', argument_type='float', default_value=None, optional=False), FunctionArgument(name='text', argument_type='string', default_value=None, optional=False), FunctionArgument(name='relative', argument_type='bool', default_value=None, optional=False), FunctionArgument(name='parent', argument_type='element', default_value='nil', optional=False)]), docs=FunctionDoc(description='This function allows creation of a GUI Button, which is a clickable item as part of GUI.', arguments={'x': 'A float of the 2D x position of the GUI button on a players screen.  This is affected by the relative argument.', 'y': 'A float of the 2D y position of the GUI button on a players screen. This is affected by the relative argument.', 'width': 'A float of the width of the GUI button. This is affected by the relative argument.', 'height': 'A float of the height of the GUI button. This is affected by the relative argument.', 'text': 'A string of the text that will be displayed as a label on the button.', 'relative': 'This is whether sizes and positioning are relative.  If this is true, then all x, y, width and height floats must be between 0 and 1, representing sizes relative to the parent.\n{{OptionalArg}} ', 'parent': 'This is the parent that the gui button is attached to.  If the relative argument is true, sizes and positioning will be made relative to this parent. If the relative argument is false, positioning will be the number of offset pixels from the parents origin. If no parent is passed, the parent will become the screen - causing positioning and sizing according to screen positioning.'}, result='Returns an [[element]] of the created [[Element/GUI/Button|button]] if it was successfully created, false otherwise.'), oop=None, url=FunctionUrl(url='/wiki/GuiCreateButton', name='guiCreateButton', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiCheckBoxGetSelected', return_types=['bool'], arguments=[FunctionArgument(name='theCheckbox', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description="This function gets a checkbox's selection state.", arguments={'theCheckbox ': 'The checkbox you wish to retrieve the selection state of.'}, result="Returns ''true'' if the checkbox is selected, ''false'' if it is not."), oop=FunctionOOP(class_name='GuiCheckBox', method_name='getSelected', field='selected'), url=FunctionUrl(url='/wiki/GuiCheckBoxGetSelected', name='guiCheckBoxGetSelected', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiCheckBoxSetSelected', return_types=['bool'], arguments=[FunctionArgument(name='theCheckbox', argument_type='element', default_value=None, optional=False), FunctionArgument(name='state', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description='This function selects (ticks) or unselects a checkbox.', arguments={'theCheckbox': 'The GUI element in which you wish to change the selection state of', 'state': 'The state of the checkbox, where true indicates selected, and false indicates unselected.'}, result="Returns ''true'' if the checkbox's selection state was successfully set, ''false'' otherwise."), oop=FunctionOOP(class_name='GuiCheckBox', method_name='setSelected', field='selected'), url=FunctionUrl(url='/wiki/GuiCheckBoxSetSelected', name='guiCheckBoxSetSelected', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiCreateCheckBox', return_types=['element'], arguments=[FunctionArgument(name='x', argument_type='float', default_value=None, optional=False), FunctionArgument(name='y', argument_type='float', default_value=None, optional=False), FunctionArgument(name='width', argument_type='float', default_value=None, optional=False), FunctionArgument(name='height', argument_type='float', default_value=None, optional=False), FunctionArgument(name='text', argument_type='string', default_value=None, optional=False), FunctionArgument(name='selected', argument_type='bool', default_value=None, optional=False), FunctionArgument(name='relative', argument_type='bool', default_value=None, optional=False), FunctionArgument(name='parent', argument_type='element', default_value='nil', optional=False)]), docs=FunctionDoc(description='This function creates a [[Element/GUI/Checkbox|checkbox]].', arguments={'x': 'A float of the 2D x position of the checkbox on a players screen. This is affected by the relative argument.', 'y': 'A float of the 2D y position of the checkbox on a players screen. This is affected by the relative argument.', 'width': 'A float of the width of the text field next to the checkbox. This is affected by the relative argument.', 'height': 'A float of the height of the text field next to the checkbox. This is affected by the relative argument.', 'text': 'The text to be displayed next to the checkbox.', 'selected': 'A boolean representing whether the checkbox created should be selected by default.', 'relative': 'This is whether sizes and positioning are relative. If this is true, then all x,y,width,height floats must be between 0 and 1, representing measures relative to the parent.\n{{OptionalArg}} ', 'parent': 'This is the parent that the checkbox is attached to. If the relative argument is true, sizes and positioning will be made relative to this parent. If the relative argument is false, positioning will be the number of offset pixels from the parents origin. If no parent is passed, the parent will become the screen - causing positioning and sizing according to screen positioning.'}, result="Returns [[element]] of the checkbox if it was created succesfully, ''false'' otherwise. "), oop=None, url=FunctionUrl(url='/wiki/GuiCreateCheckBox', name='guiCreateCheckBox', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiCreateComboBox', return_types=['element'], arguments=[FunctionArgument(name='x', argument_type='float', default_value=None, optional=False), FunctionArgument(name='y', argument_type='float', default_value=None, optional=False), FunctionArgument(name='width', argument_type='float', default_value=None, optional=False), FunctionArgument(name='height', argument_type='float', default_value=None, optional=False), FunctionArgument(name='caption', argument_type='string', default_value=None, optional=False), FunctionArgument(name='relative', argument_type='bool', default_value=None, optional=False), FunctionArgument(name='parent', argument_type='element', default_value='nil', optional=False)]), docs=FunctionDoc(description='This function creates a combobox GUI element, which you can compare to a gridlist with a dropdown feature.', arguments={'x': 'A float of the 2D x position of the GUI combobox on a players screen.  This is affected by the relative argument.', 'y': 'A float of the 2D y position of the GUI combobox on a players screen. This is affected by the relative argument.', 'width': 'A float of the width of the GUI combobox. This is affected by the relative argument.', 'height': 'A float of the height of the GUI combobox. This is affected by the relative argument. Note: height must be enough to fit the drop down menu, else the drop down wont appear.', 'caption': 'A string for what the title of your combobox will be. This will be shown if no item is selected.', 'relative': 'This is whether sizes and positioning are relative.  If this is true, then all x,y,width,height floats must be between 0 and 1, representing sizes relative to the parent.\n{{OptionalArg}} ', 'parent': 'This is the parent that the GUI combobox is attached to.  If the relative argument is true, sizes and positioning will be made relative to this parent. If the relative argument is false, positioning will be the number of offset pixels from the parents origin. If no parent is passed, the parent will become the screen - causing positioning and sizing according to screen positioning.'}, result='Returns an element of the created combobox if it was successfully created, false otherwise.'), oop=None, url=FunctionUrl(url='/wiki/GuiCreateComboBox', name='guiCreateComboBox', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiComboBoxAddItem', return_types=['int'], arguments=[FunctionArgument(name='comboBox', argument_type='element', default_value=None, optional=False), FunctionArgument(name='value', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='Adds an item to a combobox.', arguments={'comboBox': 'The combobox you want to add a row to', 'value': 'The text that the item will contain.'}, result="Returns the item ID if it has been created, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/GuiComboBoxAddItem', name='guiComboBoxAddItem', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiComboBoxClear', return_types=['bool'], arguments=[FunctionArgument(name='comboBox', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='This function removes all the items from a combobox.', arguments={'comboBox': 'The combobox element to be cleared'}, result="Returns ''true'' if the combobox element is valid and has been cleared successfully, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/GuiComboBoxClear', name='guiComboBoxClear', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiComboBoxGetItemCount', return_types=['int'], arguments=[FunctionArgument(name='comboBox', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'comboBox': 'The combo box to get the number of items from.'}, result="Returns the number of items if the function is successful, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/GuiComboBoxGetItemCount', name='guiComboBoxGetItemCount', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiComboBoxGetItemText', return_types=['string'], arguments=[FunctionArgument(name='comboBox', argument_type='element', default_value=None, optional=False), FunctionArgument(name='itemId', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function retrieves the text from a specific combobox item.', arguments={'comboBox': 'The combobox containing the item youre interested in', 'itemId': 'The index of the item'}, result="Returns the text of the item if the arguments are right, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/GuiComboBoxGetItemText', name='guiComboBoxGetItemText', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiComboBoxGetSelected', return_types=['int'], arguments=[FunctionArgument(name='comboBox', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns the index of the selected combobox item.', arguments={'comboBox': 'the combobox you want to know the selected item index of'}, result="Returns the index of the selected item if the specified combobox is valid and has a selected item, ''-1'' if no item is selected, ''nil'' otherwise."), oop=FunctionOOP(class_name='GuiComboBox', method_name='getSelected', field='selected'), url=FunctionUrl(url='/wiki/GuiComboBoxGetSelected', name='guiComboBoxGetSelected', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiComboBoxIsOpen', return_types=['bool'], arguments=[FunctionArgument(name='comboBox', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'comboBox': 'The combo box to get the state.'}, result="Returns ''true'' if combobox is opened, ''false'' if combobox is closed, ''nil'' otherwise."), oop=FunctionOOP(class_name='GuiComboBox', method_name='isOpen', field='open'), url=FunctionUrl(url='/wiki/GuiComboBoxIsOpen', name='guiComboBoxIsOpen', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiComboBoxRemoveItem', return_types=['bool'], arguments=[FunctionArgument(name='comboBox', argument_type='element', default_value=None, optional=False), FunctionArgument(name='itemId', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function removes an item from a combobox.', arguments={'comboBox': 'The combobox containing the item youre interested in', 'itemId': 'The index of the item to remove'}, result="Returns ''true'' if the item was removes successfully, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/GuiComboBoxRemoveItem', name='guiComboBoxRemoveItem', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiComboBoxSetItemText', return_types=['bool'], arguments=[FunctionArgument(name='comboBox', argument_type='element', default_value=None, optional=False), FunctionArgument(name='itemId', argument_type='int', default_value=None, optional=False), FunctionArgument(name='text', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='This function changes the text of a combobox item.', arguments={'comboBox': 'The combobox containing the item youre interested in', 'itemId': 'The index of the item', 'text': 'The text you want to put in (does NOT accept numbers, use tostring() for that)'}, result="Returns ''true'' if the text was set successfully, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/GuiComboBoxSetItemText', name='guiComboBoxSetItemText', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiComboBoxSetOpen', return_types=['bool'], arguments=[FunctionArgument(name='comboBox', argument_type='element', default_value=None, optional=False), FunctionArgument(name='state', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'comboBox': 'The combobox to be opened or closed.', 'state': 'The state of combobox. true, if the combobox is to be opened. false if the combobox is to be closed.'}, result="Returns true if is successful, ''false'' otherwise."), oop=FunctionOOP(class_name='GuiComboBox', method_name='setOpen', field='open'), url=FunctionUrl(url='/wiki/GuiComboBoxSetOpen', name='guiComboBoxSetOpen', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiComboBoxSetSelected', return_types=['bool'], arguments=[FunctionArgument(name='comboBox', argument_type='element', default_value=None, optional=False), FunctionArgument(name='itemIndex', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function sets the selected item from a combobox.', arguments={'comboBox': 'the combobox you want to select an item from', 'itemIndex': 'the item you want to select (item 0 is the first item). If -1 is specified, then the combo box text is set to its caption.'}, result="Returns ''true'' if the selected item has been changed successfully, ''false'' otherwise."), oop=FunctionOOP(class_name='GuiComboBox', method_name='setSelected', field='selected'), url=FunctionUrl(url='/wiki/GuiComboBoxSetSelected', name='guiComboBoxSetSelected', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiCreateEdit', return_types=['element'], arguments=[FunctionArgument(name='x', argument_type='float', default_value=None, optional=False), FunctionArgument(name='y', argument_type='float', default_value=None, optional=False), FunctionArgument(name='width', argument_type='float', default_value=None, optional=False), FunctionArgument(name='height', argument_type='float', default_value=None, optional=False), FunctionArgument(name='text', argument_type='string', default_value=None, optional=False), FunctionArgument(name='relative', argument_type='bool', default_value=None, optional=False), FunctionArgument(name='parent', argument_type='element', default_value='nil', optional=True)]), docs=FunctionDoc(description='[[Image:Gui-edit.png|frame|Example GUI edit field.]]\nThis function is for creating a new GUI edit box. This is a text box in which the user can input text. Edit boxes only allow a single line of text. If you want to allow multiple lines of text create a memo box using [[guiCreateMemo]].', arguments={'x': 'A float of the 2D x position of the GUI edit box on a players screen.  This is affected by the relative argument.', 'y': 'A float of the 2D y position of the GUI edit box on a players screen. This is affected by the relative argument.', 'width': 'A float of the width of the GUI edit box. This is affected by the relative argument.', 'height': 'A float of the height of the GUI edit box. This is affected by the relative argument.', 'text': 'A string of the text that will be displayed by default in the edit box.', 'relative': 'This is whether sizes and positioning are relative.  If this is true, then all x,y,width,height floats must be between 0 and 1, representing measures relative to the parent.\n{{OptionalArg}} ', 'parent': 'This is the parent that the GUI edit box is attached to.  If the relative argument is true, sizes and positioning will be made relative to this parent. If the relative argument is false, positioning will be the number of offset pixels from the parents origin. If no parent is passed, the parent will become the screen - causing positioning and sizing according to screen positioning.'}, result='Returns a gui-edit element of the created edit box if it was successfully created, false otherwise.'), oop=None, url=FunctionUrl(url='/wiki/GuiCreateEdit', name='guiCreateEdit', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiEditGetCaretIndex', return_types=['int'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns the caret (the text cursor) position within the editbox.\n}}', arguments={'theElement': 'The edit box you want to get the caret position from'}, result="Returns the caret index on success, ''false'' otherwise."), oop=FunctionOOP(class_name='GuiEdit', method_name='getCaretIndex', field='caretIndex'), url=FunctionUrl(url='/wiki/GuiEditGetCaretIndex', name='guiEditGetCaretIndex', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiEditGetMaxLength', return_types=['int'], arguments=[FunctionArgument(name='edit', argument_type='gui', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'guiEdit': 'The edit box you want to get the maximum text length of.'}, result="Returns the maximum text length on success, ''false'' otherwise."), oop=FunctionOOP(class_name='GuiEdit', method_name='getMaxLength', field='maxLength'), url=FunctionUrl(url='/wiki/GuiEditGetMaxLength', name='guiEditGetMaxLength', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiEditIsMasked', return_types=['bool'], arguments=[FunctionArgument(name='edit', argument_type='gui', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'guiEdit': 'the edit box to check masked flag of.'}, result="Returns ''true'' if the edit box is masked, ''false'' if not, ''nil'' if an invalid edit box was provided."), oop=None, url=FunctionUrl(url='/wiki/GuiEditIsMasked', name='guiEditIsMasked', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiEditIsReadOnly', return_types=['bool'], arguments=[FunctionArgument(name='edit', argument_type='gui', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'guiEdit': 'The edit box to check read-only status of.'}, result="Returns ''true'' if the edit box is read-only, ''false'' if not, ''nil'' if an invalid edit box was provided."), oop=None, url=FunctionUrl(url='/wiki/GuiEditIsReadOnly', name='guiEditIsReadOnly', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiEditSetCaretIndex', return_types=['bool'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False), FunctionArgument(name='index', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function sets the current position of the caret (the text cursor) within the edit box.', arguments={'theElement': 'The edit box to be changed.', 'index': 'An integer referring to the desired position within the box.'}, result="Returns ''true'' if the index was successfully set, ''false'' otherwise."), oop=FunctionOOP(class_name='GuiEdit', method_name='setCaretIndex', field='caretIndex'), url=FunctionUrl(url='/wiki/GuiEditSetCaretIndex', name='guiEditSetCaretIndex', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiEditSetMasked', return_types=['bool'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False), FunctionArgument(name='status', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description='This function sets or removes masking (covering up the text being typed) for password text fields.', arguments={'theElement': 'The edit box to be changed.', 'status': 'A boolean value indicating whether masking is to be enabled or disabled.'}, result="Returns ''true'' if the function is successful, ''false'' otherwise."), oop=FunctionOOP(class_name='GuiEdit', method_name='setMasked', field='masked'), url=FunctionUrl(url='/wiki/GuiEditSetMasked', name='guiEditSetMasked', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiEditSetMaxLength', return_types=['bool'], arguments=[FunctionArgument(name='guiEdit', argument_type='element', default_value=None, optional=False), FunctionArgument(name='length', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function sets the maximum text length that can be typed into an edit box.', arguments={'theElement': 'The edit box to be changed.', 'length': 'An integer indicating the maximum number of characters that can be typed into the box.'}, result="Returns ''true'' if the max length was set successfully, ''false'' otherwise."), oop=FunctionOOP(class_name='GuiEdit', method_name='setMaxLength', field='maxLength'), url=FunctionUrl(url='/wiki/GuiEditSetMaxLength', name='guiEditSetMaxLength', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiEditSetReadOnly', return_types=['bool'], arguments=[FunctionArgument(name='editField', argument_type='element', default_value=None, optional=False), FunctionArgument(name='status', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description="This function allows you to set or remove read-only status for an edit box. If read-only is set to ''true'', the box is not editable.", arguments={'editField': 'The element of the Element/GUI/Edit field|edit field to be modified.', 'status': 'A boolean value indicating whether read-only is to be enabled or disabled.'}, result="Returns ''true'' if edit field's read-only status was changed successfully, ''false'' otherwise."), oop=FunctionOOP(class_name='GuiEdit', method_name='setReadOnly', field='readOnly'), url=FunctionUrl(url='/wiki/GuiEditSetReadOnly', name='guiEditSetReadOnly', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiCreateGridList', return_types=['element'], arguments=[FunctionArgument(name='x', argument_type='float', default_value=None, optional=False), FunctionArgument(name='y', argument_type='float', default_value=None, optional=False), FunctionArgument(name='width', argument_type='float', default_value=None, optional=False), FunctionArgument(name='height', argument_type='float', default_value=None, optional=False), FunctionArgument(name='relative', argument_type='bool', default_value=None, optional=False), FunctionArgument(name='parent', argument_type='element', default_value='nil', optional=False)]), docs=FunctionDoc(description="This function creates a grid list GUI element.  These are menu's which are designed in lists and can have multiple columns.  A good example of a gridlist element can be found in MTA's settings box, under ''Controls''.", arguments={'x': 'A float of the 2D x position of the GUI gridlist on a players screen.  This is affected by the relative argument.', 'y': 'A float of the 2D y position of the GUI gridlist on a players screen. This is affected by the relative argument.', 'width': 'A float of the width of the GUI gridlist. This is affected by the relative argument.', 'height': 'A float of the height of the GUI gridlist. This is affected by the relative argument.', 'relative': 'This is whether sizes and positioning are relative.  If this is true, then all x,y,width,height floats must be between 0 and 1, representing sizes relative to the parent.\n{{OptionalArg}} ', 'parent': 'This is the parent that the gui gridlist is attached to.  If the relative argument is true, sizes and positioning will be made relative to this parent. If the relative argument is false, positioning will be the number of offset pixels from the parents origin. If no parent is passed, the parent will become the screen - causing positioning and sizing according to screen positioning.'}, result='Returns an element of the created gridlist if it was successfully created, false otherwise.'), oop=None, url=FunctionUrl(url='/wiki/GuiCreateGridList', name='guiCreateGridList', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiGridListAddColumn', return_types=['int'], arguments=[FunctionArgument(name='gridList', argument_type='element', default_value=None, optional=False), FunctionArgument(name='title', argument_type='string', default_value=None, optional=False), FunctionArgument(name='width', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is used to create columns in grid lists.', arguments={'gridList': 'The grid list you want to add a column to', 'title': 'Title of the column', 'width': 'Column width, relative to the grid list width'}, result="Returns the column id if it was created, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/GuiGridListAddColumn', name='guiGridListAddColumn', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiGridListAddRow', return_types=['int'], arguments=[FunctionArgument(name='gridList', argument_type='element', default_value=None, optional=False), FunctionArgument(name='string', argument_type='int', default_value=None, optional=True), FunctionArgument(name='string', argument_type='int', default_value=None, optional=True), FunctionArgument(name='...args', argument_type='any[]', default_value=None, optional=True)]), docs=FunctionDoc(description="Adds a row to a grid list, and optionally add simple text items with your rows.  Use [[guiGridListSetItemText]] to add row headers.\nATTENTION: Without [[guiGridListSetItemText]] there is no row added to the grid. \nLook at the example, first you give the row a name with '''[[row =]]''' guiGridListAddRow ( playerList ), and then you use [[guiGridListSetItemText]]. }}", arguments={'gridList': 'The grid list you want to add a row to\n{{New feature/item|3.0153|1.5.3||', 'itemText1': 'The text for the first column item in the row.  Either a string or a number can be passed (use numbers for sorting purposes).', 'itemText2': 'The text for the second column item in the row.  Either a string or a number can be passed (use numbers for sorting purposes).', '...': 'Item text for any other columns\n}}'}, result="Returns the row id if it has been created, ''false'' otherwise."), oop=FunctionOOP(class_name='GuiGridList', method_name="addRow}}\n\n===Required Arguments=== \n*'''gridList:''' The grid list you want to add a row to\n\n===Optional Arguments===\n{{New feature/item", field='3.0153'), url=FunctionUrl(url='/wiki/GuiGridListAddRow', name='guiGridListAddRow', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiGridListAutoSizeColumn', return_types=['bool'], arguments=[FunctionArgument(name='gridList', argument_type='element', default_value=None, optional=False), FunctionArgument(name='columnIndex', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description="<!-- Describe in plain english what this function does. Don't go into details, just give an overview -->\nThis allows you to automatically size a column to display everything in it correctly, with the most minimal width.", arguments={'gridList': 'The Element/GUI/Gridlist|grid list element where the column is located.', 'columnIndex': 'The ID of the column you want to be auto-sized.'}, result="Returns ''true'' if the column was auto-sized, ''false'' otherwise."), oop=FunctionOOP(class_name='GuiGridList', method_name="autoSizeColumn}}\n\n===Required Arguments=== \n<!-- List each argument one per line. This should be the argument's name as in the argument list above, NOT the argument's data type -->\n*'''gridList:''' The [[Element/GUI/Gridlist", field="grid list]] element where the column is located.\n*'''columnIndex:''' The ID of the column you want to be auto-sized.\n\n===Returns===\nReturns ''true'' if the column was auto-sized, ''false'' otherwise.\n\n"), url=FunctionUrl(url='/wiki/GuiGridListAutoSizeColumn', name='guiGridListAutoSizeColumn', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiGridListClear', return_types=['bool'], arguments=[FunctionArgument(name='gridList', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='This function clears all the data from a grid list.', arguments={'gridList': 'The grid list element to be cleared'}, result="Returns ''true'' if the grid list element is valid and has been cleared successfully, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/GuiGridListClear', name='guiGridListClear', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiGridListGetColumnCount', return_types=['int'], arguments=[FunctionArgument(name='gridList', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='This allows you to get the count of existing columns in a gridlist.', arguments={'gridList': 'The grid list you want to add a column to'}, result='Returns an integer with the amount of columns in the gridlist, false otherwise.'), oop=FunctionOOP(class_name='GuiGridList', method_name='getColumnCount', field="columnCount}}\n\n===Required Arguments=== \n*'''gridList:''' The grid list you want to add a column to\n\n===Returns===\nReturns an integer with the amount of columns in the gridlist, false otherwise.\n\n"), url=FunctionUrl(url='/wiki/GuiGridListGetColumnCount', name='guiGridListGetColumnCount', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiGridListGetColumnTitle', return_types=['string'], arguments=[FunctionArgument(name='guiGridlist', argument_type='element', default_value=None, optional=False), FunctionArgument(name='columnIndex', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is used to get the column title of a gridlist column.', arguments={'guiGridlist': ': The grid list you want to get the column title from', 'columnIndex': ': Column ID'}, result="Returns a string containing the column title, or ''false'' otherwise."), oop=FunctionOOP(class_name='GuiGridList', method_name="getColumnTitle}}\n\n===Required Arguments===\n*'''guiGridlist''': The grid list you want to get the column title from\n*'''columnIndex''': Column ID\n\n===Returns===\nReturns a string containing the column title, or ''false'' otherwise.\n\n==Requirements==\n{{Requirements", field='n/a'), url=FunctionUrl(url='/wiki/GuiGridListGetColumnTitle', name='guiGridListGetColumnTitle', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiGridListGetColumnWidth', return_types=['float'], arguments=[FunctionArgument(name='gridList', argument_type='element', default_value=None, optional=False), FunctionArgument(name='columnIndex', argument_type='int', default_value=None, optional=False), FunctionArgument(name='relative', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description='This allows you to get the width of an existing column in a gridlist.', arguments={'gridList': 'The grid list you want to add a column to', 'columnIndex': 'Column ID of the Get size', 'relative': 'A boolean defining whether width measurements will be relative to the Gridlist size, or absolute pixels.'}, result="Returns the width of the gridlist column, ''false'' if bad arguments were given."), oop=None, url=FunctionUrl(url='/wiki/GuiGridListGetColumnWidth', name='guiGridListGetColumnWidth', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiGridListGetHorizontalScrollPosition', return_types=['float'], arguments=[FunctionArgument(name='guiGridlist', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is used to get the horizontal scroll position from a grid list', arguments={'guiGridlist': ': The grid list you want to get the horizontal scroll position from'}, result="Returns a integer between 0 and 100 indicating the horizontal scroll position, or ''false'' otherwise."), oop=FunctionOOP(class_name='GuiGridList', method_name='getHorizontalScrollPosition', field='horizontalScrollPosition'), url=FunctionUrl(url='/wiki/GuiGridListGetHorizontalScrollPosition', name='guiGridListGetHorizontalScrollPosition', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiGridListGetItemColor', return_types=['int', 'int', 'int', 'int'], arguments=[FunctionArgument(name='gridList', argument_type='element', default_value=None, optional=False), FunctionArgument(name='rowIndex', argument_type='int', default_value=None, optional=False), FunctionArgument(name='columnIndex', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function gets the color of a gridlist item.', arguments={'gridList': 'The grid list element', 'rowIndex': 'Row ID', 'columnIndex': 'Column ID'}, result="Returns four ''int'' values, representing the amount of red, green, blue and alpha if successful. ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/GuiGridListGetItemColor', name='guiGridListGetItemColor', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiGridListGetItemData', return_types=['var'], arguments=[FunctionArgument(name='gridList', argument_type='element', default_value=None, optional=False), FunctionArgument(name='rowIndex', argument_type='int', default_value=None, optional=False), FunctionArgument(name='columnIndex', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description="With this function you can retrieve the [[string]] data associated with an item in a [[Element/GUI/Gridlist|grid list]]. This is not the text that is displayed on the item, but an internal string that you can use to hold extra information about the item.<br/>\n'''Note:''' This function will only work '''after''' you set the item's text using [[guiGridListSetItemText]]!", arguments={'gridList': 'the grid list containing the item youre interested in', 'rowIndex': 'the row index of the item', 'columnIndex': 'the column index of the item'}, result="Returns the item data of the specified item if succesful, ''false'' if one of the arguments was invalid."), oop=None, url=FunctionUrl(url='/wiki/GuiGridListGetItemData', name='guiGridListGetItemData', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiGridListGetItemText', return_types=['string'], arguments=[FunctionArgument(name='gridList', argument_type='element', default_value=None, optional=False), FunctionArgument(name='rowIndex', argument_type='int', default_value=None, optional=False), FunctionArgument(name='columnIndex', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function retrieves the text from a specific grid list item.', arguments={'gridList': 'the gridlist containing the item youre interested in', 'rowIndex': 'row id of the item', 'columnIndex': 'column id of the item'}, result="Returns the text of the item if the arguments are right, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/GuiGridListGetItemText', name='guiGridListGetItemText', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiGridListGetRowCount', return_types=['int'], arguments=[FunctionArgument(name='gridList', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns the number of rows in a grid list.', arguments={'gridList': 'The grid list to get the number of rows from.'}, result="Returns the number of rows if the function is successful, ''false'' otherwise."), oop=FunctionOOP(class_name='GuiGridList', method_name='getRowCount', field="rowCount}}\n\n===Required Arguments=== \n*'''gridList:''' The grid list to get the number of rows from.\n\n===Returns===\nReturns the number of rows if the function is successful, ''false'' otherwise.\n\n"), url=FunctionUrl(url='/wiki/GuiGridListGetRowCount', name='guiGridListGetRowCount', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiGridListGetSelectedCount', return_types=['int'], arguments=[FunctionArgument(name='gridList', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns the amount of options selected in the specified [[Element/GUI/Gridlist|grid list]].', arguments={'gridList': 'The Element/GUI/Gridlist|grid list which amount of selected items you want to retrieve.'}, result="Returns an [[int]]eger representing the amount of selected options if everything was successful or ''false'' if invalid arguments were passed."), oop=FunctionOOP(class_name='GuiGridList', method_name='getSelectedCount', field="selectedCount}}\n\n===Required Arguments=== \n*'''gridList:''' The [[Element/GUI/Gridlist"), url=FunctionUrl(url='/wiki/GuiGridListGetSelectedCount', name='guiGridListGetSelectedCount', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiGridListGetSelectedItem', return_types=['int', 'int'], arguments=[FunctionArgument(name='gridList', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns the row and column indexes of the selected item in a grid list. First selected row and column is (0, 0).', arguments={'gridList': 'the grid list you want to know the selected row index of'}, result="Returns the row and column indexes of the selected item if the specified grid list is valid and has a selected item, (-1, -1) if no item is selected, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/GuiGridListGetSelectedItem', name='guiGridListGetSelectedItem', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiGridListGetSelectedItems', return_types=['table'], arguments=[FunctionArgument(name='gridList', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns the items selected in the specified [[Element/GUI/Gridlist|grid list]].\nNote that for some reason the column ID is 1 lower than it should be, for example 0 is returned but if you try and get the text for column 0 there is nothing, but column 1 has what you clicked on.', arguments={'gridList': 'The Element/GUI/Gridlist|grid list which selected items you want to retrieve.'}, result='Returns a table over the selected items in the [[Element/GUI/Gridlist|grid list]] in this format:\n<syntaxhighlight lang="lua">\ntable = {\n    [1] = {\n        ["column"], -- has the first selected item\'s column ID\n        ["row"] -- has the first selected item\'s row ID\n    },\n    [2] = {\n        ["column"],-- has the second selected item\'s column ID\n        ["row"] -- has the second selected item\'s row ID\n    },\n    ...\n}\n</syntaxhighlight>\nif everything was successful or \'\'false\'\' if invalid arguments were passed.'), oop=FunctionOOP(class_name='GuiGridList', method_name='getSelectedItems', field="selectedItems}}\n\n===Required Arguments=== \n*'''gridList:''' The [[Element/GUI/Gridlist"), url=FunctionUrl(url='/wiki/GuiGridListGetSelectedItems', name='guiGridListGetSelectedItems', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiGridListGetSelectionMode', return_types=['int'], arguments=[FunctionArgument(name='Element', argument_type='gui', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'gridlist': 'The gridlist you want to get the selection mode of.'}, result="Returns the ID of the current gridlist's selection mode.\n{{GUI_gridList_selection_modes_IDs}}"), oop=FunctionOOP(class_name='GuiGridList', method_name='getSelectionMode', field="selectionMode}}\n\n===Required Arguments=== \n*'''gridlist:''' The gridlist you want to get the selection mode of.\n\n===Returns===\nReturns the ID of the current gridlist's selection mode.\n{{GUI_gridList_selection_modes_IDs}}\n\n"), url=FunctionUrl(url='/wiki/GuiGridListGetSelectionMode', name='guiGridListGetSelectionMode', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiGridListIsSortingEnabled', return_types=['bool'], arguments=[FunctionArgument(name='guiGridlist', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'guiGridlist': 'The GUI gridlist you wish to check if sorting is enabled or not.'}, result="Returns ''true'' if sorting is enabled, ''false'' otherwise."), oop=FunctionOOP(class_name='GuiGridList', method_name='isSortingEnabled', field="sortingEnabled}}\n\n===Required Arguments=== \n*'''guiGridlist:''' The GUI gridlist you wish to check if sorting is enabled or not.\n\n===Returns===\nReturns ''true'' if sorting is enabled, ''false'' otherwise.\n\n"), url=FunctionUrl(url='/wiki/GuiGridListIsSortingEnabled', name='guiGridListIsSortingEnabled', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiGridListGetVerticalScrollPosition', return_types=['float'], arguments=[FunctionArgument(name='guiGridlist', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is used to get the vertical scroll position from a grid list', arguments={'guiGridlist': ': The grid list you want to get the vertical scroll position from'}, result="Returns a integer between 0 and 100 indicating the vertical scroll position, or ''false'' otherwise."), oop=FunctionOOP(class_name='GuiGridList', method_name='getVerticalScrollPosition', field='verticalScrollPosition'), url=FunctionUrl(url='/wiki/GuiGridListGetVerticalScrollPosition', name='guiGridListGetVerticalScrollPosition', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiGridListInsertRowAfter', return_types=['int'], arguments=[FunctionArgument(name='gridList', argument_type='element', default_value=None, optional=False), FunctionArgument(name='rowIndex', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This allows you to insert a new row after a specified row, and simultaneously set text. Good for inserting new rows in the middle of existing rows. To insert at the top use -1 as row index.', arguments={'gridList': 'The grid list you want to add a row to', 'rowIndex': 'Row ID of the row you want to insert the new row after.\n{{New feature/item|3.0153|1.5.3||', 'itemText1': 'The text for the first column item in the row.  Either a string or a number can be passed (use numbers for sorting purposes).', 'itemText2': 'The text for the second column item in the row.  Either a string or a number can be passed (use numbers for sorting purposes).', '...': 'Item text for any other columns\n}}'}, result="Returns ''true'' if the row was successfully added, ''false'' otherwise."), oop=FunctionOOP(class_name='GuiGridList', method_name="insertRowAfter}}\n\n===Required Arguments=== \n*'''gridList:''' The grid list you want to add a row to\n*'''rowIndex:''' Row ID of the row you want to insert the '''new row''' after.\n\n===Optional Arguments===\n{{New feature/item", field='3.0153'), url=FunctionUrl(url='/wiki/GuiGridListInsertRowAfter', name='guiGridListInsertRowAfter', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiGridListRemoveColumn', return_types=['bool'], arguments=[FunctionArgument(name='gridList', argument_type='element', default_value=None, optional=False), FunctionArgument(name='columnIndex', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This allows you to delete columns that exist in grid lists.', arguments={'gridList': 'The grid list you want to remove a column from', 'columnIndex': 'Column ID'}, result="Returns ''true'' if the grid list column was successfully removed, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/GuiGridListRemoveColumn', name='guiGridListRemoveColumn', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiGridListRemoveRow', return_types=['bool'], arguments=[FunctionArgument(name='gridList', argument_type='element', default_value=None, optional=False), FunctionArgument(name='rowIndex', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This allows you to delete rows that exist in grid lists.', arguments={'gridList': 'The grid list you want to remove a row from', 'rowIndex': 'The row ID which you want to remove'}, result="Returns ''true'' if the grid list row was successfully removed, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/GuiGridListRemoveRow', name='guiGridListRemoveRow', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiGridListSetColumnTitle', return_types=['bool'], arguments=[FunctionArgument(name='guiGridlist', argument_type='element', default_value=None, optional=False), FunctionArgument(name='columnIndex', argument_type='int', default_value=None, optional=False), FunctionArgument(name='title', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is used to change the column title of a gridlist column.', arguments={'guiGridlist': ': The grid list you want to change the column title from', 'columnIndex': ': Column ID', 'title': ': The title of the column'}, result="Returns ''true'' if the new title was set, or ''false'' otherwise."), oop=FunctionOOP(class_name='GuiGridList', method_name="setColumnTitle}}\n\n===Required Arguments===\n*'''guiGridlist''': The grid list you want to change the column title from\n*'''columnIndex''': Column ID\n*'''title''': The title of the column\n\n===Returns===\nReturns ''true'' if the new title was set, or ''false'' otherwise.\n\n==Requirements==\n{{Requirements", field='n/a'), url=FunctionUrl(url='/wiki/GuiGridListSetColumnTitle', name='guiGridListSetColumnTitle', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiGridListSetColumnWidth', return_types=['bool'], arguments=[FunctionArgument(name='gridList', argument_type='element', default_value=None, optional=False), FunctionArgument(name='columnIndex', argument_type='int', default_value=None, optional=False), FunctionArgument(name='width', argument_type='number', default_value=None, optional=False), FunctionArgument(name='relative', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description='This allows you to set the width of an existing column in a gridlist.', arguments={'gridList': 'The grid list you want to add a column to', 'columnIndex': 'Column ID of the size you want to change', 'width': 'A float or integer of the width of the column depending on the relative argument.', 'relative': 'A boolean defining whether width measurements will be relative to the Gridlist size, or absolute pixels.'}, result="Returns ''true'' if the gridlist column width was successfully set, ''false'' if bad arguments were given."), oop=None, url=FunctionUrl(url='/wiki/GuiGridListSetColumnWidth', name='guiGridListSetColumnWidth', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiGridListSetHorizontalScrollPosition', return_types=['bool'], arguments=[FunctionArgument(name='guiGridlist', argument_type='element', default_value=None, optional=False), FunctionArgument(name='fPosition', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is used to set the horizontal scroll position from a grid list', arguments={'guiGridlist': ': The grid list you want to set the horizontal scroll position from', 'fPosition': ': A float representing the horizontal scroll position (0-100)'}, result="Returns ''true'' if the horizontal scroll position was set, or ''false'' otherwise."), oop=FunctionOOP(class_name='GuiGridList', method_name='setHorizontalScrollPosition', field='horizontalScrollPosition'), url=FunctionUrl(url='/wiki/GuiGridListSetHorizontalScrollPosition', name='guiGridListSetHorizontalScrollPosition', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiGridListSetItemColor', return_types=['bool'], arguments=[FunctionArgument(name='gridList', argument_type='element', default_value=None, optional=False), FunctionArgument(name='rowIndex', argument_type='int', default_value=None, optional=False), FunctionArgument(name='columnIndex', argument_type='int', default_value=None, optional=False), FunctionArgument(name='red', argument_type='int', default_value=None, optional=False), FunctionArgument(name='green', argument_type='int', default_value=None, optional=False), FunctionArgument(name='blue', argument_type='int', default_value=None, optional=False), FunctionArgument(name='alpha', argument_type='int', default_value='255', optional=True)]), docs=FunctionDoc(description='This function changes the color of a gridlist item.', arguments={'gridList': 'The grid list element', 'rowIndex': 'Row ID', 'columnIndex': 'Column ID', 'red': 'The amount of red in the color (0-255)', 'green': 'The amount of green in the color (0-255)', 'blue': 'The amount of blue in the color (0-255)', 'alpha': 'The amount of alpha in the color (0-255).'}, result="Returns ''true'' if the item color was set successfully, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/GuiGridListSetItemColor', name='guiGridListSetItemColor', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiGridListSetItemData', return_types=['bool'], arguments=[FunctionArgument(name='gridList', argument_type='element', default_value=None, optional=False), FunctionArgument(name='rowIndex', argument_type='int', default_value=None, optional=False), FunctionArgument(name='columnIndex', argument_type='int', default_value=None, optional=False), FunctionArgument(name='data', argument_type='var', default_value=None, optional=False)]), docs=FunctionDoc(description="This function sets a Item Data associated to a grid list item.<br/>\n'''Note:''' This function will only work '''after''' you set the item's text using [[guiGridListSetItemText]]!", arguments={'gridList': 'A gridlist element of the data you wish to set to', 'rowIndex': 'The row of the item you wish to set to', 'columnIndex': 'The column of the item you wish to set to', 'data': 'The data you wish to set to the item.'}, result="Returns ''true'' if the data was set successfully, false otherwise"), oop=None, url=FunctionUrl(url='/wiki/GuiGridListSetItemData', name='guiGridListSetItemData', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiGridListSetItemText', return_types=['bool'], arguments=[FunctionArgument(name='gridList', argument_type='element', default_value=None, optional=False), FunctionArgument(name='rowIndex', argument_type='int', default_value=None, optional=False), FunctionArgument(name='columnIndex', argument_type='int', default_value=None, optional=False), FunctionArgument(name='text', argument_type='string', default_value=None, optional=False), FunctionArgument(name='section', argument_type='bool', default_value=None, optional=False), FunctionArgument(name='number', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description="This function changes the text of a gridlist item.\nNotice: This function doesn't work well with Sorting. If you are using sorting, please use the optional arguments of [[guiGridListAddRow]] as much as possible.", arguments={'gridList': 'The grid list element', 'rowIndex': 'Row ID', 'columnIndex': 'Column ID', 'text': 'The text you want to put in (does NOT accept numbers, use tostring() for that)', 'section': 'Determines if the item is a section', 'number': 'Tells whether the text item is a number value or not (used for sorting)'}, result="Returns ''true'' if the item text was set successfully, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/GuiGridListSetItemText', name='guiGridListSetItemText', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiGridListSetScrollBars', return_types=['bool'], arguments=[FunctionArgument(name='guiGridlist', argument_type='element', default_value=None, optional=False), FunctionArgument(name='horizontalBar', argument_type='bool', default_value=None, optional=False), FunctionArgument(name='verticalBar', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description="This function allows a gridlist's scrollbar to be forced '''on''', or returned to default.", arguments={'guiGridlist': 'The GUI gridlist you wish to change the state of scrollbars', 'horizontalBar': 'A bool where true forces the horizontal scrollbar on, and false returns them to default.', 'verticalBar': 'A bool where true forces the verical scrollbar on, and false returns them to default.'}, result="Returns ''true'' if the scrollbars were successfully set, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/GuiGridListSetScrollBars', name='guiGridListSetScrollBars', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiGridListSetSelectedItem', return_types=['bool'], arguments=[FunctionArgument(name='gridList', argument_type='element', default_value=None, optional=False), FunctionArgument(name='rowIndex', argument_type='int', default_value=None, optional=False), FunctionArgument(name='columnIndex', argument_type='int', default_value=None, optional=False), FunctionArgument(name='bReset', argument_type='bool', default_value='true', optional=True)]), docs=FunctionDoc(description="This function selects an item from a gridlist. If you wish to deselect whatever item is selected, pass ''0'' as both the ''rowIndex'' and  ''columnIndex'' arguments.", arguments={'gridList': 'the grid list you want to select an item from', 'rowIndex': 'the row you want to select (index 0 is the first row)', 'columnIndex': 'the column you want to select (index 1 is the first column)\n{{New feature|3.0111|1.1.1|\n{{OptionalArg}}', 'bReset': 'set to false for multiple selections\n}}'}, result="Returns ''true'' if the passed arguments are correct and the item has been selected, ''false'' otherwise."), oop=FunctionOOP(class_name='GuiGridList', method_name="setSelectedItem}}\n\n===Required Arguments=== \n*'''gridList:''' the grid list you want to select an item from\n*'''rowIndex:''' the row you want to select (index 0 is the first row)\n*'''columnIndex:''' the column you want to select (index 1 is the first column)\n{{New feature", field='3.0111'), url=FunctionUrl(url='/wiki/GuiGridListSetSelectedItem', name='guiGridListSetSelectedItem', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiGridListSetSelectionMode', return_types=['bool'], arguments=[FunctionArgument(name='Element', argument_type='gui', default_value=None, optional=False), FunctionArgument(name='mode', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description="This function sets the selection mode of a gui gridlist.  For example, the MTA ''server browser'' selects a whole row, while the ''Controls'' dialog selects a single cell. To select multiple items you must be holding down 'ctrl'.", arguments={'gridlist': 'The gridlist in which you wish to set the selection mode.', 'mode': 'The mode of the selection.  Can be the following values:', '0': 'Single row selection', '1': 'Multiple row selection', '2': 'Single cell selection', '3': 'Multiple cell selection', '4': 'Nominated(First) single column selection', '5': 'Nominated(First) multiple column selection', '6': 'Single column selection', '7': 'Multiple column selection', '8': 'Nominated(First) single row selection', '9': 'Nominated(First) multiple row selection'}, result="Returns ''true'' if the selection mode was successfully set, false otherwise."), oop=FunctionOOP(class_name='GuiGridList', method_name='setSelectionMode', field="selectionMode}}\n\n===Required Arguments=== \n*'''gridlist:''' The gridlist in which you wish to set the selection mode.\n*'''mode:''' The mode of the selection.  Can be the following values:\n**'''0:''' Single row selection\n**'''1:''' Multiple row selection\n**'''2:''' Single cell selection\n**'''3:''' Multiple cell selection\n**'''4:''' Nominated(First) single column selection\n**'''5:''' Nominated(First) multiple column selection\n**'''6:''' Single column selection\n**'''7:''' Multiple column selection\n**'''8:''' Nominated(First) single row selection\n**'''9:''' Nominated(First) multiple row selection\n\n===Returns===\nReturns ''true'' if the selection mode was successfully set, false otherwise.\n\n"), url=FunctionUrl(url='/wiki/GuiGridListSetSelectionMode', name='guiGridListSetSelectionMode', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiGridListSetSortingEnabled', return_types=['bool'], arguments=[FunctionArgument(name='guiGridlist', argument_type='element', default_value=None, optional=False), FunctionArgument(name='enabled', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description="This function allows the disabling or enabling of ''sorting'' within a gridlist.  Sorting is achieved by clicking a column header.  Gridlist items will be sorted according to the clicked column.  By default, gridlists have sorting enabled.  This function will allow you to toggle this.", arguments={'guiGridlist': 'The GUI gridlist you wish to toggle the sorting of.', 'enabled': 'A boolean representing whether the sorting is enabled, or disabled.'}, result="Returns ''true'' if sorting was successfully toggled., ''false'' otherwise."), oop=FunctionOOP(class_name='GuiGridList', method_name='setSortingEnabled', field="sortingEnabled}}\n\n===Required Arguments=== \n*'''guiGridlist:''' The GUI gridlist you wish to toggle the sorting of.\n*'''enabled:''' A boolean representing whether the sorting is enabled, or disabled.\n\n===Returns===\nReturns ''true'' if sorting was successfully toggled., ''false'' otherwise.\n\n"), url=FunctionUrl(url='/wiki/GuiGridListSetSortingEnabled', name='guiGridListSetSortingEnabled', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiGridListSetVerticalScrollPosition', return_types=['bool'], arguments=[FunctionArgument(name='guiGridlist', argument_type='element', default_value=None, optional=False), FunctionArgument(name='fPosition', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is used to set the vertical scroll position from a grid list', arguments={'guiGridlist': ': The grid list you want to set the vertical scroll position from', 'fPosition': ': A float representing the vertical scroll position (0-100)'}, result="Returns ''true'' if the vertical scroll position was set, or ''false'' otherwise."), oop=FunctionOOP(class_name='GuiGridList', method_name='setVerticalScrollPosition', field='verticalScrollPosition'), url=FunctionUrl(url='/wiki/GuiGridListSetVerticalScrollPosition', name='guiGridListSetVerticalScrollPosition', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiCreateMemo', return_types=['gui-memo'], arguments=[FunctionArgument(name='x', argument_type='float', default_value=None, optional=False), FunctionArgument(name='y', argument_type='float', default_value=None, optional=False), FunctionArgument(name='width', argument_type='float', default_value=None, optional=False), FunctionArgument(name='height', argument_type='float', default_value=None, optional=False), FunctionArgument(name='text', argument_type='string', default_value=None, optional=False), FunctionArgument(name='relative', argument_type='bool', default_value=None, optional=False), FunctionArgument(name='parent', argument_type='element', default_value='nil', optional=True)]), docs=FunctionDoc(description='This function creates a new GUI memo.  This is a multiline edit box in which the user can input text.', arguments={'x': 'A float of the 2D x position of the GUI memo on a players screen.  This is affected by the relative argument.', 'y': 'A float of the 2D y position of the GUI memo on a players screen. This is affected by the relative argument.', 'width': 'A float of the width of the GUI memo. This is affected by the relative argument.', 'height': 'A float of the height of the GUI memo. This is affected by the relative argument.', 'text': 'A string of the text that will be displayed by default in the memo.', 'relative': 'This is whether sizes and positioning are relative.  If this is true, then all x,y,width,height floats must be between 0 and 1, representing measures relative to the parent.\n{{OptionalArg}} ', 'parent': 'This is the parent that the GUI memo is attached to.  If the relative argument is true, sizes and positioning will be made relative to this parent. If the relative argument is false, positioning will be the number of offset pixels from the parents origin. If no parent is passed, the parent will become the screen - causing positioning and sizing according to screen positioning.'}, result='Returns a gui-memo element of the created memo if it was successfully created, false otherwise.'), oop=None, url=FunctionUrl(url='/wiki/GuiCreateMemo', name='guiCreateMemo', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiMemoGetCaretIndex', return_types=['int'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns the caret (the text cursor) position within the memo box.\n}}', arguments={'theElement': 'The memo box you want to get the caret position from'}, result="Returns the caret index on success, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/GuiMemoGetCaretIndex', name='guiMemoGetCaretIndex', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiMemoGetVerticalScrollPosition', return_types=['float'], arguments=[FunctionArgument(name='memo', argument_type='gui', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'theMemo': ': the guiCreateMemo|memo you want to know the vertical scroll position of.'}, result="Returns a [[float]] ranging between 0 and 100, or '''false''' otherwise."), oop=None, url=FunctionUrl(url='/wiki/GuiMemoGetVerticalScrollPosition', name='guiMemoGetVerticalScrollPosition', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiMemoSetVerticalScrollPosition', return_types=['bool'], arguments=[FunctionArgument(name='memo', argument_type='gui', default_value=None, optional=False), FunctionArgument(name='position', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'theMemo': ': the guiCreateMemo|memo you want to change the vertical scroll position of.', 'position': ': a float ranging between 0 and 100.'}, result="Returns '''true''' if the position was set, '''false''' otherwise."), oop=None, url=FunctionUrl(url='/wiki/GuiMemoSetVerticalScrollPosition', name='guiMemoSetVerticalScrollPosition', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiMemoIsReadOnly', return_types=['bool'], arguments=[FunctionArgument(name='memo', argument_type='gui', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'theMemo': 'The memo to check read-only status of.'}, result="Returns ''true'' if the memo is read only, ''false'' if the memo isn't read only, ''nil'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/GuiMemoIsReadOnly', name='guiMemoIsReadOnly', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiMemoSetCaretIndex', return_types=['bool'], arguments=[FunctionArgument(name='memo', argument_type='gui', default_value=None, optional=False), FunctionArgument(name='index', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function sets the current position of the caret (the text cursor) within the memo.', arguments={'theMemo': 'The memo edit box where the caret position is to be changed.', 'index': 'An integer referring to the desired character position within the box. 0 would be before the first character in the box, 1 before the second, etc.'}, result="Returns ''true'' if the caret was successfully moved, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/GuiMemoSetCaretIndex', name='guiMemoSetCaretIndex', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiMemoSetReadOnly', return_types=['bool'], arguments=[FunctionArgument(name='memo', argument_type='gui', default_value=None, optional=False), FunctionArgument(name='status', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description="This function allows you to set or remove read-only status for a GUI memo. If read-only is set to ''true'', the contents are not editable.", arguments={'theMemo': 'The memo to change read-only status of.', 'status': 'A boolean value indicating whether read-only is to be enabled or disabled.'}, result="Returns ''true'' if the status was successfully changed, ''false'' otherwise."), oop=FunctionOOP(class_name='GuiMemo', method_name='setReadOnly', field='readOnly'), url=FunctionUrl(url='/wiki/GuiMemoSetReadOnly', name='guiMemoSetReadOnly', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiCreateProgressBar', return_types=['element'], arguments=[FunctionArgument(name='x', argument_type='float', default_value=None, optional=False), FunctionArgument(name='y', argument_type='float', default_value=None, optional=False), FunctionArgument(name='width', argument_type='float', default_value=None, optional=False), FunctionArgument(name='height', argument_type='float', default_value=None, optional=False), FunctionArgument(name='relative', argument_type='bool', default_value=None, optional=False), FunctionArgument(name='parent', argument_type='element', default_value='nil', optional=False)]), docs=FunctionDoc(description='This function creates a [[Element/GUI/Progress bar|progress bar]].', arguments={'x': 'A float of the 2D x position of the progress bar on a players screen. This is affected by the relative argument.', 'y': 'A float of the 2D y position of the progress bar on a players screen. This is affected by the relative argument.', 'width': 'A float of the width of the progress bar. This is affected by the relative argument.', 'height': 'A float of the height of the progress bar. This is affected by the relative argument.', 'relative': 'This is whether sizes and positioning are relative. If this is true, then all x,y,width,height floats must be between 0 and 1, representing measures relative to the parent.\n{{OptionalArg}}', 'parent': 'This is the parent that the progress bar is attached to. If the relative argument is true, sizes and positioning will be made relative to this parent. If the relative argument is false, positioning will be the number of offset pixels from the parents origin. If no parent is passed, the parent will become the screen - causing positioning and sizing according to screen positioning.'}, result="Returns [[element]] of the progress bar if it was created succesfully, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/GuiCreateProgressBar', name='guiCreateProgressBar', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiProgressBarGetProgress', return_types=['float'], arguments=[FunctionArgument(name='theProgressbar', argument_type='progressBar', default_value=None, optional=False)]), docs=FunctionDoc(description='This function gets the progress of a progress bar as a percentage.', arguments={'theProgressbar': ': The progressbar you want to check.'}, result='Returns a [[float]] ranging between 0 and 100.'), oop=None, url=FunctionUrl(url='/wiki/GuiProgressBarGetProgress', name='guiProgressBarGetProgress', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiProgressBarSetProgress', return_types=['bool'], arguments=[FunctionArgument(name='theProgressbar', argument_type='progressBar', default_value=None, optional=False), FunctionArgument(name='progress', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is used to set the progress of a progressbar as a percentage.', arguments={'theProgressbar': ': The progressbar you want to change the progress of', 'progress': ': a float ranging from 0 - 100'}, result='Returns true if the progress was set, false otherwise.'), oop=None, url=FunctionUrl(url='/wiki/GuiProgressBarSetProgress', name='guiProgressBarSetProgress', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiCreateRadioButton', return_types=['element'], arguments=[FunctionArgument(name='x', argument_type='float', default_value=None, optional=False), FunctionArgument(name='y', argument_type='float', default_value=None, optional=False), FunctionArgument(name='width', argument_type='float', default_value=None, optional=False), FunctionArgument(name='height', argument_type='float', default_value=None, optional=False), FunctionArgument(name='text', argument_type='string', default_value=None, optional=False), FunctionArgument(name='relative', argument_type='bool', default_value=None, optional=False), FunctionArgument(name='parent', argument_type='element', default_value='nil', optional=False)]), docs=FunctionDoc(description='This function creates a [[Element/GUI/Radio button|radio button]].', arguments={'x': 'A float of the 2D x position of the radio button on a players screen. This is affected by the relative argument.', 'y': 'A float of the 2D y position of the radio button on a players screen. This is affected by the relative argument.', 'width': 'A float of the width of the text field next to the radio button. This is affected by the relative argument.', 'height': 'A float of the height of the text field next to the radio button. This is affected by the relative argument.', 'text': 'The text to be displayed next to the radio button.', 'relative': 'This is whether sizes and positioning are relative. If this is true, then all x,y,width,height floats must be between 0 and 1, representing measures relative to the parent.\n{{OptionalArg}} ', 'parent': "This is the parent that the radio button is attached to. If the relative argument is true, sizes and positioning will be made relative to this parent. If the relative argument is false, positioning will be the number of offset pixels from the parents origin. If no parent is passed, the parent will become the screen - causing positioning and sizing according to screen positioning.\n''NOTE:'' All radio buttons become grouped together with their parent item.  Only ONE radio button per group/parent will be able to be selected at the same time."}, result="Returns [[element]] of the radio button if it was created succesfully, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/GuiCreateRadioButton', name='guiCreateRadioButton', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiRadioButtonGetSelected', return_types=['bool'], arguments=[FunctionArgument(name='guiRadioButton', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description="This function gets a radio button's selection state.", arguments={'guiRadioButton': 'The radio button you wish to retrieve the selection state of.'}, result="Returns ''true'' if the radio button is selected, ''false'' if it is not."), oop=None, url=FunctionUrl(url='/wiki/GuiRadioButtonGetSelected', name='guiRadioButtonGetSelected', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiRadioButtonSetSelected', return_types=['bool'], arguments=[FunctionArgument(name='guiRadioButton', argument_type='element', default_value=None, optional=False), FunctionArgument(name='state', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description='This function selects or unselects a radio button.', arguments={'guiRadioButton': 'The GUI radio button in which you wish to change the selection state of', 'state': 'The state of the radio button, where true indicates selected, and false indicates unselected.'}, result="Returns ''true'' if the radio button's selection state was successfully set, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/GuiRadioButtonSetSelected', name='guiRadioButtonSetSelected', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiCreateScrollBar', return_types=['gui-scrollbar'], arguments=[FunctionArgument(name='x', argument_type='float', default_value=None, optional=False), FunctionArgument(name='y', argument_type='float', default_value=None, optional=False), FunctionArgument(name='width', argument_type='float', default_value=None, optional=False), FunctionArgument(name='height', argument_type='float', default_value=None, optional=False), FunctionArgument(name='horizontal', argument_type='bool', default_value=None, optional=False), FunctionArgument(name='relative', argument_type='bool', default_value=None, optional=False), FunctionArgument(name='element', argument_type='gui', default_value=None, optional=False)]), docs=FunctionDoc(description="This function creates a GUI scrollbar. You can use the functions [[guiScrollPaneSetHorizontalScrollPosition]], [[guiScrollPaneSetVerticalScrollPosition]], [[guiScrollPaneGetHorizontalScrollPosition]] and [[guiScrollPaneGetVerticalScrollPosition]] to read and modify the scrollbar's scroll.", arguments={'x': 'the 2D x offset of the GUI scrollbar from its parent.  This is affected by the relative argument.', 'y': 'the 2D y offset of the GUI scrollbar from its parent. This is affected by the relative argument.', 'width': 'the width of the GUI scrollbar. This is affected by the relative argument.', 'height': 'the height of the GUI scrollbar. This is affected by the relative argument.', 'horizontal': 'whether this scrollbar is horizontal (true) or vertical (false).', 'relative': 'whether sizes and positions are relative to their parents.  If this is true, then all measures must be between 0 and 1, representing sizes/positions as a fraction of the parent widgets size.', 'parent': 'the gui-element this scrollbar is attached to. By default, it is nil, meaning the widget is attached to the background.'}, result="Returns a ''gui-scrollbar'' if it was created successfully, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/GuiCreateScrollBar', name='guiCreateScrollBar', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiScrollBarGetScrollPosition', return_types=['float'], arguments=[FunctionArgument(name='scrollBar', argument_type='gui', default_value=None, optional=False)]), docs=FunctionDoc(description='This function gets the scroll amount of a scrollbar as a percentage.', arguments={'theScrollBar ': ': The scrollbar you want to check.'}, result='Returns a [[float]] ranging between 0 and 100, representing the amount the scrollbar has been scrolled.'), oop=None, url=FunctionUrl(url='/wiki/GuiScrollBarGetScrollPosition', name='guiScrollBarGetScrollPosition', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiScrollBarSetScrollPosition', return_types=['bool'], arguments=[FunctionArgument(name='scrollBar', argument_type='gui', default_value=None, optional=False), FunctionArgument(name='amount', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is used to set the scroll amount of a scrollbar as a percentage.', arguments={'theScrollBar': ': The scrollbar you want to change the progress of', 'amount': ': a float ranging from 0 - 100 representing the amount you wish to set the scroll bar.'}, result='Returns true if the scroll position was successfully set, false otherwise.'), oop=None, url=FunctionUrl(url='/wiki/GuiScrollBarSetScrollPosition', name='guiScrollBarSetScrollPosition', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiCreateScrollPane', return_types=['element'], arguments=[FunctionArgument(name='x', argument_type='float', default_value=None, optional=False), FunctionArgument(name='y', argument_type='float', default_value=None, optional=False), FunctionArgument(name='width', argument_type='float', default_value=None, optional=False), FunctionArgument(name='height', argument_type='float', default_value=None, optional=False), FunctionArgument(name='relative', argument_type='bool', default_value=None, optional=False), FunctionArgument(name='element', argument_type='gui', default_value=None, optional=False)]), docs=FunctionDoc(description='This creates a GUI scroll pane.\n[[Image:gui-scrollpane.png|frame|Example GUI ScrollPane.]]', arguments={'x': 'the 2D x offset of the GUI scrollpane from its parent. This is affected by the relative argument.', 'y': 'the 2D y offset of the GUI scrollpane from its parent. This is affected by the relative argument.', 'width': 'the width of the GUI scrollpane. This is affected by the relative argument.', 'height': 'the height of the GUI scrollpane. This is affected by the relative argument.', 'relative': 'whether sizes and positions are relative to their parents. If this is true, then all measures must be between 0 and 1, representing sizes/positions as a fraction of the parent widgets size.', 'parent': 'the gui-element this scrollpane is attached to. By default, it is nil, meaning the widget is attached to the background.'}, result='The gui-element if created, otherwise false.'), oop=None, url=FunctionUrl(url='/wiki/GuiCreateScrollPane', name='guiCreateScrollPane', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiScrollPaneGetHorizontalScrollPosition', return_types=['float'], arguments=[FunctionArgument(name='horizontalScrollPane', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is used to get the position of a horizontal scroll pane as a percentage.', arguments={'horizontalScrollPane': ': The scroll pane you want to know the position of'}, result="Returns a [[float]] ranging between 0 and 100, or '''false''' otherwise."), oop=None, url=FunctionUrl(url='/wiki/GuiScrollPaneGetHorizontalScrollPosition', name='guiScrollPaneGetHorizontalScrollPosition', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiScrollPaneGetVerticalScrollPosition', return_types=['float'], arguments=[FunctionArgument(name='verticalScrollPane', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is used to get the position of a vertical scroll pane as a percentage.', arguments={'verticalScrollPane': ': The scroll pane you want to know the position of'}, result="Returns a [[float]] ranging between 0 and 100, or '''false''' otherwise."), oop=None, url=FunctionUrl(url='/wiki/GuiScrollPaneGetVerticalScrollPosition', name='guiScrollPaneGetVerticalScrollPosition', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiScrollPaneSetHorizontalScrollPosition', return_types=['bool'], arguments=[FunctionArgument(name='horizontalScrollPane', argument_type='element', default_value=None, optional=False), FunctionArgument(name='position', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is used to set the position of a horizontal scroll pane as a percentage.', arguments={'horizontalScrollPane': ': The scroll pane you want to change the position of', 'position': ': a float ranging from 0 - 100'}, result="Returns '''true''' if the position was set, '''false''' otherwise."), oop=None, url=FunctionUrl(url='/wiki/GuiScrollPaneSetHorizontalScrollPosition', name='guiScrollPaneSetHorizontalScrollPosition', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiScrollPaneSetScrollBars', return_types=['bool'], arguments=[FunctionArgument(name='scrollPane', argument_type='element', default_value=None, optional=False), FunctionArgument(name='horizontal', argument_type='bool', default_value=None, optional=False), FunctionArgument(name='vertical', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description="This function allows a scrollpane's scrollbars to be forced '''on''', or returned to default.", arguments={'scrollPane': 'the GUI scrollpane element you want to set the scrollbars of.', 'horizontal': 'A bool where true forces the horizontal scrollbar on, and false returns them to default.', 'vertical': 'A bool where true forces the vertical scrollbar on, and false returns them to default.'}, result="Returns ''true'' if the call was successfully, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/GuiScrollPaneSetScrollBars', name='guiScrollPaneSetScrollBars', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiScrollPaneSetVerticalScrollPosition', return_types=['bool'], arguments=[FunctionArgument(name='verticalScrollPane', argument_type='element', default_value=None, optional=False), FunctionArgument(name='position', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is used to set the position of a vertical scroll pane as a percentage.', arguments={'verticalScrollPane': ': The scroll pane you want to change the position of', 'position': ': a float ranging from 0 - 100'}, result="Returns '''true''' if the position was set, '''false''' otherwise."), oop=None, url=FunctionUrl(url='/wiki/GuiScrollPaneSetVerticalScrollPosition', name='guiScrollPaneSetVerticalScrollPosition', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiCreateStaticImage', return_types=['element'], arguments=[FunctionArgument(name='x', argument_type='float', default_value=None, optional=False), FunctionArgument(name='y', argument_type='float', default_value=None, optional=False), FunctionArgument(name='width', argument_type='float', default_value=None, optional=False), FunctionArgument(name='height', argument_type='float', default_value=None, optional=False), FunctionArgument(name='path', argument_type='string', default_value=None, optional=False), FunctionArgument(name='relative', argument_type='bool', default_value=None, optional=False), FunctionArgument(name='parent', argument_type='element', default_value='nil', optional=False)]), docs=FunctionDoc(description='This function creates a static image using a .png image in the resource.', arguments={'x': 'A float of the 2D x position of the image on a players screen. This is affected by the relative argument.', 'y': 'A float of the 2D y position of the image on a players screen. This is affected by the relative argument.', 'width': 'A float of the width of the image. This is affected by the relative argument.', 'height': 'A float of the height of the image. This is affected by the relative argument.', 'path': 'The filepath of the image file that is being loaded.', 'relative': 'This is whether sizes and positioning are relative. If this is true, then all x,y,width,height floats must be between 0 and 1, representing measures relative to the parent.\n{{OptionalArg}} ', 'parent': 'This is the parent that the image is attached to. If the relative argument is true, sizes and positioning will be made relative to this parent. If the relative argument is false, positioning will be the number of offset pixels from the parents origin. If no parent is passed, the parent will become the screen - causing positioning and sizing according to screen positioning.'}, result="Returns [[element]] if image was created successfully, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/GuiCreateStaticImage', name='guiCreateStaticImage', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiStaticImageGetNativeSize', return_types=['int', 'int'], arguments=[FunctionArgument(name='theImage', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='This function gets the native size of image. That means the original size in pixels of the image file.', arguments={'theImage': 'The static image element to get the original size of.'}, result="Returns two integers where first is the width and second the height of the image in pixels, ''false'' if the image element was invalid."), oop=None, url=FunctionUrl(url='/wiki/GuiStaticImageGetNativeSize', name='guiStaticImageGetNativeSize', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiStaticImageLoadImage', return_types=['bool'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False), FunctionArgument(name='filename', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description="This function allows you to change the image in GUI static image element to another one. '''Tip''': If you set other images as children you will have to use [[setElementCallPropagationEnabled]] to only affect the parent image.", arguments={'theElement': 'The static image element to be changed.', 'filename': 'A string specifying the filepath of the image file being loaded in current resource.'}, result="Returns ''true'' if the the image in the static image element was successfully changed, ''false'' otherwise."), oop=FunctionOOP(class_name='GuiStaticImage', method_name='loadImage', field="image}}\n===Required Arguments=== \n*'''theElement:''' The static image element to be changed.\n*'''filename:''' A string specifying the [[filepath]] of the image file being loaded in current resource. \n\n===Returns===\nReturns ''true'' if the the image in the static image element was successfully changed, ''false'' otherwise.\n\n"), url=FunctionUrl(url='/wiki/GuiStaticImageLoadImage', name='guiStaticImageLoadImage', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiCreateTabPanel', return_types=['element'], arguments=[FunctionArgument(name='x', argument_type='float', default_value=None, optional=False), FunctionArgument(name='y', argument_type='float', default_value=None, optional=False), FunctionArgument(name='width', argument_type='float', default_value=None, optional=False), FunctionArgument(name='height', argument_type='float', default_value=None, optional=False), FunctionArgument(name='relative', argument_type='bool', default_value=None, optional=False), FunctionArgument(name='parent', argument_type='element', default_value='nil', optional=False)]), docs=FunctionDoc(description='This function creates a Tab Panel, which acts as a template to create Tabs upon.', arguments={'x': 'A float of the 2D x position of the GUI tab panel on a players screen.  This is affected by the relative argument.', 'y': 'A float of the 2D y position of the GUI tab panel on a players screen. This is affected by the relative argument.', 'width': 'A float of the width of the GUI tab panel. This is affected by the relative argument.', 'height': 'A float of the height of the GUI tab panel. This is affected by the relative argument.', 'relative': 'This is whether sizes and positioning are relative.  If this is true, then all x,y,width,height floats must be between 0 and 1, representing sizes relative to the parent.\n{{OptionalArg}} ', 'parent': 'This is the parent that the tab panel is attached to.  If the relative argument is true, sizes and positioning will be made relative to this parent. If the relative argument is false, positioning will be the number of offset pixels from the parents origin. If no parent is passed, the parent will become the screen - causing positioning and sizing according to screen positioning.'}, result="Returns a GUI tab panel element if successful, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/GuiCreateTabPanel', name='guiCreateTabPanel', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiGetSelectedTab', return_types=['element'], arguments=[FunctionArgument(name='tabPanel', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns the currently selected tab in the specified [[Element/GUI/Tab panel|tab panel]].', arguments={'tabPanel': 'The Element/GUI/Tab panel|tab panel which current tab you want to retrieve.'}, result="Returns an [[element]] of the [[Element/GUI/Tab|tab]] if a tab was selected or [[nil]] if no tab was selected. If passed arguments were invalid or something went wrong, the function will return ''false''."), oop=FunctionOOP(class_name='GuiTabPanel', method_name='getSelectedTab', field='selectedTab'), url=FunctionUrl(url='/wiki/GuiGetSelectedTab', name='guiGetSelectedTab', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiSetSelectedTab', return_types=['bool'], arguments=[FunctionArgument(name='tabPanel', argument_type='element', default_value=None, optional=False), FunctionArgument(name='theTab', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is used to change the currently selected [[Element/GUI/Tab|tab]] in a [[Element/GUI/Tab panel|tab panel]].', arguments={'tabPanel': 'The Element/GUI/Tab panel|tab panel which current tab you want to change.', 'theTab': 'The Element/GUI/Tab|tab which will be the new active tab.'}, result="Returns ''true'' if the selected tab was changed to a new one successfully, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/GuiSetSelectedTab', name='guiSetSelectedTab', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiCreateTab', return_types=['element'], arguments=[FunctionArgument(name='text', argument_type='string', default_value=None, optional=False), FunctionArgument(name='parent', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description="This function creates a tab on a pre-existing tab panel. A tab is a button as well as a 'dimension' that can be used to switch between information by clicking on the tabs.  Tabs are sorted on a tab panel in the order that they are created.", arguments={'text': 'The caption for the tab', 'parent': 'The parent tab panel, as a tab panel element type'}, result="Returns a tab element if successful, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/GuiCreateTab', name='guiCreateTab', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiDeleteTab', return_types=['bool'], arguments=[FunctionArgument(name='tabToDelete', argument_type='element', default_value=None, optional=False), FunctionArgument(name='tabPanel', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='This function deletes a tab from a tab panel.', arguments={'tabToDelete': 'This is an element representing the tab that you want to delete.', 'tabPanel': 'This is the guiCreateTabPanel|tab panel parent that the tab is attached to.'}, result="Returns ''true'' the tab was successfully deleted, ''false'' otherwise."), oop=FunctionOOP(class_name='GuiTab', method_name="delete}} \n===Required Arguments=== \n*'''tabToDelete:''' This is an element representing the tab that you want to delete.\n*'''tabPanel:''' This is the [[guiCreateTabPanel", field="tab panel]] parent that the tab is attached to.\n\n===Returns===\nReturns ''true'' the tab was successfully deleted, ''false'' otherwise.\n\n"), url=FunctionUrl(url='/wiki/GuiDeleteTab', name='guiDeleteTab', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiCreateLabel', return_types=['element'], arguments=[FunctionArgument(name='x', argument_type='float', default_value=None, optional=False), FunctionArgument(name='y', argument_type='float', default_value=None, optional=False), FunctionArgument(name='width', argument_type='float', default_value=None, optional=False), FunctionArgument(name='height', argument_type='float', default_value=None, optional=False), FunctionArgument(name='text', argument_type='string', default_value=None, optional=False), FunctionArgument(name='relative', argument_type='bool', default_value=None, optional=False), FunctionArgument(name='parent', argument_type='element', default_value='nil', optional=False)]), docs=FunctionDoc(description="[[Image:gui-label.png|frame|Example GUI label.]]\n<table><tr><td valign=top height=100>\nThis function is for creating a new GUI label.  A label is simply a piece of text that cannot be edited by the user. If you would like to have a bigger text you'd have to change its font because font size is not supported.\n</td></tr></table>", arguments={'x': 'A float of the 2D x position of the GUI label on a players screen.  This is affected by the relative argument.', 'y': 'A float of the 2D y position of the GUI label on a players screen. This is affected by the relative argument.', 'width': 'A float of the width of the GUI label. This is affected by the relative argument.', 'height': 'A float of the height of the GUI label. This is affected by the relative argument.', 'text': 'A string of the text that will be displayed by the label.', 'relative': 'This is whether sizes and positioning are relative.  If this is true, then all x,y,width,height floats must be between 0 and 1, representing sizes relative to the parent.\n{{OptionalArg}} ', 'parent': 'This is the parent that the gui label is attached to.  If the relative argument is true, sizes and positioning will be made relative to this parent. If the relative argument is false, positioning will be the number of offset pixels from the parents origin. If no parent is passed, the parent will become the screen - causing positioning and sizing according to screen positioning.'}, result='Returns an [[GUI_widgets|element]] of the created label if it was successfully created, false otherwise.'), oop=None, url=FunctionUrl(url='/wiki/GuiCreateLabel', name='guiCreateLabel', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiLabelGetColor', return_types=['int', 'int', 'int'], arguments=[FunctionArgument(name='element', argument_type='gui', default_value=None, optional=False)]), docs=FunctionDoc(description='This function gets the color of a label.\n}}', arguments={'theLabel': 'The label to get color.'}, result="Returns three ''int'' values, representing the amount of red, green, blue if successful. ''false'' otherwise."), oop=FunctionOOP(class_name='GuiLabel', method_name='getColor', field=None), url=FunctionUrl(url='/wiki/GuiLabelGetColor', name='guiLabelGetColor', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiLabelGetFontHeight', return_types=['float'], arguments=[FunctionArgument(name='theLabel', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns the height of the font currently used in a GUI text label.', arguments={'theLabel': 'The text label to get the font height from.'}, result="Returns the absolute height of the font currently used in the text label if the function is successful, ''false'' otherwise."), oop=FunctionOOP(class_name='GuiLabel', method_name='getFontHeight', field="fontHeight}} \n===Required Arguments=== \n*'''theLabel:''' The text label to get the font height from.\n\n===Returns===\nReturns the absolute height of the font currently used in the text label if the function is successful, ''false'' otherwise.\n\n"), url=FunctionUrl(url='/wiki/GuiLabelGetFontHeight', name='guiLabelGetFontHeight', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiLabelGetTextExtent', return_types=['float'], arguments=[FunctionArgument(name='theLabel', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns the extent, or width, of the current text inside a GUI text label.', arguments={'theLabel': 'The text label to get the text extent from.'}, result="Returns the absolute width of the current text inside the text label if the function is successful, ''false'' otherwise."), oop=FunctionOOP(class_name='GuiLabel', method_name='getTextExtent', field="textExtent}} \n===Required Arguments=== \n*'''theLabel:''' The text label to get the text extent from.\n\n===Returns===\nReturns the absolute width of the current text inside the text label if the function is successful, ''false'' otherwise.\n\n"), url=FunctionUrl(url='/wiki/GuiLabelGetTextExtent', name='guiLabelGetTextExtent', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiLabelSetColor', return_types=['bool'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False), FunctionArgument(name='red', argument_type='int', default_value=None, optional=False), FunctionArgument(name='green', argument_type='int', default_value=None, optional=False), FunctionArgument(name='blue', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description="<!-- Describe in plain english what this function does. Don't go into details, just give an overview -->\nThis function allows you to set the color of a GUI label.", arguments={'theElement': 'The label to be changed.', 'red': 'An integer specifying the amount of red (0 to 255).', 'green': 'An integer specifying the amount of green (0 to 255).', 'blue': 'An integer specifying the amount of blue (0 to 255).'}, result="<!-- Make this descriptive. Explain what cases will return false. If you're unsure, add a tag to it so we can check -->\nReturns ''true'' if the the color of the gui label was successfully changed, ''false'' otherwise."), oop=FunctionOOP(class_name='GuiLabel', method_name='setColor', field=None), url=FunctionUrl(url='/wiki/GuiLabelSetColor', name='guiLabelSetColor', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiLabelSetHorizontalAlign', return_types=['bool'], arguments=[FunctionArgument(name='theLabel', argument_type='element', default_value=None, optional=False), FunctionArgument(name='align', argument_type='string', default_value=None, optional=False), FunctionArgument(name='wordwrap', argument_type='bool', default_value='false', optional=False)]), docs=FunctionDoc(description='This function sets the horizontal alignment of a text label.', arguments={'theLabel': 'The text label to set the horizontal alignment on.', 'align': 'The alignment type. Valid type strings are:\n**"left"\n**"center"\n**"right"', 'wordwrap': 'Whether or not to enable wordwrap for the gui-label.'}, result="Returns ''true'' on success, ''false'' otherwise."), oop=FunctionOOP(class_name='GuiLabel', method_name='setHorizontalAlign', field='horizontalAlign}} \n===Required Arguments=== \n*\'\'\'theLabel:\'\'\' The text label to set the horizontal alignment on.\n*\'\'\'align:\'\'\' The alignment type. Valid type strings are:\n**"left"\n**"center"\n**"right"\n*\'\'\'wordwrap:\'\'\' Whether or not to enable wordwrap for the gui-label.\n\n===Returns===\nReturns \'\'true\'\' on success, \'\'false\'\' otherwise.\n\n'), url=FunctionUrl(url='/wiki/GuiLabelSetHorizontalAlign', name='guiLabelSetHorizontalAlign', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiLabelSetVerticalAlign', return_types=['bool'], arguments=[FunctionArgument(name='theLabel', argument_type='element', default_value=None, optional=False), FunctionArgument(name='align', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='This function sets the vertical alignment of a text label.', arguments={'theLabel': 'The text label to set the vertical alignment on.', 'align': 'The alignment type. Valid type strings are:\n**"top"\n**"center"\n**"bottom"'}, result="Returns ''true'' on success, ''false'' otherwise."), oop=FunctionOOP(class_name='GuiLabel', method_name='setVerticalAlign', field='verticalAlign}} \n===Required Arguments=== \n*\'\'\'theLabel:\'\'\' The text label to set the vertical alignment on.\n*\'\'\'align:\'\'\' The alignment type. Valid type strings are:\n**"top"\n**"center"\n**"bottom"\n\n===Returns===\nReturns \'\'true\'\' on success, \'\'false\'\' otherwise.\n\n'), url=FunctionUrl(url='/wiki/GuiLabelSetVerticalAlign', name='guiLabelSetVerticalAlign', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiCreateWindow', return_types=['element'], arguments=[FunctionArgument(name='x', argument_type='float', default_value=None, optional=False), FunctionArgument(name='y', argument_type='float', default_value=None, optional=False), FunctionArgument(name='width', argument_type='float', default_value=None, optional=False), FunctionArgument(name='height', argument_type='float', default_value=None, optional=False), FunctionArgument(name='titleBarText', argument_type='string', default_value=None, optional=False), FunctionArgument(name='relative', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is for creating a new GUI window.  This provides a base for other gui elements to be created within.  However, windows do not have a parent and cannot be created in any GUI elements.', arguments={'x': 'A float of the 2D x position of the GUI window on a players screen.  This is affected by the relative argument.', 'y': 'A float of the 2D y position of the GUI window on a players screen. This is affected by the relative argument.', 'width': 'A float of the width of the GUI window. This is affected by the relative argument.', 'height': 'A float of the height of the GUI window. This is affected by the relative argument.', 'titleBarText': 'A string of the text that will be displayed in the title bar of the window.', 'relative': 'This is whether sizes and positioning are relative.  If this is true, then all x,y,width,height floats must be between 0 and 1, representing sizes/positions as a fraction of the screen size. If false, then the size and co-ordinates are based on clients resolution, accessible using guiGetScreenSize.'}, result='Returns a gui window element if it was created successfully, false otherwise.'), oop=None, url=FunctionUrl(url='/wiki/GuiCreateWindow', name='guiCreateWindow', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiWindowIsMovable', return_types=['bool'], arguments=[FunctionArgument(name='window', argument_type='gui', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'guiWindow': 'the window to check the movable flag of'}, result="Returns ''true'' if the window is movable, ''false'' if not, ''nil'' if an invalid window was provided."), oop=None, url=FunctionUrl(url='/wiki/GuiWindowIsMovable', name='guiWindowIsMovable', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiWindowIsSizable', return_types=['bool'], arguments=[FunctionArgument(name='window', argument_type='gui', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'guiWindow': 'the window to check the sizable flag of'}, result="Returns ''true'' if the window is sizable, ''false'' if not, ''nil'' if an invalid window was provided."), oop=None, url=FunctionUrl(url='/wiki/GuiWindowIsSizable', name='guiWindowIsSizable', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiWindowSetMovable', return_types=['bool'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False), FunctionArgument(name='status', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description='This function allows you to specify whether or not a user can move a GUI window.', arguments={'theElement': 'The window to be changed.', 'status': 'A boolean value indicating whether the window is movable or not.'}, result="Returns ''true'' if the function is successful, ''false'' otherwise."), oop=FunctionOOP(class_name='GuiWindow', method_name='setMovable', field='movable'), url=FunctionUrl(url='/wiki/GuiWindowSetMovable', name='guiWindowSetMovable', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='guiWindowSetSizable', return_types=['bool'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False), FunctionArgument(name='status', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description='This function enables or disables user resizing of a GUI window.', arguments={'theElement': 'The window to be changed.', 'status': 'A boolean value indicating whether user resizing is to be enabled or disabled.'}, result="Returns ''true'' if the function is successful, ''false'' otherwise."), oop=FunctionOOP(class_name='GuiWindow', method_name='setSizable', field='sizable'), url=FunctionUrl(url='/wiki/GuiWindowSetSizable', name='guiWindowSetSizable', category='GUI functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='getAnalogControlState', return_types=['float'], arguments=[FunctionArgument(name='control', argument_type='string', default_value=None, optional=False), FunctionArgument(name='rawValue', argument_type='bool', default_value=None, optional=True)]), docs=FunctionDoc(description='This retrieves the analog control state of a control.  This is useful for detecting sensitive controls, such as those used on a joypad.\nTo get the analog control state for a [[ped]], please use [[getPedAnalogControlState]].', arguments={'control': 'The control that you want to get the state of. See control names for a list of possible controls.\n{{New feature/item|3.0157|1.5.7|20383|', 'rawValue': 'A bool indicating if it should return the raw player input value.\n}}'}, result='Returns a [[float]] between 0 and 1 indicating the amount the control is pressed.'), oop=None, url=FunctionUrl(url='/wiki/GetAnalogControlState', name='getAnalogControlState', category='Input functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='getBoundKeys', return_types=['table'], arguments=[FunctionArgument(name='command', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='Returns a list of key names that are bound to the specified game [[Control names|control]] or console command.', arguments={'command/control': 'the name of a game control or a console command. See the control names page for valid controls.'}, result="If one or more keys are bound to the specified control or console command, a table is returned indexed by the names of the keys and containing key states as values. If no keys are bound or an invalid name was passed, returns ''false''."), oop=None, url=FunctionUrl(url='/wiki/GetBoundKeys', name='getBoundKeys', category='Input functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='getCommandsBoundToKey', return_types=['table'], arguments=[FunctionArgument(name='theKey', argument_type='string', default_value=None, optional=False), FunctionArgument(name='keyState', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='Gets the commands bound to a key.', arguments={'theKey': 'See key names for a list of possible keys', 'keyState': 'A string that has one of the following values:', '"up"': 'If the bound key should trigger the function when the key is released', '"down"': 'If the bound key should trigger the function when the key is pressed', '"both"': 'If the bound key should trigger the function when the key is pressed or released'}, result='Returns a table of the commands bound on that key.'), oop=None, url=FunctionUrl(url='/wiki/GetCommandsBoundToKey', name='getCommandsBoundToKey', category='Input functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='getKeyBoundToCommand', return_types=['string'], arguments=[FunctionArgument(name='command', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='This function allow you get first key bound to command.', arguments={'command': 'command what you need check.'}, result='Returns a string of first key binded to current command.'), oop=None, url=FunctionUrl(url='/wiki/GetKeyBoundToCommand', name='getKeyBoundToCommand', category='Input functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='getKeyState', return_types=['bool'], arguments=[FunctionArgument(name='keyName', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description="This function determines if a certain key is pressed or not.\n'''Note:''' 'ralt' may trigger both 'ralt' and 'lctrl', this is due to AltGr", arguments={'keyName': 'The name of the key youre checking state of. See Key names.'}, result="Returns ''true'' if the specified key is pressed, ''false'' if it isn't or if an invalid key name is passed."), oop=None, url=FunctionUrl(url='/wiki/GetKeyState', name='getKeyState', category='Input functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='createLight', return_types=['light'], arguments=[FunctionArgument(name='lightType', argument_type='int', default_value=None, optional=False), FunctionArgument(name='posX', argument_type='float', default_value=None, optional=False), FunctionArgument(name='posY', argument_type='float', default_value=None, optional=False), FunctionArgument(name='posZ', argument_type='float', default_value=None, optional=False), FunctionArgument(name='radius', argument_type='float', default_value='3', optional=True), FunctionArgument(name='r', argument_type='int', default_value='255', optional=True), FunctionArgument(name='g', argument_type='int', default_value='0', optional=True), FunctionArgument(name='b', argument_type='int', default_value='0', optional=True), FunctionArgument(name='dirX', argument_type='float', default_value='0', optional=True), FunctionArgument(name='dirY', argument_type='float', default_value='0', optional=True), FunctionArgument(name='dirZ', argument_type='float', default_value='0', optional=True), FunctionArgument(name='createsShadow', argument_type='bool', default_value='false', optional=True)]), docs=FunctionDoc(description="* The direction of the light only has any effect if the light type is ''spot light''.\n* One light will only apply illumination effects to [[Element/Ped|peds]], [[Element/Player|players]], wheels and number plates (like a emergency vehicle siren light does).\n* Two or more lights will apply illumination effects to everything (excluding objects) that is in range of, at least, two of them.\n}}", arguments={'lightType': 'An integer representing the type of light to create.\n{{Light_types}}', 'posX': 'A floating point number representing the X coordinate on the map.', 'posY': 'A floating point number representing the Y coordinate on the map.', 'posZ': 'A floating point number representing the Z coordinate on the map.\n{{OptionalArg}} ', 'radius': 'A floating point number representing the radius of the light.', 'r': 'An integer number representing the amount of red to use in the colouring of the light (0 - 255).', 'g': 'An integer number representing the amount of green to use in the colouring of the light (0 - 255).', 'b': 'An integer number representing the amount of blue to use in the colouring of the light (0 - 255).', 'dirX': 'A floating point number representing the light directions X coordinate on the map.', 'dirY': 'A floating point number representing the light directions Y coordinate on the map.', 'dirZ': 'A floating point number representing the light directions Z coordinate on the map.', 'createsShadow': 'A boolean representing whether or not does the light cast shadows.'}, result=''), oop=None, url=FunctionUrl(url='/wiki/CreateLight', name='createLight', category='Light functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='getLightColor', return_types=['int', 'int', 'int'], arguments=[FunctionArgument(name='theLight', argument_type='light', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns the color for a [[Element/Light|light]] element.\n}}', arguments={'theLight': 'The Element/Light|light that you wish to retrieve the color of.'}, result=''), oop=FunctionOOP(class_name='light', method_name='getColor', field='color'), url=FunctionUrl(url='/wiki/GetLightColor', name='getLightColor', category='Light functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='getLightDirection', return_types=['float', 'float', 'float'], arguments=[FunctionArgument(name='theLight', argument_type='light', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns the direction for a [[Element/Light|light]] element.\n}}', arguments={'theLight': 'The Element/Light|light that you wish to retrieve the direction of.'}, result=''), oop=FunctionOOP(class_name='light', method_name='getDirection', field='direction'), url=FunctionUrl(url='/wiki/GetLightDirection', name='getLightDirection', category='Light functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='getLightRadius', return_types=['float'], arguments=[FunctionArgument(name='theLight', argument_type='light', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns the radius for a [[Element/Light|light]] element.\n}}', arguments={'theLight': 'The Element/Light|light that you wish to retrieve the radius of.'}, result=''), oop=FunctionOOP(class_name='light', method_name='getRadius', field='radius'), url=FunctionUrl(url='/wiki/GetLightRadius', name='getLightRadius', category='Light functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='getLightType', return_types=['int'], arguments=[FunctionArgument(name='theLight', argument_type='light', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns the type for a [[Element/Light|light]] element.\n}}', arguments={'theLight': 'The Element/Light|light that you wish to retrieve the type of.'}, result=''), oop=FunctionOOP(class_name='light', method_name="getType}}\n\n===Required Arguments=== \n*'''theLight:''' The [[Element/Light", field="light]] that you wish to retrieve the type of.\n\n=== Returns ===\nReturns an [[int]] containing the type of the specified light, ''false'' if invalid arguments were passed.\n\n"), url=FunctionUrl(url='/wiki/GetLightType', name='getLightType', category='Light functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='setLightColor', return_types=['bool'], arguments=[FunctionArgument(name='theLight', argument_type='light', default_value=None, optional=False), FunctionArgument(name='r', argument_type='float', default_value=None, optional=False), FunctionArgument(name='g', argument_type='float', default_value=None, optional=False), FunctionArgument(name='b', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='This function sets the color for a [[Element/Light|light]] element.', arguments={'theLight': 'The Element/Light|light that you wish to set the color of.'}, result=''), oop=FunctionOOP(class_name='light', method_name='setColor', field='color'), url=FunctionUrl(url='/wiki/SetLightColor', name='setLightColor', category='Light functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='setLightDirection', return_types=['bool'], arguments=[FunctionArgument(name='theLight', argument_type='light', default_value=None, optional=False), FunctionArgument(name='x', argument_type='float', default_value=None, optional=False), FunctionArgument(name='y', argument_type='float', default_value=None, optional=False), FunctionArgument(name='z', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='This function sets the direction for a [[Element/Light|light]] element.', arguments={'theLight': 'The Element/Light|light that you wish to set the direction of.'}, result=''), oop=FunctionOOP(class_name='light', method_name='setDirection', field='direction'), url=FunctionUrl(url='/wiki/SetLightDirection', name='setLightDirection', category='Light functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='setLightRadius', return_types=['bool'], arguments=[FunctionArgument(name='theLight', argument_type='light', default_value=None, optional=False), FunctionArgument(name='radius', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='This function sets the radius for a [[Element/Light|light]] element.\n}}', arguments={'theLight': 'The Element/Light|light that you wish to set the radius of.'}, result=''), oop=FunctionOOP(class_name='light', method_name='setRadius', field='radius'), url=FunctionUrl(url='/wiki/SetLightRadius', name='setLightRadius', category='Light functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='breakObject', return_types=['bool'], arguments=[FunctionArgument(name='theObject', argument_type='object', default_value=None, optional=False)]), docs=FunctionDoc(description='This function breaks a specific object.', arguments={'theObject': 'an object element'}, result="* ''true'' if the object was successfully broken.\n* ''false'' if the object is not breakable, or a wrong object was given."), oop=None, url=FunctionUrl(url='/wiki/BreakObject', name='breakObject', category='Object functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='getObjectMass', return_types=['float'], arguments=[FunctionArgument(name='theObject', argument_type='object', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns the mass of a specified object.\n}}', arguments={'theObject': 'the object whose mass you want to get.'}, result="* A [[float]] representing the mass of the object.\n* ''false'' if invalid arguments were passed.\n* ''-1'' if object was never streamed in."), oop=FunctionOOP(class_name='object', method_name='getMass', field='mass'), url=FunctionUrl(url='/wiki/GetObjectMass', name='getObjectMass', category='Object functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='isObjectBreakable', return_types=['bool'], arguments=[FunctionArgument(name='theObject', argument_type='object', default_value=None, optional=False)]), docs=FunctionDoc(description='This function checks if an object / model ID is breakable.', arguments={'theObject / modelId': 'The object / model ID thats being checked.'}, result="* ''true'' if the object is breakable.\n* ''false'' if the object is not breakable."), oop=FunctionOOP(class_name='object', method_name='isBreakable', field='breakable'), url=FunctionUrl(url='/wiki/IsObjectBreakable', name='isObjectBreakable', category='Object functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='respawnObject', return_types=['bool'], arguments=[FunctionArgument(name='theObject', argument_type='object', default_value=None, optional=False)]), docs=FunctionDoc(description='This function respawns a specific object.', arguments={'theObject': 'an object element'}, result="* ''true'' if the object was sucessfully respawned.\n* ''false'' if the object is not breakable, or a wrong object was given."), oop=None, url=FunctionUrl(url='/wiki/RespawnObject', name='respawnObject', category='Object functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='setObjectBreakable', return_types=['bool'], arguments=[FunctionArgument(name='theObject', argument_type='object', default_value=None, optional=False), FunctionArgument(name='breakable', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description='This function sets an object to be breakable/unbreakable.', arguments={'object': 'the object thats being set.', 'breakable': 'a boolean whether the object is breakable (true) or unbreakable (false).'}, result="* ''true'' if the object is now breakable.\n* ''false'' if it can't or if invalid arguments are passed. "), oop=FunctionOOP(class_name='object', method_name='setBreakable', field='breakable'), url=FunctionUrl(url='/wiki/SetObjectBreakable', name='setObjectBreakable', category='Object functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='setObjectMass', return_types=['bool'], arguments=[FunctionArgument(name='theObject', argument_type='object', default_value=None, optional=False), FunctionArgument(name='mass', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='This function sets the mass of a specified object. Changing the mass leads to a different movement behavior for especially dynamic objects.\n}}', arguments={'theObject': 'the object whose mass will be set.', 'mass': 'the new mass.'}, result="* ''true'' if the new mass value has been.\n* ''false'' otherwise."), oop=FunctionOOP(class_name='object', method_name='setMass', field='mass'), url=FunctionUrl(url='/wiki/SetObjectMass', name='setObjectMass', category='Object functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='toggleObjectRespawn', return_types=['bool'], arguments=[FunctionArgument(name='theObject', argument_type='object', default_value=None, optional=False), FunctionArgument(name='respawn', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is used to toggle if an object should respawn after it got destroyed\n}}', arguments={'theObject': ': the object you want to toggle the respawn from', 'respawn ': ': a bool denoting whether we want to enable (true) or disable (false) respawning'}, result="* ''true'' when the it was changed successfully.\n* ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/ToggleObjectRespawn', name='toggleObjectRespawn', category='Object functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='getObjectProperty', return_types=['mixed'], arguments=[FunctionArgument(name='theObject', argument_type='object', default_value=None, optional=False), FunctionArgument(name='property', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'theObject': ': the object you wish to get a property of.', 'property': ': the property you want to get the value of:\n<div style="padding-left:20px">\n* "all" - \'\'table\'\' with values of all properties below (OOP method: \'\'getProperties\'\')\n</div>\n{{Object Properties}}'}, result="On success: [[table]] for '''all''', 3 [[float|floats]] for '''center_of_mass''' or [[float]] for other properties\nOn failure: ''false''"), oop=FunctionOOP(class_name='object', method_name='getProperty', field=None), url=FunctionUrl(url='/wiki/GetObjectProperty', name='getObjectProperty', category='Object functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='setObjectProperty', return_types=['bool'], arguments=[FunctionArgument(name='theObject', argument_type='object', default_value=None, optional=False), FunctionArgument(name='property', argument_type='string', default_value=None, optional=False), FunctionArgument(name='value', argument_type='var', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'theObject': ': the object you wish to change a property of.', 'property': ': the property you want to set the value of:\n{{Object Properties}}', 'value': ': the new value for the property.'}, result="Returns ''true'' if the property was set successfully, ''false'' otherwise."), oop=FunctionOOP(class_name='object', method_name='setProperty', field=None), url=FunctionUrl(url='/wiki/SetObjectProperty', name='setObjectProperty', category='Object functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='isObjectMoving', return_types=['bool'], arguments=[FunctionArgument(name='theObject', argument_type='object', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'theObject': 'The object'}, result="* ''true'' if the object is moving.\n* ''false'' if the object is not moving."), oop=None, url=FunctionUrl(url='/wiki/IsObjectMoving', name='isObjectMoving', category='Object functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='isChatVisible', return_types=['bool'], arguments=[]), docs=FunctionDoc(description="This function checks if player's chat is visible.", arguments={}, result="Returns ''true'' if the chat is visible, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/IsChatVisible', name='isChatVisible', category='Output functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='canPedBeKnockedOffBike', return_types=['bool'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False)]), docs=FunctionDoc(description='This function checks if the given ped can fall off bikes.', arguments={'thePed': 'the ped you want to check.'}, result="Returns ''true'' if the ped can be knocked off bikes, ''false'' if he cannot or an invalid element was passed."), oop=FunctionOOP(class_name='ped', method_name='canBeKnockedOffBike', field=None), url=FunctionUrl(url='/wiki/CanPedBeKnockedOffBike', name='canPedBeKnockedOffBike', category='Ped functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='getPedAnalogControlState', return_types=['float'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False), FunctionArgument(name='controlName', argument_type='string', default_value=None, optional=False), FunctionArgument(name='rawValue', argument_type='bool', default_value=None, optional=True)]), docs=FunctionDoc(description='This function retrieves the analog control state of a ped, as set by [[setPedAnalogControlState]].', arguments={'thePed': 'The ped you wish to retrieve the control state of.', 'controlName': 'The control. See control names for a list of possible controls.\n{{New feature/item|3.0158|1.5.7|20383|', 'rawValue': 'A bool indicating if it should return the raw player input value (will always return script value for non-player peds).\n}}'}, result='Returns a float between 0 ( full release ) and 1 ( full push ) indicating the amount the control is pushed.\n<section name="Client-side example" class="client" show="true">\n<syntaxhighlight lang="lua">\nx, y, z = getElementPosition(localPlayer)\nrotX, rotY, rotZ = getElementRotation(localPlayer)\nCJ = createPed(0, x, y, z)\nCJ2 = createPed(0, x, y, z)\ncopcar = createVehicle(597, x, y+5, z+2)\ncopcar2 = createVehicle(597, x+2, y+10, z+4)\nwarpPedIntoVehicle(CJ2, copcar2, 0)\nwarpPedIntoVehicle(CJ, copcar, 0)\nfunction onGetCJAnalogControlState()\nsetPedAnalogControlState(CJ, "accelerate", 0.90)\nif getPedAnalogControlState(CJ, "accelerate", 0.90) then\nsetPedAnalogControlState(CJ2, "brake_reverse", 0.90)\nend\nend\naddEventHandler("onClientRender", getRootElement(), onGetCJAnalogControlState)\n</syntaxhighlight>\n</section>\n<br /><br />\n* This example was created by \'\'\'Hydra\'\'\'.'), oop=None, url=FunctionUrl(url='/wiki/GetPedAnalogControlState', name='getPedAnalogControlState', category='Ped functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='getPedAnimation', return_types=['string', 'string'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False)]), docs=FunctionDoc(description='Gets the animation of a player or ped that was set using [[setPedAnimation]].', arguments={'thePed': 'the player or ped you want to get the animations|animation of.'}, result='{{Deprecated items|3.0158|1.5.7|Returns two [[string|strings]]: the first is the name of the block, the second is the name of the animation. Returns \'\'false\'\' if there was an error or if the ped is not doing an animation.|20450}}\n{{New feature/item|3.0158|1.5.7|20450|The function returns 9 values in the same order as required by [[setPedAnimation]]:\n<syntaxhighlight lang="lua">string anim, string block, int time, bool loop, bool updatePosition, bool interruptable, bool freezeLastFrame, int blendTime, bool restoreTaskOnAnimEnd</syntaxhighlight>\n}}'), oop=FunctionOOP(class_name='ped', method_name='getAnimation', field=None), url=FunctionUrl(url='/wiki/GetPedAnimation', name='getPedAnimation', category='Ped functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='getPedBonePosition', return_types=['float', 'float', 'float'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False), FunctionArgument(name='bone', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='Returns the 3D world coordinates of a specific bone of a given ped.', arguments={'thePed': 'the ped you want to inspect.', 'bone': 'the number of the bone to get the position of.\n[[Image:Bones.jpg|thumb|Bone numbers]]\n<div style="border: 3px red solid; margin-bottom:3px; padding-left:5px;">', '1': 'BONE_PELVIS1', '2': 'BONE_PELVIS', '3': 'BONE_SPINE1', '4': 'BONE_UPPERTORSO', '5': 'BONE_NECK', '6': 'BONE_HEAD2', '7': 'BONE_HEAD1', '8': 'BONE_HEAD', '21': 'BONE_RIGHTUPPERTORSO', '22': 'BONE_RIGHTSHOULDER', '23': 'BONE_RIGHTELBOW', '24': 'BONE_RIGHTWRIST', '25': 'BONE_RIGHTHAND', '26': 'BONE_RIGHTTHUMB', '31': 'BONE_LEFTUPPERTORSO', '32': 'BONE_LEFTSHOULDER', '33': 'BONE_LEFTELBOW', '34': 'BONE_LEFTWRIST', '35': 'BONE_LEFTHAND', '36': 'BONE_LEFTTHUMB', '41': 'BONE_LEFTHIP', '42': 'BONE_LEFTKNEE', '43': 'BONE_LEFTANKLE', '44': 'BONE_LEFTFOOT', '51': 'BONE_RIGHTHIP', '52': 'BONE_RIGHTKNEE', '53': 'BONE_RIGHTANKLE', '54': 'BONE_RIGHTFOOT\n</div>'}, result='Returns the x, y, z world position of the bone.'), oop=FunctionOOP(class_name='ped', method_name='getBonePosition', field=None), url=FunctionUrl(url='/wiki/GetPedBonePosition', name='getPedBonePosition', category='Ped functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='getPedCameraRotation', return_types=['float'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False)]), docs=FunctionDoc(description='This function gets the current camera rotation of a [[ped]].', arguments={'thePed': 'the ped to retrieve the camera rotation of.'}, result="Returns the camera rotation of the [[ped]] in degrees if successful. Returns ''false'' if an invalid element was passed."), oop=FunctionOOP(class_name='ped', method_name='getCameraRotation', field='cameraRotation'), url=FunctionUrl(url='/wiki/GetPedCameraRotation', name='getPedCameraRotation', category='Ped functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='getPedControlState', return_types=['bool'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False), FunctionArgument(name='control', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='Checks whether a ped or the localplayer has a certain control pressed.', arguments={'thePed': 'the ped you want to check.', 'control': 'the control to get the status of. See control names for a list of valid names.'}, result="Returns ''true'' if the ped is pressing the specified control, ''false'' if not or an invalid argument was passed."), oop=None, url=FunctionUrl(url='/wiki/GetPedControlState', name='getPedControlState', category='Ped functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='getPedMoveState', return_types=['string'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns the current move state for the specified [[ped]].', arguments={'thePed': 'The ped whose move state you want to know'}, result="Returns a [[string]] indicating the ped's move state, or ''false'' if the ped is not streamed in, the movement type is unknown, the ped is in a vehicle or the ped is invalid.\n{{Ped move states}}"), oop=None, url=FunctionUrl(url='/wiki/GetPedMoveState', name='getPedMoveState', category='Ped functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='getPedOxygenLevel', return_types=['float'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns the current oxygen level of the specified [[ped]].', arguments={'thePed': 'The ped whose oxygen level you want to check'}, result="A ''float'' with the oxygen level, ''false'' if an invalid ped was given."), oop=FunctionOOP(class_name='ped', method_name='getOxygenLevel', field='oxygenLevel'), url=FunctionUrl(url='/wiki/GetPedOxygenLevel', name='getPedOxygenLevel', category='Ped functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='getPedSimplestTask', return_types=['string'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False)]), docs=FunctionDoc(description="This function is used to get the name of a specified ped's current simplest [[task]].<br>", arguments={'thePed': ': The ped whose task you want to retrieve.'}, result="Returns a string representing the name of the ped's simplest, active [[task]]."), oop=None, url=FunctionUrl(url='/wiki/GetPedSimplestTask', name='getPedSimplestTask', category='Ped functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='getPedTargetCollision', return_types=['float', 'float', 'float'], arguments=[FunctionArgument(name='targetingPed', argument_type='ped', default_value=None, optional=False)]), docs=FunctionDoc(description="This function allows retrieval of where a ped's target is blocked. It will only be blocked if there is an obstacle within a ped's target range.", arguments={'targetingPed': 'This is the ped whose target collision you wish to retrieve'}, result="Returns three floats, ''x'',''y'',''z'', representing the position where the ped's target collides, or ''false'' if it was unsuccessful."), oop=None, url=FunctionUrl(url='/wiki/GetPedTargetCollision', name='getPedTargetCollision', category='Ped functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='getPedTargetEnd', return_types=['float', 'float', 'float'], arguments=[FunctionArgument(name='targetingPed', argument_type='ped', default_value=None, optional=False)]), docs=FunctionDoc(description="This function allows retrieval of the position where a ped's target range ends, when he is aiming with a weapon.", arguments={'targetingPed': 'the ped who is targeting whose target end you wish to retrieve'}, result="Returns three floats, ''x'',''y'',''z'', representing the position where the ped's target ends according to his range, or ''false'' if it was unsuccessful."), oop=None, url=FunctionUrl(url='/wiki/GetPedTargetEnd', name='getPedTargetEnd', category='Ped functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='getPedTargetStart', return_types=['float', 'float', 'float'], arguments=[FunctionArgument(name='targetingPed', argument_type='ped', default_value=None, optional=False)]), docs=FunctionDoc(description="This function allows retrieval of the position a ped's target range begins, when he is aiming with a weapon.", arguments={'targetingPed': 'The ped whose target start you wish to retrieve'}, result="Returns three floats, x,y,z, representing the position where the ped's target starts, or ''false'' if it was unsuccessful."), oop=None, url=FunctionUrl(url='/wiki/GetPedTargetStart', name='getPedTargetStart', category='Ped functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='getPedTask', return_types=['string', 'string', 'string', 'string'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False), FunctionArgument(name='priority', argument_type='string', default_value=None, optional=False), FunctionArgument(name='taskType', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is used to get any simple or complex [[task]] of a certain type for a ped.\nIt can provide feedback on all tasks relating to a ped. For example, while jumping, [[getPedSimplestTask]] will return TASK_SIMPLE_IN_AIR. If you wanted to know specifically if the player has jumped, you would use this function. If you did you will discover that while jumping Primary task 3 is TASK_COMPLEX_JUMP.', arguments={'thePed': ': The ped whose task you want to retrieve.', 'priority': ': A string determining which set of tasks you want to retrieve it from. This must be either primary or secondary.', 'taskType': ': An integer value representing the task type (or slot) you want to get the task from. Types can be:', 'PRIMARY TASKS': '', '0': 'TASK_SECONDARY_ATTACK', '1': 'TASK_SECONDARY_DUCK', '2': 'TASK_SECONDARY_SAY', '3': 'TASK_SECONDARY_FACIAL_COMPLEX', '4': 'TASK_SECONDARY_PARTIAL_ANIM', 'SECONDARY TASKS': '', '5': 'TASK_SECONDARY_IK'}, result="Returns the name of the most complex task. See [[list of player tasks]] for valid strings. Returns ''false'' if invalid arguments are specified or if there is no task of the type specified.\n<br>\n{{New feature|3.0110|1.1|\nReturns between 1 and 4 strings. The first string contains the name of the most complex task, with simpler sub-tasks being named in the following strings. See [[list of player tasks]] for valid strings. Returns ''false'' if invalid arguments are specified or if there is no task of the type specified.\n}}"), oop=FunctionOOP(class_name='ped', method_name='getTask}}\n===Required Arguments===\n*\'\'\'thePed\'\'\': The [[ped]] whose task you want to retrieve.\n*\'\'\'priority\'\'\': A string determining which set of tasks you want to retrieve it from. This must be either "primary" or "secondary".\n*\'\'\'taskType\'\'\': An integer value representing the task type (or slot) you want to get the task from. Types can be:\n**\'\'\'PRIMARY TASKS\'\'\'\n***\'\'\'0:\'\'\' TASK_PHYSICAL_RESPONSE\n***\'\'\'1:\'\'\' TASK_EVENT_RESPONSE_TEMP\n***\'\'\'2:\'\'\' TASK_EVENT_RESPONSE_NONTEMP\n***\'\'\'3:\'\'\' TASK_PRIMARY\n***\'\'\'4:\'\'\' TASK_DEFAULT\n**\'\'\'SECONDARY TASKS\'\'\'\n***\'\'\'0:\'\'\' TASK_SECONDARY_ATTACK\n***\'\'\'1:\'\'\' TASK_SECONDARY_DUCK\n***\'\'\'2:\'\'\' TASK_SECONDARY_SAY\n***\'\'\'3:\'\'\' TASK_SECONDARY_FACIAL_COMPLEX\n***\'\'\'4:\'\'\' TASK_SECONDARY_PARTIAL_ANIM\n***\'\'\'5:\'\'\' TASK_SECONDARY_IK\n\n===Returns===\nReturns the name of the most complex task. See [[list of player tasks]] for valid strings. Returns \'\'false\'\' if invalid arguments are specified or if there is no task of the type specified.\n<br>\n{{New feature', field='3.0110'), url=FunctionUrl(url='/wiki/GetPedTask', name='getPedTask', category='Ped functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='getPedVoice', return_types=['string', 'string'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False)]), docs=FunctionDoc(description='Gets the current voice of a ped.', arguments={'thePed': 'the ped to get the voice of.'}, result="If successul, returns the current voice type name and the voice name of the ped (see [[ped voices]] for possible names). Returns ''false'' in case of failure."), oop=None, url=FunctionUrl(url='/wiki/GetPedVoice', name='getPedVoice', category='Ped functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='getPedWeaponMuzzlePosition', return_types=['float', 'float', 'float'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False)]), docs=FunctionDoc(description='Returns the world position of the muzzle of the weapon that a ped is currently carrying. The weapon muzzle is the end of the gun barrel where the bullets/rockets/... come out.\nThe position may not be accurate if the ped is off screen.', arguments={'thePed': 'the ped whose weapon muzzle position to retrieve.'}, result="If successful, returns the x/y/z coordinates of the weapon muzzle. Returns ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/GetPedWeaponMuzzlePosition', name='getPedWeaponMuzzlePosition', category='Ped functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='givePedWeapon', return_types=['bool'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False), FunctionArgument(name='weapon', argument_type='int', default_value=None, optional=False), FunctionArgument(name='ammo', argument_type='int', default_value='30', optional=True), FunctionArgument(name='setAsCurrent', argument_type='bool', default_value='false', optional=True)]), docs=FunctionDoc(description="This function gives the specified weapon to the specified ped. This function can't be used on players, use [[giveWeapon]] for that.\nThis function is mainly useful for client side created peds however you can use it on a server side ped, though note that the weapon wouldn't be synced between clients unless your script gives the weapon to the ped on every client.\nThere is an optional argument to specify ammunition and whether to set as the current weapon. If you don't specify an ammo value it will give 30 ammo by default and for a melee weapon you can specify just 1 or above.\n}}\n*When setting ammo for [[Weapon|weapons in slot]] 0,1,10,11 or 12 the maximum ammo is 1\n*When setting ammo for [[Weapon|weapons in slot]] 3,4,5 the ammo is added\n*When setting ammo for [[Weapon|weapons in slot]] 2,6,7,8,9 and the slot weapon is changing, the ammo is replaced\n}}", arguments={'thePed': 'A ped element.', 'weapon': 'A whole number integer that refers to a Weapon ID. Click Weapon|here for a list of possible weapon IDs.\n{{OptionalArg}}', 'ammo': 'A whole number integer serving as the ammo amount for the given weapon. For weapons that do not require ammo, such as melee, this should be at least 1.', 'setAsCurrent': 'A boolean value determining whether or not the weapon will be set as the peds currently selected weapon.'}, result="Returns ''true'' if weapon was successfully given to the ped, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/GivePedWeapon', name='givePedWeapon', category='Ped functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='isPedDoingTask', return_types=['bool'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False), FunctionArgument(name='taskName', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='This function checks if the specified ped is carrying out a certain [[List of player tasks|task]].', arguments={'thePed': ': The ped you want to check.', 'taskName': ': A string containing the name of the List of player tasks|task youre checking for.'}, result="Returns ''true'' if the player is currently doing the task, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/IsPedDoingTask', name='isPedDoingTask', category='Ped functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='isPedReloadingWeapon', return_types=['bool'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is used to determine whether or not a ped is currently reloading their weapon. Useful to stop certain quick reload exploits.}}', arguments={'thePed': 'The ped you are checking.'}, result="Returns ''true'' if the ped is currently reloading a weapon, ''false'' otherwise."), oop=FunctionOOP(class_name='ped', method_name='isReloadingWeapon', field="reloadingWeapon}}\n\n===Required Arguments===\n*'''thePed:''' The [[ped]] you are checking.\n\n===Returns===\nReturns ''true'' if the ped is currently reloading a weapon, ''false'' otherwise.\n\n"), url=FunctionUrl(url='/wiki/IsPedReloadingWeapon', name='isPedReloadingWeapon', category='Ped functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='isPedTargetingMarkerEnabled', return_types=['bool'], arguments=[]), docs=FunctionDoc(description='[[Image:Targetingmarker.png|thumb|200px|Targeting marker]]\nThis function checks whether health target markers are drawn as set by [[setPedTargetingMarkerEnabled]] or not.', arguments={}, result="Returns ''true'' if the health target markers are enabled, ''false'' if not."), oop=None, url=FunctionUrl(url='/wiki/IsPedTargetingMarkerEnabled', name='isPedTargetingMarkerEnabled', category='Ped functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='setAnalogControlState', return_types=['bool'], arguments=[FunctionArgument(name='control', argument_type='string', default_value=None, optional=False), FunctionArgument(name='state', argument_type='float', default_value=None, optional=True), FunctionArgument(name='forceOverrideNextFrame', argument_type='bool', default_value='false', optional=True)]), docs=FunctionDoc(description='This sets the analog control state of a control for the local player.\nTo change the analog controls for a [[ped]], please use [[setPedAnalogControlState]].', arguments={'control': 'The control that you want to set the state of. See control names for a list of possible controls.', 'state': "A float between 0 and 1 indicating the amount the control is pressed. If no value is provided, the analog control is removed.\n<noinclude>{{New feature/item|3.0300|1.5.8|20756|\n*'''forceOverrideNextFrame: ''' A [[bool]] indicating if the player input should force fully overriden for the next frame.\n}}</noinclude>"}, result="Returns ''true'' if the control state was successfully set, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/SetAnalogControlState', name='setAnalogControlState', category='Ped functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='setPedAimTarget', return_types=['bool'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False), FunctionArgument(name='x', argument_type='float', default_value=None, optional=False), FunctionArgument(name='y', argument_type='float', default_value=None, optional=False), FunctionArgument(name='z', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description="This function allows you to set a ped's aim target to a specific point. If a ped is within a certain range defined by [[getPedTargetStart]] and [[getPedTargetEnd]] he will be targeted and shot. \n''Note: If you wish to make a ped shoot you must use this in conjunction with an equipped weapon and [[setPedControlState]].''", arguments={'thePed': 'The ped whose target you want to set. Only peds and remote players will work; this function has no effect on the local player.', 'x': 'The x coordinate of the aim target point.', 'y': 'The y coordinate of the aim target point.', 'z': 'The z coordinate of the aim target point.'}, result="Returns ''true'' if the function was successful, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/SetPedAimTarget', name='setPedAimTarget', category='Ped functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='setPedAnalogControlState', return_types=['bool'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False), FunctionArgument(name='control', argument_type='string', default_value=None, optional=False), FunctionArgument(name='state', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description="Sets an analog state of a specified [[ped]]'s control, as if they pressed or released it.\nThis function only works on [[ped]]s, to change the analog control state for a player, please use [[setAnalogControlState]].", arguments={'thePed': 'The ped you wish to set the control state of.', 'control': 'The control that you want to set the state of. See control names for a list of possible controls.', 'state': 'A float between 0 and 1 indicating the amount the control is pressed.'}, result="Returns ''true'' if the control state was successfully set, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/SetPedAnalogControlState', name='setPedAnalogControlState', category='Ped functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='setPedCameraRotation', return_types=['bool'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False), FunctionArgument(name='cameraRotation', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description="This function sets the camera rotation of a ped, e.g. where its camera will look at. Don't confuse this with [[getCameraMatrix]], because that function is designed for fixed (scripted) camera moves.", arguments={'thePed': 'The ped whose camera rotation is to be changed.', 'cameraRotation': 'The new direction that the ped will walk if you set their forwards control state. If the ped is the local player, it will also change where his camera is looking at if it isnt fixed (i.e. camera target is the local player).'}, result="Returns ''true'' if the camera rotation was changed, ''false'' otherwise."), oop=FunctionOOP(class_name='ped', method_name='setCameraRotation', field='cameraRotation'), url=FunctionUrl(url='/wiki/SetPedCameraRotation', name='setPedCameraRotation', category='Ped functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='setPedCanBeKnockedOffBike', return_types=['bool'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False), FunctionArgument(name='canBeKnockedOffBike', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description='This function controls if a ped can fall of his bike by accident - namely by banging into a wall.', arguments={'thePed': 'the ped whose knockoffstatus is being changed', 'canBeKnockedOffBike': 'true or false'}, result=''), oop=FunctionOOP(class_name='ped', method_name='setCanBeKnockedOffBike', field=None), url=FunctionUrl(url='/wiki/SetPedCanBeKnockedOffBike', name='setPedCanBeKnockedOffBike', category='Ped functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='setPedControlState', return_types=['bool'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False), FunctionArgument(name='control', argument_type='string', default_value=None, optional=False), FunctionArgument(name='state', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description='This function makes a [[ped]] or [[player]] press or release a certain control.', arguments={'thePed': 'the ped you want to press or release a control.', 'control': 'the name of the control of which to change the state. See control names for a list of valid names.', 'state': 'the new control state. true means pressed, false is released.'}, result="Returns ''true'' if successful, ''false'' if otherwise."), oop=None, url=FunctionUrl(url='/wiki/SetPedControlState', name='setPedControlState', category='Ped functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='setPedEnterVehicle', return_types=['bool'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False), FunctionArgument(name='theVehicle', argument_type='vehicle', default_value='nil', optional=True), FunctionArgument(name='passenger', argument_type='bool', default_value='false', optional=True)]), docs=FunctionDoc(description='', arguments={'thePed': "The player or ped to enter the vehicle.\n**''Note: The player must be the local player.''\n**''Note: The ped must be synced by the client. Use [[isElementSyncer]] clientside to check if the client is syncing. Use [[setElementSyncer]] serverside to change the syncer manually.''", 'vehicle': 'The vehicle to enter. If no vehicle is set, the ped will enter the nearest vehicle within 20 m.', 'passenger': 'If set to true, the ped will enter as passenger in the nearest available seat, otherwise he will enter as driver.'}, result="Returns ''true'' if the function was successful, ''false'' otherwise.\nWhen this function returns ''true'', the client will ask server for permission to enter a vehicle. Actually entering can still fail in the following cases\n*The function is used on a ped, but another client is not on version '''1.5.8 r20740''' or newer.\n*Another player or ped is already entering, exiting or jacking the same vehicle and seat.\n*Movement input or damage can interrupt the task. Use [[getPedTask]] to monitor what the ped is doing.\nThis function returns ''false'' in the following cases\n*Invalid arguments were parsed.\n*The function is used on a ped, but the server is not on version '''1.5.8 r20740''' or newer.\n*Time passed since last enter/exit for this ped is less than 1500 ms.\n*[[onClientVehicleStartEnter]] was cancelled by a script.\n*The ped has an active TASK_PRIMARY [[task]]. Use [[getPedTask]] to monitor what the ped is doing."), oop=None, url=FunctionUrl(url='/wiki/SetPedEnterVehicle', name='setPedEnterVehicle', category='Ped functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='setPedExitVehicle', return_types=['bool'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'thePed': 'The player or ped to exit the vehicle.'}, result="Returns ''true'' if the function was successful, ''false'' otherwise.\nWhen this function returns ''true'', the client will ask server for permission to exit a vehicle. Exiting can still fail in the following cases\n*The function is used on a ped, but another client is not on version '''1.5.8 r20740''' or newer.\nThis function returns ''false'' in the following cases\n*Invalid arguments were parsed.\n*The function is used on a ped but the server is not on version '''1.5.8 r20740''' or newer.\n*Time passed since last enter/exit for this ped is less than 1500 ms.\n*The ped is getting jacked."), oop=None, url=FunctionUrl(url='/wiki/SetPedExitVehicle', name='setPedExitVehicle', category='Ped functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='setPedFootBloodEnabled', return_types=['bool'], arguments=[FunctionArgument(name='thePlayer', argument_type='element', default_value=None, optional=False), FunctionArgument(name='enabled', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description='This function makes a players foot prints bloody.', arguments={'thePlayer': 'The player to give bloody foot prints to.', 'enabled': 'Boolean specifying whether or not to have bloody feet.'}, result="Returns ''true'' if changing the players bloody feet status worked."), oop=None, url=FunctionUrl(url='/wiki/SetPedFootBloodEnabled', name='setPedFootBloodEnabled', category='Ped functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='isPedFootBloodEnabled', return_types=['bool'], arguments=[FunctionArgument(name='thePlayer', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='This function checks if player feets are bleeding.', arguments={'thePlayer': 'The player to give bloody foot prints to.'}, result="Returns ''true'' if feets are bleeding, '''false''' otherwise"), oop=None, url=FunctionUrl(url='/wiki/IsPedFootBloodEnabled', name='isPedFootBloodEnabled', category='Ped functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='setPedLookAt', return_types=['bool'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False), FunctionArgument(name='x', argument_type='float', default_value=None, optional=False), FunctionArgument(name='y', argument_type='float', default_value=None, optional=False), FunctionArgument(name='z', argument_type='float', default_value=None, optional=False), FunctionArgument(name='time', argument_type='int', default_value='3000 [', optional=True), FunctionArgument(name='blend', argument_type='int', default_value='1000', optional=True), FunctionArgument(name='target', argument_type='element', default_value='nil', optional=True)]), docs=FunctionDoc(description='Makes a ped turn his head and look at a specific world position or element.', arguments={'thePed': 'the ped to change the lookat of.', 'x': 'the x coordinate of the world position to look at.', 'y': 'the y coordinate of the world position to look at.', 'z': 'the z coordinate of the world position to look at.', 'time': 'the time, in milliseconds, during which the ped will look at the target. Once this time has elapsed, he will look ahead again like before the function was applied. A time of 0 will immediately stop any lookat. A negative time will make the ped look at the target indefinitely.', 'blend': 'the time, in milliseconds, during which the look will blend.', 'target': 'if this argument is specified, the position arguments will be ignored and the peds gaze will follow the specified element instead. Can be a player, a vehicle, another ped etc.'}, result=''), oop=None, url=FunctionUrl(url='/wiki/SetPedLookAt', name='setPedLookAt', category='Ped functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='setPedOxygenLevel', return_types=['bool'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False), FunctionArgument(name='oxygen', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='This function allows you to set the oxygen level of a [[ped]].', arguments={'thePed': ': the ped whose oxygen level you want to modify.', 'oxygen': ': the amount of oxygen you want to set on the ped. Native values are from 0 to 1000. Each of the stamina (22) and underwater stamina (225) Template:Stats|stat maximum adds a bonus of 1500. So the maximum oxygen level is 4000.'}, result="Returns ''true'' if the oxygen level was changed succesfully. Returns ''false'' if an invalid ped and/or oxygen level was specified."), oop=FunctionOOP(class_name='ped', method_name='setOxygenLevel', field='oxygenLevel'), url=FunctionUrl(url='/wiki/SetPedOxygenLevel', name='setPedOxygenLevel', category='Ped functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='setPedTargetingMarkerEnabled', return_types=['bool'], arguments=[FunctionArgument(name='enabled', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description='[[Image:Targetingmarker.png|thumb|200px|Targeting marker]]\nThis function is used to toggle the health target marker on top of all pedestrians.', arguments={'enabled': 'A boolean denoting whether we want to enable (true) or disable (false) the markers.'}, result="Returns ''true'' if the markers were enabled, ''false'' if weren't or if invalid arguments are passed."), oop=None, url=FunctionUrl(url='/wiki/SetPedTargetingMarkerEnabled', name='setPedTargetingMarkerEnabled', category='Ped functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='setPedVoice', return_types=['bool'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False), FunctionArgument(name='voiceType', argument_type='string', default_value=None, optional=False), FunctionArgument(name='voiceName', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='Changes the voice of a ped.', arguments={'thePed': 'the ped whose voice to change.', 'voiceType': 'the voice type. See ped voices for possible types.', 'voiceName': 'the voice name within the specified type. See ped voices for possible voices.'}, result="Returns ''true'' when the voice was successfully set, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/SetPedVoice', name='setPedVoice', category='Ped functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='getLocalPlayer', return_types=['player'], arguments=[]), docs=FunctionDoc(description="This function gets the player element of the client running the current script. \nYou can use the predefined variable '''localPlayer''' instead of typing getLocalPlayer()\n}}", arguments={}, result='Returns the local [[player]] element.'), oop=None, url=FunctionUrl(url='/wiki/GetLocalPlayer', name='getLocalPlayer', category='Player functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='getPlayerMapBoundingBox', return_types=['int', 'int', 'int', 'int'], arguments=[]), docs=FunctionDoc(description='This function gets the GUI bounding box of the radar map texture.', arguments={}, result="* If the player's map is showing, it returns four integers: ''minX'', ''minY'', ''maxX'', ''maxY''.  These are '''absolute''' position coordinates of where the player's map is drawn on the screen.\n** ''minX, minY'' represent the world coordinates ''-3000, 3000'' (upper-left corner of the world map).\n** ''maxX, maxY'' represent the world coordinates ''3000, -3000'' (lower-right corner of the world map).\n** Negative values may be returned if these coordinates are off screen.\n* If the map is not showing, a ''false'' boolean value is returned."), oop=None, url=FunctionUrl(url='/wiki/GetPlayerMapBoundingBox', name='getPlayerMapBoundingBox', category='Player functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='isPlayerHudComponentVisible', return_types=['bool'], arguments=[FunctionArgument(name='component', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='This function can be used to check whether an hud component is visable or not.', arguments={'component': 'The component you wish to check. Valid values are:', 'ammo': 'The display showing how much ammo the player has in their weapon', 'area_name': 'The text that appears containing the name of the area a player has entered', 'armour': 'The display showing the players armor', 'breath': 'The display showing the players breath', 'clock': 'The display showing the in-game time', 'health': 'The display showing the players health', 'money': 'The display showing how much money the player has', 'radar': 'The bottom-left corner miniradar', 'vehicle_name': 'The text that appears containing the players vehicle name when the player enters a vehicle', 'weapon': 'The display showing the players weapon\n{{New feature/item|3.0110|1.1||', 'radio': 'The display showing the radio label', 'wanted': 'The display showing the players wanted level', 'crosshair': 'The weapon crosshair and sniper scope\n}}'}, result="Returns ''true'' if the component is visable, ''false'' if not."), oop=None, url=FunctionUrl(url='/wiki/IsPlayerHudComponentVisible', name='isPlayerHudComponentVisible', category='Player functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='isPlayerMapVisible', return_types=['bool'], arguments=[]), docs=FunctionDoc(description='[[Image:MTAsa_Default_Map.png|thumb|224px|Screenshot of the default map]]\nThis function checks if the local player has their map showing.', arguments={}, result="Returns ''true'' if the player has the map visible, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/IsPlayerMapVisible', name='isPlayerMapVisible', category='Player functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='resetBlurLevel', return_types=['bool'], arguments=[]), docs=FunctionDoc(description='Resets the motion blur level on the clients screen to default value (36).', arguments={}, result="Returns ''true'' if the blur level was reset successfully. Returns ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/ResetBlurLevel', name='resetBlurLevel', category='Player functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='createProjectile', return_types=['projectile'], arguments=[FunctionArgument(name='creator', argument_type='element', default_value=None, optional=False), FunctionArgument(name='weaponType', argument_type='int', default_value=None, optional=False), FunctionArgument(name='posX', argument_type='float', default_value=None, optional=True), FunctionArgument(name='posY', argument_type='float', default_value=None, optional=True), FunctionArgument(name='posZ', argument_type='float', default_value=None, optional=True), FunctionArgument(name='force', argument_type='float', default_value='1.0', optional=True), FunctionArgument(name='target', argument_type='element', default_value='nil', optional=True), FunctionArgument(name='rotX', argument_type='float', default_value=None, optional=True), FunctionArgument(name='rotY', argument_type='float', default_value=None, optional=True), FunctionArgument(name='rotZ', argument_type='float', default_value=None, optional=True), FunctionArgument(name='velX', argument_type='float', default_value=None, optional=True), FunctionArgument(name='velY', argument_type='float', default_value=None, optional=True), FunctionArgument(name='velZ', argument_type='float', default_value=None, optional=True), FunctionArgument(name='model', argument_type='int', default_value=None, optional=True)]), docs=FunctionDoc(description="This function creates a projectile of the specified type on the specified coordinates.\n*'''Model''' argument is not synchronized between clients. Clients differs from local player see always standard projectile model.\n*'''Target''' argument can only be defined as a player or another projectile.\n}}", arguments={'creator': 'The element representing creator of the projectile. In case you want the projectile to be synced for everybody creator must be the local player or his vehicle.', 'weaponType': 'int representing the projectile weaponType (characteristics). Valid IDs are:\n{{Projectiles}}\n{{OptionalArg}}', 'posX': ', posY, posZ: float starting coordinates for the projectile. They are coordinates of creator by default.', 'force': ': float representing the starting force for throwable projectiles.', 'target': ': element target used for heat seeking rockets.', 'rotX': ', rotY, rotZ: float starting rotation for the projectile.', 'velX': ', velY, velZ: float starting velocity for the projectile.', 'model': ': Integer representing the projectiles model, uses default model for weaponType if not specified.'}, result="Returns a ''[[projectile]]'' element if [[projectile]] creation was successful. Returns ''false'' if unable to create a [[projectile]] (wrong weapon ID or projectiles limit was reached)."), oop=None, url=FunctionUrl(url='/wiki/CreateProjectile', name='createProjectile', category='Projectile functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='getProjectileCounter', return_types=['int'], arguments=[FunctionArgument(name='projectile', argument_type='projectile', default_value=None, optional=False)]), docs=FunctionDoc(description='Get the time left before a projectile detonates.', arguments={}, result='Returns the the time in milliseconds to detonation which depending on the projectile type will do different things:\n* Grenades will explode when it hits 0\n* Teargas may be a duration timer\n* Both types of rockets will explode when it hits 0\n* Satchels restarts so I do not think it does anything'), oop=FunctionOOP(class_name='projectile', method_name='getCounter', field='counter'), url=FunctionUrl(url='/wiki/GetProjectileCounter', name='getProjectileCounter', category='Projectile functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='getProjectileCreator', return_types=['element'], arguments=[FunctionArgument(name='theProjectile', argument_type='projectile', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns the creator of the specified projectile.', arguments={'theProjectile': 'The projectiles| projectile element which creator you want to retrieve.'}, result="Returns the element which created the projectile if successful, ''false'' otherwise."), oop=FunctionOOP(class_name='projectile', method_name='getCreator', field="creator}}\n\n===Required Arguments===\n*'''theProjectile:''' The [[projectiles"), url=FunctionUrl(url='/wiki/GetProjectileCreator', name='getProjectileCreator', category='Projectile functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='getProjectileForce', return_types=['float'], arguments=[FunctionArgument(name='theProjectile', argument_type='projectile', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns the force of the specified projectile.', arguments={'theProjectile': 'The projectiles| projectile element which force you want to retrieve.'}, result="Returns a [[float]] if successful, ''false'' otherwise."), oop=FunctionOOP(class_name='projectile', method_name='getForce', field="force}}\n\n===Required Arguments===\n*'''theProjectile:''' The [[projectiles"), url=FunctionUrl(url='/wiki/GetProjectileForce', name='getProjectileForce', category='Projectile functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='getProjectileTarget', return_types=['element'], arguments=[FunctionArgument(name='theProjectile', argument_type='projectile', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns the target of the specified projectile.', arguments={'theProjectile': 'The projectiles| projectile element which target you want to retrieve.'}, result="Returns the [[element]] which is the projectile's target if the projectile is valid and can have a target (like a heat-seeking rocket), ''false'' otherwise.\n{{New feature/item|3.0141|1.4.0|6990|If the projectile is a satchel charge, returns the [[element]] at which it is glued to (or ''nil'' if it isn't glued to any).}}"), oop=FunctionOOP(class_name='projectile', method_name='getTarget', field="target}}\n\n===Required Arguments===\n*'''theProjectile:''' The [[projectiles"), url=FunctionUrl(url='/wiki/GetProjectileTarget', name='getProjectileTarget', category='Projectile functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='getProjectileType', return_types=['int'], arguments=[FunctionArgument(name='theProjectile', argument_type='projectile', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns the type of the specified projectile.', arguments={'theProjectile': 'The Element/Projectile|projectile element which type you want to retrieve.'}, result="Returns an [[int]]eger over the type of the projectile or ''false'' if invalid arguments were passed.\n{{Projectiles}}"), oop=FunctionOOP(class_name='projectile', method_name='getType', field="type}}\n\n===Required Arguments===\n*'''theProjectile:''' The [[Element/Projectile"), url=FunctionUrl(url='/wiki/GetProjectileType', name='getProjectileType', category='Projectile functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='setProjectileCounter', return_types=['bool'], arguments=[FunctionArgument(name='projectile', argument_type='projectile', default_value=None, optional=False), FunctionArgument(name='timeToDetonate', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description="Will change the projectile counter timer which depending on the projectile type will do different things:\n* Rockets and Grenades will explode when it hits 0\n* Teargas may be a duration timer\n* Satchels restart (we currently assume it doesn't cause an effect)\n* Molotov will explode with search ground level when it hits 0", arguments={'projectile': 'The projectile to edit the timer of.', 'timeToDetonate': 'The time in milliseconds to detonation.'}, result="Returns ''true'' on success, ''false'' otherwise."), oop=FunctionOOP(class_name='projectile', method_name='setCounter', field='counter'), url=FunctionUrl(url='/wiki/SetProjectileCounter', name='setProjectileCounter', category='Projectile functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='getResourceGUIElement', return_types=['element'], arguments=[FunctionArgument(name='theResource', argument_type='resource', default_value='getThisResource(', optional=False)]), docs=FunctionDoc(description="This function retrieves a resource's GUI element. The resource's GUI element is the element in the element tree which is the default parent of all GUI elements that belong to a particular resource. It has a predefined variable called '''guiRoot''', and each resource has one of these. You can attach event handlers to this element to easily capture events that originate from your resource (and global events that originate from the root element).", arguments={'theResource': 'the resource whose GUI element we are getting. If not specified, assumes the current resource.'}, result='Returns the root GUI element that contains all the other GUI elements.'), oop=None, url=FunctionUrl(url='/wiki/GetResourceGUIElement', name='getResourceGUIElement', category='Resource functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='createSearchLight', return_types=['searchlight'], arguments=[FunctionArgument(name='startX', argument_type='float', default_value=None, optional=False), FunctionArgument(name='startY', argument_type='float', default_value=None, optional=False), FunctionArgument(name='startZ', argument_type='float', default_value=None, optional=False), FunctionArgument(name='endX', argument_type='float', default_value=None, optional=False), FunctionArgument(name='endY', argument_type='float', default_value=None, optional=False), FunctionArgument(name='endZ', argument_type='float', default_value=None, optional=False), FunctionArgument(name='startRadius', argument_type='float', default_value=None, optional=False), FunctionArgument(name='endRadius', argument_type='float', default_value=None, optional=False), FunctionArgument(name='renderSpot', argument_type='bool', default_value='true', optional=True)]), docs=FunctionDoc(description='', arguments={'startX': ': the X coordinate where the searchlight light cone will start.', 'startY': ': the Y coordinate where the searchlight light cone will start.', 'startZ': ': the Z coordinate where the searchlight light cone will start.', 'endX': ': the X coordinate of the direction where the searchlight will point to.', 'endY': ': the Y coordinate of the direction where the searchlight will point to.', 'endZ': ': the Z coordinate of the direction where the searchlight will point to.', 'startRadius': ': the radius of the searchlights light cone in its beginning.', 'endRadius': ': the radius of the searchlights light cone in its end.\n{{OptionalArg}}', 'renderSpot': ': if true, the searchlight will lighten the surface where it ends.'}, result="If every argument is correct and the limit of 1000 searchlights has not been reached, this function returns a [[Element/Searchlight|searchlight element]]. Otherwise, it returns ''false''."), oop=None, url=FunctionUrl(url='/wiki/CreateSearchLight', name='createSearchLight', category='Searchlight functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='getSearchLightEndPosition', return_types=['float', 'float', 'float'], arguments=[FunctionArgument(name='theSearchLight', argument_type='searchlight', default_value=None, optional=False)]), docs=FunctionDoc(description='This function gets the end position of a [[Element/Searchlight|searchlight]] element.', arguments={'theSearchLight': ': the searchlight to get the position where the searchlights light cone ends.'}, result="If the specified searchlight element is valid, this function will return three ''float'', which are the three coordinates of searchlight's end position. If not, it will return ''false'' plus an error message."), oop=FunctionOOP(class_name='searchLight', method_name='getEndPosition', field='endPosition'), url=FunctionUrl(url='/wiki/GetSearchLightEndPosition', name='getSearchLightEndPosition', category='Searchlight functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='getSearchLightEndRadius', return_types=['float'], arguments=[FunctionArgument(name='theSearchLight', argument_type='searchlight', default_value=None, optional=False)]), docs=FunctionDoc(description='This function gets the end radius of a [[Element/Searchlight|searchlight]] element.', arguments={'theSearchLight': ': the searchlight to get the radius of the searchlights light cone in its end.'}, result="If the specified searchlight element is valid, this function will return one ''float'', which is the searchlight's end radius. If not, it will return ''false'' plus an error message."), oop=FunctionOOP(class_name='searchLight', method_name='getEndRadius', field='endRadius'), url=FunctionUrl(url='/wiki/GetSearchLightEndRadius', name='getSearchLightEndRadius', category='Searchlight functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='getSearchLightStartPosition', return_types=['float', 'float', 'float'], arguments=[FunctionArgument(name='theSearchLight', argument_type='searchlight', default_value=None, optional=False)]), docs=FunctionDoc(description='This function gets the start position of a [[Element/Searchlight|searchlight]] element.', arguments={'theSearchLight': ': the searchlight to get the position where the searchlights light cone starts.'}, result="If the specified searchlight element is valid, this function will return three ''float'', which are the three coordinates of searchlight's start position. If not, it will return ''false'' plus an error message."), oop=FunctionOOP(class_name='searchLight', method_name='getStartPosition', field='startPosition'), url=FunctionUrl(url='/wiki/GetSearchLightStartPosition', name='getSearchLightStartPosition', category='Searchlight functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='getSearchLightStartRadius', return_types=['float'], arguments=[FunctionArgument(name='theSearchLight', argument_type='searchlight', default_value=None, optional=False)]), docs=FunctionDoc(description='This function gets the start radius of a [[Element/Searchlight|searchlight]] element.', arguments={'theSearchLight': ': the searchlight to get the radius of the searchlights light cone in its beginning.'}, result="If the specified searchlight element is valid, this function will return one ''float'', which is the searchlight's start radius. If not, it will return ''false'' plus an error message."), oop=FunctionOOP(class_name='searchLight', method_name='getStartRadius', field='startRadius'), url=FunctionUrl(url='/wiki/GetSearchLightStartRadius', name='getSearchLightStartRadius', category='Searchlight functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='setSearchLightEndPosition', return_types=['bool'], arguments=[FunctionArgument(name='theSearchLight', argument_type='searchlight', default_value=None, optional=False), FunctionArgument(name='endX', argument_type='float', default_value=None, optional=False), FunctionArgument(name='endY', argument_type='float', default_value=None, optional=False), FunctionArgument(name='endZ', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'theSearchLight': ': the searchlight to modify the property of.', 'endX': ': the X coordinate where the searchlight light cone will end.', 'endY': ': the Y coordinate where the searchlight light cone will end.', 'endZ': ': the Z coordinate where the searchlight light cone will end.'}, result="If every argument is correct, this function returns ''true''. If not, it will return ''false'' plus an error message."), oop=FunctionOOP(class_name='searchLight', method_name='setEndPosition', field='endPosition'), url=FunctionUrl(url='/wiki/SetSearchLightEndPosition', name='setSearchLightEndPosition', category='Searchlight functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='setSearchLightEndRadius', return_types=['bool'], arguments=[FunctionArgument(name='theSearchlight', argument_type='searchlight', default_value=None, optional=False), FunctionArgument(name='endRadius', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='This function sets the end radius of a [[Element/Searchlight|searchlight]] element.', arguments={'theSearchLight': ': the searchlight to modify the property of.', 'endRadius': ': the radius of the searchlights light cone in its end.'}, result="If every argument is correct, this function returns ''true''. If not, it will return ''false'' plus an error message."), oop=FunctionOOP(class_name='searchLight', method_name='setEndRadius', field='endRadius'), url=FunctionUrl(url='/wiki/SetSearchLightEndRadius', name='setSearchLightEndRadius', category='Searchlight functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='setSearchLightStartPosition', return_types=['bool'], arguments=[FunctionArgument(name='theSearchLight', argument_type='searchlight', default_value=None, optional=False), FunctionArgument(name='startX', argument_type='float', default_value=None, optional=False), FunctionArgument(name='startY', argument_type='float', default_value=None, optional=False), FunctionArgument(name='startZ', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='This function sets the start position of a [[Element/Searchlight|searchlight]] element.', arguments={'theSearchLight': ': the searchlight to modify the property of.', 'startX': ': the X coordinate where the searchlight light cone will start.', 'startY': ': the Y coordinate where the searchlight light cone will start.', 'startZ': ': the Z coordinate where the searchlight light cone will start.'}, result="If every argument is correct, this function returns ''true''. If not, it will return ''false'' plus an error message."), oop=FunctionOOP(class_name='searchLight', method_name='setStartPosition', field='startPosition'), url=FunctionUrl(url='/wiki/SetSearchLightStartPosition', name='setSearchLightStartPosition', category='Searchlight functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='setSearchLightStartRadius', return_types=['bool'], arguments=[FunctionArgument(name='theSearchlight', argument_type='searchlight', default_value=None, optional=False), FunctionArgument(name='startRadius', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='This function sets the start radius of a [[Element/Searchlight|searchlight]] element.', arguments={'theSearchLight': ': the searchlight to modify the property of.', 'startRadius': ': the radius of the searchlights light cone in its beginning.'}, result="If every argument is correct, this function returns ''true''. If not, it will return ''false'' plus an error message."), oop=FunctionOOP(class_name='searchLight', method_name='setStartRadius', field='startRadius'), url=FunctionUrl(url='/wiki/SetSearchLightStartRadius', name='setSearchLightStartRadius', category='Searchlight functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='createTrayNotification', return_types=['bool'], arguments=[FunctionArgument(name='notificationText', argument_type='string', default_value=None, optional=False), FunctionArgument(name='iconType', argument_type='string', default_value='"default"', optional=True), FunctionArgument(name='useSound', argument_type='bool', default_value='true', optional=True)]), docs=FunctionDoc(description='This functions creates a notification ballon on the desktop.', arguments={'notificationText': 'The text to send in the notification.', 'iconType': 'The notification icon type. Possible values are: default (the MTA icon), info, warning, error', 'useSound': 'A boolean value indicating whether or not to play a sound when receiving the notification.'}, result="Returns ''true'' if the notification is correctly created, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/CreateTrayNotification', name='createTrayNotification', category='Utility functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='downloadFile', return_types=['bool'], arguments=[FunctionArgument(name='fileName', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='This function ensures the requested resource file is correct and then triggers [[onClientFileDownloadComplete]].  If the file has been previously downloaded and the CRC matches, the file will not be downloaded again but [[onClientFileDownloadComplete]] will still run. The \'\'\'file\'\'\' should also be included in the resource meta.xml with the \'\'\'download\'\'\' attribute set to "false", see [[meta.xml]] for more details.\n}}', arguments={'fileName': ': A string referencing the name of the file to download'}, result="Returns ''true'' if file download has been queued, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/DownloadFile', name='downloadFile', category='Utility functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='getKeyboardLayout', return_types=['table'], arguments=[]), docs=FunctionDoc(description='', arguments={}, result='Returns a \'\'table\'\' with keyboard layout properties:\n{| class="wikitable" style="cellpadding: 10px;"\n|-\n! Property || Values and description\n|-\n| <code>readingLayout</code> ||\n    {| class="prettytable"\n    |-\n    | <code>"ltr"</code> || Left to right (English)\n    |-\n    | <code>"rtl"</code> || Right to left (Arabic, Hebrew)\n    |-\n    | <code>"ttb-rtl-ltr"</code> || Either read vertically from top to bottom with columns going from right to left, or read in horizontal rows from left to right, as for the Japanese (Japan) locale.\n    |-\n    | <code>"ttb-ltr"</code> || Read vertically from top to bottom with columns going from left to right, as for the Mongolian (Mongolian) locale.\n    |}\n|}'), oop=None, url=FunctionUrl(url='/wiki/GetKeyboardLayout', name='getKeyboardLayout', category='Utility functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='getLocalization', return_types=['table'], arguments=[]), docs=FunctionDoc(description="This function gets the player's localization setting as set in the MTA client.\n}}", arguments={}, result='Returns a [[table]] with the following entries:\n*\'\'\'code :\'\'\' The language code \'\'(eg. "en_US" for "English (United States)" or "ar" for "Arabic")\'\'.\n*\'\'\'name :\'\'\' The name of the language \'\'(eg. "English (United States)" or "Arabic")\'\'.'), oop=None, url=FunctionUrl(url='/wiki/GetLocalization', name='getLocalization', category='Utility functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='isTrayNotificationEnabled', return_types=['bool'], arguments=[]), docs=FunctionDoc(description='This function returns a boolean value whether the client has enabled tray notifications in his settings or not.', arguments={}, result="Returns ''true'' if the tray notifications are enabled in the settings, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/IsTrayNotificationEnabled', name='isTrayNotificationEnabled', category='Utility functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='setClipboard', return_types=['bool'], arguments=[FunctionArgument(name='theText', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='This function sets the players clipboard text (what appears when you paste with CTRL + V) Note that there is no getClipBoard function for safety reasons.', arguments={'theText': 'The new text to be in the players clipboard when the player pastes with CTRL + V.'}, result="Returns ''true'' if the text in the clip board was set correctly."), oop=None, url=FunctionUrl(url='/wiki/SetClipboard', name='setClipboard', category='Utility functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='setWindowFlashing', return_types=['bool'], arguments=[FunctionArgument(name='shouldFlash', argument_type='bool', default_value=None, optional=False), FunctionArgument(name='count', argument_type='int', default_value='10', optional=True)]), docs=FunctionDoc(description='', arguments={}, result=''), oop=None, url=FunctionUrl(url='/wiki/SetWindowFlashing', name='setWindowFlashing', category='Utility functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='areVehicleLightsOn', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description="*This is different to [[getVehicleOverrideLights]] because this function will return '''true''' if the lights were turned on by natural causes.\n* Unless [[setVehicleOverrideLights]] is used, vehicles always automatically disable their lights at 06:25 and enable them at 20:26.}}", arguments={'theVehicle': ': the vehicle you wish to retrieve the lights state of.'}, result="Returns ''true'' if the lights are on, ''false'' otherwise."), oop=FunctionOOP(class_name='vehicle', method_name='areLightsOn', field="lightsOn}}\n===Required Arguments===\n*'''theVehicle''': the [[vehicle]] you wish to retrieve the lights state of.\n\n===Returns===\nReturns ''true'' if the lights are on, ''false'' otherwise.\n\n"), url=FunctionUrl(url='/wiki/AreVehicleLightsOn', name='areVehicleLightsOn', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='getHeliBladeCollisionsEnabled', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description='This function gets the state of the helicopter blades collisions on the specified vehicle.', arguments={'theVehicle': 'The vehicle that will be checked.'}, result="Returns ''true'' if the collisions are enabled for specified vehicle, ''false'' if the collisions aren't enabled for the specified vehicle, if the vehicle is not a helicopter or if invalid arguments are specified."), oop=FunctionOOP(class_name='vehicle', method_name='areHeliBladeCollisionsEnabled', field='heliBladeCollisionsEnabled'), url=FunctionUrl(url='/wiki/GetHeliBladeCollisionsEnabled', name='getHeliBladeCollisionsEnabled', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='getHelicopterRotorSpeed', return_types=['float'], arguments=[FunctionArgument(name='heli', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description='Retrieves the speed at which the rotor of a helicopter rotates.', arguments={'heli': 'the helicopter element to get the rotor speed of.'}, result="Returns the rotor speed if successful. This is 0 when the helicopter is parked, and about 0.2 when it is fully spun up. It can be negative if the rotor rotates counter-clockwise. Returns ''false'' in case of failure (an invalid element or a vehicle element that is not a helicopter was passed)."), oop=FunctionOOP(class_name='vehicle', method_name='getHelicopterRotorSpeed', field='helicopterRotorSpeed'), url=FunctionUrl(url='/wiki/GetHelicopterRotorSpeed', name='getHelicopterRotorSpeed', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='getVehicleAdjustableProperty', return_types=['int'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description='Use this to get the value of a vehicles adjustable property. This property relates to movable parts of a model, for example hydra jets or dump truck tray.', arguments={'theVehicle': 'The vehicle you want to get the adjustable property of.'}, result="Returns a value from 0 upwards representing adjustment. 0 is default position. Maximum varies per vehicle, for example hydra horizontal flight is 5000, while dump truck tray max tilt is 2500. Or returns ''false'' if the vehicle passed to the function is invalid."), oop=None, url=FunctionUrl(url='/wiki/GetVehicleAdjustableProperty', name='getVehicleAdjustableProperty', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='getVehicleComponentPosition', return_types=['float', 'float', 'float'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='theComponent', argument_type='string', default_value=None, optional=False), FunctionArgument(name='base', argument_type='string', default_value='"root"', optional=True)]), docs=FunctionDoc(description='This function gets the component position of a [[vehicle]]. The vehicle must be streamed in.', arguments={'theVehicle': 'The vehicle you wish to get component position of.', 'theComponent': 'A Vehicle_Components|vehicle component (this is the frame name from the model file of the component you wish to modify)\n{{New feature/item|3.0141|1.4.0|7013|', 'base': 'A string representing what the returned position is relative to. It can be one of the following values:', 'parent': 'The position is relative to the parent component.', 'root': 'The position is relative to the root component.', 'world': 'The position is a world position.\n}}'}, result="Returns three ''floats'' indicating the position of the component, ''x'', ''y'' and ''z'' respectively."), oop=FunctionOOP(class_name='vehicle', method_name='getComponentPosition', field=None), url=FunctionUrl(url='/wiki/GetVehicleComponentPosition', name='getVehicleComponentPosition', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='getVehicleComponentRotation', return_types=['float', 'float', 'float'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='theComponent', argument_type='string', default_value=None, optional=False), FunctionArgument(name='base', argument_type='string', default_value='"parent"', optional=True)]), docs=FunctionDoc(description='This function gets the component rotation of a [[vehicle]].', arguments={'theVehicle': 'The vehicle you wish to get component rotation of.', 'theComponent': 'A Vehicle_Components|vehicle component (this is the frame name from the model file of the component you wish to modify)\n{{New feature/item|3.0141|1.4.0|7013|', 'base': 'A string representing what the returned rotation is relative to. It can be one of the following values:', 'parent': '(default if not specified): The rotation is relative to the parent component.', 'root': ': The rotation is relative to the root component.', 'world': ': The rotation is a world rotation, relative to the worlds coordinates axes.\n}}'}, result="Returns three ''floats'' indicating the rotation of the component, ''x'', ''y'' and ''z'' respectively."), oop=FunctionOOP(class_name='vehicle', method_name='getComponentRotation', field=None), url=FunctionUrl(url='/wiki/GetVehicleComponentRotation', name='getVehicleComponentRotation', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='getVehicleComponentScale', return_types=['float', 'float', 'float'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='theComponent', argument_type='string', default_value=None, optional=False), FunctionArgument(name='base', argument_type='string', default_value='"root"', optional=True)]), docs=FunctionDoc(description='This function gets the component scale of a [[vehicle]].}}', arguments={'theVehicle': 'The vehicle you wish to get component scale of.', 'theComponent': 'A Vehicle_Components|vehicle component (this is the frame name from the model file of the component you wish to modify)', 'base': 'A string representing what the returned scale is relative to. It can be one of the following values:', 'parent': 'The scale is relative to the parent component.', 'root': 'The scale  is relative to the root component.', 'world': 'The scale is a world scale.'}, result="Returns three ''floats'' indicating the scale of the component, ''x'', ''y'' and ''z'' respectively."), oop=FunctionOOP(class_name='vehicle', method_name='getComponentScale', field=None), url=FunctionUrl(url='/wiki/GetVehicleComponentScale', name='getVehicleComponentScale', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='getVehicleComponentVisible', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='theComponent', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='This function get component visibility for [[vehicle]].\n}}', arguments={'theVehicle': 'The vehicle you wish to get component visibility of.', 'theComponent': 'A Vehicle_Components|vehicle component (this is the frame name from the model file of the component you wish to modify)'}, result="Returns a ''bool'' indicating the visible state of the component."), oop=FunctionOOP(class_name='vehicle', method_name='getComponentVisible', field=None), url=FunctionUrl(url='/wiki/GetVehicleComponentVisible', name='getVehicleComponentVisible', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='getVehicleComponents', return_types=['table'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description='This function gets a table of the components currently on a [[vehicle]].\n}}', arguments={'theVehicle': 'The vehicle you wish to get the Vehicle_Components|components of.'}, result="Returns a ''table'' containing the name of the component as the key and visibility flag of that component as the value"), oop=FunctionOOP(class_name='vehicle', method_name='getComponents', field="components}}\n\n===Required Arguments=== \n*'''theVehicle:''' The [[vehicle]] you wish to get the [[Vehicle_Components"), url=FunctionUrl(url='/wiki/GetVehicleComponents', name='getVehicleComponents', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='getVehicleCurrentGear', return_types=['int'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description="Gets the specified vehicle's current gear.", arguments={'theVehicle': 'the vehicle to get the gear of'}, result="Returns the gear if successful, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/GetVehicleCurrentGear', name='getVehicleCurrentGear', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='getVehicleDummyPosition', return_types=['float', 'float', 'float'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='dummy', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns the position of the dummy for the given vehicle.}}', arguments={'theVehicle': 'The vehicle you want to get the dummy positions from', 'dummy': 'The dummy whose position you want to get'}, result='Returns three floats indicating the position \'\'x\'\', \'\'y\'\' and \'\'z\'\' of the vehicle\'s dummy. It returns \'\'false\'\' otherwise.\nThis is a command to get the position of the player\'s vehicle dummy position specified as an argument.\n<syntaxhighlight lang="lua">\nfunction getDummyPosition(cmd, dummy)\n    if (not dummy) then\n        return false\n    end\n    local veh = getPedOccupiedVehicle(localPlayer)\n    if (not veh) then\n        outputChatBox("You should be in a vehicle to use this command", 255, 25, 25)\n        return false\n    end\n    local x, y, z = getVehicleDummyPosition(veh, dummy)\n    outputChatBox("X: "..x..", Y: "..y..", Z: "..z, 0, 255, 0)\nend\naddCommandHandler("getdummy", getDummyPosition)\n</syntaxhighlight>'), oop=FunctionOOP(class_name='vehicle', method_name='getDummyPosition', field=None), url=FunctionUrl(url='/wiki/GetVehicleDummyPosition', name='getVehicleDummyPosition', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='getVehicleGravity', return_types=['float', 'float', 'float'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description='Retrieves the current gravity vector of a vehicle. This is the direction in which the vehicle falls, also the cameras of any passengers will be rotated to match it.', arguments={'theVehicle': 'the vehicle to retrieve the gravity vector of.'}, result="Returns the x, y and z components of the gravity vector if successful, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/GetVehicleGravity', name='getVehicleGravity', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='getVehicleModelDummyPosition', return_types=['float', 'float', 'float'], arguments=[FunctionArgument(name='modelID', argument_type='int', default_value=None, optional=False), FunctionArgument(name='dummy', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='This function gets position of the dummies contained in a vehicle model.\n}}', arguments={'modelID': ': The model ID which you want to apply the change to', 'dummy': ': The dummy whose position you want to get'}, result="Returns three floats indicating the position ''x'', ''y'' and ''z'' of given dummy. It returns ''false'' otherwise."), oop=FunctionOOP(class_name='Vehicle', method_name='getVehicleModelDummyPosition', field=None), url=FunctionUrl(url='/wiki/GetVehicleModelDummyPosition', name='getVehicleModelDummyPosition', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='getVehicleModelDummyDefaultPosition', return_types=['float', 'float', 'float'], arguments=[FunctionArgument(name='modelID', argument_type='int', default_value=None, optional=False), FunctionArgument(name='dummy', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='This function gets the default position of the dummies contained in a vehicle model.\n}}', arguments={'modelID': ': The model ID which you want to apply the change to', 'dummy': ': The dummy whose position you want to get'}, result="Returns three floats indicating the default position ''x'', ''y'' and ''z'' of the given dummy. It returns ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/GetVehicleModelDummyDefaultPosition', name='getVehicleModelDummyDefaultPosition', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='getVehicleModelExhaustFumesPosition', return_types=['float', 'float', 'float'], arguments=[FunctionArgument(name='modelID', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns the position of the exhaust fumes the vehicle model emits.\n}}', arguments={'modelID': ': The vehicle model ID.'}, result="Returns the position of the exhaust fumes if everything went fine or ''false'' otherwise."), oop=FunctionOOP(class_name='Vehicle', method_name='getModelExhaustFumesPosition', field=None), url=FunctionUrl(url='/wiki/GetVehicleModelExhaustFumesPosition', name='getVehicleModelExhaustFumesPosition', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='getVehicleModelWheelSize', return_types=['float|table'], arguments=[FunctionArgument(name='vehicleModel', argument_type='int', default_value=None, optional=False), FunctionArgument(name='wheelGroup', argument_type='string', default_value=None, optional=True)]), docs=FunctionDoc(description='', arguments={'vehicleModel': ': The Vehicle IDs|vehicle model ID.', 'wheelGroup': ': The group of wheels of the vehicle model to retrieve their size value. If not specified, it defaults to all_wheels. The following values are supported:', 'front_axle': ': Represents the wheels in the front axle.', 'rear_axle': ': Represents the wheels in the rear axle.', 'all_wheels': ': Convenience group that returns all the wheel sizes in a table of the following format:\n<syntaxhighlight lang="lua">{ front_axle = 0.8, rear_axle = 0.7 }</syntaxhighlight>'}, result='Returns a decimal number or a table, depending on the specified wheel group. If the specified vehicle model ID or wheel group are not valid, an error is raised instead. The meaning of the wheel size values is documented in [[setVehicleModelWheelSize]].'), oop=FunctionOOP(class_name='Vehicle', method_name='getModelWheelSize', field=None), url=FunctionUrl(url='/wiki/GetVehicleModelWheelSize', name='getVehicleModelWheelSize', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='getVehicleNitroCount', return_types=['int'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description='This function gets the nitro count of the [[vehicle]].\n}}', arguments={'theVehicle': 'The vehicle which you want to get a nitro count.'}, result="Returns ''an integer'' determining the amount of nitro counts of the vehicle, ''false'' if there is no nitro in the vehicle."), oop=None, url=FunctionUrl(url='/wiki/GetVehicleNitroCount', name='getVehicleNitroCount', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='getVehicleNitroLevel', return_types=['float'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description='This function gets the nitro level of the [[vehicle]].\n}}', arguments={'theVehicle': 'The vehicle, which you want to get a nitro level.'}, result="Returns ''a float'' determining the nitro level (ranges from 0.0001 to 1.0) of the vehicle, ''false'' if there is no nitro in the vehicle."), oop=None, url=FunctionUrl(url='/wiki/GetVehicleNitroLevel', name='getVehicleNitroLevel', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='getVehicleWheelFrictionState', return_types=['int'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='wheel', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'theVehicle': 'The vehicle that you wish to get the wheel friction state.', 'wheel': 'The wheel you want to check. (0: front left, 1: rear left, 2: front right, 3: rear right)'}, result="Returns a [[int]] indicating the wheel friction state. This value can be:\n* '''0:''' Normal friction\n* '''1:''' Slip with acceleration (only for driving wheels)\n* '''2:''' Slip without acceleration\n* '''3:''' Locked wheel (on brake or handbrake)."), oop=None, url=FunctionUrl(url='/wiki/GetVehicleWheelFrictionState', name='getVehicleWheelFrictionState', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='getVehicleWheelScale', return_types=['float'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'theVehicle': ': The vehicle to get its wheel scale of.'}, result='Returns the wheel scale of the specified vehicle as a decimal number, or an error if the vehicle is invalid. For more information about the returned number, see [[setVehicleWheelScale]].'), oop=FunctionOOP(class_name='vehicle', method_name='getWheelScale', field='wheelScale'), url=FunctionUrl(url='/wiki/GetVehicleWheelScale', name='getVehicleWheelScale', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='isTrainChainEngine', return_types=['bool'], arguments=[FunctionArgument(name='theTrain', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description="This function checks if a [[Element/Vehicle|train]] is a chain engine (moves the rest of the chain's carriages) or not.\n}}", arguments={'theTrain': 'a Element/Vehicle|train to check if its a chain engine or not.'}, result="* ''true'' if a [[Element/Vehicle|train]] was passed to the function and if it's a chain engine.\n* ''false'' otherwise."), oop=FunctionOOP(class_name='vehicle', method_name='isTrainChainEngine', field="chainEngine}}}}\n===Arguments=== \n*'''theTrain:''' a [[Element/Vehicle"), url=FunctionUrl(url='/wiki/IsTrainChainEngine', name='isTrainChainEngine', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='isVehicleNitroActivated', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description='This function checks if nitro is activated on the [[vehicle]].\n}}', arguments={'theVehicle': 'The vehicle, which you want to check for an activation.'}, result="Returns ''true'' if the nitro is currently activated on the vehicle, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/IsVehicleNitroActivated', name='isVehicleNitroActivated', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='isVehicleNitroRecharging', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description='This function checks if nitro is recharging on the [[vehicle]].\n}}', arguments={'theVehicle': 'The vehicle, which you want to check for recharging.'}, result="Returns ''true'' if the nitro is currently recharging on the vehicle, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/IsVehicleNitroRecharging', name='isVehicleNitroRecharging', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='isVehicleWheelOnGround', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='int', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description="This function returns a [[boolean]] whether the [[vehicle]]'s wheel is on ground (true) or in air (false).\n}}", arguments={'theVehicle': 'The vehicle, which you want to check.', 'wheel': 'The wheel name or number, see list below:\n** <code>"front_left"</code> or 0\n** <code>"rear_left"</code> or 1\n** <code>"front_right"</code> or 2\n** <code>"rear_right"</code> or 3'}, result="Returns ''true'' if the vehicle wheel is on ground/collided, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/IsVehicleWheelOnGround', name='isVehicleWheelOnGround', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='isVehicleWindowOpen', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='window', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={}, result=''), oop=None, url=FunctionUrl(url='/wiki/IsVehicleWindowOpen', name='isVehicleWindowOpen', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='resetVehicleComponentPosition', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='theComponent', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='This function reset to default component position for [[vehicle]].\n}}', arguments={'theVehicle': 'The vehicle you wish to reset component position.', 'theComponent': 'A vehicle component (this is the frame name from the model file of the component you wish to modify)'}, result="Returns ''true'' if the position of the component was reset, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/ResetVehicleComponentPosition', name='resetVehicleComponentPosition', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='resetVehicleComponentRotation', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='theComponent', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='This function reset to default component rotation for [[vehicle]].\n}}', arguments={'theVehicle': 'The vehicle you wish to reset component rotation.', 'theComponent': 'A vehicle component (this is the frame name from the model file of the component you wish to modify)'}, result="Returns ''true'' if the rotation of the component was reset, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/ResetVehicleComponentRotation', name='resetVehicleComponentRotation', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='resetVehicleComponentScale', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='theComponent', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='This function reset to default component scale for [[vehicle]].\n}}', arguments={'theVehicle': 'The vehicle you wish to reset component scale.', 'theComponent': 'A vehicle component (this is the frame name from the model file of the component you wish to modify)'}, result="Returns ''true'' if the scale of the component was reset, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/ResetVehicleComponentScale', name='resetVehicleComponentScale', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='resetVehicleDummyPositions', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description="This function resets the vehicle dependent dummy positions to the vehicle's current model dummy positions.}}", arguments={'theVehicle': 'The vehicle to reset'}, result="Returns ''true'' for success, ''false'' otherwise."), oop=FunctionOOP(class_name='vehicle', method_name='resetDummyPositions', field=None), url=FunctionUrl(url='/wiki/ResetVehicleDummyPositions', name='resetVehicleDummyPositions', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='setHeliBladeCollisionsEnabled', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='collisions', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description='This function changes the state of the helicopter blades collisions on the specified vehicle.', arguments={'theVehicle': 'The helicopter that will have the blades collisions set.', 'collisions': 'The state of the helicopter blades collisions.'}, result="Returns ''true'' if the collisions are set for the specified vehicle, ''false'' if the collisions can't be set for the specified vehicle, if the vehicle is not a helicopter or if invalid arguments are specified."), oop=FunctionOOP(class_name='vehicle', method_name='setHeliBladeCollisionsEnabled', field='heliBladeCollisionsEnabled'), url=FunctionUrl(url='/wiki/SetHeliBladeCollisionsEnabled', name='setHeliBladeCollisionsEnabled', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='setHelicopterRotorSpeed', return_types=['bool'], arguments=[FunctionArgument(name='heli', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='speed', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='Sets the rotor speed of a helicopter.', arguments={'heli': 'the helicopter to adjust the rotor of.', 'speed': 'the new rotor speed. Usual values are 0 if the helicopter stands still, or 0.2 if the rotor is fully spun up. Higher values than normal will not affect the helicopters handling. Negative values are allowed and will make the rotor spin in the opposite direction (pushing the helicopter down).'}, result="Returns ''true'' if successful, ''false'' otherwise."), oop=FunctionOOP(class_name='vehicle', method_name='setHelicopterRotorSpeed', field='helicopterRotorSpeed'), url=FunctionUrl(url='/wiki/SetHelicopterRotorSpeed', name='setHelicopterRotorSpeed', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='setVehicleAdjustableProperty', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='element', default_value=None, optional=False), FunctionArgument(name='value', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is used for adjusting the movable parts of a model, for example hydra jets or dump truck tray.\nThis function only works on vehicles with adjustable properties.', arguments={'theVehicle': ': The vehicle you wish to change the adjustable property of.', 'value': ': A value from 0 between ?. (Set the adjustable value between 0 and N. 0 is the default value. It is possible to force the setting beyond default maximum, for example setting above 5000 on the dump truck (normal max 2500) will cause the tray to be fully vertical.)'}, result="Returns true if the adjustable property was set, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/SetVehicleAdjustableProperty', name='setVehicleAdjustableProperty', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='setVehicleComponentPosition', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='theComponent', argument_type='string', default_value=None, optional=False), FunctionArgument(name='posX', argument_type='float', default_value=None, optional=False), FunctionArgument(name='posY', argument_type='float', default_value=None, optional=False), FunctionArgument(name='posZ', argument_type='float', default_value=None, optional=False), FunctionArgument(name='base', argument_type='string', default_value='"root"', optional=True)]), docs=FunctionDoc(description='This function sets the component position of a [[vehicle]].\n}}', arguments={'theVehicle': 'The vehicle you wish to set component position.', 'theComponent': 'A Vehicle_Components|vehicle component (this is the frame name from the model file of the component you wish to modify)', 'posX': 'The new x position of this component.', 'posY': 'The new y position of this component.', 'posZ': 'The new z position of this component.\n{{New feature/item|3.0141|1.4.0|7013|', 'base': ': A string representing what the supplied position (posX, posY, posZ) is relative to. It can be one of the following values:', 'parent': ': The position is relative to the parent component.', 'root': '(default if not specified): The position is relative to the root component.', 'world': ': The position is a world position, relative to the worlds center of coordinates.\n}}'}, result="Returns ''true'' if component position was set successfully, ''false'' otherwise."), oop=FunctionOOP(class_name='vehicle', method_name='setComponentPosition', field=None), url=FunctionUrl(url='/wiki/SetVehicleComponentPosition', name='setVehicleComponentPosition', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='setVehicleComponentRotation', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='theComponent', argument_type='string', default_value=None, optional=False), FunctionArgument(name='rotX', argument_type='float', default_value=None, optional=False), FunctionArgument(name='rotY', argument_type='float', default_value=None, optional=False), FunctionArgument(name='rotZ', argument_type='float', default_value=None, optional=False), FunctionArgument(name='base', argument_type='string', default_value='"parent"', optional=True)]), docs=FunctionDoc(description='This function sets the component rotation of a [[vehicle]].', arguments={'theVehicle': 'The vehicle you wish to set component rotation of.', 'theComponent': 'A Vehicle_Components|vehicle component (this is the frame name from the model file of the component you wish to modify)', 'rotX': 'The components rotation around the x axis in degrees.', 'rotY': 'The components rotation around the y axis in degrees.', 'rotZ': 'The components rotation around the z axis in degrees.\n{{New feature/item|3.0141|1.4.0|7013|', 'base': 'A string representing what the supplied rotation (rotX, rotY, rotZ) is relative to. It can be one of the following values:', 'parent': '(default if not specified): The rotation is relative to the parent component.', 'root': ': The rotation is relative to the root component.', 'world': ': The rotation is a world rotation, relative to the worlds coordinates axes.\n}}'}, result="Returns ''true'' if the component rotation was set successfully, ''false'' otherwise."), oop=FunctionOOP(class_name='vehicle', method_name='setComponentRotation', field=None), url=FunctionUrl(url='/wiki/SetVehicleComponentRotation', name='setVehicleComponentRotation', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='setVehicleComponentScale', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='theComponent', argument_type='string', default_value=None, optional=False), FunctionArgument(name='scaleX', argument_type='float', default_value=None, optional=False), FunctionArgument(name='scaleY', argument_type='float', default_value=None, optional=False), FunctionArgument(name='scaleZ', argument_type='float', default_value=None, optional=False), FunctionArgument(name='base', argument_type='string', default_value='"root"', optional=True)]), docs=FunctionDoc(description='This function sets the component scale of a [[vehicle]].\n}}', arguments={'theVehicle': 'The vehicle you wish to set component scale.', 'theComponent': 'A Vehicle_Components|vehicle component (this is the frame name from the model file of the component you wish to modify)', 'scaleX': 'The new x scale of this component.', 'scaleY': 'The new y scale of this component.', 'scaleZ': 'The new z scale of this component.', 'base': ': A string representing what the supplied scale (scaleX, scaleY, scaleZ) is relative to. It can be one of the following values:', 'parent': ': The scale is relative to the parent component.', 'root': '(default if not specified): The scale is relative to the root component.', 'world': ': The scale is a world scale, relative to the worlds center of coordinates.'}, result="Returns ''true'' if component scale was set successfully, ''false'' otherwise."), oop=FunctionOOP(class_name='vehicle', method_name='setComponentScale', field=None), url=FunctionUrl(url='/wiki/SetVehicleComponentScale', name='setVehicleComponentScale', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='setVehicleComponentVisible', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='theComponent', argument_type='string', default_value=None, optional=False), FunctionArgument(name='visible', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description='This function sets component visibility for [[vehicle]].\n}}', arguments={'theVehicle': 'The vehicle you wish to set component visibility of.', 'theComponent': 'A Vehicle_Components|vehicle component (this is the components frame name (also called dummy) from the vehicle models DFF file of which you want to manipulate components)', 'visible': 'a bool which determines if the component should be visible'}, result="Returns a ''bool'' indicating if the visiblity was changed successfully."), oop=FunctionOOP(class_name='vehicle', method_name='setComponentVisible', field=None), url=FunctionUrl(url='/wiki/SetVehicleComponentVisible', name='setVehicleComponentVisible', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='setVehicleDummyPosition', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='dummy', argument_type='string', default_value=None, optional=False), FunctionArgument(name='x', argument_type='float', default_value=None, optional=False), FunctionArgument(name='y', argument_type='float', default_value=None, optional=False), FunctionArgument(name='z', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='This function sets the position of the dummy for the given vehicle.}}', arguments={'theVehicle': 'The vehicle you want to set the dummy position for', 'dummy': 'The dummy whose position you want to set', 'x': ', y, z The new dummy position'}, result="Returns ''true'' for success, ''false'' otherwise."), oop=FunctionOOP(class_name='vehicle', method_name='setDummyPosition', field=None), url=FunctionUrl(url='/wiki/SetVehicleDummyPosition', name='setVehicleDummyPosition', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='setVehicleGravity', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='x', argument_type='float', default_value=None, optional=False), FunctionArgument(name='y', argument_type='float', default_value=None, optional=False), FunctionArgument(name='z', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='Sets the gravity vector of a vehicle. The vehicle will fall in this direction, and the camera of any occupants will also be rotated to match it. Can be used for e.g. driving on walls or upside down on ceilings.', arguments={'theVehicle': 'the vehicle of which to change the gravity.', 'x, y, z': 'the components of the new gravity vector. If this vector has length 1, the strength of the gravity will be same as the global gravity for other entities. If it is 2, it will be twice as strong, etc.'}, result="Returns ''true'' if successful, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/SetVehicleGravity', name='setVehicleGravity', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='setVehicleModelDummyPosition', return_types=['bool'], arguments=[FunctionArgument(name='modelID', argument_type='int', default_value=None, optional=False), FunctionArgument(name='dummy', argument_type='string', default_value=None, optional=False), FunctionArgument(name='x', argument_type='float', default_value=None, optional=False), FunctionArgument(name='y', argument_type='float', default_value=None, optional=False), FunctionArgument(name='z', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='This function sets the position of the dummies contained in a vehicle model. Use [[setVehicleComponentPosition]] to adjust the vehicle component positions.\n}}', arguments={'modelID': ': The model ID which you want to apply the change to', 'dummy': ': The dummy whose position you want to change', 'posX': ', posY, posZ: The desired position'}, result="Returns ''true'' if everything went fine, ''false'' otherwise."), oop=FunctionOOP(class_name='Vehicle', method_name='setVehicleModelDummyPosition', field=None), url=FunctionUrl(url='/wiki/SetVehicleModelDummyPosition', name='setVehicleModelDummyPosition', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='setVehicleModelExhaustFumesPosition', return_types=['bool'], arguments=[FunctionArgument(name='modelID', argument_type='int', default_value=None, optional=False), FunctionArgument(name='posX', argument_type='float', default_value=None, optional=False), FunctionArgument(name='posY', argument_type='float', default_value=None, optional=False), FunctionArgument(name='posZ', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='This function sets the position of the exhaust fumes the vehicle model emits. Use [[setVehicleComponentPosition]] to adjust the exhaust position.\n}}', arguments={'modelID': ': The model ID which you want to apply the change to', 'posX': ', posY, posZ: The desired position'}, result="Returns ''true'' if everything went fine, ''false'' otherwise."), oop=FunctionOOP(class_name='Vehicle', method_name='setModelExhaustFumesPosition', field=None), url=FunctionUrl(url='/wiki/SetVehicleModelExhaustFumesPosition', name='setVehicleModelExhaustFumesPosition', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='setVehicleModelWheelSize', return_types=['bool'], arguments=[FunctionArgument(name='vehicleModel', argument_type='int', default_value=None, optional=False), FunctionArgument(name='wheelGroup', argument_type='string', default_value=None, optional=False), FunctionArgument(name='wheelSize', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'vehicleModel': ': The Vehicle IDs|vehicle model ID.', 'wheelGroup': ': The group of wheels of the vehicle model that will have its size set by this function. The following values are supported:', 'front_axle': ': Represents the wheels in the front axle. The default value for this group is read by GTA from the WheelScale_Front field of the vehicles.ide data file.', 'rear_axle': ': Represents the wheels in the rear axle. The default value for this group is read by GTA from the WheelScale_Rear field of the vehicles.ide data file.', 'all_wheels': ': Convenience group that contains the other wheel groups: front_axle and rear_axle.', 'wheelSize': ': The wheel size value to set. Default GTA values for automobiles usually are around 0.7. It must be greater than 0.'}, result="Returns ''true'' if the size for the specified wheel group and vehicle model has been set successfully, or an error if some parameter is invalid."), oop=FunctionOOP(class_name='Vehicle', method_name='setModelWheelSize', field=None), url=FunctionUrl(url='/wiki/SetVehicleModelWheelSize', name='setVehicleModelWheelSize', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='setVehicleNitroActivated', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='state', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description='This function activates or deactivates the nitro on the specified [[vehicle]], like if a player pressed the button for activating nitro.\n}}', arguments={'theVehicle': 'The vehicle to activate or deactivate the nitro on.', 'state': 'true if you want to activate the nitro, false if you want to disable it.'}, result="Returns ''true'' if the nitro activation state was modified successfully, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/SetVehicleNitroActivated', name='setVehicleNitroActivated', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='setVehicleNitroCount', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='count', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function sets how many times a player can activate the nitro on a specified [[vehicle]].\n}}', arguments={'theVehicle': ': the vehicle which you want to modify how many times a player can use its nitro.', 'count': ': how many times should the player be able to use the nitro of this vehicle (from 0-100 times; 0 means that it cant be used and 101 means that it can be used infinite times).'}, result="Returns ''true'' if the nitro count was set successfully to the vehicle, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/SetVehicleNitroCount', name='setVehicleNitroCount', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='setVehicleNitroLevel', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='level', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='This function sets the nitro level of the [[vehicle]].\n}}', arguments={'theVehicle': 'The vehicle, which you want to set.', 'level': 'Nitro level you want to set (ranges from 0.0001 to 1.0).'}, result="Returns ''true'' if the nitro level was set successfully to the vehicle, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/SetVehicleNitroLevel', name='setVehicleNitroLevel', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='setVehicleWheelScale', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='wheelScale', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'theVehicle': ': The vehicle whose wheel scale you wish to modify.', 'wheelScale': ': The wheel scale value to set.'}, result="Returns ''true'' if the wheel scale has been set successfully, or an error if some parameter is invalid."), oop=FunctionOOP(class_name='vehicle', method_name='setWheelScale', field='wheelScale'), url=FunctionUrl(url='/wiki/SetVehicleWheelScale', name='setVehicleWheelScale', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='setVehicleWindowOpen', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='window', argument_type='int', default_value=None, optional=False), FunctionArgument(name='open', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={}, result=''), oop=None, url=FunctionUrl(url='/wiki/SetVehicleWindowOpen', name='setVehicleWindowOpen', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='getWaterLevel', return_types=['float'], arguments=[FunctionArgument(name='posX', argument_type='float', default_value=None, optional=False), FunctionArgument(name='posY', argument_type='float', default_value=None, optional=False), FunctionArgument(name='posZ', argument_type='float', default_value=None, optional=False), FunctionArgument(name='bCheckWaves', argument_type='bool', default_value='false', optional=True)]), docs=FunctionDoc(description="This function allows you to retrieve the water level from a certain location. The water level is 0 in most places though it can vary (e.g. it's higher near the dam).", arguments={'x': 'The X axis position', 'y': 'The Y axis position', 'z': "The Z axis position\n''or:''", 'theWater': 'the water element', 'bCheckWaves': 'Include the water levels of waves in the ocean, lakes and ...'}, result="Returns an ''integer'' of the water level if the [[localPlayer]]/position is near the water (-3 to 20 on the Z coordinate) else ''false'' if there's no water near the [[localPlayer]]/position."), oop=None, url=FunctionUrl(url='/wiki/GetWaterLevel', name='getWaterLevel', category='Water functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='isWaterDrawnLast', return_types=['bool'], arguments=[]), docs=FunctionDoc(description='This function determines whether [[water]] is drawn last in the rendering order.\n}}', arguments={}, result="Returns ''true'' if water is drawn last in the rendering order, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/IsWaterDrawnLast', name='isWaterDrawnLast', category='Water functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='setWaterDrawnLast', return_types=['bool'], arguments=[FunctionArgument(name='bEnabled', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description='This function changes the [[water]] rendering order.\n}}', arguments={'bEnabled': ': A boolean value determining whether water should be drawn last.'}, result="Returns ''true'' if the rendering order was changed successfully, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/SetWaterDrawnLast', name='setWaterDrawnLast', category='Water functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='createWeapon', return_types=['weapon'], arguments=[FunctionArgument(name='theType', argument_type='string', default_value=None, optional=False), FunctionArgument(name='x', argument_type='float', default_value=None, optional=False), FunctionArgument(name='y', argument_type='float', default_value=None, optional=False), FunctionArgument(name='z', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description="Creates a [[Element/Weapon|custom weapon]] that can fire bullets. '''Do not confuse this with player held weapons'''.", arguments={'theType': 'The weapon type which can be:\n{{Custom Weapon Types}}', 'x': 'The x position to create the weapon.', 'y': 'The y position to create the weapon.', 'z': 'The z position to create the weapon.'}, result='Returns a [[Element/Weapon|custom weapon]] element, which represents a weapon floating at that position.'), oop=None, url=FunctionUrl(url='/wiki/CreateWeapon', name='createWeapon', category='Weapon creation functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='fireWeapon', return_types=['bool'], arguments=[FunctionArgument(name='theWeapon', argument_type='weapon', default_value=None, optional=False)]), docs=FunctionDoc(description='Fires one shot from a [[Element/Weapon|custom weapon]].', arguments={'theWeapon': 'The weapon to be fired.'}, result="Returns ''true'' if the shot weapon is valid and therefore the shot was fired, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/FireWeapon', name='fireWeapon', category='Weapon creation functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='getWeaponAmmo', return_types=['int'], arguments=[FunctionArgument(name='theWeapon', argument_type='weapon', default_value=None, optional=False)]), docs=FunctionDoc(description='This function gets the total ammo a [[Element/Weapon|custom weapon]] has.', arguments={'theWeapon': ': The weapon to get the ammo of.'}, result="Returns an [[int|integer]] containing how many ammo left has the weapon. Returns ''false'' if an error occured."), oop=FunctionOOP(class_name='weapon', method_name='getAmmo', field='ammo'), url=FunctionUrl(url='/wiki/GetWeaponAmmo', name='getWeaponAmmo', category='Weapon creation functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='getWeaponClipAmmo', return_types=['int'], arguments=[FunctionArgument(name='theWeapon', argument_type='weapon', default_value=None, optional=False)]), docs=FunctionDoc(description="This function gets the amount of ammo left in a [[Element/Weapon|custom weapon]]'s magazine/clip.", arguments={'theWeapon': 'the weapon to get the clip ammo of.'}, result="Returns the amount of ammo in the [[Element/Weapon|custom weapon]]'s clip, ''false'' if an error occured."), oop=FunctionOOP(class_name='weapon', method_name='getClipAmmo', field='clipAmmo'), url=FunctionUrl(url='/wiki/GetWeaponClipAmmo', name='getWeaponClipAmmo', category='Weapon creation functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='getWeaponFiringRate', return_types=['int'], arguments=[FunctionArgument(name='theWeapon', argument_type='weapon', default_value=None, optional=False)]), docs=FunctionDoc(description='This gets the firing rate to be used when a [[Element/Weapon|custom weapon]] opens fire.', arguments={'theWeapon': 'The weapon to modify the firing rate of.'}, result="Returns an ''integer'' with the firing rate of the custom weapon, ''false'' otherwise."), oop=FunctionOOP(class_name='weapon', method_name='getFiringRate', field='firingRate'), url=FunctionUrl(url='/wiki/GetWeaponFiringRate', name='getWeaponFiringRate', category='Weapon creation functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='getWeaponFlags', return_types=['bool'], arguments=[FunctionArgument(name='theWeapon', argument_type='weapon', default_value=None, optional=False), FunctionArgument(name='theFlag', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='This function gets the flags of a [[Element/Weapon|custom weapon]].', arguments={'theWeapon': 'the weapon to get the flag of.', 'theFlag': 'the weapon flag to get:', 'disable_model': ': makes the weapon and muzzle effect invisible or not.', 'flags': ': returns the flags used to get where the gun shoots at. These flags are (by order):', 'checkBuildings': ': allows the shoot to be blocked by GTAs internally placed buildings, i.e. the world map.', 'checkCarTires': ': allows the shoot to be blocked by vehicle tires.', 'checkDummies': ': allows the shoot to be blocked by GTAs internal dummies. These are not used in the current MTA version so this argument can be set to false.', 'checkObjects': ': allows the shoot to be blocked by object|objects.', 'checkPeds': ': allows the shoot to be blocked by ped|peds and player|players.', 'checkVehicles': ': allows the shoot to be blocked by vehicle|vehicles.', 'checkSeeThroughStuff': ': allows the shoot to be blocked by translucent game objects, e.g. glass.', 'checkShootThroughStuff': ': allows the shoot to be blocked by things that can be shot through.', 'instant_reload': ': if enabled, the weapon reloads instantly rather than waiting the reload time until shooting again.', 'shoot_if_out_of_range': ': if enabled, the weapon still fires its target beyond the weapon range distance.', 'shoot_if_blocked': ': if enabled, the weapon still fires its target even if its blocked by something.'}, result="Returns the ''true'' or ''false'' on success (''flags'' flag returns 8 values) if the flag is enabled or not. Returns ''false'' if the weapon element isn't valid or an error occured."), oop=FunctionOOP(class_name='weapon', method_name='getFlags', field=None), url=FunctionUrl(url='/wiki/GetWeaponFlags', name='getWeaponFlags', category='Weapon creation functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='getWeaponOwner', return_types=['bool'], arguments=[FunctionArgument(name='theWeapon', argument_type='weapon', default_value=None, optional=False)]), docs=FunctionDoc(description="This function gets the owner of a [[Element/Weapon|custom weapon]]. Weapon ownership system was, however, disabled, so this function always returns ''false''. Please refer to [[setWeaponOwner]] for details.", arguments={'theWeapon': 'The weapon to get the owner of.'}, result="This function was intended to return the [[player]] which owns the [[Element/Weapon|custom weapon]], and ''false'' if an error occured. However, at the moment it always returns ''false''."), oop=FunctionOOP(class_name='weapon', method_name='getOwner', field='owner'), url=FunctionUrl(url='/wiki/GetWeaponOwner', name='getWeaponOwner', category='Weapon creation functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='getWeaponState', return_types=['string'], arguments=[FunctionArgument(name='theWeapon', argument_type='weapon', default_value=None, optional=False)]), docs=FunctionDoc(description='This function gets the state of a [[Element/Weapon|custom weapon]].', arguments={'theWeapon': 'the Element/Weapon|weapon to get the state of.'}, result="* A [[string]] if the [[Element/Weapon|weapon]] is valid, indicating the weapon state, which can be:\n** '''reloading''': the weapon is reloading.\n** '''firing''': the weapon is constantly shooting (unless any shooting blocking flags are set) according to its assigned firing rate.\n** '''ready''': the weapon is idle.\n* ''false'' if an error occured or the [[Element/Weapon|weapon]] is invalid."), oop=FunctionOOP(class_name='weapon', method_name='getState', field='state'), url=FunctionUrl(url='/wiki/GetWeaponState', name='getWeaponState', category='Weapon creation functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='getWeaponTarget', return_types=['nil/element/float'], arguments=[FunctionArgument(name='theWeapon', argument_type='weapon', default_value=None, optional=False)]), docs=FunctionDoc(description='This functions gets the target of a [[Element/Weapon|custom weapon]].', arguments={'theWeapon': 'The weapon to get the target of.'}, result="* Returns the ''target'' of the [[Element/Weapon|custom weapon]], which can be:\n**''[[nil]]'' if the weapon is in rotation based targeting.\n**3 [[float|floats]] if the weapon is firing at a fixed point.\n**an [[element]] if the weapon is firing an entity.\n* Returns ''false'' if the weapon element is not valid."), oop=FunctionOOP(class_name='weapon', method_name='getTarget', field='target'), url=FunctionUrl(url='/wiki/GetWeaponTarget', name='getWeaponTarget', category='Weapon creation functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='resetWeaponFiringRate', return_types=['bool'], arguments=[FunctionArgument(name='theWeapon', argument_type='weapon', default_value=None, optional=False)]), docs=FunctionDoc(description='This function resets the firing rate of a [[Element/Weapon|custom weapon]] to the default one.', arguments={'theWeapon': 'the weapon to reset the firing rate of.'}, result="Returns ''true'' on success, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/ResetWeaponFiringRate', name='resetWeaponFiringRate', category='Weapon creation functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='setWeaponClipAmmo', return_types=['bool'], arguments=[FunctionArgument(name='theWeapon', argument_type='weapon', default_value=None, optional=False), FunctionArgument(name='clipAmmo', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description="This function sets the ammo left in a [[Element/Weapon|custom weapon]]'s magazine/clip.", arguments={'theWeapon': 'The Element/Weapon|weapon to set the clip ammo of.', 'clipAmmo': 'The amount of ammo in the clip.'}, result="This function returns ''true'' if the arguments are valid and the weapon clip ammo could be changed; ''false'' otherwise."), oop=FunctionOOP(class_name='weapon', method_name='setClipAmmo', field='clipAmmo'), url=FunctionUrl(url='/wiki/SetWeaponClipAmmo', name='setWeaponClipAmmo', category='Weapon creation functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='setWeaponFiringRate', return_types=['bool'], arguments=[FunctionArgument(name='theWeapon', argument_type='weapon', default_value=None, optional=False), FunctionArgument(name='firingRate', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description="This function sets the firing rate to be used when a [[Element/Weapon|custom weapon]] is in ''firing'' state.", arguments={'theWeapon': 'The weapon to modify the firing rate of.', 'firingRate': 'The weapon firing rate. It seems to be a kind of frecuency value, so the lower the quicker the Element/Weapon|custom weapon will shoot.'}, result="Returns ''true'' on success, ''false'' otherwise."), oop=FunctionOOP(class_name='weapon', method_name='setFiringRate', field='firingRate'), url=FunctionUrl(url='/wiki/SetWeaponFiringRate', name='setWeaponFiringRate', category='Weapon creation functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='setWeaponFlags', return_types=['bool'], arguments=[FunctionArgument(name='theWeapon', argument_type='weapon', default_value=None, optional=False), FunctionArgument(name='theFlag', argument_type='string', default_value=None, optional=False), FunctionArgument(name='enable', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description='This function sets a [[Element/Weapon|custom weapon]] flags, used to change how it behaves or finds a possible target to shoot.', arguments={'theWeapon': 'the Element/Weapon|weapon element to set the flag of.', 'theFlag': 'the weapon flag to change (all of them can be true or false):', 'disable_model': ': makes the weapon and muzzle effect invisible or not.', 'flags': ': configures the flags used to get where the gun shoots at. They are based on processLineOfSights. You have to specify all the eight flags for the function to succeed. These flags are (by order):', 'checkBuildings': ': allows the shoot to be blocked by GTAs internally placed buildings, i.e. the world map.', 'checkCarTires': ': allows the shoot to be blocked by vehicle tires.', 'checkDummies': ': allows the shoot to be blocked by GTAs internal dummies. These are not used in the current MTA version so this argument can be set to false.', 'checkObjects': ': allows the shoot to be blocked by object|objects.', 'checkPeds': ': allows the shoot to be blocked by ped|peds and player|players.', 'checkVehicles': ': allows the shoot to be blocked by vehicle|vehicles.', 'checkSeeThroughStuff': ': allows the shoot to be blocked by translucent game objects, e.g. glass.', 'checkShootThroughStuff': ': allows the shoot to be blocked by things that can be shot through.', 'instant_reload': ': if enabled, the weapon will reload instantly rather than waiting the reload time until shooting again.', 'shoot_if_out_of_range': ': if enabled, the weapon will still fire its target beyond the weapon range distance.', 'shoot_if_blocked': ': if enabled, the weapon will still fire its target even if its blocked by something.', 'enable': ': whether to enable or disable the specified flag.'}, result="Returns ''true'' if all arguments are valid and the flags where changed; ''false'' otherwise."), oop=FunctionOOP(class_name='weapon', method_name='setFlags', field=None), url=FunctionUrl(url='/wiki/SetWeaponFlags', name='setWeaponFlags', category='Weapon creation functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='setWeaponState', return_types=['bool'], arguments=[FunctionArgument(name='theWeapon', argument_type='weapon', default_value=None, optional=False), FunctionArgument(name='theState', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description="This function sets a [[Element/Weapon|custom weapon]]'s state.", arguments={'theWeapon': ': the weapon you wish to set the state of.', 'theState': ': the state you wish to set:', 'reloading': ': makes the weapon reload.', 'firing': ': makes the weapon constantly fire its target (unless any shooting blocking flags are set) according to its assigned firing rate.', 'ready': ': makes the weapon stop reloading or firing.'}, result="Returns ''true'' on success, ''false'' otherwise."), oop=FunctionOOP(class_name='weapon', method_name='setState', field='state'), url=FunctionUrl(url='/wiki/SetWeaponState', name='setWeaponState', category='Weapon creation functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='setWeaponTarget', return_types=['bool'], arguments=[FunctionArgument(name='theWeapon', argument_type='weapon', default_value=None, optional=False), FunctionArgument(name='theTarget', argument_type='element', default_value=None, optional=False), FunctionArgument(name='theComponent', argument_type='int', default_value='255', optional=True)]), docs=FunctionDoc(description='This function sets the target of a [[Element/Weapon|custom weapon]]. There are 3 different targeting modes, which are explained below.', arguments={'theWeapon': 'The weapon to set the target of.', 'theTarget': 'The element to shoot at. It can be a player, ped, vehicle or object.', 'theComponent': 'The component of the target to shoot at. This argument is only relevant when used in the following element types:', '[[Vehicle|Vehicles]]': ':', '0': ': front left tire.', '1': 'BONE_PELVIS1 position.', '2': 'BONE_PELVIS position.', '3': 'BONE_SPINE1 position.', '255': ': center of the ped (position returned by getElementPosition).', '[[Ped|Peds]]': '(players not included; see getPedBonePosition to know where is located each bone):', '4': 'BONE_UPPERTORSO position.', '5': 'BONE_NECK position.', '6': 'BONE_HEAD2 position.', '7': 'BONE_HEAD1 position.', '8': 'BONE_HEAD position.', '21': 'BONE_RIGHTUPPERTORSO position.', '22': 'BONE_RIGHTSHOULDER position.', '23': 'BONE_RIGHTELBOW position.', '24': 'BONE_RIGHTWRIST position.', '25': 'BONE_RIGHTHAND position.', '26': 'BONE_RIGHTTHUMB position.', '31': 'BONE_LEFTUPPERTORSO position.', '32': 'BONE_LEFTSHOULDER position.', '33': 'BONE_LEFTELBOW position.', '34': 'BONE_LEFTWRIST position.', '35': 'BONE_LEFTHAND position.', '36': 'BONE_LEFTTHUMB position.', '41': 'BONE_LEFTHIP position.', '42': 'BONE_LEFTKNEE position.', '43': 'BONE_LEFTANKLE position.', '44': 'BONE_LEFTFOOT position.', '51': 'BONE_RIGHTHIP position.', '52': 'BONE_RIGHTKNEE position.', '53': 'BONE_RIGHTANKLE position.', '54': 'BONE_RIGHTFOOT position.'}, result="Returns ''true'' on success, ''false'' otherwise."), oop=FunctionOOP(class_name='weapon', method_name='setTarget', field='target'), url=FunctionUrl(url='/wiki/SetWeaponTarget', name='setWeaponTarget', category='Weapon creation functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='createSWATRope', return_types=['bool'], arguments=[FunctionArgument(name='fx', argument_type='float', default_value=None, optional=False), FunctionArgument(name='fy', argument_type='float', default_value=None, optional=False), FunctionArgument(name='fZ', argument_type='float', default_value=None, optional=False), FunctionArgument(name='duration', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='Creates a SWAT rope like that of the rope in single player used by SWAT Teams abseiling from the Police Maverick.', arguments={'fx, fy, fz': 'the world coordinates where the effect originates.', 'duration': 'the amount in miliseconds the rope will be there before falling to the ground.'}, result=''), oop=None, url=FunctionUrl(url='/wiki/CreateSWATRope', name='createSWATRope', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='getBirdsEnabled', return_types=['bool'], arguments=[]), docs=FunctionDoc(description='This function will tell you if the birds are enabled or disabled. ', arguments={}, result="Returns ''true'' if the birds are enabled or ''false'' if the birds are disabled. "), oop=None, url=FunctionUrl(url='/wiki/GetBirdsEnabled', name='getBirdsEnabled', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='getGarageBoundingBox', return_types=['float', 'float', 'float', 'float'], arguments=[FunctionArgument(name='garageID', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function outputs the bounding box of a garage. ', arguments={'garageID': 'The Garage|garage ID that represents the garage door that is being checked.'}, result="Returns four ''float''s indicating the bounding box of the garage.\n''Western X position, Eastern X position, Southern Y position, Northern Y position,, false when invalid garageID was provided.''"), oop=None, url=FunctionUrl(url='/wiki/GetGarageBoundingBox', name='getGarageBoundingBox', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='getGaragePosition', return_types=['float', 'float', 'float'], arguments=[FunctionArgument(name='garageID', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function outputs X, Y and Z position of given garage.', arguments={'garageID': 'The Garage|garage ID that represents the garage door that is being checked.'}, result="Returns three ''float''s indicating the position of the garage, ''x'', ''y'' and ''z'' respectively, false when garageID was invalid."), oop=None, url=FunctionUrl(url='/wiki/GetGaragePosition', name='getGaragePosition', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='getGarageSize', return_types=['float', 'float', 'float'], arguments=[FunctionArgument(name='garageID', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function outputs the size of garage.', arguments={'garageID': 'The Garage|garage ID that represents the garage door that is being checked.'}, result="Returns three ''float''s indicating the size of the garage, false if an invalid garageID has been provided"), oop=None, url=FunctionUrl(url='/wiki/GetGarageSize', name='getGarageSize', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='getGroundPosition', return_types=['float'], arguments=[FunctionArgument(name='x', argument_type='float', default_value=None, optional=False), FunctionArgument(name='y', argument_type='float', default_value=None, optional=False), FunctionArgument(name='z', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description="This function gets the Z level of the highest ground below a point. \nIt is required that the point is near enough to the local player so that it's within the area where collision data is loaded. If this is not the case, an incorrect position will be returned.", arguments={'x': 'A floating point number representing the X world coordinate of the point.', 'y': 'A floating point number representing the Y world coordinate of the point.', 'z': 'A floating point number representing the Z world coordinate of the point.'}, result="Returns a float with the highest ground-level Z coord if parameters are valid, ''0'' if the point you tried to test is outside the loaded world map, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/GetGroundPosition', name='getGroundPosition', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='getInteriorFurnitureEnabled', return_types=['bool'], arguments=[FunctionArgument(name='roomID', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function will tell you if interior furniture are enabled or disabled in a specified room ID.\n}}', arguments={}, result="Returns ''true'' if interior furniture is enabled or ''false'' if interior furniture is disabled."), oop=None, url=FunctionUrl(url='/wiki/GetInteriorFurnitureEnabled', name='getInteriorFurnitureEnabled', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='getInteriorSoundsEnabled', return_types=['bool'], arguments=[]), docs=FunctionDoc(description='This function checks to see if the music played by default in clubs is disabled or not.', arguments={}, result='Returns true if music is playing, returns false if music is not playing.'), oop=None, url=FunctionUrl(url='/wiki/GetInteriorSoundsEnabled', name='getInteriorSoundsEnabled', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='getNearClipDistance', return_types=['float'], arguments=[]), docs=FunctionDoc(description='', arguments={}, result="This function returns a ''[[float]]'' containing the actual near clip distance."), oop=None, url=FunctionUrl(url='/wiki/GetNearClipDistance', name='getNearClipDistance', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='resetNearClipDistance', return_types=['bool'], arguments=[]), docs=FunctionDoc(description='This function resets near clip distance set by [[setNearClipDistance]].\n}}', arguments={}, result="*'''boolean:''' always returns '''true'''"), oop=None, url=FunctionUrl(url='/wiki/ResetNearClipDistance', name='resetNearClipDistance', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='getPedsLODDistance', return_types=['float'], arguments=[]), docs=FunctionDoc(description='', arguments={}, result="This function returns a ''[[float]]'' containing the peds LOD distance."), oop=None, url=FunctionUrl(url='/wiki/GetPedsLODDistance', name='getPedsLODDistance', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='setPedsLODDistance', return_types=['bool'], arguments=[FunctionArgument(name='distance', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='[[File:Peds Lod Distance = 60.png|200px|thumb|right|60 units]]\n[[File:Peds Lod Distance = 100.png|200px|thumb|right|100 units]]\n[[File:Peds Lod Distance = 500.png|200px|thumb|right|500 units]]', arguments={'distance': 'the new peds LOD distance. It must be between 0 and 500. (Default for high_detail_peds on is 500, when off, it is 60).'}, result="This function returns ''true'' if the argument is valid. Returns ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/SetPedsLODDistance', name='setPedsLODDistance', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='resetPedsLODDistance', return_types=['bool'], arguments=[]), docs=FunctionDoc(description='', arguments={}, result="Returns ''true'' if the peds LOD distance was reset, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/ResetPedsLODDistance', name='resetPedsLODDistance', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='getRoofPosition', return_types=['float'], arguments=[FunctionArgument(name='x', argument_type='float', default_value=None, optional=False), FunctionArgument(name='y', argument_type='float', default_value=None, optional=False), FunctionArgument(name='z', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description="This function gets the Z level of the lowest roof above a point.\nIt is required that the point is near enough to the local player so that it's within the area where collision data is loaded.}}", arguments={'x': ': A floating point number representing the X world coordinate of the point.', 'y': ': A floating point number representing the Y world coordinate of the point.', 'z': ': A floating point number representing the Z world coordinate of the point.'}, result="Returns a [[float]] with the lowest roof-level Z coord if parameters are valid, ''false'' if the point you tried to test is outside the loaded world map."), oop=None, url=FunctionUrl(url='/wiki/GetRoofPosition', name='getRoofPosition', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='getScreenFromWorldPosition', return_types=['float', 'float', 'float'], arguments=[FunctionArgument(name='x', argument_type='float', default_value=None, optional=False), FunctionArgument(name='y', argument_type='float', default_value=None, optional=False), FunctionArgument(name='z', argument_type='float', default_value=None, optional=False), FunctionArgument(name='edgeTolerance', argument_type='float', default_value='0.0', optional=True), FunctionArgument(name='relative', argument_type='bool', default_value='true', optional=True)]), docs=FunctionDoc(description='This function gets the screen position of a point in the world. This is useful for attaching 2D gui elements to parts of the world (e.g. players) or detecting if a point is on the screen (though it does not check if it is actually visible, you should use [[processLineOfSight]] for that).', arguments={'x': 'A float value indicating the x position in the world.', 'y': 'A float value indicating the y position in the world.', 'z': 'A float value indicating the z position in the world.\n{{OptionalArg}}\n{{New feature/item|3|1.0||', 'edgeTolerance': 'A float value indicating the distance the position can be off screen before the function returns false. Note: its clamped down on both axies to the size of screen at the given axis*10', 'relative': 'A boolean value that indicates if edgeTolerance is in pixels false, or relative to the screen size true.\n}}'}, result="Returns two ''x'', ''y'' [[float]]s indicating the screen position and [[float]] distance between screen and given position if successful, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/GetScreenFromWorldPosition', name='getScreenFromWorldPosition', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='getVehiclesLODDistance', return_types=['float', 'float'], arguments=[]), docs=FunctionDoc(description='Returns the distance of vehicles LOD.\n}}', arguments={}, result=''), oop=None, url=FunctionUrl(url='/wiki/GetVehiclesLODDistance', name='getVehiclesLODDistance', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='getWorldFromScreenPosition', return_types=['float', 'float', 'float'], arguments=[FunctionArgument(name='x', argument_type='float', default_value=None, optional=False), FunctionArgument(name='y', argument_type='float', default_value=None, optional=False), FunctionArgument(name='depth', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='This function allows you to retrieve the world position corresponding to a 2D position on the screen, at a certain depth.\nIf you want to detect what element is at a particular point on the screen, use [[processLineOfSight]] between the camera position and the position returned from this function when passed a high depth value (100 or so, depending how far away you want to detect elements at).\nAs expected, setting 0 as the distance will cause the point retrived to be within the camera itself. That means that drawing any 3D thing in that point would result in it not being visible. Depending on the camera near clip distance, however, the minimum distance to be able to view it can vary.', arguments={'x': 'A float value indicating the x position on the screen, in pixels.', 'y': 'A float value indicating the y position on the screen, in pixels.', 'depth': 'A float value indicating the distance from the camera of the point whose coordinates we are retrieving, in units.'}, result="Returns three ''x'', ''y'', ''z'' [[float]]s indicating the world position if successful, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/GetWorldFromScreenPosition', name='getWorldFromScreenPosition', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='isAmbientSoundEnabled', return_types=['bool'], arguments=[FunctionArgument(name='theType', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='This function allows you to check if some background sound effects are enabled.', arguments={'theType': 'The type of ambient sound to test. Can be either gunfire or general.'}, result="Returns ''true'' if the ambient sound is enabled, ''false'' if it is disabled or invalid values were passed."), oop=None, url=FunctionUrl(url='/wiki/IsAmbientSoundEnabled', name='isAmbientSoundEnabled', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='isLineOfSightClear', return_types=['bool'], arguments=[FunctionArgument(name='startX', argument_type='float', default_value=None, optional=False), FunctionArgument(name='startY', argument_type='float', default_value=None, optional=False), FunctionArgument(name='startZ', argument_type='float', default_value=None, optional=False), FunctionArgument(name='endX', argument_type='float', default_value=None, optional=False), FunctionArgument(name='endY', argument_type='float', default_value=None, optional=False), FunctionArgument(name='endZ', argument_type='float', default_value=None, optional=False), FunctionArgument(name='checkBuildings', argument_type='bool', default_value='true', optional=False), FunctionArgument(name='checkVehicles', argument_type='bool', default_value='true', optional=False), FunctionArgument(name='checkPeds', argument_type='bool', default_value='true', optional=False), FunctionArgument(name='checkObjects', argument_type='bool', default_value='true', optional=False), FunctionArgument(name='checkDummies', argument_type='bool', default_value='true', optional=False), FunctionArgument(name='seeThroughStuff', argument_type='bool', default_value='false', optional=False), FunctionArgument(name='ignoreSomeObjectsForCamera', argument_type='bool', default_value='false', optional=False), FunctionArgument(name='ignoredElement', argument_type='element', default_value='nil', optional=False)]), docs=FunctionDoc(description='This function checks if there are obstacles between two points of the game world, optionally ignoring certain kinds of elements. Use [[processLineOfSight]] if you want more information about what the ray hits.', arguments={'startX': 'The first points world X coordinate.', 'startY': 'The first points world Y coordinate.', 'startZ': 'The first points world Z coordinate.', 'endX': 'The second points world X coordinate.', 'endY': 'The second points world Y coordinate.', 'endZ': 'The second points world Z coordinate.\n{{OptionalArg}} ', 'checkBuildings': 'Allow the line of sight to be blocked by GTAs internally placed buildings, i.e. the world map.', 'checkVehicles': 'Allow the line of sight to be blocked by Vehicle|vehicles.', 'checkPeds': 'Allow the line of sight to be blocked by peds, i.e. Player|players.', 'checkObjects': 'Allow the line of sight to be blocked by Object|objects.', 'checkDummies': 'Allow the line of sight to be blocked by GTAs internal dummies.  These are not used in the current MTA version so this argument can be set to false.', 'seeThroughStuff': 'Allow the line of sight to pass through collision materials that have this flag enabled (By default material IDs 52, 55 and 66 which are some fences). This flag originally allows some objects to be walked on but you can shoot throug them.', 'ignoreSomeObjectsForCamera': 'Allow the line of sight to pass through objects that have (K) property enabled in object.dat data file. (i.e. Most dynamic objects like boxes or barrels)', 'ignoredElement': 'Allow the line of sight to pass through a certain specified element.'}, result="Returns ''true'' if the line between the specified points is clear, ''false'' if there's an obstacle or if invalid parameters are passed."), oop=None, url=FunctionUrl(url='/wiki/IsLineOfSightClear', name='isLineOfSightClear', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='isWorldSoundEnabled', return_types=['bool'], arguments=[FunctionArgument(name='group', argument_type='int', default_value=None, optional=False), FunctionArgument(name='index', argument_type='int', default_value='-1', optional=False)]), docs=FunctionDoc(description='This function allows you to check if certain world sound effects have not been disabled by [[setWorldSoundEnabled]]\n}}', arguments={'group ': 'An integer representing the World sound groups|world sound group', 'index ': 'An integer representing an individual sound within the group'}, result="Returns ''true'' if the world sounds are enabled, ''false'' if they are disabled or invalid values were passed."), oop=None, url=FunctionUrl(url='/wiki/IsWorldSoundEnabled', name='isWorldSoundEnabled', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='isWorldSpecialPropertyEnabled', return_types=['bool'], arguments=[FunctionArgument(name='propname', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='Checks if a special world property (cheat) is enabled or not.', arguments={'propname': 'the name of the property to retrieve. Possible values are listed on SetWorldSpecialPropertyEnabled.'}, result="Returns ''true'' if the property is enabled, ''false'' if it is disabled or the specified property name is invalid."), oop=None, url=FunctionUrl(url='/wiki/IsWorldSpecialPropertyEnabled', name='isWorldSpecialPropertyEnabled', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='processLineOfSight', return_types=['bool', '--', 'hit\nfloat', 'float', 'float', '--', 'hitX', 'hitY', 'hitZ\nelement', '--', 'hitElement\nfloat', 'float', 'float', '--', 'normalX', 'normalY', 'normalZ\nint', '--', 'material\nfloat', '--', 'lighting\nint', '--', 'piece\nint', '--', 'worldModelID\nfloat', 'float', 'float', '--', 'worldModelPositionXYZ\nfloat', 'float', 'float', '--', 'worldModelRotationXYZ\nint', '--', 'worldLODModelID'], arguments=[FunctionArgument(name='startX', argument_type='float', default_value=None, optional=False), FunctionArgument(name='startY', argument_type='float', default_value=None, optional=False), FunctionArgument(name='startZ', argument_type='float', default_value=None, optional=False), FunctionArgument(name='endX', argument_type='float', default_value=None, optional=False), FunctionArgument(name='endY', argument_type='float', default_value=None, optional=False), FunctionArgument(name='endZ', argument_type='float', default_value=None, optional=False), FunctionArgument(name='checkBuildings', argument_type='bool', default_value='true', optional=False), FunctionArgument(name='checkVehicles', argument_type='bool', default_value='true', optional=False), FunctionArgument(name='checkPlayers', argument_type='bool', default_value='true', optional=False), FunctionArgument(name='checkObjects', argument_type='bool', default_value='true', optional=False), FunctionArgument(name='checkDummies', argument_type='bool', default_value='true', optional=False), FunctionArgument(name='seeThroughStuff', argument_type='bool', default_value='false', optional=False), FunctionArgument(name='ignoreSomeObjectsForCamera', argument_type='bool', default_value='false', optional=False), FunctionArgument(name='shootThroughStuff', argument_type='bool', default_value='false', optional=False), FunctionArgument(name='ignoredElement', argument_type='element', default_value='nil', optional=False), FunctionArgument(name='includeWorldModelInformation', argument_type='bool', default_value='false', optional=False), FunctionArgument(name='bIncludeCarTyres', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description="This function casts a ray between two points in the world, and tells you information about the point that was hit, if any. The two positions '''must''' be within the local player's draw distance as the collision data is not loaded outside this area, and the call will just fail as if the ray didn't hit.\nThis function is relatively expensive to call, so over use of this in scripts may have a detrimental effect on performance.\nThis function is useful for checking for collisions and for editor-style scripts. If you wish to find what element is positioned at a particular point on the screen, use this function combined with [[getWorldFromScreenPosition]]. If you wish to just know if something is hit, and don't care about what or where was hit, use [[isLineOfSightClear]].", arguments={'startX': 'The start x position', 'startY': 'The start y position', 'startZ': 'The start z position', 'endX': 'The end x position', 'endY': 'The end y position', 'endZ': 'The end z position\n{{OptionalArg}} ', 'checkBuildings': 'Allow the line of sight to be blocked by GTAs internally placed buildings, i.e. the world map.', 'checkVehicles': 'Allow the line of sight to be blocked by Vehicle|vehicles.', 'checkPlayers': 'Allow the line of sight to be blocked by Player|players.', 'checkObjects': 'Allow the line of sight to be blocked by Object|objects.', 'checkDummies': 'Allow the line of sight to be blocked by GTAs internal dummies.  These are not used in the current MTA version so this argument can be set to false.', 'seeThroughStuff': 'Allow the line of sight pass through collision materials that have this flag enabled (By default material IDs 52, 55 and 66 which are some fences that you can shoot throug but still walk on them).', 'ignoreSomeObjectsForCamera': 'Allow the line of sight to pass through objects that have (K) property enabled in object.dat data file. (i.e. Most dynamic objects like boxes or barrels)', 'shootThroughStuff': 'Allow the line of sight to pass through collision materials that have this flag enabled (By default material IDs 28, 29, 31, 32, 33, 74, 75, 76, 77, 78, 79, 96, 97, 98, 99, 100 which are exclusively sand / beach or underwater objects).', 'ignoredElement': 'Allow the line of sight to pass through a certain specified element. This is usually set to the object you are tracing from so it does not interfere with the results.', 'includeWorldModelInformation ': 'Include the results of hitting a world model.', 'bIncludeCarTyres ': 'Includes car tyre hits.'}, result="*'''hit:''' ''true'' if there is a collision, ''false'' otherwise\nThe other values are only filled if there is a collision, they contain ''nil'' otherwise\n*'''hitX, hitY, hitZ:''' collision position\n*'''hitElement:''' the MTA element hit if any, ''nil'' otherwise\n*'''normalX, normalY, normalZ:''' the normal of the surface hit\n*'''material:''' an integer representing the [[Material IDs|GTASA material ID]] of the surface hit when applicable (world, objects)\n*'''lighting:''' a float between 0 (fully dark) and 1 (bright) representing the amount of light that the hit building surface will transfer to peds or vehicles that are in contact with it. The value can be affected by the game time of day, usually with a lower (darker) value being returned during the night.\n*'''piece:''' an integer representing the part of the element hit if hitElement is a vehicle or a ped/player, ''0'' otherwise. \n**For a ped/player, piece represents the body part hit:\n{{BodyParts}}\n**For vehicles, piece represents the vehicle part hit:\n{{VehicleParts}}\n*'''worldModelID:''' If includeWorldModelInformation was set to ''true'' and a world model was hit, this will contain the model ID.\n*'''worldModelPositionX,Y,Z:''' If worldModelID is set, this will contain the world model position.\n*'''worldModelRotationX,Y,Z:''' If worldModelID is set, this will contain the world model rotation.\n*'''worldLODModelID:''' If worldModelID is set, this will contain the LOD model ID if applicable."), oop=None, url=FunctionUrl(url='/wiki/ProcessLineOfSight', name='processLineOfSight', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='resetAmbientSounds', return_types=['bool'], arguments=[]), docs=FunctionDoc(description='This function is used to reset the background sounds to the default setting.', arguments={}, result='Returns true if the ambient sounds were reset, false otherwise.'), oop=None, url=FunctionUrl(url='/wiki/ResetAmbientSounds', name='resetAmbientSounds', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='resetVehiclesLODDistance', return_types=['bool'], arguments=[]), docs=FunctionDoc(description="Resets the distance of vehicles LOD to default. Default values depends on client setting. If client has enabled ''high detail vehicles'' in video options, value will be reset to (500, 500) - otherwise to (70, 150). You can check value of this option using [[dxGetStatus]] (''SettingHighDetailVehicles'').\n}}", arguments={}, result='Returns true if the vehicles LOD distance was reset, false otherwise.'), oop=None, url=FunctionUrl(url='/wiki/ResetVehiclesLODDistance', name='resetVehiclesLODDistance', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='resetWorldSounds', return_types=['bool'], arguments=[]), docs=FunctionDoc(description='This function is used to reset the world sounds to the default setting.\n}}', arguments={}, result='Returns true if the world sounds were reset, false otherwise.'), oop=None, url=FunctionUrl(url='/wiki/ResetWorldSounds', name='resetWorldSounds', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='resetColorFilter', return_types=['bool'], arguments=[]), docs=FunctionDoc(description='', arguments={}, result='Returns true if the color filtering was reset, false otherwise.'), oop=None, url=FunctionUrl(url='/wiki/ResetColorFilter', name='resetColorFilter', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='setAmbientSoundEnabled', return_types=['bool'], arguments=[FunctionArgument(name='theType', argument_type='string', default_value=None, optional=False), FunctionArgument(name='enable', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description='This function allows you to disable some background sound effects. See also: [[setWorldSoundEnabled]].', arguments={'theType': 'The type of ambient sound to toggle. Can be either gunfire or general.', 'enable ': 'Set false to turn off, true to turn on'}, result="Returns ''true'' if the ambient sound was set correctly, ''false'' if invalid values were passed."), oop=None, url=FunctionUrl(url='/wiki/SetAmbientSoundEnabled', name='setAmbientSoundEnabled', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='setBirdsEnabled', return_types=['bool'], arguments=[FunctionArgument(name='enable', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description='This function allows you to disable the flying birds.', arguments={'enabled': 'A boolean value determining if birds should be shown. Use true to show the birds and false to hide them.'}, result="Returns ''true'' if the birds state was changed succesfully, ''false'' if an invalid argument was specified."), oop=None, url=FunctionUrl(url='/wiki/SetBirdsEnabled', name='setBirdsEnabled', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='setInteriorFurnitureEnabled', return_types=['bool'], arguments=[FunctionArgument(name='roomID', argument_type='int', default_value=None, optional=False), FunctionArgument(name='enabled', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description='This function toggles furniture generation in interiors with the specified room ID.\n}}', arguments={'roomID': 'The room type which you want disable or enable the furniture in:', '0': ': shop', '1': ': office', '2': ': lounge', '3': ': bedroom', '4': ': kitchen', 'enabled': ': A bool representing whether the interior furniture is enabled or disabled.'}, result="Returns ''true'' if successful, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/SetInteriorFurnitureEnabled', name='setInteriorFurnitureEnabled', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='setNearClipDistance', return_types=['bool'], arguments=[FunctionArgument(name='distance', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'distance': 'the new near clip distance. It must be between 0.1 and 20 for the function to do any effect. Default value is 0.3.'}, result="This function returns ''true'' if the argument is valid. Returns ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/SetNearClipDistance', name='setNearClipDistance', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='setVehiclesLODDistance', return_types=['bool'], arguments=[FunctionArgument(name='vehiclesDistance', argument_type='float', default_value=None, optional=False), FunctionArgument(name='trainsAndPlanesDistance', argument_type='float', default_value='vehiclesDistance * 2.14', optional=False)]), docs=FunctionDoc(description='Sets the distance of vehicles LOD.\n}}', arguments={'vehiclesDistance': 'general distance used for most vehicles, this value is clamped to 0 – 500', 'trainsAndPlanesDistance': 'distance used for trains and planes, this value is clamped to 0 – 500'}, result=''), oop=None, url=FunctionUrl(url='/wiki/SetVehiclesLODDistance', name='setVehiclesLODDistance', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='setWorldSoundEnabled', return_types=['bool'], arguments=[FunctionArgument(name='group', argument_type='int', default_value=None, optional=False), FunctionArgument(name='index', argument_type='int', default_value='-1', optional=False), FunctionArgument(name='enable', argument_type='bool', default_value=None, optional=False), FunctionArgument(name='immediate', argument_type='bool', default_value='false', optional=True)]), docs=FunctionDoc(description="This function allows you to disable world sounds. A world sound is a sound effect which has '''''not''''' been caused by [[playSound]] or [[playSound3D]].\n*The values for ''group'' and ''index'' can be determined by using the client command [[Client_Commands#showsound|showsound]] in conjunction with [[setDevelopmentMode]]\n*This function does not affect sounds which are already playing, such as the wind sound that can only be stopped by entering an interior.\n* See also: [[setAmbientSoundEnabled]]}}", arguments={'group': 'An int|integer representing the World sound groups|world sound group', 'enable': 'Set to false to disable, true to enable', 'index': 'An int|integer representing an individual sound within the group\n{{New feature/item|3.0156|1.5.5|11860|', 'immediate': 'A boolean if set to true will cancel the sound if its already playing. This parameter only works for stopping the sound.\n}}'}, result="Returns ''true'' if the world sound was correctly enabled/disabled, ''false'' if invalid values were passed."), oop=None, url=FunctionUrl(url='/wiki/SetWorldSoundEnabled', name='setWorldSoundEnabled', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='setWorldSpecialPropertyEnabled', return_types=['bool'], arguments=[FunctionArgument(name='propname', argument_type='string', default_value=None, optional=False), FunctionArgument(name='enable', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description='Enables or disables a special world property.', arguments={'propname': 'the name of the property to set. Possible values are:', 'hovercars': '- equivalent of the JBGVNB cheat, and allows cars to drive on water.', 'aircars': '- equivalent of the RIPAZHA cheat, and allows cars to fly.', 'extrabunny': '- equivalent of the CJPHONEHOME or JHJOECW cheat, and allows you to bunny hop on bicycles much higher.', 'extrajump': '- equivalent of the KANGAROO cheat, and allows you to jump on foot much higher.', 'randomfoliage': '- toggle randomly generated foliage on the GTA:SA map (default: true)', 'snipermoon': '- toggle the GTA:SA easter egg, which increases the size of the moon every time you shoot it with a sniper rifle (default: false)', 'extraairresistance': "- toggle the vehicle speed limit on cross-country roads (default: true)\n**{{New feature/item|3.0156|1.5.5|12286|'''underworldwarp''' - toggle warp of peds and vehicles when fall under map (default: true)}}", 'enable': 'whether or not to enable the property.'}, result="Returns ''true'' if successful, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/SetWorldSpecialPropertyEnabled', name='setWorldSpecialPropertyEnabled', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='setColorFilter', return_types=['bool'], arguments=[FunctionArgument(name='aRed', argument_type='int', default_value=None, optional=False), FunctionArgument(name='aGreen', argument_type='int', default_value=None, optional=False), FunctionArgument(name='aBlue', argument_type='int', default_value=None, optional=False), FunctionArgument(name='aAlpha', argument_type='int', default_value=None, optional=False), FunctionArgument(name='bRed', argument_type='int', default_value=None, optional=False), FunctionArgument(name='bGreen', argument_type='int', default_value=None, optional=False), FunctionArgument(name='bBlue', argument_type='int', default_value=None, optional=False), FunctionArgument(name='bAlpha', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'aRed': 'The amount of red (0-255).', 'aGreen': 'The amount of green (0-255).', 'aBlue': 'The amount of blue (0-255).', 'aAlpha': 'The amount of alpha (0-255).', 'bRed': 'The amount of red (0-255).', 'bGreen': 'The amount of green (0-255).', 'bBlue': 'The amount of blue (0-255).', 'bAlpha': 'The amount of alpha (0-255).'}, result='Returns true if the color filter was set, false otherwise.'), oop=None, url=FunctionUrl(url='/wiki/SetColorFilter', name='setColorFilter', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=None, client=FunctionData(signature=FunctionType(name='testLineAgainstWater', return_types=['bool', 'float', 'float', 'float'], arguments=[FunctionArgument(name='startX', argument_type='float', default_value=None, optional=False), FunctionArgument(name='startY', argument_type='float', default_value=None, optional=False), FunctionArgument(name='startZ', argument_type='float', default_value=None, optional=False), FunctionArgument(name='endX', argument_type='float', default_value=None, optional=False), FunctionArgument(name='endY', argument_type='float', default_value=None, optional=False), FunctionArgument(name='endZ', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='This function checks to see if a line between two points collides with the water. This is similar to [[processLineOfSight]], but only collides with water. Waves are taken into account when testing the line.', arguments={'startX, startY, startZ': 'the position of the starting point of the line.', 'endX, endY, endZ': 'the position of the end point of the line.'}, result="Returns ''true'' and the position of the intersection point of the line and the water surface if there is a collision, or ''false'' if there is no collision."), oop=None, url=FunctionUrl(url='/wiki/TestLineAgainstWater', name='testLineAgainstWater', category='World functions', function_type=ListType.CLIENT))),
]
