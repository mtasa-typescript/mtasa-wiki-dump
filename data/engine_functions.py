# Autogenerated file. ANY CHANGES WILL BE OVERWRITTEN
from to_python.core.types import FunctionType, \
    FunctionArgument, \
    FunctionArgumentValues, \
    FunctionReturnTypes, \
    FunctionSignature, \
    FunctionDoc, \
    FunctionOOP, \
    FunctionData, \
    CompoundFunctionData
    
DUMP_PARTIAL = [
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='engineApplyShaderToWorldTexture',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='shader',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='textureName',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='targetElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=True,
                                ),
                                default_value='nil',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='appendLayers',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='true',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""This function applies a shader to one or more world textures.
* The resource Shader_examples#Texture_names|shader_tex_names can help in finding the names of world textures.
* When replacing the texture for a ped using the CJ skin, set textureName to CJ
* The shader inherits the render states of the original when it is drawn, so texture stage 0 will already be set to the original texture.
* When using with a ped, ensure you have set ped or all in the elementTypes when calling dxCreateShader
* CJ body parts textures can be replaced by using: cj_ped_head, cj_ped_hat, cj_ped_torso, cj_ped_legs, cj_ped_feet, cj_ped_glasses, cj_ped_necklace, cj_ped_watch and cj_ped_extra1. Latest version of http://wiki.multitheftauto.com/wiki/Shader_examples#Texture_names shader_tex_names will show what is being used. """,
                arguments={
                    "shader": """The shader which is to be applied """,
                    "textureName": """The name of the world texture to apply the shader to. Wildcard matching e.g. ro?ds* can be used to apply to more than one texture at a time. """,
                    "targetElement": """The element to restrict applying the shader to. If this is not set the shader will be applied to everything using the texture name. Valid element types for targetElement are vehicle|vehicles, Object|objects and Ped|peds. """,
                    "appendLayers": """allows two or more layered shaders to be applied in the same texture. You may want to modify the DepthBias in the technique pass to avoid Z-fighting artifacts when using this. """
                },
                result="""returns true if the shader was successfully applied, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='shader',
                method_name="""applyToWorldTexture""",
                field=None,
                is_static=False,
            ),
            name='engineApplyShaderToWorldTexture',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='engineFreeModel',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='modelID',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description=""" """,
                arguments={
                    "modelID": """: the model ID you want to have un-assigned. """
                },
                result="""returns true if the model was successfully freed, false otherwise. """,
            ),
            oop=None,
            name='engineFreeModel',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='engineGetModelIDFromName',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='modelName',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""This function gets the model ID of an object model from object name. This function is the counterpart of engineGetModelNameFromID. """,
                arguments={
                    "modelName": """The model name of the object """
                },
                result="""returns an int with the id of the object model, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Engine',
                method_name="""getModelIDFromName""",
                field=None,
                is_static=True,
            ),
            name='engineGetModelIDFromName',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='engineGetModelLODDistance',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='model',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""This function gets the LOD distance for any object / model ID. """,
                arguments={
                    "model": """The model / object ID number you want to get the LOD distance of. """
                },
                result="""returns a float representing the lod distance of the model, or false if the model argument is incorrect. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Engine',
                method_name="""getModelLODDistance""",
                field=None,
                is_static=True,
            ),
            name='engineGetModelLODDistance',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='engineGetModelNameFromID',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='modelID',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""This function gets the model name of an object model from model ID. This function is the counterpart of engineGetModelIDFromName. """,
                arguments={
                    "modelID": """The model ID of the object """
                },
                result="""returns a string with the name of the object model, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Engine',
                method_name="""getModelNameFromID""",
                field=None,
                is_static=True,
            ),
            name='engineGetModelNameFromID',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='engineGetModelPhysicalPropertiesGroup',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='modelID',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description=""" """,
                arguments={
                    "modelID": """: the id of model which you wish to get physical properties group of. """
                },
                result="""returns id of physical properties group that requested model uses, in range of 0-160, if the object doesnt have a group assigned, -1 is returned. if passed arguments were wrong, error is triggered. """,
            ),
            oop=None,
            name='engineGetModelPhysicalPropertiesGroup',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='engineGetModelTextureNames',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='modelId',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value='""',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""This function returns a table of the world textures which are applied to the specified model. """,
                arguments={
                    "modelId": """You can either use the model id or the model name. """
                },
                result="""returns a table if this function succeeds, false if it fails for some reason. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Engine',
                method_name="""getModelTextureNames""",
                field=None,
                is_static=True,
            ),
            name='engineGetModelTextureNames',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='engineGetModelTextures',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='modelName/modelID',
                                argument_type=FunctionType(
                                    names=['string', 'int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='textureNames',
                                argument_type=FunctionType(
                                    names=['string', 'table'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description=""" """,
                arguments={
                    "model": """: either the model ID or model name. """,
                    "textureNames": """: Only return textures with specified name(s). You can provide a single string or a table of strings. Wildcard matching e.g. ro?ds* can be used. """
                },
                result="""returns a table of texture elements texturename, texture, false otherwise. """,
            ),
            oop=None,
            name='engineGetModelTextures',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='engineGetModelVisibleTime',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='modelID',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description=""" """,
                arguments={
                    "modelID": """: ID of the model """
                },
                result="""returns timeon, timeoff """,
            ),
            oop=None,
            name='engineGetModelVisibleTime',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='engineGetObjectGroupPhysicalProperty',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['var'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='groupID',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='property',
                                argument_type=FunctionType(
                                    names=['objectgroup-modifiable'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description=""" """,
                arguments={
                    "groupID": """: the id of physical properties group which you wish to get a property from. """,
                    "objectgroup-modifiable": """: the property which you wish to get, as per table below. """
                },
                result="""returns the value contained in given property if everything went well, error is raised otherwise. """,
            ),
            oop=None,
            name='engineGetObjectGroupPhysicalProperty',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='engineGetSurfaceProperties',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['mixed'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='surfaceID',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='property',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description=""" """,
                arguments={
                    "surfaceID": """Material IDs|Material ID from 0 to 178 """,
                    "property": """Property name """
                },
                result="""returns the current property value. see the table below for possible values. """,
            ),
            oop=None,
            name='engineGetSurfaceProperties',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='engineGetVisibleTextureNames',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='nameFilter',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=True,
                                ),
                                default_value='"*"',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='modelId',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=True,
                                ),
                                default_value='""',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""This function returns a list of the world textures which are being used to draw the current scene. """,
                arguments={
                    "nameFilter": """Only include textures that match the wildcard string. """,
                    "modelId": """Only include textures that are used by the model id (or model name) """
                },
                result="""returns a table of texture names. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Engine',
                method_name="""getVisibleTextureNames""",
                field=None,
                is_static=True,
            ),
            name='engineGetVisibleTextureNames',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='engineImportTXD',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='texture',
                                argument_type=FunctionType(
                                    names=['txd'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='model_id',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""This function imports (adds) a loaded RenderWare Texture Dictionary into a specific model. This is necessary in order for the DFF loader to find any new textures. Please call this function before loading the DFF model file, in order to allow the DFF loading process to find the new textures. This function can also replace default GTA textures, so that it becomes possible to e.g. put custom images on existing billboards. Ped and weapon textures are also supported.
See here for Optimize_Custom_TXD|tips on reducing the size of TXD files.
* CJ clothing component textures can be replaced by using the ids listed on Clothing Component IDs|this page """,
                arguments={
                    "texture": """The TXD that was loaded with engineLoadTXD """,
                    "model_id": """The model id to import the TXD into """
                },
                result="""returns true if the function executed succesfully, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='TXD|txd',
                method_name="""import""",
                field=None,
                is_static=False,
            ),
            name='engineImportTXD',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='engineLoadCOL',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['col'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='col_file',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            ),
                FunctionArgument(
                                name='raw_data',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""This function loads a RenderWare Collision (COL 1/2/3) file into GTA. The collisions can then be used to provide collisions for in-game objects.
For vehicles, please omit this function by embedding your COL file into your DFF file. This way, you can be sure that the COL file is correctly (and automatically) loaded when calling engineLoadDFF.
This is a client side function. Be sure to transfer your COL file by including it in the meta file. """,
                arguments={
                    "col_file / raw_data": """The filepath to the COL file you want to load or whole data buffer of the COL file. """
                },
                result="""returns a col if the file was loaded, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='COL|EngineCOL',
                method_name=None,
                field=None,
                is_static=True,
            ),
            name='engineLoadCOL',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='engineLoadDFF',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['dff'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='dff_file',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            ),
                FunctionArgument(
                                name='raw_data',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""This function loads a RenderWare Model (DFF) file into GTA.
To successfully load your model with textures, be sure to use engineLoadTXD and engineImportTXD before calling this function. If some error occurs while loading the DFF, MTA will output a message - check out DFF error messages to know what they mean.
This is a client side function. Be sure to transfer your DFF file by including it in the meta file.
The returned DFF element is an element in the element tree, just like vehicles and objects. When the dff is destroyed, ie on resource unload or using destroyElement, any elements that use the DFF, such as vehicles or objects will be reset. """,
                arguments={
                    "dff_file / raw_data": """The filepath to the DFF file you want to load or whole data buffer of the DFF file. """
                },
                result="""returns a dff element if the dff file loaded, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='DFF|EngineDFF',
                method_name=None,
                field=None,
                is_static=True,
            ),
            name='engineLoadDFF',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='engineLoadIFP',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['ifp'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='ifp_file',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            ),
                FunctionArgument(
                                name='raw_data',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='custom_block_name',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""This function loads an animation library (IFP) file into GTA with a custom block name. All three IFP formats are supported ANPK, ANP2, and ANP3. Unfortunately, GTA 3 animations are not supported, however, you can load GTA:VC IFP files using this function. You dont have to replace any animation to play a custom one, to play a custom animation, load the IFP file using this function, then use SetPedAnimation|setPedAnimation.
If you wish to replace a GTA internal animation with a custom one, you can use EngineReplaceAnimation|engineReplaceAnimation. To unload the IFP file, use DestroyElement|destroyElement, restarting or stopping the resource can also unload the IFP file automatically.}} """,
                arguments={
                    "ifp_file / raw_data": """the filepath|filepath to the IFP file you want to load or whole data buffer of the IFP file. """,
                    "custom_block_name": """the new block name for the IFP file. You cannot use the GTA default Animations|internal block names. You should namespace this name using a string like resource.blockname """
                },
                result="""returns an ifp element if the ifp file loaded, false otherwise. """,
            ),
            oop=None,
            name='engineLoadIFP',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='engineLoadTXD',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['txd'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='txd_file',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            ),
                FunctionArgument(
                                name='raw_data',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='filteringEnabled',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='true',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""This function loads a RenderWare Texture Dictionary (TXD) file into GTA. The texture dictionary can then be used to provide textures.
This is a client side function. Be sure to transfer your TXD file by including it in the meta file. """,
                arguments={
                    "txd_file / raw_data": """The filepath to the TXD file you want to load or whole data buffer of the TXD file. """,
                    "filteringEnabled": """Whether to enable texture filtering. """
                },
                result="""returns a txd if the file was loaded, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='TXD|EngineTXD',
                method_name=None,
                field=None,
                is_static=True,
            ),
            name='engineLoadTXD',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='engineRemoveShaderFromWorldTexture',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='shader',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='textureName',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='targetElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=True,
                                ),
                                default_value='nil',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""This function removes a shader from one or more world textures. """,
                arguments={
                    "shader": """The shader which is to be removed """,
                    "textureName": """The name of the world texture to remove the shader from. It should be exactly the same string as used with engineApplyShaderToWorldTexture when the shader was initially applied. """,
                    "targetElement": """The element to remove the shader from. It should be the same element as used with engineApplyShaderToWorldTexture when the shader was initially applied. """
                },
                result="""returns true if the shader was successfully removed, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='shader',
                method_name="""removeFromWorldTexture""",
                field=None,
                is_static=False,
            ),
            name='engineRemoveShaderFromWorldTexture',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='engineReplaceAnimation',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='InternalBlockName',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='InternalAnimName',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='CustomBlockName',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='CustomAnimName',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""This function replaces a specific internal (default) animation with a custom one that has been loaded using EngineLoadIFP|engineLoadIFP function. This function only affects a specific player or ped, the Animations|internal animation is not replaced for everyone, for instance, different players and peds are able to have completely different crouching, walking, and fighting etc., animations running simultaneously at the same time. Also, its not synchronized, youll need to execute this function on every client in Lua to synchronize it.
Internal animations replaced using this function can still be played with SetPedAnimation|setPedAnimation. You can restore replaced animations back with EngineRestoreAnimation|engineRestoreAnimation.
It should be noted that partial animations are not supported, you can still replace them, but they wont work as intended, for example, FightA_block animation from ped block is a partial animation, you cant replace it properly, only a few animations are partial, rest of them are not, so it shouldnt be a problem.}} """,
                arguments={
                    "thePed": """the player or ped you want to replace an animation for. """,
                    "InternalBlockName": """the Animations|internal block name. """,
                    "InternalAnimName": """the Animations|internal animation name inside InternalBlockName. """,
                    "CustomBlockName": """the custom block name of the loaded IFP file that you passed to EngineLoadIFP|engineLoadIFP as second parameter. """,
                    "CustomAnimName": """the custom animation name inside the loaded IFP file with CustomBlockName. """
                },
                result="""returns true on success, false in case of failure. """,
            ),
            oop=None,
            name='engineReplaceAnimation',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='engineReplaceCOL',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theCol',
                                argument_type=FunctionType(
                                    names=['col'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='modelID',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""This function replaces the collision file of the given model id to the collision file passed. Use engineLoadCOL to load the collision file first. """,
                arguments={
                    "theCol": """The collision file to replace with """,
                    "modelID": """The model ID whose collision file you want to replace """
                },
                result="""returns true if the collision was successfully replaced, false or nil if the collision could not be replaced for a reason. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='COL|col',
                method_name="""replace""",
                field=None,
                is_static=False,
            ),
            name='engineReplaceCOL',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='engineReplaceModel',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theModel',
                                argument_type=FunctionType(
                                    names=['dff'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='modelID',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='alphaTransparency',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='false',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""This function replaces the given model ID with the model contained in a DFF file loaded by engineLoadDFF. This function supports vehicle|vehicles, object|objects, ped|peds and player|players but not CJ clothing and body parts.
To replace weapon models you must use their object IDs, not weapon IDs. There is a weapon model list available at weapons.
* Default GTA map objects behave inconsistently when using this function on them. If you want to replace models in the original GTA map, use one of the EngineReplaceModel notes|methods shown here.}} """,
                arguments={
                    "theModel": """The model to replace the given model ID with """,
                    "modelID": """The model it to replace the model of """,
                    "alphaTransparency": """Set to true if model uses semi-transparent textures, e.g. windows. This will ensure other objects behind the semi-transparent textures are rendered correctly. (Can slightly impact performance, so only set when required) """
                },
                result="""returns true if the model was successfully replaced, false if it failed for some reason, ie. the dff or the model id is not valid. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='DFF|dff',
                method_name="""replace""",
                field=None,
                is_static=False,
            ),
            name='engineReplaceModel',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='engineRequestModel',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='elementType',
                                argument_type=FunctionType(
                                    names=['str'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='parentID',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""*before release 1.5.8-20716 this must be ped. """,
                arguments={
                    "elementType": """: ped, vehicle and object. """,
                    "parentID": """: The Vehicle IDs|vehicle ID of the vehicle being allocated. (By default this is: 1337 - objects, 400 - vehicles, 7 or PSYCHO for peds) """
                },
                result="""do not rely on the model numbers returned being consistent across multiple clients or multiple runs of resources. there is no guarantee for the order of the numbers or that the same numbers will always correspond to the same element type. any patterns are coincidental """,
            ),
            oop=None,
            name='engineRequestModel',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='engineResetModelLODDistance',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='model',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description=""" """,
                arguments={
                    "model": """The model / object ID number you want to reset the LOD distance of. """
                },
                result="""returns true if the lod distance was reset to default, or false if the model argument is incorrect, or the lod distance hasnt been changed. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Engine',
                method_name="""resetModelLODDistance""",
                field=None,
                is_static=True,
            ),
            name='engineResetModelLODDistance',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='engineResetSurfaceProperties',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['mixed'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='surfaceID',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description=""" """,
                arguments={
                    "surfaceID": """Material IDs|Material ID from 0 to 178 """
                },
                result="""returns true if the function executed succesfully, false otherwise. """,
            ),
            oop=None,
            name='engineResetSurfaceProperties',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='engineRestoreAnimation',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='InternalBlockName',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='InternalAnimName',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""This function restores internal (default) animations that were replaced using EngineReplaceAnimation|engineReplaceAnimation function. This function only affects a specific player or ped just like EngineReplaceAnimation|engineReplaceAnimation.
If only 1st parameter (Ped|ped) is provided to this function, all replaced animations are restored.
If block name is also provided for 2nd parameter, then replaced animations within that block are restored.
If 3rd parameter (animation name) is provided, then only that specific animation within that specific block is restored.}} """,
                arguments={
                    "thePed": """the player or ped you want to restore an animation(s) for. """,
                    "InternalBlockName": """the Animations|internal block name. """,
                    "InternalAnimName": """the Animations|internal animation name inside InternalBlockName. """
                },
                result="""returns true on success, false in case of failure. """,
            ),
            oop=None,
            name='engineRestoreAnimation',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='engineRestoreCOL',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='modelID',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""This function restores the original collision model of the given model ID. Reverses the effect of engineReplaceCOL. """,
                arguments={
                    "modelID": """The ID of the model to restore the model of """
                },
                result="""returns true if this function succeeds, false or nil if it fails for some reason. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Engine',
                method_name="""restoreCOL""",
                field=None,
                is_static=True,
            ),
            name='engineRestoreCOL',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='engineRestoreModel',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='modelID',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""This function restores the visual DFF model of the given model ID. This restores the result of engineReplaceModel. """,
                arguments={
                    "modelID": """The model ID to restore the visuals of """
                },
                result="""returns true if the model was successfully restored, false or nil if it failed for some reason. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Engine',
                method_name="""restoreModel""",
                field=None,
                is_static=True,
            ),
            name='engineRestoreModel',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='engineRestoreModelPhysicalPropertiesGroup',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='modelID',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description=""" """,
                arguments={
                    "modelID": """: the id of model which you wish to restore original physical properties group of. """
                },
                result="""returns true if there were no issues, if passed arguments were invalid an error is raised. """,
            ),
            oop=None,
            name='engineRestoreModelPhysicalPropertiesGroup',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='engineRestoreObjectGroupPhysicalProperties',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='groupID',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='property',
                                argument_type=FunctionType(
                                    names=['objectgroup-modifiable'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description=""" """,
                arguments={
                    "groupID": """: the id of physical properties group which you wish to restore a property of. """,
                    "objectgroup-modifiable": """: the property which you wish to restore, as per table below. """
                },
                result="""returns true if everything went well, error is raised otherwise. """,
            ),
            oop=None,
            name='engineRestoreObjectGroupPhysicalProperties',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='engineRestreamWorld',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description=""" """,
                arguments={
                    
                },
                result="""returns true if the world was restreamed successfully, false otherwise. """,
            ),
            oop=None,
            name='engineRestreamWorld',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='engineSetAsynchronousLoading',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='enable',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='force',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""This function enables or disables asynchronous model loading. Enabling asynchronous model loading may reduce the small pauses that occur when a new model is displayed for the first time. However, it can cause the new models to appear slightly later than they might have otherwise. """,
                arguments={
                    "enable": """Set to true/false to enable/disable asynchronous loading. Only works if the clients preferences has Asynchronous Loading set to Auto. """,
                    "force": """If set to true, ignores the clients preferences. """
                },
                result="""returns true if the function executed successfully, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Engine',
                method_name="""setAsynchronousLoading""",
                field=None,
                is_static=True,
            ),
            name='engineSetAsynchronousLoading',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='engineSetModelLODDistance',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='model',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='distance',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""This function sets a custom LOD distance for any object / model ID. This is the distance at which objects of that model ID are switched to their LOD model, or (if there is no LOD model) become invisible.
Notes:
The actual draw distance used is modified by the draw distance slider in the settings Video tab of the MTA client.
*When the Video tab draw distance slider is 0%, the engineSetModelLODDistance setting approximately matches the draw distance used.
:e.g. engineSetModelLODDistance(1337,100) will mean model 1337 will be visible up to a distance of 100 units.
*When the Video tab draw distance slider is 100%, the engineSetModelLODDistance setting is approximately doubled before use.
:e.g. engineSetModelLODDistance(1337,100) will mean model 1337 will be visible up to a distance of 200 units.
However, there is a general draw distance limit of 300 units. So engineSetModelLODDistance(1337,400) will mean model 1337 will be visible up to a distance of 300 units no matter what the Video tab says.
Therefore, unless its really important, engineSetModelLODDistance should not be set to anything greater than 170.<br>
170 will still give the maximum draw distance (of 300 units) on clients that have a Video tab draw distance setting of 100%, and it will help reduce lag for players who chose a lower draw distance in their settings.
For low LOD elements, engineSetModelLODDistance still has a limit of 300 units, but the actual draw distance used is 5 times the setting value. Also, low LOD elements ignore the Video tab draw distance slider. So a setting of 200 will mean a low LOD element will always have a draw distance of 1000 units. """,
                arguments={
                    "model": """The model / object ID number you want to change the LOD distance of. """,
                    "distance": """New LOD distance value in San Andreas units. """
                },
                result="""returns true if the function executed succesfully, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Engine',
                method_name="""setModelLODDistance""",
                field=None,
                is_static=True,
            ),
            name='engineSetModelLODDistance',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='engineSetModelPhysicalPropertiesGroup',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='modelID',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='groupID',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description=""" """,
                arguments={
                    "modelID": """: the id of model which you wish to set physical properties group of. """,
                    "groupID": """: the id of new physical properties group to be used by given model. """
                },
                result="""returns true if there were no issues with group change, otherwise an error is raised """,
            ),
            oop=None,
            name='engineSetModelPhysicalPropertiesGroup',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='engineSetModelVisibleTime',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='modelID',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='timeOn',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='timeOff',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description=""" """,
                arguments={
                    "modelID": """: ID of the model """,
                    "timeOn": """: value between 0 and 24 that states when the model should appear """,
                    "timeOff": """: value between 0 and 24 that states when the model should disappear """
                },
                result="""returns true if the change was successful, false otherwise. """,
            ),
            oop=None,
            name='engineSetModelVisibleTime',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='engineSetObjectGroupPhysicalProperty',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='groupID',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='property',
                                argument_type=FunctionType(
                                    names=['objectgroup-modifiable'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='newValue',
                                argument_type=FunctionType(
                                    names=['var'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description=""" """,
                arguments={
                    "groupID": """: the id of physical properties group which you wish to set a property of. """,
                    "objectgroup-modifiable": """: the property which you wish to set, as per table below. """,
                    "newValue": """: new value of the property, with proper type as specified in table below """
                },
                result="""returns true if everything went well, error is raised otherwise. """,
            ),
            oop=None,
            name='engineSetObjectGroupPhysicalProperty',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='engineSetSurfaceProperties',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='surfaceID',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='property',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='value',
                                argument_type=FunctionType(
                                    names=['mixed'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description=""" """,
                arguments={
                    "surfaceID": """Material IDs|Material ID from 0 to 178 """,
                    "property": """Property name """,
                    "value": """New value from table below """
                },
                result="""returns true if the function executed succesfully, false otherwise. """,
            ),
            oop=None,
            name='engineSetSurfaceProperties',
        )
        ],
    )
]
