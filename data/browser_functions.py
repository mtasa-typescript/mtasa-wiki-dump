# Autogenerated file. ANY CHANGES WILL BE OVERWRITTEN
from to_python.core.types import FunctionType, \
    FunctionArgument, \
    FunctionArgumentValues, \
    FunctionReturnTypes, \
    FunctionSignature, \
    FunctionDoc, \
    FunctionOOP, \
    FunctionData, \
    CompoundFunctionData
    
DUMP_PARTIAL = [
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='canBrowserNavigateBack',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='webBrowser',
                                argument_type=FunctionType(
                                    names=['browser'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""This function checks if the browser can return to the previous page. """,
                arguments={
                    "webBrowser": """The browser you want to check for a previous page. """
                },
                result="""returns true if the browser can navigate back, false otherwise. """,
            ),
            oop=None,
            name='canBrowserNavigateBack',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='canBrowserNavigateForward',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='webBrowser',
                                argument_type=FunctionType(
                                    names=['browser'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""This function checks if the browser can go to the next page. """,
                arguments={
                    "webBrowser": """The browser you want check for a next page. """
                },
                result="""returns true if the browser can go to the next page, false otherwise. """,
            ),
            oop=None,
            name='canBrowserNavigateForward',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='createBrowser',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='width',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='height',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='isLocal',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='transparent',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='false',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""This function creates a new web Element/Browser|browser element. """,
                arguments={
                    "width": """The browsers native width. This should be greater than or equal to 1. """,
                    "height": """The browsers native height. This should be greater than or equal to 1. """,
                    "isLocal": """Sets whether the browser can only show local content or content from the internet (see examples for more information) """,
                    "transparent": """true if you want the browser transparent, false for opaque. """
                },
                result="""returns a texture of the browser if it was created successfully, false otherwise. returns also false, if the user disabled remote pages and islocal was set to false. """,
            ),
            oop=FunctionOOP(
                description="""None """,
                class_name='Element/Browser|Browser',
                method_name='None',
                field='None',
                is_static=True,
            ),
            name='createBrowser',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='executeBrowserJavascript',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='webBrowser',
                                argument_type=FunctionType(
                                    names=['browser'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='jsCode',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""This function executes a Javascript string to the specified Element/Browser|browser. Works only with local browsers. """,
                arguments={
                    "webBrowser": """The web browser which will execute the Javascript code """,
                    "jsCode": """The Javascript code string """
                },
                result="""returns true if executing javascript is allowed in the current context, false otherwise. """,
            ),
            oop=FunctionOOP(
                description="""None """,
                class_name='Element/Browser|browser',
                method_name='executeJavascript',
                field='None',
                is_static=False,
            ),
            name='executeBrowserJavascript',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='focusBrowser',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='webBrowser',
                                argument_type=FunctionType(
                                    names=['browser'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""This function will attempt to focus the Element/Browser|browser or unfocus all browsers. The browser that is focused will retrieve keyboard input. """,
                arguments={
                    "webBrowser": """The web browser to be focused - if this is nil, it will unfocus all browsers. """
                },
                result="""returns true if the browser was focused or if nil was passed, false if it failed to focus or the browser does not exist. """,
            ),
            oop=FunctionOOP(
                description="""None """,
                class_name='Element/Browser|browser',
                method_name='focus',
                field='None',
                is_static=False,
            ),
            name='focusBrowser',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='getBrowserProperty',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theBrowser',
                                argument_type=FunctionType(
                                    names=['browser'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='key',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""This function gets a given property of a specified browser. """,
                arguments={
                    "theBrowser": """browser element to get the property value of """,
                    "key": """The browser property key. It can be: """,
                    "mobile": """Surfing the web as mobile """
                },
                result="""returns the value if the property was successfully found, false otherwise. """,
            ),
            oop=FunctionOOP(
                description="""None """,
                class_name='Element/Browser|browser',
                method_name='getProperty',
                field='None',
                is_static=False,
            ),
            name='getBrowserProperty',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='getBrowserSettings',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""This function returns a table containing the browser settings. """,
                arguments={
                    
                },
                result="""a table having the following keys:
* remoteenabled: true if remote websites are enabled, false otherwise
* remotejavascript: true if javascript is enabled on remote websites, false otherwise
* pluginsenabled: true if plugins such as flash, silverlight (but not java) are enabled, false otherwise. this setting is false by default. """,
            ),
            oop=FunctionOOP(
                description="""None """,
                class_name='Element/Browser|Browser',
                method_name='getSettings',
                field='None',
                is_static=True,
            ),
            name='getBrowserSettings',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='getBrowserSource',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='webBrowser',
                                argument_type=FunctionType(
                                    names=['browser'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='callback',
                                argument_type=FunctionType(
                                    names=['function'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""This function can be used to retrieve the source code of a website (asynchronously). The size of the source code is limited to 2 MiB (remaining bytes are cut). """,
                arguments={
                    "webBrowser": """The browser element you want to get the source of """,
                    "callback": """a callback function with syntax as described below
<syntaxhighlight lang="lua">
function ( string code )
</syntaxhighlight> """
                },
                result="""returns true if valid arguments have been passed, false otherwise. """,
            ),
            oop=FunctionOOP(
                description="""None """,
                class_name='Element/Browser|browser',
                method_name='getSource',
                field='None',
                is_static=False,
            ),
            name='getBrowserSource',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='getBrowserTitle',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='webBrowser',
                                argument_type=FunctionType(
                                    names=['browser'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""This function returns the title of the passed Element/Browser|browser. """,
                arguments={
                    "webBrowser": """The browser """
                },
                result="""returns the title as a string. returns false if invalid arguments were passed. """,
            ),
            oop=FunctionOOP(
                description="""None """,
                class_name='Element/Browser|browser',
                method_name='getTitle',
                field='title',
                is_static=False,
            ),
            name='getBrowserTitle',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='getBrowserURL',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='webBrowser',
                                argument_type=FunctionType(
                                    names=['browser'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""This function returns the URL of the specified Element/Browser|browser. """,
                arguments={
                    "webBrowser": """The browser """
                },
                result="""returns the web browser url. """,
            ),
            oop=FunctionOOP(
                description="""None """,
                class_name='Element/Browser|browser',
                method_name='getURL',
                field='url',
                is_static=False,
            ),
            name='getBrowserURL',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='injectBrowserMouseDown',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='webBrowser',
                                argument_type=FunctionType(
                                    names=['browser'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='mouseButton',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""This function injects a mouse click (state: down). """,
                arguments={
                    "webBrowser": """The web browser """,
                    "mouseButton": """The mouse button (Possible values: left, middle, right) """
                },
                result="""returns true if the click was successfully injected, false otherwise. """,
            ),
            oop=FunctionOOP(
                description="""None """,
                class_name='Element/Browser|browser',
                method_name='injectMouseDown',
                field='None',
                is_static=False,
            ),
            name='injectBrowserMouseDown',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='injectBrowserMouseMove',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='webBrowser',
                                argument_type=FunctionType(
                                    names=['browser'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='posX',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='posY',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""This function injects a mouse movement. """,
                arguments={
                    "webBrowser": """The browser which will retrieve the mouse movement """,
                    "posX": """Absolute X screen coordinate """,
                    "posY": """Absolute Y screen coordinate """
                },
                result="""returns true if the movement was injected successfully, false otherwise. """,
            ),
            oop=FunctionOOP(
                description="""None """,
                class_name='Element/Browser|browser',
                method_name='injectMouseMove',
                field='None',
                is_static=False,
            ),
            name='injectBrowserMouseMove',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='injectBrowserMouseUp',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='webBrowser',
                                argument_type=FunctionType(
                                    names=['browser'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='mouseButton',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""This function injects a mouse click (state: up). """,
                arguments={
                    "webBrowser": """The web browser """,
                    "mouseButton": """The mouse button (Possible values: left, middle, right) """
                },
                result="""returns true if the click was successfully injected, false otherwise. """,
            ),
            oop=FunctionOOP(
                description="""None """,
                class_name='Element/Browser|browser',
                method_name='injectMouseUp',
                field='None',
                is_static=False,
            ),
            name='injectBrowserMouseUp',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='injectBrowserMouseWheel',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='webBrowser',
                                argument_type=FunctionType(
                                    names=['browser'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='verticalScroll',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='horizontalScroll',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""This function injects mouse wheel events. """,
                arguments={
                    "webBrowser": """The web browser """,
                    "verticalScroll": """: Amount of units you want the browser to scroll along the Y-axe. """,
                    "horizontalScroll": """: Amount of units you want the browser to scroll along the X-axe. """
                },
                result="""returns true if the mouse action was successfully injected, false otherwise. """,
            ),
            oop=FunctionOOP(
                description="""None """,
                class_name='Element/Browser|browser',
                method_name='injectMouseWheel',
                field='None',
                is_static=False,
            ),
            name='injectBrowserMouseWheel',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='isBrowserDomainBlocked',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='address',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='isURL',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='false',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""This function checks if the specified URL is blocked from being loaded. """,
                arguments={
                    "address": """A website URL """,
                    "isURL": """true if address should be parsed as URL, false otherwise. """
                },
                result="""returns false if the url is able to be loaded, true if it is blocked and nil if an invalid domain/url was passed. """,
            ),
            oop=FunctionOOP(
                description="""This is a static function under the '''Browser''' class """,
                class_name='Element/Browser|Browser',
                method_name='isDomainBlocked',
                field='None',
                is_static=True,
            ),
            name='isBrowserDomainBlocked',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='isBrowserFocused',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='webBrowser',
                                argument_type=FunctionType(
                                    names=['browser'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""This function checks if a browser is focused. """,
                arguments={
                    "webBrowser": """The browser """
                },
                result="""returns true if the browser is focused, false otherwise and nil if invalid arguments were passed. """,
            ),
            oop=FunctionOOP(
                description="""None """,
                class_name='Element/Browser|browser',
                method_name='isFocused',
                field='None',
                is_static=False,
            ),
            name='isBrowserFocused',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='isBrowserLoading',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='webBrowser',
                                argument_type=FunctionType(
                                    names=['browser'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""This function checks if a browser is currently loading a website. """,
                arguments={
                    "webBrowser": """The browser """
                },
                result="""returns true if the browser is loading a website, false otherwise and nil if invalid arguments were passed. """,
            ),
            oop=FunctionOOP(
                description="""None """,
                class_name='Element/Browser|browser',
                method_name='isLoading',
                field='loading',
                is_static=False,
            ),
            name='isBrowserLoading',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='loadBrowserURL',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='webBrowser',
                                argument_type=FunctionType(
                                    names=['browser'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='url',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='postData',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=True,
                                ),
                                default_value='""',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='urlEncoded',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='true',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""This function loads the specified URL. """,
                arguments={
                    "webBrowser": """The Element/Browser|browser element which will load the URL """,
                    "url": """The url you want to load. It can either contain a remote website (http:// prefix) or a website stored within a local resource (http://mta/local/gui.html for example, see Local_Scheme_Handler|Local Scheme Handler for details). """,
                    "postData": """The post data passed to the website. Its content type can be any type (e.g. JSON) if urlEncoded is set to false """,
                    "urlEncoded": """If set to true, it will be available f.e. in PHPs $_POST variable (the content type is: application/x-www-form-urlencoded) """
                },
                result="""returns true if the url was successfully loaded. """,
            ),
            oop=FunctionOOP(
                description="""None """,
                class_name='Element/Browser|browser',
                method_name='loadURL',
                field='url',
                is_static=False,
            ),
            name='loadBrowserURL',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='navigateBrowserBack',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='webBrowser',
                                argument_type=FunctionType(
                                    names=['browser'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""Returns the browser to the previous page. """,
                arguments={
                    "webBrowser": """The browser that you want return to the previous page. """
                },
                result="""returns true if the browser has returned to the previous page, false otherwise. """,
            ),
            oop=None,
            name='navigateBrowserBack',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='navigateBrowserForward',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='webBrowser',
                                argument_type=FunctionType(
                                    names=['browser'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""This function takes the browser to the next page. """,
                arguments={
                    "webBrowser": """The browser that you want to take to the next page. """
                },
                result="""returns true if the browser has gone to the next page, false otherwise. """,
            ),
            oop=None,
            name='navigateBrowserForward',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='reloadBrowserPage',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='webBrowser',
                                argument_type=FunctionType(
                                    names=['browser'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""This function reloads the current browsers page. """,
                arguments={
                    "webBrowser": """The browser that you want to reload. """
                },
                result="""returns true if the browser has reloaded, false otherwise. """,
            ),
            oop=None,
            name='reloadBrowserPage',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='requestBrowserDomains',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='pages',
                                argument_type=FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='parseAsURL',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='false',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='callback',
                                argument_type=FunctionType(
                                    names=['function'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""This function opens a request window in order to accept the requested remote URLs. """,
                arguments={
                    "pages": """A table containing all domains """,
                    "parseAsURL": """true if the passed addresses should be converted from URLs, false otherwise. """,
                    "callback": """A callback function that is called as soon as the result is available
Syntax:
<syntaxhighlight lang="lua">function(bool wasAccepted, table new_domains)</syntaxhighlight> """
                },
                result="""returns true, if the string was successfully read, false otherwise. """,
            ),
            oop=FunctionOOP(
                description="""None """,
                class_name='Element/Browser|Browser',
                method_name='requestDomains',
                field='None',
                is_static=True,
            ),
            name='requestBrowserDomains',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='resizeBrowser',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='webBrowser',
                                argument_type=FunctionType(
                                    names=['browser'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='width',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='height',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""Allows resizing of CEF browsers at runtime. """,
                arguments={
                    "webBrowser": """The browser you want to resize. """,
                    "width": """The new width of the browser. """,
                    "height": """The new height of the browser. """
                },
                result="""returns true if the browser is resized successfully, false if theres something wrong. """,
            ),
            oop=None,
            name='resizeBrowser',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='setBrowserAjaxHandler',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='webBrowser',
                                argument_type=FunctionType(
                                    names=['browser'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='url',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='handler',
                                argument_type=FunctionType(
                                    names=['function'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""This function provides a requestable ajax resource for Lua/Javascript communication for a Element/Browser|browser. """,
                arguments={
                    "webBrowser": """The web browser which will execute the Javascript code """,
                    "url": """The URL endpoint to handle """,
                    "handler": """The function to call if the webBrowser attempts to open the ajax endpoint. If this parameter is nil or omitted, the ajax handler for the url will be deleted. """
                },
                result=""" """,
            ),
            oop=FunctionOOP(
                description="""None """,
                class_name='Element/Browser|browser',
                method_name='setAjaxHandler',
                field='None',
                is_static=False,
            ),
            name='setBrowserAjaxHandler',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='setBrowserProperty',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theBrowser',
                                argument_type=FunctionType(
                                    names=['browser'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='key',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='value',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""This function sets a given property of a specified browser. """,
                arguments={
                    "theBrowser": """The browser element you want to set a property of """,
                    "key": """The browser property key. It can be: """,
                    "mobile": """Surfing the web as mobile """,
                    "value": """A value indicating whether to enable (1) the property or not (0) """
                },
                result="""returns true if the property was successfully set, false otherwise. """,
            ),
            oop=FunctionOOP(
                description="""None """,
                class_name='Element/Browser|browser',
                method_name='setProperty',
                field='None',
                is_static=False,
            ),
            name='setBrowserProperty',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='setBrowserRenderingPaused',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='webBrowser',
                                argument_type=FunctionType(
                                    names=['browser'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='paused',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""This function sets the rendering state of a browser. """,
                arguments={
                    "webBrowser": """The browser """,
                    "paused": """true to pause rendering, false to continue """
                },
                result="""returns true if the state was successfully changed """,
            ),
            oop=FunctionOOP(
                description="""As of MTA: SA {{Current Version|master}} the counterpart is not implemented yet. """,
                class_name='browser',
                method_name='setRenderingPaused',
                field='renderingPaused',
                is_static=False,
            ),
            name='setBrowserRenderingPaused',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='setBrowserVolume',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='webBrowser',
                                argument_type=FunctionType(
                                    names=['browser'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='volume',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""This function sets either a specific Element/Browser|browsers volume, or the overall volume for browsers. """,
                arguments={
                    "volume": """A float|floating point number representing the desired volume level. Range is from 0.0 to 1.0 """,
                    "webBrowser": """A browser element """
                },
                result=""" """,
            ),
            oop=FunctionOOP(
                description="""None """,
                class_name='Element/Browser|browser',
                method_name='setVolume',
                field='volume',
                is_static=False,
            ),
            name='setBrowserVolume',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='toggleBrowserDevTools',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='webBrowser',
                                argument_type=FunctionType(
                                    names=['browser'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='visible',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""This function toggles the visibility of the developer tools pane. """,
                arguments={
                    "webBrowser": """The browser """,
                    "visible": """true to show the tools, false to hide """
                },
                result="""returns true if the visibility was successfully toggled, false if an error occurred """,
            ),
            oop=FunctionOOP(
                description="""None """,
                class_name='browser',
                method_name='toggleDevTools',
                field='devTools',
                is_static=False,
            ),
            name='toggleBrowserDevTools',
        )
        ],
    )
]
