# Autogenerated file. ANY CHANGES WILL BE OVERWRITTEN
from to_python.core.types import FunctionType, \
    FunctionArgument, \
    FunctionArgumentValues, \
    FunctionReturnTypes, \
    FunctionSignature, \
    FunctionDoc, \
    FunctionOOP, \
    FunctionData, \
    CompoundFunctionData
    
DUMP_PARTIAL = [
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='utf8.byte',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=True,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='input',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='i',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='1',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='j',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='1',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""Returns the codepoints for the i-th through j-th character of the string passed. """,
                arguments={
                    "input": """A string character sequence """,
                    "i": """An integer representing the beginning position. """,
                    "j": """An integer representing the ending position. """
                },
                result="""returns a sequence of integer values from the original string if successful, nil otherwise. """,
            ),
            oop=None,
            name='utf8.byte',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='utf8.byte',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=True,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='input',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='i',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='1',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='j',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='1',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""Returns the codepoints for the i-th through j-th character of the string passed. """,
                arguments={
                    "input": """A string character sequence """,
                    "i": """An integer representing the beginning position. """,
                    "j": """An integer representing the ending position. """
                },
                result="""returns a sequence of integer values from the original string if successful, nil otherwise. """,
            ),
            oop=None,
            name='utf8.byte',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='utf8.char',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='codepoints',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=True,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""Generates a string representing the character codepoints as arguments. """,
                arguments={
                    "codepoints": """An variable argument sequence of code points representing the desired unicode characters. """
                },
                result="""returns a string representation of the codepoints passed. """,
            ),
            oop=None,
            name='utf8.char',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='utf8.char',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='codepoints',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=True,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""Generates a string representing the character codepoints as arguments. """,
                arguments={
                    "codepoints": """An variable argument sequence of code points representing the desired unicode characters. """
                },
                result="""returns a string representation of the codepoints passed. """,
            ),
            oop=None,
            name='utf8.char',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='utf8.charpos',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='input',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='charpos',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='offset',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='1',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""Converts the UTF-8 codepoint position to byte-string position. """,
                arguments={
                    "input": """A string character sequence """,
                    "charpos": """An integer representing the beginning position (offset will be added/subtracted). """,
                    "offset": """An integer representing the offset to charpos. """
                },
                result="""returns the integer position as in a byte string and the integer codepoint at this position, nil otherwise. """,
            ),
            oop=None,
            name='utf8.charpos',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='utf8.charpos',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='input',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='charpos',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='offset',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='1',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""Converts the UTF-8 codepoint position to byte-string position. """,
                arguments={
                    "input": """A string character sequence """,
                    "charpos": """An integer representing the beginning position (offset will be added/subtracted). """,
                    "offset": """An integer representing the offset to charpos. """
                },
                result="""returns the integer position as in a byte string and the integer codepoint at this position, nil otherwise. """,
            ),
            oop=None,
            name='utf8.charpos',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='utf8.escape',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='input',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""Escapes a string to a UTF-8 format string. It supports several escape formats, see the formatting table. """,
                arguments={
                    "input": """A string character sequence """
                },
                result="""returns a string containing the escaped utf-8 characters from the original string. """,
            ),
            oop=None,
            name='utf8.escape',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='utf8.escape',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='input',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""Escapes a string to a UTF-8 format string. It supports several escape formats, see the formatting table. """,
                arguments={
                    "input": """A string character sequence """
                },
                result="""returns a string containing the escaped utf-8 characters from the original string. """,
            ),
            oop=None,
            name='utf8.escape',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='utf8.find',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='input',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='pattern',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='startpos',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='1',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='plain',
                                argument_type=FunctionType(
                                    names=['boolean'],
                                    is_optional=True,
                                ),
                                default_value='false',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""Finds the first occurrence of the http://lua-users.org/wiki/PatternsTutorial pattern in the string passed. If an instance of the pattern is found, a pair of values representing the start and the end of the matched string is returned. """,
                arguments={
                    "input": """A string character sequence """,
                    "pattern": """A string match http://lua-users.org/wiki/PatternsTutorial pattern (you can disable pattern matching by using the optional fourth argument plain) """,
                    "startpos": """An integer representing the beginning position. """,
                    "plain": """A boolean, if pattern matching should be turned off """
                },
                result="""returns two number values for the beginning and ending position of the matched string, nil otherwise. """,
            ),
            oop=None,
            name='utf8.find',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='utf8.find',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='input',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='pattern',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='startpos',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='1',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='plain',
                                argument_type=FunctionType(
                                    names=['boolean'],
                                    is_optional=True,
                                ),
                                default_value='false',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""Finds the first occurrence of the http://lua-users.org/wiki/PatternsTutorial pattern in the string passed. If an instance of the pattern is found, a pair of values representing the start and the end of the matched string is returned. """,
                arguments={
                    "input": """A string character sequence """,
                    "pattern": """A string match http://lua-users.org/wiki/PatternsTutorial pattern (you can disable pattern matching by using the optional fourth argument plain) """,
                    "startpos": """An integer representing the beginning position. """,
                    "plain": """A boolean, if pattern matching should be turned off """
                },
                result="""returns two number values for the beginning and ending position of the matched string, nil otherwise. """,
            ),
            oop=None,
            name='utf8.find',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='utf8.fold',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string', 'int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='input',
                                argument_type=FunctionType(
                                    names=['string', 'int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""Converts a UTF-8 string to folded case (lowercase), which can be used to compare two strings. If input is an integer, its treat as a codepoint and a convert codepoint (integer) is returned. """,
                arguments={
                    "input": """A string character sequence OR an integer value """
                },
                result="""returns a string in lowercase or returns an integer (see description). """,
            ),
            oop=None,
            name='utf8.fold',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='utf8.fold',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string', 'int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='input',
                                argument_type=FunctionType(
                                    names=['string', 'int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""Converts a UTF-8 string to folded case (lowercase), which can be used to compare two strings. If input is an integer, its treat as a codepoint and a convert codepoint (integer) is returned. """,
                arguments={
                    "input": """A string character sequence OR an integer value """
                },
                result="""returns a string in lowercase or returns an integer (see description). """,
            ),
            oop=None,
            name='utf8.fold',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='utf8.gmatch',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['iterator'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='input',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='pattern',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function returns a pattern finding iterator for UTF-8 strings. The iterator will search through the string input looking for instances of the pattern you passed. For more information on iterators read the http://lua-users.org/wiki/ForTutorial ForTutorial and http://lua-users.org/wiki/IteratorsTutorial IteratorsTutorial. """,
                arguments={
                    "input": """A string character sequence """,
                    "pattern": """A string match http://lua-users.org/wiki/PatternsTutorial pattern """
                },
                result="""returns an function for iterations on the input string by using the passed pattern string. """,
            ),
            oop=None,
            name='utf8.gmatch',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='utf8.gmatch',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['iterator'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='input',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='pattern',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function returns a pattern finding iterator for UTF-8 strings. The iterator will search through the string input looking for instances of the pattern you passed. For more information on iterators read the http://lua-users.org/wiki/ForTutorial ForTutorial and http://lua-users.org/wiki/IteratorsTutorial IteratorsTutorial. """,
                arguments={
                    "input": """A string character sequence """,
                    "pattern": """A string match http://lua-users.org/wiki/PatternsTutorial pattern """
                },
                result="""returns an function for iterations on the input string by using the passed pattern string. """,
            ),
            oop=None,
            name='utf8.gmatch',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='utf8.gsub',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='input',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='pattern',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='replace',
                                argument_type=FunctionType(
                                    names=['mixed'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='match_limit',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='utf8.len(input)',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""Returns a copy of the original input string with replaced matches from the pattern by the replacement value. """,
                arguments={
                    "input": """A string character sequence """,
                    "pattern": """A string match http://lua-users.org/wiki/PatternsTutorial pattern """,
                    "replace": """A string literal OR an integer value OR a function (see examples below) OR a table ({ match = replacement }) """,
                    "match_limit": """An integer to limit the number of substitutions made """
                },
                result="""returns a pair of values, the modified string and the integer number of substitutions made. """,
            ),
            oop=None,
            name='utf8.gsub',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='utf8.gsub',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='input',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='pattern',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='replace',
                                argument_type=FunctionType(
                                    names=['mixed'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='match_limit',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='utf8.len(input)',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""Returns a copy of the original input string with replaced matches from the pattern by the replacement value. """,
                arguments={
                    "input": """A string character sequence """,
                    "pattern": """A string match http://lua-users.org/wiki/PatternsTutorial pattern """,
                    "replace": """A string literal OR an integer value OR a function (see examples below) OR a table ({ match = replacement }) """,
                    "match_limit": """An integer to limit the number of substitutions made """
                },
                result="""returns a pair of values, the modified string and the integer number of substitutions made. """,
            ),
            oop=None,
            name='utf8.gsub',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='utf8.insert',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='input',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='insert_pos',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='utf8.len(input)+1',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='substring',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""Inserts a substring into input string. If insert-position is given, the substring will be inserted before the character at this index, otherwise the substring will concatenate to input. The insert position may be negative. """,
                arguments={
                    "input": """A string character sequence """,
                    "substring": """A string character sequence which should be inserted """,
                    "insert_pos": """An integer representing the position, where the substring will be inserted at. """
                },
                result="""returns a string with the inserted substring value. """,
            ),
            oop=None,
            name='utf8.insert',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='utf8.insert',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='input',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='insert_pos',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='utf8.len(input)+1',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='substring',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""Inserts a substring into input string. If insert-position is given, the substring will be inserted before the character at this index, otherwise the substring will concatenate to input. The insert position may be negative. """,
                arguments={
                    "input": """A string character sequence """,
                    "substring": """A string character sequence which should be inserted """,
                    "insert_pos": """An integer representing the position, where the substring will be inserted at. """
                },
                result="""returns a string with the inserted substring value. """,
            ),
            oop=None,
            name='utf8.insert',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='utf8.len',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='input',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='i',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='1',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='j',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='utf8.len(input)',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""Returns the length of the string passed. """,
                arguments={
                    "input": """A string character sequence """,
                    "i": """An integer representing the beginning position for measuring the length of the section (may be negative). """,
                    "j": """An integer representing the ending position for measuring the length of the section (may be negative). """
                },
                result="""returns the length of the string as an integer. """,
            ),
            oop=None,
            name='utf8.len',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='utf8.len',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='input',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='i',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='1',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='j',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='utf8.len(input)',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""Returns the length of the string passed. """,
                arguments={
                    "input": """A string character sequence """,
                    "i": """An integer representing the beginning position for measuring the length of the section (may be negative). """,
                    "j": """An integer representing the ending position for measuring the length of the section (may be negative). """
                },
                result="""returns the length of the string as an integer. """,
            ),
            oop=None,
            name='utf8.len',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='utf8.match',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=True,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='input',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='pattern',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='index',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='1',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""Extract substrings by matching patterns in the input string. This function can be used to extract specific information from a string. """,
                arguments={
                    "input": """A string character sequence """,
                    "pattern": """A string match http://lua-users.org/wiki/PatternsTutorial pattern """,
                    "index": """An integer representing the beginning position for the pattern matching """
                },
                result="""returns a sequence of string matches from the input string, nil otherwise. """,
            ),
            oop=None,
            name='utf8.match',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='utf8.match',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=True,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='input',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='pattern',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='index',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='1',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""Extract substrings by matching patterns in the input string. This function can be used to extract specific information from a string. """,
                arguments={
                    "input": """A string character sequence """,
                    "pattern": """A string match http://lua-users.org/wiki/PatternsTutorial pattern """,
                    "index": """An integer representing the beginning position for the pattern matching """
                },
                result="""returns a sequence of string matches from the input string, nil otherwise. """,
            ),
            oop=None,
            name='utf8.match',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='utf8.ncasecmp',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='a',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='b',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""Compares two strings in lower-case and returns the difference indicator (see table below) as an integer value. """,
                arguments={
                    "a": """A string character sequence """,
                    "b": """A string character sequence """
                },
                result="""returns an integer, which indicates the difference, see the table below for further information. """,
            ),
            oop=None,
            name='utf8.ncasecmp',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='utf8.ncasecmp',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='a',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='b',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""Compares two strings in lower-case and returns the difference indicator (see table below) as an integer value. """,
                arguments={
                    "a": """A string character sequence """,
                    "b": """A string character sequence """
                },
                result="""returns an integer, which indicates the difference, see the table below for further information. """,
            ),
            oop=None,
            name='utf8.ncasecmp',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='utf8.next',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='input',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='charpos',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='offset',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='1',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This is an iteration function to traverse each single codepoint of a UTF-8 string. """,
                arguments={
                    "input": """A string character sequence """,
                    "charpos": """An integer representing the beginning position (offset will be added/subtracted). """,
                    "offset": """An integer representing the offset to charpos. """
                },
                result="""returns the integer position in bytes and the integer codepoint at this position, nil otherwise. """,
            ),
            oop=None,
            name='utf8.next',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='utf8.next',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='input',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='charpos',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='offset',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='1',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This is an iteration function to traverse each single codepoint of a UTF-8 string. """,
                arguments={
                    "input": """A string character sequence """,
                    "charpos": """An integer representing the beginning position (offset will be added/subtracted). """,
                    "offset": """An integer representing the offset to charpos. """
                },
                result="""returns the integer position in bytes and the integer codepoint at this position, nil otherwise. """,
            ),
            oop=None,
            name='utf8.next',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='utf8.remove',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='input',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='start',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value='1',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='stop',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='-1',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function removes a substring in a UTF-8 string by using a position range. """,
                arguments={
                    "input": """A string character sequence """,
                    "start": """An integer representing the beginning position. """,
                    "stop": """An integer representing the ending position. """
                },
                result="""returns the string with the removed substring from the range. """,
            ),
            oop=None,
            name='utf8.remove',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='utf8.remove',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='input',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='start',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value='1',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='stop',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='-1',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function removes a substring in a UTF-8 string by using a position range. """,
                arguments={
                    "input": """A string character sequence """,
                    "start": """An integer representing the beginning position. """,
                    "stop": """An integer representing the ending position. """
                },
                result="""returns the string with the removed substring from the range. """,
            ),
            oop=None,
            name='utf8.remove',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='utf8.reverse',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='input',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""Reverses the input string. """,
                arguments={
                    "input": """A string character sequence """
                },
                result="""returns a string containing the reversed original utf-8 string. """,
            ),
            oop=None,
            name='utf8.reverse',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='utf8.reverse',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='input',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""Reverses the input string. """,
                arguments={
                    "input": """A string character sequence """
                },
                result="""returns a string containing the reversed original utf-8 string. """,
            ),
            oop=None,
            name='utf8.reverse',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='utf8.sub',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='input',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='i',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='1',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='j',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='utf8.len(input)',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""Returns a substring of the string passed. The substring starts at i. If the third argument j is not given, the substring will end at the end of the string. If the third argument is given, the substring ends at and includes j. """,
                arguments={
                    "input": """A string character sequence """,
                    "i": """An integer representing the beginning position (may be negative). """,
                    "j": """An integer representing the ending position (may be negative). """
                },
                result="""returns a string substring of the original string, containing the selected range from the original string. """,
            ),
            oop=None,
            name='utf8.sub',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='utf8.sub',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='input',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='i',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='1',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='j',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='utf8.len(input)',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""Returns a substring of the string passed. The substring starts at i. If the third argument j is not given, the substring will end at the end of the string. If the third argument is given, the substring ends at and includes j. """,
                arguments={
                    "input": """A string character sequence """,
                    "i": """An integer representing the beginning position (may be negative). """,
                    "j": """An integer representing the ending position (may be negative). """
                },
                result="""returns a string substring of the original string, containing the selected range from the original string. """,
            ),
            oop=None,
            name='utf8.sub',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='utf8.title',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='input',
                                argument_type=FunctionType(
                                    names=['string', 'int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""Converts a UTF-8 string to title case (uppercase). If input is an integer, it is treated as a codepoint and a converted codepoint (integer) is returned. """,
                arguments={
                    "input": """A string character sequence OR an integer value """
                },
                result="""returns a string in uppercase or returns an integer (see description). """,
            ),
            oop=None,
            name='utf8.title',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='utf8.title',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='input',
                                argument_type=FunctionType(
                                    names=['string', 'int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""Converts a UTF-8 string to title case (uppercase). If input is an integer, it is treated as a codepoint and a converted codepoint (integer) is returned. """,
                arguments={
                    "input": """A string character sequence OR an integer value """
                },
                result="""returns a string in uppercase or returns an integer (see description). """,
            ),
            oop=None,
            name='utf8.title',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='utf8.width',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='input',
                                argument_type=FunctionType(
                                    names=['string', 'int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='ambi_is_double',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='false',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='default_width',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""Calculates the width of UTF-8 strings with special/unprintable characters, which require special width treatment. """,
                arguments={
                    "input": """A string character sequence OR a codepoint integer """,
                    "ambi_is_double": """A boolean, if set to true, ambiguous characters width is 2 (see example below). """,
                    "default_width": """An integer, if given, is used as width for unprintable characters. """
                },
                result="""returns the integer width of the input string or the width of the codepoint integer. """,
            ),
            oop=None,
            name='utf8.width',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='utf8.width',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='input',
                                argument_type=FunctionType(
                                    names=['string', 'int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='ambi_is_double',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='false',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='default_width',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""Calculates the width of UTF-8 strings with special/unprintable characters, which require special width treatment. """,
                arguments={
                    "input": """A string character sequence OR a codepoint integer """,
                    "ambi_is_double": """A boolean, if set to true, ambiguous characters width is 2 (see example below). """,
                    "default_width": """An integer, if given, is used as width for unprintable characters. """
                },
                result="""returns the integer width of the input string or the width of the codepoint integer. """,
            ),
            oop=None,
            name='utf8.width',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='utf8.widthindex',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='input',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='location',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='ambi_is_double',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='false',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='default_width',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""Returns the location, offset and width of the character at the given location in the UTF-8 string. """,
                arguments={
                    "input": """A string character sequence """,
                    "ambi_is_double": """A boolean, if set to true, ambiguous characters width is 2 (see example). """,
                    "default_width": """An integer, if given, is used as width for unprintable characters. """
                },
                result="""returns the given location, the offset in utf-8 encoding (if cursor is in the middle of the wide char - offset will be 2) and the width of the character, otherwise only the location as integer will be returned. """,
            ),
            oop=None,
            name='utf8.widthindex',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='utf8.widthindex',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='input',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='location',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='ambi_is_double',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='false',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='default_width',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""Returns the location, offset and width of the character at the given location in the UTF-8 string. """,
                arguments={
                    "input": """A string character sequence """,
                    "ambi_is_double": """A boolean, if set to true, ambiguous characters width is 2 (see example). """,
                    "default_width": """An integer, if given, is used as width for unprintable characters. """
                },
                result="""returns the given location, the offset in utf-8 encoding (if cursor is in the middle of the wide char - offset will be 2) and the width of the character, otherwise only the location as integer will be returned. """,
            ),
            oop=None,
            name='utf8.widthindex',
        )
        ],
    )
]
