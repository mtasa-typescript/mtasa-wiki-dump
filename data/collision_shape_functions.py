# Autogenerated file. ANY CHANGES WILL BE OVERWRITTEN
from to_python.core.types import FunctionType, \
    FunctionArgument, \
    FunctionArgumentValues, \
    FunctionReturnTypes, \
    FunctionSignature, \
    FunctionDoc, \
    FunctionOOP, \
    FunctionData, \
    CompoundFunctionData
    
DUMP_PARTIAL = [
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='addColPolygonPoint',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='shape',
                                argument_type=FunctionType(
                                    names=['colshape'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='fX',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='fY',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='index',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description=""" """,
                arguments={
                    "shape": """The colshape polygon you wish add a point to. """,
                    "fX": """The X position of the new bound point. """,
                    "fY": """The Y position of the new bound point. """,
                    "index": """The index where the new point will be inserted in the polygon. The points are indexed in order, with 1 being the first bound point. Passing 0 will insert the point as the last one in the polygon.
Returns ''true'' if the polygon was changed, ''false'' if invalid arguments were passed. """
                },
                result="""returns true if the polygon was changed, false if invalid arguments were passed. """,
            ),
            oop=FunctionOOP(
                description="""None """,
                class_name='colshape',
                method_name='addPoint',
                field='None',
                is_static=False,
            ),
            name='addColPolygonPoint',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='addColPolygonPoint',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='shape',
                                argument_type=FunctionType(
                                    names=['colshape'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='fX',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='fY',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='index',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description=""" """,
                arguments={
                    "shape": """The colshape polygon you wish add a point to. """,
                    "fX": """The X position of the new bound point. """,
                    "fY": """The Y position of the new bound point. """,
                    "index": """The index where the new point will be inserted in the polygon. The points are indexed in order, with 1 being the first bound point. Passing 0 will insert the point as the last one in the polygon.
Returns ''true'' if the polygon was changed, ''false'' if invalid arguments were passed. """
                },
                result="""returns true if the polygon was changed, false if invalid arguments were passed. """,
            ),
            oop=FunctionOOP(
                description="""None """,
                class_name='colshape',
                method_name='addPoint',
                field='None',
                is_static=False,
            ),
            name='addColPolygonPoint',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='createColCircle',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['colshape'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='fX',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='fY',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='radius',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""This function creates a collision circle. This is a shape that has a position and a radius and infinite height that you can use to detect a players presence. Events will be triggered when a player enters or leaves it. """,
                arguments={
                    "fX": """The collision circles center points X axis position """,
                    "fY": """The collision circles center points Y axis position """,
                    "radius": """The radius of the collision circle. Can not be smaller than 0.1 """
                },
                result="""returns a colshape element if successful, false if invalid arguments were passed to the function. """,
            ),
            oop=FunctionOOP(
                description="""None """,
                class_name='ColShape',
                method_name='Circle',
                field='None',
                is_static=True,
            ),
            name='createColCircle',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='createColCircle',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['colshape'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='fX',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='fY',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='radius',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""This function creates a collision circle. This is a shape that has a position and a radius and infinite height that you can use to detect a players presence. Events will be triggered when a player enters or leaves it. """,
                arguments={
                    "fX": """The collision circles center points X axis position """,
                    "fY": """The collision circles center points Y axis position """,
                    "radius": """The radius of the collision circle. Can not be smaller than 0.1 """
                },
                result="""returns a colshape element if successful, false if invalid arguments were passed to the function. """,
            ),
            oop=FunctionOOP(
                description="""None """,
                class_name='ColShape',
                method_name='Circle',
                field='None',
                is_static=True,
            ),
            name='createColCircle',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='createColCuboid',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['colshape'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='fX',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='fY',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='fZ',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='fWidth',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='fDepth',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='fHeight',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""This function creates a collision cuboid. This is a shape that has a position, width, depth and height. See http://en.wikipedia.org/wiki/Cuboid Wikipedia for a definition of a cuboid. The XYZ of the col starts at the southwest bottom corner of the shape. """,
                arguments={
                    "fX": """The X position of the collision cuboids western side """,
                    "fY": """The Y position of the collision cuboids southern side """,
                    "fZ": """The Z position of the collision cuboids lowest side """,
                    "fWidth": """The collision cuboids width """,
                    "fDepth": """The collision cuboids depth """,
                    "fHeight": """The collision cuboids height """
                },
                result="""returns a colshape element if successful, false if invalid arguments were passed to the function. """,
            ),
            oop=FunctionOOP(
                description="""None """,
                class_name='ColShape',
                method_name='Cuboid',
                field='None',
                is_static=True,
            ),
            name='createColCuboid',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='createColCuboid',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['colshape'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='fX',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='fY',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='fZ',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='fWidth',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='fDepth',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='fHeight',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""This function creates a collision cuboid. This is a shape that has a position, width, depth and height. See http://en.wikipedia.org/wiki/Cuboid Wikipedia for a definition of a cuboid. The XYZ of the col starts at the southwest bottom corner of the shape. """,
                arguments={
                    "fX": """The X position of the collision cuboids western side """,
                    "fY": """The Y position of the collision cuboids southern side """,
                    "fZ": """The Z position of the collision cuboids lowest side """,
                    "fWidth": """The collision cuboids width """,
                    "fDepth": """The collision cuboids depth """,
                    "fHeight": """The collision cuboids height """
                },
                result="""returns a colshape element if successful, false if invalid arguments were passed to the function. """,
            ),
            oop=FunctionOOP(
                description="""None """,
                class_name='ColShape',
                method_name='Cuboid',
                field='None',
                is_static=True,
            ),
            name='createColCuboid',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='createColPolygon',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['colshape'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='fCenterX',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='fCenterY',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='fX1',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='fY1',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='fX2',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='fY2',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='fX3',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='fY3',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=True,
                ),
            ),
            docs=FunctionDoc(
                description="""This function creates a collision polygon. See http://en.wikipedia.org/wiki/Polygon Wikipedia for a definition of a polygon. The first set of X Y of this shape is not part of the colshape bounds, so can set anywhere in the game world, however for performance, place it as close to the centre of the polygon as you can. It should be noted this shape is 2D. There should be at least 3 bound points set. """,
                arguments={
                    "fCenterX": """The X position of the collision polygons position - the position that will be returned from getElementPosition. """,
                    "fCenterY": """The Y position of the collision polygons position - the position that will be returned from getElementPosition. """,
                    "fX1": """The 1st X position of the collision polygons bound point """,
                    "fY1": """The 1st Y position of the collision polygons bound point """,
                    "fX2": """The 2nd X position of the collision polygons bound point """,
                    "fY2": """The 2nd Y position of the collision polygons bound point """,
                    "fX3": """The 3rd X position of the collision polygons bound point """,
                    "fY3": """The 3rd Y position of the collision polygons bound point """,
                    "...": """From the 3rd position you can have as many points as you require to create the colshape. """
                },
                result="""returns a colshape element if successful, false if invalid arguments were passed to the function. """,
            ),
            oop=FunctionOOP(
                description="""None """,
                class_name='ColShape',
                method_name='Polygon',
                field='None',
                is_static=True,
            ),
            name='createColPolygon',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='createColPolygon',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['colshape'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='fCenterX',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='fCenterY',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='fX1',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='fY1',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='fX2',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='fY2',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='fX3',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='fY3',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=True,
                ),
            ),
            docs=FunctionDoc(
                description="""This function creates a collision polygon. See http://en.wikipedia.org/wiki/Polygon Wikipedia for a definition of a polygon. The first set of X Y of this shape is not part of the colshape bounds, so can set anywhere in the game world, however for performance, place it as close to the centre of the polygon as you can. It should be noted this shape is 2D. There should be at least 3 bound points set. """,
                arguments={
                    "fCenterX": """The X position of the collision polygons position - the position that will be returned from getElementPosition. """,
                    "fCenterY": """The Y position of the collision polygons position - the position that will be returned from getElementPosition. """,
                    "fX1": """The 1st X position of the collision polygons bound point """,
                    "fY1": """The 1st Y position of the collision polygons bound point """,
                    "fX2": """The 2nd X position of the collision polygons bound point """,
                    "fY2": """The 2nd Y position of the collision polygons bound point """,
                    "fX3": """The 3rd X position of the collision polygons bound point """,
                    "fY3": """The 3rd Y position of the collision polygons bound point """,
                    "...": """From the 3rd position you can have as many points as you require to create the colshape. """
                },
                result="""returns a colshape element if successful, false if invalid arguments were passed to the function. """,
            ),
            oop=FunctionOOP(
                description="""None """,
                class_name='ColShape',
                method_name='Polygon',
                field='None',
                is_static=True,
            ),
            name='createColPolygon',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='createColRectangle',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['colshape'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='fX',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='fY',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='fWidth',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='fHeight',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""This function creates a collision rectangle. This is a shape that has a position and a width and a depth. See http://en.wikipedia.org/wiki/Rectangle Rectangle for a definition of a rectangle. XY marks on the south west corner of the colshape. """,
                arguments={
                    "fX": """The X position of the collision rectangles west side """,
                    "fY": """The Y position of the collision rectangles south side """,
                    "fWidth": """The collision rectangles width """,
                    "fHeight": """The collision rectangles height """
                },
                result="""returns a colshape element if successful, false if invalid arguments were passed to the function. """,
            ),
            oop=FunctionOOP(
                description="""None """,
                class_name='ColShape',
                method_name='Rectangle',
                field='None',
                is_static=True,
            ),
            name='createColRectangle',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='createColRectangle',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['colshape'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='fX',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='fY',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='fWidth',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='fHeight',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""This function creates a collision rectangle. This is a shape that has a position and a width and a depth. See http://en.wikipedia.org/wiki/Rectangle Rectangle for a definition of a rectangle. XY marks on the south west corner of the colshape. """,
                arguments={
                    "fX": """The X position of the collision rectangles west side """,
                    "fY": """The Y position of the collision rectangles south side """,
                    "fWidth": """The collision rectangles width """,
                    "fHeight": """The collision rectangles height """
                },
                result="""returns a colshape element if successful, false if invalid arguments were passed to the function. """,
            ),
            oop=FunctionOOP(
                description="""None """,
                class_name='ColShape',
                method_name='Rectangle',
                field='None',
                is_static=True,
            ),
            name='createColRectangle',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='createColSphere',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['colshape'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='fX',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='fY',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='fZ',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='fRadius',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""This function creates a collision sphere. This is a shape that has a position and a radius. See http://en.wikipedia.org/wiki/Sphere Wikipedia for a definition of a sphere. """,
                arguments={
                    "fX": """The collision spheres center points X axis position """,
                    "fY": """The collision spheres center points Y axis position """,
                    "fZ": """The collision spheres center points Z axis position """,
                    "fRadius": """The collision spheres radius """
                },
                result="""returns a colshape element if successful, false if invalid arguments were passed to the function. """,
            ),
            oop=FunctionOOP(
                description="""None """,
                class_name='ColShape',
                method_name='Sphere',
                field='None',
                is_static=True,
            ),
            name='createColSphere',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='createColSphere',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['colshape'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='fX',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='fY',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='fZ',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='fRadius',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""This function creates a collision sphere. This is a shape that has a position and a radius. See http://en.wikipedia.org/wiki/Sphere Wikipedia for a definition of a sphere. """,
                arguments={
                    "fX": """The collision spheres center points X axis position """,
                    "fY": """The collision spheres center points Y axis position """,
                    "fZ": """The collision spheres center points Z axis position """,
                    "fRadius": """The collision spheres radius """
                },
                result="""returns a colshape element if successful, false if invalid arguments were passed to the function. """,
            ),
            oop=FunctionOOP(
                description="""None """,
                class_name='ColShape',
                method_name='Sphere',
                field='None',
                is_static=True,
            ),
            name='createColSphere',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='createColTube',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['colshape'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='fX',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='fY',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='fZ',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='fRadius',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='fHeight',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""This function creates a collision tube. This is a shape that has a position and a 2D (X/Y) radius and a height. See http://en.wikipedia.org/wiki/Cylinder_(geometry) Cylinder for a definition of a tube. A tube is similar to a colcircle, except that it has a limited height, this means you can limit the distance above the position defined by (fX, fY, fZ) that the collision is detected. """,
                arguments={
                    "fX": """The position of the base of the tubes center on the X axis """,
                    "fY": """The position of the base of the tubes center on the Y axis """,
                    "fZ": """The position of the base of the tubes center on the Z axis """,
                    "fRadius": """The collision tubes radius """,
                    "fHeight": """The collision tubes height """
                },
                result="""returns a colshape element if successful, false if invalid arguments were passed to the function. """,
            ),
            oop=FunctionOOP(
                description="""None """,
                class_name='ColShape',
                method_name='Tube',
                field='None',
                is_static=True,
            ),
            name='createColTube',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='createColTube',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['colshape'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='fX',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='fY',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='fZ',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='fRadius',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='fHeight',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""This function creates a collision tube. This is a shape that has a position and a 2D (X/Y) radius and a height. See http://en.wikipedia.org/wiki/Cylinder_(geometry) Cylinder for a definition of a tube. A tube is similar to a colcircle, except that it has a limited height, this means you can limit the distance above the position defined by (fX, fY, fZ) that the collision is detected. """,
                arguments={
                    "fX": """The position of the base of the tubes center on the X axis """,
                    "fY": """The position of the base of the tubes center on the Y axis """,
                    "fZ": """The position of the base of the tubes center on the Z axis """,
                    "fRadius": """The collision tubes radius """,
                    "fHeight": """The collision tubes height """
                },
                result="""returns a colshape element if successful, false if invalid arguments were passed to the function. """,
            ),
            oop=FunctionOOP(
                description="""None """,
                class_name='ColShape',
                method_name='Tube',
                field='None',
                is_static=True,
            ),
            name='createColTube',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='getColPolygonHeight',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='shape',
                                argument_type=FunctionType(
                                    names=['colshape'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""By default, a colshape polygon is infinitely tall.}} """,
                arguments={
                    "shape": """The colshape polygon """
                },
                result="""returns two floats, indicating the floor and ceiling of the colshape height, false if invalid arguments were passed. """,
            ),
            oop=FunctionOOP(
                description="""None """,
                class_name='colshape',
                method_name='getHeight',
                field='None',
                is_static=False,
            ),
            name='getColPolygonHeight',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='getColPolygonHeight',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='shape',
                                argument_type=FunctionType(
                                    names=['colshape'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""By default, a colshape polygon is infinitely tall.}} """,
                arguments={
                    "shape": """The colshape polygon """
                },
                result="""returns two floats, indicating the floor and ceiling of the colshape height, false if invalid arguments were passed. """,
            ),
            oop=FunctionOOP(
                description="""None """,
                class_name='colshape',
                method_name='getHeight',
                field='None',
                is_static=False,
            ),
            name='getColPolygonHeight',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='getColPolygonPointPosition',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='shape',
                                argument_type=FunctionType(
                                    names=['colshape'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='index',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description=""" """,
                arguments={
                    "shape": """The colshape polygon you wish to change. """,
                    "index": """The index of the point you wish to retrieve. The points are indexed in order, with 1 being the first bound point. """
                },
                result="""returns two floats, x and y, indicating the position of the point, false if invalid arguments were passed. """,
            ),
            oop=FunctionOOP(
                description="""None """,
                class_name='colshape',
                method_name='getPointPosition',
                field='None',
                is_static=False,
            ),
            name='getColPolygonPointPosition',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='getColPolygonPointPosition',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='shape',
                                argument_type=FunctionType(
                                    names=['colshape'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='index',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description=""" """,
                arguments={
                    "shape": """The colshape polygon you wish to change. """,
                    "index": """The index of the point you wish to retrieve. The points are indexed in order, with 1 being the first bound point. """
                },
                result="""returns two floats, x and y, indicating the position of the point, false if invalid arguments were passed. """,
            ),
            oop=FunctionOOP(
                description="""None """,
                class_name='colshape',
                method_name='getPointPosition',
                field='None',
                is_static=False,
            ),
            name='getColPolygonPointPosition',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='getColPolygonPoints',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='shape',
                                argument_type=FunctionType(
                                    names=['colshape'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description=""" """,
                arguments={
                    "shape": """The colshape polygon you wish to get the points of. """
                },
                result="""returns a table of coordinates, each coordinate being a table containing the x and y position of a bound point, false if invalid arguments were passed. """,
            ),
            oop=FunctionOOP(
                description="""None """,
                class_name='colshape',
                method_name='getPoints',
                field='None',
                is_static=False,
            ),
            name='getColPolygonPoints',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='getColPolygonPoints',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='shape',
                                argument_type=FunctionType(
                                    names=['colshape'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description=""" """,
                arguments={
                    "shape": """The colshape polygon you wish to get the points of. """
                },
                result="""returns a table of coordinates, each coordinate being a table containing the x and y position of a bound point, false if invalid arguments were passed. """,
            ),
            oop=FunctionOOP(
                description="""None """,
                class_name='colshape',
                method_name='getPoints',
                field='None',
                is_static=False,
            ),
            name='getColPolygonPoints',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='getColShapeRadius',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='shape',
                                argument_type=FunctionType(
                                    names=['colshape'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description=""" """,
                arguments={
                    "shape": """The colshape you wish to get the radius of. """
                },
                result="""returns a float containing the radius of the colshape, false if an invalid colshape was passed. """,
            ),
            oop=FunctionOOP(
                description="""None """,
                class_name='colshape',
                method_name='getRadius',
                field='None',
                is_static=False,
            ),
            name='getColShapeRadius',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='getColShapeRadius',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='shape',
                                argument_type=FunctionType(
                                    names=['colshape'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description=""" """,
                arguments={
                    "shape": """The colshape you wish to get the radius of. """
                },
                result="""returns a float containing the radius of the colshape, false if an invalid colshape was passed. """,
            ),
            oop=FunctionOOP(
                description="""None """,
                class_name='colshape',
                method_name='getRadius',
                field='None',
                is_static=False,
            ),
            name='getColShapeRadius',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='getColShapeSize',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='shape',
                                argument_type=FunctionType(
                                    names=['colshape'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description=""" """,
                arguments={
                    "shape": """The colshape you wish to get the size of. """
                },
                result="""returns up to 3 floats depending on the colshape type (see below), false if invalid arguments were passed.
*cuboid: width, depth, height.
*rectangle: width, height.
*tube: height. """,
            ),
            oop=FunctionOOP(
                description="""None """,
                class_name='colshape',
                method_name='getSize',
                field='None',
                is_static=False,
            ),
            name='getColShapeSize',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='getColShapeSize',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='shape',
                                argument_type=FunctionType(
                                    names=['colshape'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description=""" """,
                arguments={
                    "shape": """The colshape you wish to get the size of. """
                },
                result="""returns up to 3 floats depending on the colshape type (see below), false if invalid arguments were passed.
*cuboid: width, depth, height.
*rectangle: width, height.
*tube: height. """,
            ),
            oop=FunctionOOP(
                description="""None """,
                class_name='colshape',
                method_name='getSize',
                field='None',
                is_static=False,
            ),
            name='getColShapeSize',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='getColShapeType',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='shape',
                                argument_type=FunctionType(
                                    names=['colshape'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description=""" """,
                arguments={
                    "shape": """The colshape you wish to get the type of. """
                },
                result="""returns false if invalid arguments were passed, or an integer of the type of the colshape, which include:
*0: circle
*1: cuboid
*2: sphere
*3: rectangle
*4: polygon
*5: tube """,
            ),
            oop=FunctionOOP(
                description="""None """,
                class_name='colshape',
                method_name='getShapeType',
                field='shapeType',
                is_static=False,
            ),
            name='getColShapeType',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='getColShapeType',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='shape',
                                argument_type=FunctionType(
                                    names=['colshape'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description=""" """,
                arguments={
                    "shape": """The colshape you wish to get the type of. """
                },
                result="""returns false if invalid arguments were passed, or an integer of the type of the colshape, which include:
*0: circle
*1: cuboid
*2: sphere
*3: rectangle
*4: polygon
*5: tube """,
            ),
            oop=FunctionOOP(
                description="""None """,
                class_name='colshape',
                method_name='getShapeType',
                field='shapeType',
                is_static=False,
            ),
            name='getColShapeType',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='isInsideColShape',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theShape',
                                argument_type=FunctionType(
                                    names=['colshape'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='posX',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='posY',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='posZ',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description=""" """,
                arguments={
                    "theShape": """The colshape youre checking the position against. """,
                    "posX": """The X coordinate of the position youre checking. """,
                    "posY": """The Y coordinate of the position youre checking. """,
                    "posZ": """The Z coordinate of the position youre checking. """
                },
                result="""returns true if the position is inside the colshape, false if it isnt or if any parameters are invalid. """,
            ),
            oop=FunctionOOP(
                description="""None """,
                class_name='colshape',
                method_name='isInside',
                field='None',
                is_static=False,
            ),
            name='isInsideColShape',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='isInsideColShape',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theShape',
                                argument_type=FunctionType(
                                    names=['colshape'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='posX',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='posY',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='posZ',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description=""" """,
                arguments={
                    "theShape": """The colshape youre checking the position against. """,
                    "posX": """The X coordinate of the position youre checking. """,
                    "posY": """The Y coordinate of the position youre checking. """,
                    "posZ": """The Z coordinate of the position youre checking. """
                },
                result="""returns true if the position is inside the colshape, false if it isnt or if any parameters are invalid. """,
            ),
            oop=FunctionOOP(
                description="""None """,
                class_name='colshape',
                method_name='isInside',
                field='None',
                is_static=False,
            ),
            name='isInsideColShape',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='removeColPolygonPoint',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='shape',
                                argument_type=FunctionType(
                                    names=['colshape'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='index',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description=""" """,
                arguments={
                    "shape": """The colshape polygon you wish to remove a point from. """,
                    "index": """The index of the point you wish to remove. The points are indexed in order, with 1 being the first bound point. You cant remove the last 3 points. """
                },
                result="""returns true if the polygon was changed, false if invalid arguments were passed. """,
            ),
            oop=FunctionOOP(
                description="""None """,
                class_name='colshape',
                method_name='removePoint',
                field='None',
                is_static=False,
            ),
            name='removeColPolygonPoint',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='removeColPolygonPoint',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='shape',
                                argument_type=FunctionType(
                                    names=['colshape'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='index',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description=""" """,
                arguments={
                    "shape": """The colshape polygon you wish to remove a point from. """,
                    "index": """The index of the point you wish to remove. The points are indexed in order, with 1 being the first bound point. You cant remove the last 3 points. """
                },
                result="""returns true if the polygon was changed, false if invalid arguments were passed. """,
            ),
            oop=FunctionOOP(
                description="""None """,
                class_name='colshape',
                method_name='removePoint',
                field='None',
                is_static=False,
            ),
            name='removeColPolygonPoint',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='setColPolygonHeight',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='shape',
                                argument_type=FunctionType(
                                    names=['colshape'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='floor',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='ceil',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""By default, a colshape polygon is infinitely tall.}} """,
                arguments={
                    "shape": """The colshape polygon """,
                    "floor": """The polygon floor (lowest Z coordinate). Parse false to reset this value to 0. """,
                    "ceil": """The polygon ceiling (highest Z coordinate). Parse false to reset this value to infinitely tall. """
                },
                result="""returns true if the polygon was changed, false if invalid arguments were passed. """,
            ),
            oop=FunctionOOP(
                description="""None """,
                class_name='colshape',
                method_name='setHeight',
                field='None',
                is_static=False,
            ),
            name='setColPolygonHeight',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='setColPolygonHeight',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='shape',
                                argument_type=FunctionType(
                                    names=['colshape'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='floor',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='ceil',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""By default, a colshape polygon is infinitely tall.}} """,
                arguments={
                    "shape": """The colshape polygon """,
                    "floor": """The polygon floor (lowest Z coordinate). Parse false to reset this value to 0. """,
                    "ceil": """The polygon ceiling (highest Z coordinate). Parse false to reset this value to infinitely tall. """
                },
                result="""returns true if the polygon was changed, false if invalid arguments were passed. """,
            ),
            oop=FunctionOOP(
                description="""None """,
                class_name='colshape',
                method_name='setHeight',
                field='None',
                is_static=False,
            ),
            name='setColPolygonHeight',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='setColPolygonPointPosition',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='shape',
                                argument_type=FunctionType(
                                    names=['colshape'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='index',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='fX',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='fY',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description=""" """,
                arguments={
                    "shape": """The colshape polygon you wish to change. """,
                    "index": """The index of the point you wish to change. The points are indexed in order, with 1 being the first bound point. """,
                    "fX": """The new X position of the bound point. """,
                    "fY": """The new Y position of the bound point. """
                },
                result="""returns true if the polygon was changed, false if invalid arguments were passed. """,
            ),
            oop=FunctionOOP(
                description="""None """,
                class_name='colshape',
                method_name='setPointPosition',
                field='None',
                is_static=False,
            ),
            name='setColPolygonPointPosition',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='setColPolygonPointPosition',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='shape',
                                argument_type=FunctionType(
                                    names=['colshape'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='index',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='fX',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='fY',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description=""" """,
                arguments={
                    "shape": """The colshape polygon you wish to change. """,
                    "index": """The index of the point you wish to change. The points are indexed in order, with 1 being the first bound point. """,
                    "fX": """The new X position of the bound point. """,
                    "fY": """The new Y position of the bound point. """
                },
                result="""returns true if the polygon was changed, false if invalid arguments were passed. """,
            ),
            oop=FunctionOOP(
                description="""None """,
                class_name='colshape',
                method_name='setPointPosition',
                field='None',
                is_static=False,
            ),
            name='setColPolygonPointPosition',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='setColShapeRadius',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='shape',
                                argument_type=FunctionType(
                                    names=['colshape'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='radius',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description=""" """,
                arguments={
                    "shape": """The colshape you wish to change the radius of. """,
                    "radius": """The radius you want to set. """
                },
                result="""returns true if the radius was changed, or false if invalid arguments were passed. """,
            ),
            oop=FunctionOOP(
                description="""None """,
                class_name='colshape',
                method_name='setRadius',
                field='None',
                is_static=False,
            ),
            name='setColShapeRadius',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='setColShapeRadius',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='shape',
                                argument_type=FunctionType(
                                    names=['colshape'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='radius',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description=""" """,
                arguments={
                    "shape": """The colshape you wish to change the radius of. """,
                    "radius": """The radius you want to set. """
                },
                result="""returns true if the radius was changed, or false if invalid arguments were passed. """,
            ),
            oop=FunctionOOP(
                description="""None """,
                class_name='colshape',
                method_name='setRadius',
                field='None',
                is_static=False,
            ),
            name='setColShapeRadius',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='setColShapeSize',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='shape',
                                argument_type=FunctionType(
                                    names=['colshape'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='width',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='depth',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='height',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description=""" """,
                arguments={
                    "shape": """The colshape you wish to change the size of. """,
                    "width": """The collision rectangles width. """,
                    "depth": """The collision cuboids depth. """,
                    "height": """The collision tubess height. """
                },
                result="""returns true if the size was changed, false if invalid arguments were passed. """,
            ),
            oop=FunctionOOP(
                description="""None """,
                class_name='colshape',
                method_name='setSize',
                field='None',
                is_static=False,
            ),
            name='setColShapeSize',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='setColShapeSize',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='shape',
                                argument_type=FunctionType(
                                    names=['colshape'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='width',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='depth',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='height',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description=""" """,
                arguments={
                    "shape": """The colshape you wish to change the size of. """,
                    "width": """The collision rectangles width. """,
                    "depth": """The collision cuboids depth. """,
                    "height": """The collision tubess height. """
                },
                result="""returns true if the size was changed, false if invalid arguments were passed. """,
            ),
            oop=FunctionOOP(
                description="""None """,
                class_name='colshape',
                method_name='setSize',
                field='None',
                is_static=False,
            ),
            name='setColShapeSize',
        )
        ],
    )
]
