# Autogenerated file. ANY CHANGES WILL BE OVERWRITTEN
from to_python.core.types import FunctionType, \
    FunctionArgument, \
    FunctionArgumentValues, \
    FunctionReturnTypes, \
    FunctionSignature, \
    FunctionDoc, \
    FunctionOOP, \
    FunctionData, \
    CompoundFunctionData
    
DUMP_PARTIAL = [
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='aclCreate',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['acl'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='aclName',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""This function creates an ACL entry in the Access Control List system with the specified name. """,
                arguments={
                    "aclName": """The name of the ACL entry to add. """
                },
                result="""returns the created acl object if successful. returns false if an acl of the given name could not be created. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='ACL',
                method_name=None,
                field=None,
                is_static=True,
            ),
            name='aclCreate',
        )
        ],
        client=[
            
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='aclCreateGroup',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['aclgroup'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='groupName',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""This function creates a group in the ACL. An ACL group can contain objects like players and resources. They specify who has access to the ACLs in this group. """,
                arguments={
                    "groupName": """The name of the group to create """
                },
                result="""returns the pointer to the created aclgroup if successful. returns false if failed. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='aclgroup|ACLGroup',
                method_name=None,
                field=None,
                is_static=True,
            ),
            name='aclCreateGroup',
        )
        ],
        client=[
            
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='aclDestroy',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theACL',
                                argument_type=FunctionType(
                                    names=['acl'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""This function destroys the ACL passed. The destroyed ACL will no longer be valid. """,
                arguments={
                    "theACL": """The ACL to destroy """
                },
                result="""returns true if successfully destroyed and false if it could not be deleted (ie. its not valid). """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='acl',
                method_name="""destroy""",
                field=None,
                is_static=False,
            ),
            name='aclDestroy',
        )
        ],
        client=[
            
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='aclDestroyGroup',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='aclGroup',
                                argument_type=FunctionType(
                                    names=['aclgroup'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""This function destroys the given ACL group. The destroyed ACL group will no longer be valid. """,
                arguments={
                    "aclGroup": """The aclgroup element to destroy """
                },
                result="""returns true if the acl group was successfully deleted, false if it could not be deleted for some reason (ie. invalid argument). """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='aclgroup',
                method_name="""destroy""",
                field=None,
                is_static=False,
            ),
            name='aclDestroyGroup',
        )
        ],
        client=[
            
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='aclGet',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['acl'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='aclName',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""Get the ACL with the given name. If need to get most of the ACLs, you should consider using aclList to get a table of them all. """,
                arguments={
                    "aclName": """The name to get the ACL belonging to """
                },
                result="""returns the acl with that name if it could be retrieved, false/nil if the acl does not exist or it fails for some other reason. """,
            ),
            oop=FunctionOOP(
                description="""This function is a static function underneath the ACL class.""",
                class_name='ACL',
                method_name="""get""",
                field=None,
                is_static=True,
            ),
            name='aclGet',
        )
        ],
        client=[
            
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='aclGetGroup',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['aclgroup'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='groupName',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""This function is used to get the ACL group with the given name. If you need most of the groups you should consider using aclGroupList instead to get a table containing them all. """,
                arguments={
                    "groupName": """The name to get the ACL group from """
                },
                result="""returns the acl group if it could be found. returns false/nil if it did not exist or failed for some reason. """,
            ),
            oop=FunctionOOP(
                description="""This function is a static function underneath the ACL Group class.""",
                class_name='aclgroup|ACLGroup',
                method_name="""get""",
                field=None,
                is_static=True,
            ),
            name='aclGetGroup',
        )
        ],
        client=[
            
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='aclGetName',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theAcl',
                                argument_type=FunctionType(
                                    names=['acl'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""Get the name of given ACL. """,
                arguments={
                    "theACL": """The ACL to get the name of """
                },
                result="""returns the name of the given acl as a string if successful. returns false/nil if unsuccessful, ie the acl is invalid. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='acl',
                method_name="""getName""",
                field="""name""",
                is_static=False,
            ),
            name='aclGetName',
        )
        ],
        client=[
            
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='aclGetRight',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theAcl',
                                argument_type=FunctionType(
                                    names=['acl'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='rightName',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""This function returns whether the access for the given right is set to true or false in the ACL. """,
                arguments={
                    "theAcl": """The ACL to get the right from """,
                    "rightName": """The right name to return the access value of. """
                },
                result="""returns true or false if the acl gives access or not to the given function. returns nil if it failed for some reason, e.g. an invalid acl was specified or the right specified does not exist in the acl. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='acl',
                method_name="""getRight""",
                field=None,
                is_static=False,
            ),
            name='aclGetRight',
        )
        ],
        client=[
            
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='aclGroupAddACL',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theGroup',
                                argument_type=FunctionType(
                                    names=['aclgroup'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='theACL',
                                argument_type=FunctionType(
                                    names=['acl'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""This function adds the given ACL to the given ACL group. This makes the resources and players in the given ACL group have access to whats specified in the given ACL. The rights for something in the different ACLs in a group are OR-ed together, which means if one ACL gives access to something, this ACL group will have access to that. """,
                arguments={
                    "theGroup": """The group to add the ACL to """,
                    "theACL": """The ACL to add to the group """
                },
                result="""returns true if the acl could be successfully added to the acl group, false/nil if either of the elements are invalid, the acl is already in that group or if something else goes wrong. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='aclgroup',
                method_name="""addACL""",
                field=None,
                is_static=False,
            ),
            name='aclGroupAddACL',
        )
        ],
        client=[
            
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='aclGroupAddObject',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theGroup',
                                argument_type=FunctionType(
                                    names=['aclgroup'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='theObjectName',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""This function adds an object to the given ACL group. An object can be a players account, specified as:
user.<accountname>
Or a resource, specified as:
resource.<resourcename>
Objects are specified as strings. The ACL groups work for the user accounts and the resources that are specified in them. """,
                arguments={
                    "theGroup": """The group to add the object name string too. """,
                    "theObjectName": """The object string to add to the given ACL. """
                },
                result="""returns true if the object was successfully added to the acl, false if it already existed in the list. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='aclgroup',
                method_name="""addObject""",
                field=None,
                is_static=False,
            ),
            name='aclGroupAddObject',
        )
        ],
        client=[
            
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='aclGroupGetName',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='aclGroup',
                                argument_type=FunctionType(
                                    names=['aclgroup'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""This function is used to get the name of the given ACL group. """,
                arguments={
                    "aclGroup": """The ACL group to get the name of """
                },
                result="""returns the name of the given acl group as a string if successful, otherwise false or nil if the aclgroup is invalid or it fails for some other reason. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='aclgroup',
                method_name="""getName""",
                field="""name""",
                is_static=False,
            ),
            name='aclGroupGetName',
        )
        ],
        client=[
            
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='aclGroupList',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""This function returns a table of all the ACL groups. """,
                arguments={
                    
                },
                result="""returns a table of all the acl groups if successful, returns an empty table if no acl groups exist. false/nil can be returned if this function fails for some other reason. """,
            ),
            oop=FunctionOOP(
                description="""This function is a static function underneath the ACL Group class.""",
                class_name='aclgroup|ACLGroup',
                method_name="""list""",
                field=None,
                is_static=True,
            ),
            name='aclGroupList',
        )
        ],
        client=[
            
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='aclGroupListACL',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theGroup',
                                argument_type=FunctionType(
                                    names=['aclgroup'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""This function returns a table over all the ACLs that exist in a given ACL group. """,
                arguments={
                    "theGroup": """The ACL group to get the ACL elements from """
                },
                result="""returns a table of the acl elements in the given acl group. this table might be empty. returns false or nil if thegroup is invalid or it fails for some other reason. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='aclgroup',
                method_name="""listACL""",
                field="""aclList""",
                is_static=False,
            ),
            name='aclGroupListACL',
        )
        ],
        client=[
            
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='aclGroupListObjects',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theGroup',
                                argument_type=FunctionType(
                                    names=['aclgroup'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""This function returns a table over all the objects that exist in a given ACL group. These are objects like players and resources. """,
                arguments={
                    "theGroup": """The ACL group to get the objects from """
                },
                result="""returns a table of strings in the given acl group. this table might be empty. returns false or nil if thegroup is invalid or it fails for some other reason. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='aclgroup',
                method_name="""listObjects""",
                field="""objects""",
                is_static=False,
            ),
            name='aclGroupListObjects',
        )
        ],
        client=[
            
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='aclGroupRemoveACL',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theGroup',
                                argument_type=FunctionType(
                                    names=['aclgroup'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='theACL',
                                argument_type=FunctionType(
                                    names=['acl'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""This function removes the given ACL from the given ACL group. """,
                arguments={
                    "theGroup": """The group to remove the given ACL from """,
                    "theACL": """The ACL to remove from the given group """
                },
                result="""returns true if the acl was successfully removed from the acl group, false/nil if it could not be removed for some reason, ie. either of the elements were invalid. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='aclgroup',
                method_name="""removeACL""",
                field=None,
                is_static=False,
            ),
            name='aclGroupRemoveACL',
        )
        ],
        client=[
            
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='aclGroupRemoveObject',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theGroup',
                                argument_type=FunctionType(
                                    names=['aclgroup'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='theObjectString',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""This function removes the given object from the given ACL group. The object can be a resource or a player. See aclGroupAddObject for more details. """,
                arguments={
                    "theGroup": """The ACL group to remove the object string from """,
                    "theObjectString": """The object to remove from the ACL group """
                },
                result="""returns true if the object existed in the acl and could be remoevd, false if it could not be removed for some reason, ie. it did not exist in the given acl group. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='aclgroup',
                method_name="""removeObject""",
                field=None,
                is_static=False,
            ),
            name='aclGroupRemoveObject',
        )
        ],
        client=[
            
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='aclList',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""This function returns a list of all the ACLs. """,
                arguments={
                    
                },
                result="""returns a table of all the acls. this table can be empty if no acls exist. it can also return false/nil if it failed for some reason. """,
            ),
            oop=FunctionOOP(
                description="""This function is a static function underneath the ACL class.""",
                class_name='ACL',
                method_name="""list""",
                field=None,
                is_static=True,
            ),
            name='aclList',
        )
        ],
        client=[
            
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='aclListRights',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theACL',
                                argument_type=FunctionType(
                                    names=['acl'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='allowedType',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""This function returns a table of all the rights that a given ACL has. """,
                arguments={
                    "theACL": """The ACL to get the rights from """,
                    "allowedType": """The allowed right type. Possible values are general, function, resource and command """
                },
                result="""returns a table over the rights as strings in the given acl. this table might be empty. returns false or nil if theacl is invalid or it fails for some other reason. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='acl',
                method_name="""listRights""",
                field=None,
                is_static=False,
            ),
            name='aclListRights',
        )
        ],
        client=[
            
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='aclReload',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""This function reloads the ACLs and the ACL groups from the ACL XML file. All ACL and ACL group elements are invalid after a call to this and should not be used anymore. """,
                arguments={
                    
                },
                result="""returns true if the xml was successfully reloaded from the file, false or nil if the xml was invalid, didnt exist or could not be loaded for some other reason. """,
            ),
            oop=FunctionOOP(
                description="""This function is a static function underneath the ACL class.""",
                class_name='ACL',
                method_name="""reload""",
                field=None,
                is_static=True,
            ),
            name='aclReload',
        )
        ],
        client=[
            
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='aclRemoveRight',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theAcl',
                                argument_type=FunctionType(
                                    names=['acl'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='rightName',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""This function removes the given right (string) from the given ACL. """,
                arguments={
                    "theAcl": """The ACL to remove the right from """,
                    "rightName": """The ACL name to remove from the right from """
                },
                result="""returns true if the given right was successfully removed from the given acl, false or nil if it could not be removed for some reason, ie. it didnt exist in the acl. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='acl',
                method_name="""removeRight""",
                field=None,
                is_static=False,
            ),
            name='aclRemoveRight',
        )
        ],
        client=[
            
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='aclSave',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""The ACL XML file is automatically saved whenever the ACL is modified, but the automatic save can be delayed by up to 10 seconds for performance reasons. Calling this function will force an immediate save. """,
                arguments={
                    
                },
                result="""returns true if the acl was successfully changed, false or nil if it could not be saved for some reason, ie. file in use. """,
            ),
            oop=FunctionOOP(
                description="""This function is a static function underneath the ACL class.""",
                class_name='ACL',
                method_name="""save""",
                field=None,
                is_static=True,
            ),
            name='aclSave',
        )
        ],
        client=[
            
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='aclSetRight',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theAcl',
                                argument_type=FunctionType(
                                    names=['acl'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='rightName',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='hasAccess',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""This functions changes or adds the given right in the given ACL. The access can be true or false and specifies whether the ACL gives access to the right or not. """,
                arguments={
                    "theAcl": """The ACL to change the right of """,
                    "rightName": """The right to add/change the access property of """,
                    "hasAccess": """Whether the access should be set to true or false """
                },
                result="""returns true if the access was successfully changed, false or nil if it failed for some reason, ie. invalid acl or the rightname is invalid. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='acl',
                method_name="""setRight""",
                field=None,
                is_static=False,
            ),
            name='aclSetRight',
        )
        ],
        client=[
            
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='hasObjectPermissionTo',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theObject',
                                argument_type=FunctionType(
                                    names=['string', 'element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='theAction',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='defaultPermission',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='true',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""This function returns whether or not the given object has access to perform the given action.
Scripts frequently wish to limit access to features to particular users. The naïve way to do this would be to check if the player who is attempting to perform an action is in a particular group (usually the Admin group). The main issue with doing this is that the Admin group is not guaranteed to exist. It also doesnt give the server admin any flexibility. He might want to allow his moderators access to the function youre limiting access to, or he may want it disabled entirely.
This is where using the ACL properly comes in, and luckily this is very easy. It all comes down to using this function. This, somewhat confusingly named function lets you check if an ACL object (a player or a resource) has a particular ACL right. In this case, we just care about players.
So, first of all, think of a name for your right. Lets say we want a private area only certain people can go in, well call our right accessPrivateArea. Then, all you need to do is add one if statement to your code:
<syntaxhighlight lang=lua>if hasObjectPermissionTo ( player, resource.YourResourceName.accessPrivateArea, false ) then
-- Whatever you want to happen if theyre allowed in
else
-- Whatever you want to happen if they arent
end
</syntaxhighlight>
Notice that weve named the right using resource.YourResourceName.accessPrivateArea - this is just for neatness, so that the admin knows what resource the right belongs to. Its strongly advised you follow this convention. The false argument specifies the defaultPermission, false indicating that if the user hasnt had the right allowed or dissallowed (i.e. the admin hasnt added it to the config), that it should default to being not allowed.
The only downside of using this method is that the admin has to modify his config. The upsides are that the admin has much more control and your script will work for any server, however the admin has configured it. """,
                arguments={
                    "theObject": """The object to test if has permission to. This can be a client element (ie. a player), a resource or a string in the form user.<name> or resource.<name>. """,
                    "theAction": """The action to test if the given object has access to. Ie. function.kickPlayer. """,
                    "defaultPermission": """The default permission if none is specified in either of the groups the given object is a member of. If this is left to true, the given object will have permissions to perform the action unless the opposite is explicitly specified in the ACL. If false, the action will be denied by default unless explicitly approved by the Access Control List. """
                },
                result="""returns true if the given object has permission to perform the given action, false otherwise. returns nil if the function failed because of bad arguments. """,
            ),
            oop=FunctionOOP(
                description="""This function is also a static function underneath the ACL class.""",
                class_name='ACL',
                method_name="""hasObjectPermissionTo""",
                field=None,
                is_static=True,
            ),
            name='hasObjectPermissionTo',
        )
        ],
        client=[
            
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='isObjectInACLGroup',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theObject',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='theGroup',
                                argument_type=FunctionType(
                                    names=['aclgroup'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
            ),
            docs=FunctionDoc(
                description="""This function is used to determine if an object is in a group. """,
                arguments={
                    "theObject": """the name of the object to check. Examples: resource.ctf, user.Jim. """,
                    "theGroup": """the ACL group pointer of the group from which the object should be found. """
                },
                result="""returns true if the object is in the specified group, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='aclgroup',
                method_name="""doesContainObject""",
                field=None,
                is_static=False,
            ),
            name='isObjectInACLGroup',
        )
        ],
        client=[
            
        ],
    )
]
