# Autogenerated file. ANY CHANGES WILL BE OVERWRITTEN
from to_python.core.types import FunctionType, \
    FunctionArgument, \
    FunctionArgumentValues, \
    FunctionReturnTypes, \
    FunctionSignature, \
    FunctionDoc, \
    FunctionData, \
    CompoundFunctionData
    
DUMP_PARTIAL = [
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='addElementDataSubscriber',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='key',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='thePlayer',
                                argument_type=FunctionType(
                                    names=['player'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function is used together with setElementData in subscribe mode. """,
                arguments={
                    "theElement": """The element you wish to subscribe the player to. """,
                    "key": """The key you wish to subscribe the player to. """,
                    "thePlayer": """The player you wish to subscribe. """
                },
                result="""returns true if the player was subscribed, false otherwise. """,
            ),
            name='addElementDataSubscriber',
        )
        ],
        client=[
            
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='attachElements',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='theAttachToElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='xPosOffset',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='yPosOffset',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='zPosOffset',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='xRotOffset',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='yRotOffset',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='zRotOffset',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function attaches one element to another, so that the first one follows the second whenever it moves.
If an attempt is made to attach two elements that are already attached the opposite way (eg theElement becomes theAttachToElement and vice versa), the 1st attachment order is automatically detached in favor of the 2nd attachment order. For example, if carA was attached to carB, now carB is attached to carA. Also, an element cannot be attached to two separate elements at one time. For example, two cars can be attached to one single car, but one single car cannot be attached to two separate cars. If you attempt to do this, the existing attachment will automatically be dropped in favor of the new attachment. For example, if carA is asked to attached to carB then carC, it is only attached to carC.
This is not compatible with all elements.  The following elements are compatible:
* Peds
* Players
* Blips
* Vehicles
* Objects
* Markers
* Pickups
* Sounds
* Colshapes
* createWeapon|Weapons
* Cameras
*The offset coodinates reflect the object space, not the world space. This means that you cannot calculate the exact offsets between two objects by pre-positioning them in the map editor as a reference. Please see attachElementsOffsets for more details.
*Due to a limitation in GTA, unexpected attach rotations may occur if all rotation offsets are non-zero. (i.e. Try to ensure at least one of xRotOffset, yRotOffset or zRotOffset is zero).}} """,
                arguments={
                    "theElement": """The element to be attached. """,
                    "theAttachToElement": """The element to attach the first to. """,
                    "xPosOffset": """The x offset, if you want the elements to be a certain distance from one another (default 0). """,
                    "yPosOffset": """The y offset (default 0). """,
                    "zPosOffset": """The z offset (default 0). """,
                    "xRotOffset": """The x rotation offset (default 0). """,
                    "yRotOffset": """The y rotation offset (default 0). """,
                    "zRotOffset": """The z rotation offset (default 0). """
                },
                result="""returns true if the attaching process was successful, false otherwise. """,
            ),
            name='attachElements',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='attachElements',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='theAttachToElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='xPosOffset',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='yPosOffset',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='zPosOffset',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='xRotOffset',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='yRotOffset',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='zRotOffset',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function attaches one element to another, so that the first one follows the second whenever it moves.
If an attempt is made to attach two elements that are already attached the opposite way (eg theElement becomes theAttachToElement and vice versa), the 1st attachment order is automatically detached in favor of the 2nd attachment order. For example, if carA was attached to carB, now carB is attached to carA. Also, an element cannot be attached to two separate elements at one time. For example, two cars can be attached to one single car, but one single car cannot be attached to two separate cars. If you attempt to do this, the existing attachment will automatically be dropped in favor of the new attachment. For example, if carA is asked to attached to carB then carC, it is only attached to carC.
This is not compatible with all elements.  The following elements are compatible:
* Peds
* Players
* Blips
* Vehicles
* Objects
* Markers
* Pickups
* Sounds
* Colshapes
* createWeapon|Weapons
* Cameras
*The offset coodinates reflect the object space, not the world space. This means that you cannot calculate the exact offsets between two objects by pre-positioning them in the map editor as a reference. Please see attachElementsOffsets for more details.
*Due to a limitation in GTA, unexpected attach rotations may occur if all rotation offsets are non-zero. (i.e. Try to ensure at least one of xRotOffset, yRotOffset or zRotOffset is zero).}} """,
                arguments={
                    "theElement": """The element to be attached. """,
                    "theAttachToElement": """The element to attach the first to. """,
                    "xPosOffset": """The x offset, if you want the elements to be a certain distance from one another (default 0). """,
                    "yPosOffset": """The y offset (default 0). """,
                    "zPosOffset": """The z offset (default 0). """,
                    "xRotOffset": """The x rotation offset (default 0). """,
                    "yRotOffset": """The y rotation offset (default 0). """,
                    "zRotOffset": """The z rotation offset (default 0). """
                },
                result="""returns true if the attaching process was successful, false otherwise. """,
            ),
            name='attachElements',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='clearElementVisibleTo',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function clears any settings added by setElementVisibleTo and restores an element to its default visibility.  This does not work with all entities - vehicles, players and objects are exempt. This is because these objects are required for accurate sync (theyre physical objects). This function is particularily useful for changing the visibility of markers, radar blips and radar areas. """,
                arguments={
                    "theElement": """The element in which you wish to restore to its default visibility """
                },
                result="""returns true if the operation was successful, false otherwise. """,
            ),
            name='clearElementVisibleTo',
        )
        ],
        client=[
            
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='cloneElement',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='xPos',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='yPos',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='zPos',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='cloneChildren',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='false',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function clones (creates an exact copy of) an already existing element. The root node, and player elements, cannot be cloned. If a player element is a child of an element that is cloned, it will be skipped, along with the elements that exist as a child to the player element.
Players are not the only elements that cannot be cloned. This list also includes remoteclients, and console elements.
The cloned element will be placed on the element tree as a child of the same parent as the cloned element. """,
                arguments={
                    "theElement": """The element that you wish to clone. """,
                    "xPos": """: A floating point number representing the X coordinate on the map. """,
                    "yPos": """: A floating point number representing the Y coordinate on the map. """,
                    "zPos": """: A floating point number representing the Z coordinate on the map. """,
                    "cloneChildren": """: A boolean value representing whether or not the elements children will be cloned.
'''Note: if 'cloneChildren' is true, the position floats will be offsets from the cloned element's position.''' """
                },
                result="""returns the handle of the new cloned element of the parent, false if invalid arguments were passed. """,
            ),
            name='cloneElement',
        )
        ],
        client=[
            
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='createElement',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='elementType',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='elementID',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=True,
                                ),
                                default_value='nil',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function is used to create a new dummy element in the element tree which do not necessarily represent an entity within the San Andreas world. A common use for this function is for creating custom elements, such as a Flag or a Base.
Elements created using this function are placed in the element tree with their parent as the dynamic map element. """,
                arguments={
                    "elementType": """The type of element being created. """,
                    "elementID": """The ID of the element being created. """
                },
                result="""returns the element if it was successfully created. returns false if the arguments are wrong. """,
            ),
            name='createElement',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='createElement',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='elementType',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='elementID',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=True,
                                ),
                                default_value='nil',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function is used to create a new dummy element in the element tree which do not necessarily represent an entity within the San Andreas world. A common use for this function is for creating custom elements, such as a Flag or a Base.
Elements created using this function are placed in the element tree with their parent as the dynamic map element. """,
                arguments={
                    "elementType": """The type of element being created. """,
                    "elementID": """The ID of the element being created. """
                },
                result="""returns the element if it was successfully created. returns false if the arguments are wrong. """,
            ),
            name='createElement',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='destroyElement',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='elementToDestroy',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function destroys an element and all elements within it in the hierarchy (its children, the children of those children etc). player|Player elements cannot be destroyed using this function. A player can only be removed from the hierarchy when they quit or are kicked. The root element also cannot be destroyed, however, passing the root as an argument will wipe all elements from the server, except for the players and clients, which will become direct descendants of the root node, and other elements that cannot be destroyed, such as resource root elements.
Players are not the only elements that cannot be deleted. This list also includes remote clients and console elements. """,
                arguments={
                    "elementToDestroy": """The element you wish to destroy. """
                },
                result="""returns true if the element was destroyed successfully, false if either the element passed to it was invalid or it could not be destroyed for some other reason (for example, clientside destroyelement cant destroy serverside elements). """,
            ),
            name='destroyElement',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='destroyElement',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='elementToDestroy',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function destroys an element and all elements within it in the hierarchy (its children, the children of those children etc). player|Player elements cannot be destroyed using this function. A player can only be removed from the hierarchy when they quit or are kicked. The root element also cannot be destroyed, however, passing the root as an argument will wipe all elements from the server, except for the players and clients, which will become direct descendants of the root node, and other elements that cannot be destroyed, such as resource root elements.
Players are not the only elements that cannot be deleted. This list also includes remote clients and console elements. """,
                arguments={
                    "elementToDestroy": """The element you wish to destroy. """
                },
                result="""returns true if the element was destroyed successfully, false if either the element passed to it was invalid or it could not be destroyed for some other reason (for example, clientside destroyelement cant destroy serverside elements). """,
            ),
            name='destroyElement',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='detachElements',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='theAttachToElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function detaches attached elements from one another. """,
                arguments={
                    "theElement": """The element to be detached (the child) """,
                    "theAttachToElement": """The element you wish to detach from, will detach from the attached element if this isnt specified. """
                },
                result="""returns true if the detaching was successful, false otherwise. """,
            ),
            name='detachElements',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='detachElements',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='theAttachToElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function detaches attached elements from one another. """,
                arguments={
                    "theElement": """The element to be detached (the child) """,
                    "theAttachToElement": """The element you wish to detach from, will detach from the attached element if this isnt specified. """
                },
                result="""returns true if the detaching was successful, false otherwise. """,
            ),
            name='detachElements',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='getAllElementData',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""Returns a table of all element data of an element. """,
                arguments={
                    "theElement": """the element you want to get the element data of. """
                },
                result="""if successful, returns a table with as keys the names of the element data and as values the corresponding element data values. returns false in case of failure. """,
            ),
            name='getAllElementData',
        )
        ],
        client=[
            
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='getAttachedElements',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function returns a table of all the elements attached to the specified element """,
                arguments={
                    "theElement": """: The element which you require the information from. """
                },
                result="""returns a table of all the elements attached to the specified element. """,
            ),
            name='getAttachedElements',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='getAttachedElements',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function returns a table of all the elements attached to the specified element """,
                arguments={
                    "theElement": """: The element which you require the information from. """
                },
                result="""returns a table of all the elements attached to the specified element. """,
            ),
            name='getAttachedElements',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='getElementAlpha',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function returns the alpha (transparency) value for the specified element. This can be a player, ped, object, vehicle or Element/Weapon|weapon. """,
                arguments={
                    "theElement": """The element whose alpha you want to retrieve. """
                },
                result="""returns an integer (0-255; 0 = transparent) indicating the elements alpha, or false if invalid arguments were passed. """,
            ),
            name='getElementAlpha',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='getElementAlpha',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function returns the alpha (transparency) value for the specified element. This can be a player, ped, object, vehicle or Element/Weapon|weapon. """,
                arguments={
                    "theElement": """The element whose alpha you want to retrieve. """
                },
                result="""returns an integer (0-255; 0 = transparent) indicating the elements alpha, or false if invalid arguments were passed. """,
            ),
            name='getElementAlpha',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='getElementAngularVelocity',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description=""" """,
                arguments={
                    "theElement": """The element to retrieve the angular velocity from. Can be either a player, ped, object, vehicle or a Element/Weapon|custom weapon. Server side supports only vehicles currently. """
                },
                result="""returns three floats describing the x, y and z rotation """,
            ),
            name='getElementAngularVelocity',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='getElementAngularVelocity',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description=""" """,
                arguments={
                    "theElement": """The element to retrieve the angular velocity from. Can be either a player, ped, object, vehicle or a Element/Weapon|custom weapon. Server side supports only vehicles currently. """
                },
                result="""returns three floats describing the x, y and z rotation """,
            ),
            name='getElementAngularVelocity',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='getElementAttachedOffsets',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function returns the offsets of an element that has been attached to another element using attachElements. """,
                arguments={
                    "theElement": """The attached element. """
                },
                result="""returns 6 float|floats, of which the first 3 indicate the position offset (x, y, z), and the last 3 indicate the rotation offset (x, y, z), if successful. false otherwise. """,
            ),
            name='getElementAttachedOffsets',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='getElementAttachedOffsets',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function returns the offsets of an element that has been attached to another element using attachElements. """,
                arguments={
                    "theElement": """The attached element. """
                },
                result="""returns 6 float|floats, of which the first 3 indicate the position offset (x, y, z), and the last 3 indicate the rotation offset (x, y, z), if successful. false otherwise. """,
            ),
            name='getElementAttachedOffsets',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='getElementAttachedTo',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function determines the element that the specified element is attached to. """,
                arguments={
                    "theElement": """The element you require the information for. """
                },
                result="""returns the element that the chosen element is attached to, or false if the element isnt attached to another element. """,
            ),
            name='getElementAttachedTo',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='getElementAttachedTo',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function determines the element that the specified element is attached to. """,
                arguments={
                    "theElement": """The element you require the information for. """
                },
                result="""returns the element that the chosen element is attached to, or false if the element isnt attached to another element. """,
            ),
            name='getElementAttachedTo',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='getElementBoneMatrix',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='bone',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""* Element/Player|Player
* Element/Ped|Ped """,
                arguments={
                    "theElement": """the element to get the bone matrix on. """,
                    "bone": """the ID of the bone to get the matrix of. See Bone IDs """
                },
                result="""returns a multi-dimensional array (which can be transformed into a proper matrix class using matrix.create method) containing a 4x4 matrix. returns false if invalid arguments were passed. """,
            ),
            name='getElementBoneMatrix',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='getElementBonePosition',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='bone',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""* Element/Player|Player
* Element/Ped|Ped """,
                arguments={
                    "theElement": """the element to get the bone position on. """,
                    "bone": """the ID of the bone to get the position of. See Bone IDs """
                },
                result="""returns the x, y, z world position of the bone. """,
            ),
            name='getElementBonePosition',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='getElementBoneRotation',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='bone',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""* Element/Player|Player
* Element/Ped|Ped """,
                arguments={
                    "theElement": """the element to get the bone rotation on. """,
                    "bone": """the ID of the bone to get the rotation of. See Bone IDs """
                },
                result="""returns the yaw, pitch, roll rotation values. """,
            ),
            name='getElementBoneRotation',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='getElementBoundingBox',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function returns the minimum and maximum coordinates of an elements bounding box.
It should be noted that the values returned are relative to the position of the element, and as such if you wish to get world coordinates for drawing, etc., you should retrieve the position of the element and add the returned values onto that. """,
                arguments={
                    "theElement": """the element whose bounding box we want to get. """
                },
                result="""*returns min x, min y, min z, max x, max y, max z if the passed element is valid and streamed in, false otherwise. """,
            ),
            name='getElementBoundingBox',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='getElementByID',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='id',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='index',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function returns an element from the specified ID. If more than one element with the same ID exists, only the first one in the order it appears in the XML tree will be returned by this function. """,
                arguments={
                    "id": """The ID of the element as it appears in the XML file or as set by setElementID. """,
                    "index": """If there are two or more elements of the same ID it will return the element with the specified index starting at 0. """
                },
                result="""returns the element with the given id, or false if no such element exists. """,
            ),
            name='getElementByID',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='getElementByID',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='id',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='index',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function returns an element from the specified ID. If more than one element with the same ID exists, only the first one in the order it appears in the XML tree will be returned by this function. """,
                arguments={
                    "id": """The ID of the element as it appears in the XML file or as set by setElementID. """,
                    "index": """If there are two or more elements of the same ID it will return the element with the specified index starting at 0. """
                },
                result="""returns the element with the given id, or false if no such element exists. """,
            ),
            name='getElementByID',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='getElementByIndex',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theType',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='index',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function returns an element of the specified type with the specified index. """,
                arguments={
                    "theType": """the type of the element to be returned. Examples include player, vehicle, or a custom type. """,
                    "index": """the elements index (0 for the first element, 1 for the second, etc). """
                },
                result="""returns the requested element, or false if it doesnt exist. """,
            ),
            name='getElementByIndex',
        )
        ],
        client=[
            
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='getElementChild',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='parent',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='index',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function returns one of the child elements of a given parent element. The child element is selected by its index (0 for the first child, 1 for the second and so on). """,
                arguments={
                    "parent": """the element above the one to be returned in the hierarchy. """,
                    "index": """the elements index (0 for the first element, 1 for the second, etc). """
                },
                result="""returns the requested element if it exists, or false if it doesnt. """,
            ),
            name='getElementChild',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='getElementChild',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='parent',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='index',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function returns one of the child elements of a given parent element. The child element is selected by its index (0 for the first child, 1 for the second and so on). """,
                arguments={
                    "parent": """the element above the one to be returned in the hierarchy. """,
                    "index": """the elements index (0 for the first element, 1 for the second, etc). """
                },
                result="""returns the requested element if it exists, or false if it doesnt. """,
            ),
            name='getElementChild',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='getElementChildren',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='parent',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='theType',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=True,
                                ),
                                default_value='nil',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function is used to retrieve a list of the child elements of a given parent element. Note that it will only return direct children and not elements that are further down the element tree. """,
                arguments={
                    "parent": """Supply this argument with the parent of the children you want returned. """,
                    "theType": """The type of element you want a list of. This is the same as the tag name in the .map file, so this can be used with a custom element type if desired. Built in types are: """,
                    "player": """A player connected to the server """,
                    "ped": """A ped """,
                    "water": """A water polygon """,
                    "sound": """A playing sound """,
                    "vehicle": """A vehicle """,
                    "object": """An object """,
                    "pickup": """A pickup """,
                    "marker": """A marker """,
                    "colshape": """A collision shape """,
                    "blip": """A blip """,
                    "radararea": """A radar area """,
                    "team": """A team """,
                    "spawnpoint": """A spawnpoint """,
                    "remoteclient": """A remote client connected to the server """,
                    "console": """The server Console """
                },
                result="""this function returns a table that contains a list of elements that the parent has. if the element has no children, it will return an empy table. it will return false if the parent element does not exist. """,
            ),
            name='getElementChildren',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='getElementChildren',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='parent',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='theType',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=True,
                                ),
                                default_value='nil',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function is used to retrieve a list of the child elements of a given parent element. Note that it will only return direct children and not elements that are further down the element tree. """,
                arguments={
                    "parent": """Supply this argument with the parent of the children you want returned. """,
                    "theType": """The type of element you want a list of. This is the same as the tag name in the .map file, so this can be used with a custom element type if desired. Built in types are: """,
                    "player": """A player connected to the server """,
                    "ped": """A ped """,
                    "water": """A water polygon """,
                    "sound": """A playing sound """,
                    "vehicle": """A vehicle """,
                    "object": """An object """,
                    "pickup": """A pickup """,
                    "marker": """A marker """,
                    "colshape": """A collision shape """,
                    "blip": """A blip """,
                    "radararea": """A radar area """,
                    "team": """A team """,
                    "spawnpoint": """A spawnpoint """,
                    "remoteclient": """A remote client connected to the server """,
                    "console": """The server Console """
                },
                result="""this function returns a table that contains a list of elements that the parent has. if the element has no children, it will return an empy table. it will return false if the parent element does not exist. """,
            ),
            name='getElementChildren',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='getElementChildrenCount',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='parent',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function returns the number of children an element has. Note that only the direct children are counted and not elements that are further down the element tree. """,
                arguments={
                    "parent": """the parent element """
                },
                result="""returns an int with the number of child elements, or false if the parent element does not exist. """,
            ),
            name='getElementChildrenCount',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='getElementChildrenCount',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='parent',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function returns the number of children an element has. Note that only the direct children are counted and not elements that are further down the element tree. """,
                arguments={
                    "parent": """the parent element """
                },
                result="""returns an int with the number of child elements, or false if the parent element does not exist. """,
            ),
            name='getElementChildrenCount',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='getElementCollisionsEnabled',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function indicates if a specific element is set to have collisions disabled. An element without collisions does not interact with the physical environment and remains static. """,
                arguments={
                    "theElement": """The element for which you want to check whether collisions are enabled """
                },
                result="""returns true if the collisions are enabled, false otherwise. """,
            ),
            name='getElementCollisionsEnabled',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='getElementCollisionsEnabled',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function indicates if a specific element is set to have collisions disabled. An element without collisions does not interact with the physical environment and remains static. """,
                arguments={
                    "theElement": """The element for which you want to check whether collisions are enabled """
                },
                result="""returns true if the collisions are enabled, false otherwise. """,
            ),
            name='getElementCollisionsEnabled',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='getElementColShape',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['colshape'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""Some elements have an associated colshape, for example Marker and Pickup. This function is used to get the associated colshape. """,
                arguments={
                    "theElement": """The element you want to get the colshape of """
                },
                result="""returns colshape of the element, false if not or an invalid argument was passed to the function. """,
            ),
            name='getElementColShape',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='getElementColShape',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['colshape'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""Some elements have an associated colshape, for example Marker and Pickup. This function is used to get the associated colshape. """,
                arguments={
                    "theElement": """The element you want to get the colshape of """
                },
                result="""returns colshape of the element, false if not or an invalid argument was passed to the function. """,
            ),
            name='getElementColShape',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='getElementData',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['var'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='key',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='inherit',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='true',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function retrieves element data attached to an element under a certain key. """,
                arguments={
                    "theElement": """This is the element with data you want to retrieve. """,
                    "key": """The name of the element data entry you want to retrieve. (Maximum 31 characters.) """,
                    "inherit": """- toggles whether or not the function should go up the hierarchy to find the requested key in case the specified element doesnt have it. """
                },
                result="""this function returns a variable containing the requested element data, or false if the element or the element data does not exist. when getting data corresponding to a xml attribute, this is always a string. """,
            ),
            name='getElementData',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='getElementData',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['var'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='key',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='inherit',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='true',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function retrieves element data attached to an element under a certain key. """,
                arguments={
                    "theElement": """This is the element with data you want to retrieve. """,
                    "key": """The name of the element data entry you want to retrieve. (Maximum 31 characters.) """,
                    "inherit": """- toggles whether or not the function should go up the hierarchy to find the requested key in case the specified element doesnt have it. """
                },
                result="""this function returns a variable containing the requested element data, or false if the element or the element data does not exist. when getting data corresponding to a xml attribute, this is always a string. """,
            ),
            name='getElementData',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='getElementDimension',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function allows you to retrieve the dimension of any element. The dimension determines what/who the element is visible to. """,
                arguments={
                    "theElement": """The element in which youd like to retrieve the dimension of. """
                },
                result="""returns an integer for the dimension if theelement is valid, false otherwise. """,
            ),
            name='getElementDimension',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='getElementDimension',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function allows you to retrieve the dimension of any element. The dimension determines what/who the element is visible to. """,
                arguments={
                    "theElement": """The element in which youd like to retrieve the dimension of. """
                },
                result="""returns an integer for the dimension if theelement is valid, false otherwise. """,
            ),
            name='getElementDimension',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='getElementDistanceFromCentreOfMassToBaseOfModel',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function is used to retrieve the distance between a elements centre of mass to the base of the model. This can be used to calculate the position the element has to be set to, to have it on ground level. """,
                arguments={
                    
                },
                result="""returns a float with the distance, or false if the element is invalid. """,
            ),
            name='getElementDistanceFromCentreOfMassToBaseOfModel',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='getElementHealth',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function returns the current health for the specified element. This can be a player, a ped, a vehicle, or an object. """,
                arguments={
                    "theElement": """The player or vehicle whose health you want to check. """
                },
                result="""returns a float indicating the elements health, or false if invalid arguments were passed. """,
            ),
            name='getElementHealth',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='getElementHealth',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function returns the current health for the specified element. This can be a player, a ped, a vehicle, or an object. """,
                arguments={
                    "theElement": """The player or vehicle whose health you want to check. """
                },
                result="""returns a float indicating the elements health, or false if invalid arguments were passed. """,
            ),
            name='getElementHealth',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='getElementID',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function gets the ID of an element. This is the id attribute of the element and is a string, NOT a number like a model ID, weapons ID or similar. """,
                arguments={
                    "theElement": """the element from which to retrieve the ID. """
                },
                result="""this returns a string containing the element id. it will return an empty string if it has no id. it will return false if the element is invalid. """,
            ),
            name='getElementID',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='getElementID',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function gets the ID of an element. This is the id attribute of the element and is a string, NOT a number like a model ID, weapons ID or similar. """,
                arguments={
                    "theElement": """the element from which to retrieve the ID. """
                },
                result="""this returns a string containing the element id. it will return an empty string if it has no id. it will return false if the element is invalid. """,
            ),
            name='getElementID',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='getElementInterior',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function allows you to retrieve the interior of any element. An interior is the current loaded place, 0 being outside. """,
                arguments={
                    "theElement": """The element of which youd like to retrieve the interior """
                },
                result="""returns an int for the interior if theelement is valid, false otherwise. """,
            ),
            name='getElementInterior',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='getElementInterior',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function allows you to retrieve the interior of any element. An interior is the current loaded place, 0 being outside. """,
                arguments={
                    "theElement": """The element of which youd like to retrieve the interior """
                },
                result="""returns an int for the interior if theelement is valid, false otherwise. """,
            ),
            name='getElementInterior',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='getElementMatrix',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='legacy',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='true',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function gets an elements transform matrix. This contains 16 float values that multiplied to a point will give you the point transformed. It is most useful for matrix calculations such as calculating offsets. For further information, please refer to a tutorial of matrices in computer graphics programming. """,
                arguments={
                    "theElement": """The element which you wish to retrieve the matrix for. """,
                    "legacy": """Set to false to return correctly setup matrix (i.e. Last column in the first 3 rows set to zero). """
                },
                result="""returns a multi-dimensional array (which can be transformed into a proper matrix class using matrix.create method) containing a 4x4 matrix. returns false if the element is not streamed in, and not a vehicle, ped or object. """,
            ),
            name='getElementMatrix',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='getElementMatrix',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='legacy',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='true',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function gets an elements transform matrix. This contains 16 float values that multiplied to a point will give you the point transformed. It is most useful for matrix calculations such as calculating offsets. For further information, please refer to a tutorial of matrices in computer graphics programming. """,
                arguments={
                    "theElement": """The element which you wish to retrieve the matrix for. """,
                    "legacy": """Set to false to return correctly setup matrix (i.e. Last column in the first 3 rows set to zero). """
                },
                result="""returns a multi-dimensional array (which can be transformed into a proper matrix class using matrix.create method) containing a 4x4 matrix. returns false if the element is not streamed in, and not a vehicle, ped or object. """,
            ),
            name='getElementMatrix',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='getElementModel',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""Returns the model ID of a given element. This can be a player/ped skin, a pickup model, an object model or a vehicle model. """,
                arguments={
                    "theElement": """the element to retrieve the model ID of. """
                },
                result="""returns the model id if successful, false otherwise.
* for players/peds: a gtasa player model (skin) id. see character skins.
* for vehicles: the vehicle ids|vehicle id of the vehicle.
* for objects: an int specifying the model id. """,
            ),
            name='getElementModel',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='getElementModel',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""Returns the model ID of a given element. This can be a player/ped skin, a pickup model, an object model or a vehicle model. """,
                arguments={
                    "theElement": """the element to retrieve the model ID of. """
                },
                result="""returns the model id if successful, false otherwise.
* for players/peds: a gtasa player model (skin) id. see character skins.
* for vehicles: the vehicle ids|vehicle id of the vehicle.
* for objects: an int specifying the model id. """,
            ),
            name='getElementModel',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='getElementParent',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function is used to determine the parent of an element. """,
                arguments={
                    "theElement": """The child of the parent element you want returned. """
                },
                result="""this returns the parent as an element. it returns false if theelement is invalid, or is the root node. """,
            ),
            name='getElementParent',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='getElementParent',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function is used to determine the parent of an element. """,
                arguments={
                    "theElement": """The child of the parent element you want returned. """
                },
                result="""this returns the parent as an element. it returns false if theelement is invalid, or is the root node. """,
            ),
            name='getElementParent',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='getElementPosition',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""The getElementPosition function allows you to retrieve the position coordinates of an element.  This can be any real world element, including:
* Element/Player|Players
* Element/Vehicle|Vehicles
* Element/Object|Objects
* Element/Pickup|Pickups
* Element/Marker|Markers
* Element/Collision shape|Collision shapes
* Element/Blip|Blips
* Element/Radar area|Radar areas """,
                arguments={
                    "theElement": """The element which youd like to retrieve the location of """
                },
                result="""returns three floats indicating the position of the element, x, y and z respectively. """,
            ),
            name='getElementPosition',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='getElementPosition',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""The getElementPosition function allows you to retrieve the position coordinates of an element.  This can be any real world element, including:
* Element/Player|Players
* Element/Vehicle|Vehicles
* Element/Object|Objects
* Element/Pickup|Pickups
* Element/Marker|Markers
* Element/Collision shape|Collision shapes
* Element/Blip|Blips
* Element/Radar area|Radar areas """,
                arguments={
                    "theElement": """The element which youd like to retrieve the location of """
                },
                result="""returns three floats indicating the position of the element, x, y and z respectively. """,
            ),
            name='getElementPosition',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='getElementRadius',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function gets the radius of an element. Normally, sphere or circle-shaped elements tend to return a more accurate and expected radius than others with another shapes. """,
                arguments={
                    "theElement": """The element to get the radius of. It can be any entity type, such as: """,
                    "player|Players": """. """,
                    "ped|Peds": """. """,
                    "vehicle|Vehicles": """. """,
                    "object|Objects": """. """
                },
                result="""returns a float containing the radius if the element is valid, false otherwise. """,
            ),
            name='getElementRadius',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='getElementRotation',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='rotOrder',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=True,
                                ),
                                default_value='"default"',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""Retrieve the rotation of elements. """,
                arguments={
                    "theElement": """The element whose rotation will be retrieved """,
                    "rotOrder": """A string representing the rotation order desired when returning the http://en.wikipedia.org/wiki/Euler_angles euler angles. If omitted, default value is default. Allowed values are: """,
                    "default": """default MTA behavior prior to 1.1, where rotation order depends on element type """,
                    "ZXY": """rotation about the Z axis (up), then about the resulting X axis (right) and finally about the resulting Y axis (front). This is the default rotation order for object|objects """,
                    "ZYX": """rotation about the Z axis (up), then about the resulting Y axis (front), and finally about the resulting X axis (right). This is the default rotation order for vehicle|vehicles
The default rotation order for peds/players is Z-Y-X (clientside) and -Z-Y-X (serverside) but those rotation orders (set using ''"default"'' on peds) can not be used manually on other element types since they only exist due to historical and backward compatibility reasons.
Specifying a rotation order other than ''"default"'' allows the same angles to later be uniformly used on several elements without having to consider their type. """
                },
                result="""* rx, ry, rz: 3 floats representing the euler rotation angles on the axis x, y and z (with the rotation order depending on the rotorder argument) if element exists and is a valid element, false if its invalid. """,
            ),
            name='getElementRotation',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='getElementRotation',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='rotOrder',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=True,
                                ),
                                default_value='"default"',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""Retrieve the rotation of elements. """,
                arguments={
                    "theElement": """The element whose rotation will be retrieved """,
                    "rotOrder": """A string representing the rotation order desired when returning the http://en.wikipedia.org/wiki/Euler_angles euler angles. If omitted, default value is default. Allowed values are: """,
                    "default": """default MTA behavior prior to 1.1, where rotation order depends on element type """,
                    "ZXY": """rotation about the Z axis (up), then about the resulting X axis (right) and finally about the resulting Y axis (front). This is the default rotation order for object|objects """,
                    "ZYX": """rotation about the Z axis (up), then about the resulting Y axis (front), and finally about the resulting X axis (right). This is the default rotation order for vehicle|vehicles
The default rotation order for peds/players is Z-Y-X (clientside) and -Z-Y-X (serverside) but those rotation orders (set using ''"default"'' on peds) can not be used manually on other element types since they only exist due to historical and backward compatibility reasons.
Specifying a rotation order other than ''"default"'' allows the same angles to later be uniformly used on several elements without having to consider their type. """
                },
                result="""* rx, ry, rz: 3 floats representing the euler rotation angles on the axis x, y and z (with the rotation order depending on the rotorder argument) if element exists and is a valid element, false if its invalid. """,
            ),
            name='getElementRotation',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='getElementsByType',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theType',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='startat',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=True,
                                ),
                                default_value='getRootElement()',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function is used to retrieve a list of all elements of the specified type. This can be useful, as it disregards where in the element tree it is. It can be used with either the built in types (listed below) or with any custom type used in a .map file. For example, if there is an element of type flag (e.g. <flag />) in the .map file, the using flag as the type argument would find it. """,
                arguments={
                    
                },
                result=""" """,
            ),
            name='getElementsByType',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='getElementsByType',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theType',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='startat',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=True,
                                ),
                                default_value='getRootElement()',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='streamedIn',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='false',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function is used to retrieve a list of all elements of the specified type. This can be useful, as it disregards where in the element tree it is. It can be used with either the built in types (listed below) or with any custom type used in a .map file. For example, if there is an element of type flag (e.g. <flag />) in the .map file, the using flag as the type argument would find it. """,
                arguments={
                    
                },
                result=""" """,
            ),
            name='getElementsByType',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='getElementsWithinColShape',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theShape',
                                argument_type=FunctionType(
                                    names=['colshape'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='elemType',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=True,
                                ),
                                default_value='nil',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function is used to retrieve a list of all elements in a colshape, of the specified type.
* For legacy reasons, a colshape created on the client does not collide with elements already existing at that location until they first move
* This function doesnt verify whether elements are in the same dimension and interior, additional checks could be implemented manually if they are needed """,
                arguments={
                    "theShape": """The colshape you want to get the elements from. """,
                    "elemType": """The type of element you want a list of. This can be any element type, the common ones being: """,
                    "player": """A player connected to the server """,
                    "ped": """A ped """,
                    "vehicle": """A vehicle """,
                    "object": """An object """,
                    "pickup": """A pickup """,
                    "marker": """A marker """,
                    "remoteclient": """A remote client connected to the server """
                },
                result="""returns a table containing all the elements inside the colshape, of the specified type. returns an empty table if there are no elements inside. returns false if the colshape is invalid. """,
            ),
            name='getElementsWithinColShape',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='getElementsWithinColShape',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theShape',
                                argument_type=FunctionType(
                                    names=['colshape'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='elemType',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=True,
                                ),
                                default_value='nil',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function is used to retrieve a list of all elements in a colshape, of the specified type.
* For legacy reasons, a colshape created on the client does not collide with elements already existing at that location until they first move
* This function doesnt verify whether elements are in the same dimension and interior, additional checks could be implemented manually if they are needed """,
                arguments={
                    "theShape": """The colshape you want to get the elements from. """,
                    "elemType": """The type of element you want a list of. This can be any element type, the common ones being: """,
                    "player": """A player connected to the server """,
                    "ped": """A ped """,
                    "vehicle": """A vehicle """,
                    "object": """An object """,
                    "pickup": """A pickup """,
                    "marker": """A marker """,
                    "remoteclient": """A remote client connected to the server """
                },
                result="""returns a table containing all the elements inside the colshape, of the specified type. returns an empty table if there are no elements inside. returns false if the colshape is invalid. """,
            ),
            name='getElementsWithinColShape',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='getElementsWithinRange',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='x',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='y',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='z',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='range',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='elemType',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=True,
                                ),
                                default_value='""',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='interior',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='dimension',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""* This function checks if elements are in a box, not in a sphere.
* Z argument isnt in use currently, but make your scripts like it is for future compatibility reasons.
* This function doesnt work with elements which is created by createElement.}} """,
                arguments={
                    "x": """the x coordinate at which to retrieve elements """,
                    "y": """the y coordinate at which to retrieve elements """,
                    "z": """the z coordinate at which to retrieve elements """,
                    "range": """the range at the coordinates in which to retrieve elements """,
                    "elemType": """The type of element you want a list of. This can be any element type, such as: """,
                    "player": """A player connected to the server """,
                    "ped": """A ped """,
                    "vehicle": """A vehicle """,
                    "object": """An object """,
                    "pickup": """A pickup """,
                    "marker": """A marker """,
                    "interior": """The interior you want to limit the search to. If not specified, it can return elements in any interior. """,
                    "dimension": """The dimension you want to limit the search to. If not specified, it can return elements in any dimension. """
                },
                result="""returns a table containing all the elements of the specified type within range. returns an empty table if there are no elements within range. returns false if the arguments are invalid. """,
            ),
            name='getElementsWithinRange',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='getElementsWithinRange',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='x',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='y',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='z',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='range',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='elemType',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=True,
                                ),
                                default_value='""',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='interior',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='dimension',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""* This function checks if elements are in a box, not in a sphere.
* Z argument isnt in use currently, but make your scripts like it is for future compatibility reasons.
* This function doesnt work with elements which is created by createElement.}} """,
                arguments={
                    "x": """the x coordinate at which to retrieve elements """,
                    "y": """the y coordinate at which to retrieve elements """,
                    "z": """the z coordinate at which to retrieve elements """,
                    "range": """the range at the coordinates in which to retrieve elements """,
                    "elemType": """The type of element you want a list of. This can be any element type, such as: """,
                    "player": """A player connected to the server """,
                    "ped": """A ped """,
                    "vehicle": """A vehicle """,
                    "object": """An object """,
                    "pickup": """A pickup """,
                    "marker": """A marker """,
                    "interior": """The interior you want to limit the search to. If not specified, it can return elements in any interior. """,
                    "dimension": """The dimension you want to limit the search to. If not specified, it can return elements in any dimension. """
                },
                result="""returns a table containing all the elements of the specified type within range. returns an empty table if there are no elements within range. returns false if the arguments are invalid. """,
            ),
            name='getElementsWithinRange',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='getElementSyncer',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function gets the syncer of an element. The syncer is the player who is in control of the element. """,
                arguments={
                    "theElement": """: The element to get the syncer of. """
                },
                result="""returns the element that is the syncer of theelement or false if the element does not have a syncer. """,
            ),
            name='getElementSyncer',
        )
        ],
        client=[
            
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='getElementType',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function is used to retrieve the type of an element. """,
                arguments={
                    "theElement": """The element you wish to get the type of. """
                },
                result="""returns a string containing the element type, false if invalid arguments were passed. """,
            ),
            name='getElementType',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='getElementType',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function is used to retrieve the type of an element. """,
                arguments={
                    "theElement": """The element you wish to get the type of. """
                },
                result="""returns a string containing the element type, false if invalid arguments were passed. """,
            ),
            name='getElementType',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='getElementVelocity',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function returns three floats containing the velocity (movement speeds) along the X, Y, and Z axis respectively. This means that velocity values can be positive and negative for each axis. """,
                arguments={
                    "theElement": """: The element you wish to retrieve the velocity of. """
                },
                result="""if succesful, returns three floats that represent the elements current velocity along the x, y, and z axis respectively. this function can fail if the element is a player in a car. use the vehicle element in this case. it will also fail if the element specified does not have a velocity, or does not exist. in case of failure, the first return value will be false.
the returned values are expressed in gta units per 1/50th of a secondhttp://forum.mtasa.com/viewtopic.php?f=91&t=31225. a gta unit is equal to one metrehttp://gta.wikia.com/unit#gta3.2c_gtavc_.26_gtasa. """,
            ),
            name='getElementVelocity',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='getElementVelocity',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function returns three floats containing the velocity (movement speeds) along the X, Y, and Z axis respectively. This means that velocity values can be positive and negative for each axis. """,
                arguments={
                    "theElement": """: The element you wish to retrieve the velocity of. """
                },
                result="""if succesful, returns three floats that represent the elements current velocity along the x, y, and z axis respectively. this function can fail if the element is a player in a car. use the vehicle element in this case. it will also fail if the element specified does not have a velocity, or does not exist. in case of failure, the first return value will be false.
the returned values are expressed in gta units per 1/50th of a secondhttp://forum.mtasa.com/viewtopic.php?f=91&t=31225. a gta unit is equal to one metrehttp://gta.wikia.com/unit#gta3.2c_gtavc_.26_gtasa. """,
            ),
            name='getElementVelocity',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='getElementZoneName',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='citiesonly',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='false',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function allows you to retrieve the zone name of an element (eg. Verdant Bluffs or Ocean Docks)
The same can be achieved client side by getting element coordinates and using GetZoneName. """,
                arguments={
                    "theElement": """The element which youd like to retrieve the zone name from """,
                    "citiesonly": """: An optional argument to choose if you want to return the city name (eg Las Venturas) """
                },
                result="""returns the string of the elements zone name. """,
            ),
            name='getElementZoneName',
        )
        ],
        client=[
            
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='getLowLODElement',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function return the low LOD element that an element is associated with. """,
                arguments={
                    "theElement": """The element whose low LOD version we want to get. """
                },
                result="""returns a low lod element if successful, false otherwise. """,
            ),
            name='getLowLODElement',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='getLowLODElement',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function return the low LOD element that an element is associated with. """,
                arguments={
                    "theElement": """The element whose low LOD version we want to get. """
                },
                result="""returns a low lod element if successful, false otherwise. """,
            ),
            name='getLowLODElement',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='getRootElement',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function returns the root node of the element tree, called root. This node contains every other element: all resource root elements, players and remote clients. It is never destroyed and cannot be destroyed using destroyElement.
It is often used to attach handler functions to events triggered for any element, or also to make a scripting function affect all elements. """,
                arguments={
                    
                },
                result="""returns the root element. """,
            ),
            name='getRootElement',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='getRootElement',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function returns the root node of the element tree, called root. This node contains every other element: all resource root elements, players and remote clients. It is never destroyed and cannot be destroyed using destroyElement.
It is often used to attach handler functions to events triggered for any element, or also to make a scripting function affect all elements. """,
                arguments={
                    
                },
                result="""returns the root element. """,
            ),
            name='getRootElement',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='hasElementData',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='key',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='inherit',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='true',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function checks if an element has element data available under a certain key.}} """,
                arguments={
                    "theElement": """This is the element with data you want to check. """,
                    "key": """The name of the element data entry you want to check for. (Maximum 31 characters.) """,
                    "inherit": """- toggles whether or not the function should go up the hierarchy to find the requested key in case the specified element doesnt have it. """
                },
                result="""this function returns true if the element contains element data for key, or false if the element doesnt exist or there is no data associated with the key. """,
            ),
            name='hasElementData',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='hasElementData',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='key',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='inherit',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='true',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function checks if an element has element data available under a certain key.}} """,
                arguments={
                    "theElement": """This is the element with data you want to check. """,
                    "key": """The name of the element data entry you want to check for. (Maximum 31 characters.) """,
                    "inherit": """- toggles whether or not the function should go up the hierarchy to find the requested key in case the specified element doesnt have it. """
                },
                result="""this function returns true if the element contains element data for key, or false if the element doesnt exist or there is no data associated with the key. """,
            ),
            name='hasElementData',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='hasElementDataSubscriber',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='key',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='thePlayer',
                                argument_type=FunctionType(
                                    names=['player'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function is used together with setElementData in subscribe mode. """,
                arguments={
                    "theElement": """The element you wish to check whether the player is subscribed to. """,
                    "key": """The key you wish to check whether the player is subscribed to. """,
                    "thePlayer": """The player you wish to check. """
                },
                result="""returns true if the player is subscribed, false otherwise. """,
            ),
            name='hasElementDataSubscriber',
        )
        ],
        client=[
            
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='isElement',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theValue',
                                argument_type=FunctionType(
                                    names=['var'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function checks if a value is an element or not. """,
                arguments={
                    "theValue": """: The value that we want to check. """
                },
                result="""returns true if the passed value is an element, false otherwise. """,
            ),
            name='isElement',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='isElement',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theValue',
                                argument_type=FunctionType(
                                    names=['var'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function checks if a value is an element or not. """,
                arguments={
                    "theValue": """: The value that we want to check. """
                },
                result="""returns true if the passed value is an element, false otherwise. """,
            ),
            name='isElement',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='isElementAttached',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This functions checks whether or not an element is attached to another element. """,
                arguments={
                    "theElement": """The element to check for attachment. """
                },
                result="""returns true if the specified element is attached to another element, false if it is not attached or nil if an improper argument was passed. """,
            ),
            name='isElementAttached',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='isElementAttached',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This functions checks whether or not an element is attached to another element. """,
                arguments={
                    "theElement": """The element to check for attachment. """
                },
                result="""returns true if the specified element is attached to another element, false if it is not attached or nil if an improper argument was passed. """,
            ),
            name='isElementAttached',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='isElementCallPropagationEnabled',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This functions checks if certain element has call propagation enabled. """,
                arguments={
                    "theElement": """The element to check """
                },
                result="""returns true if the propagation is enabled, false if disabled or invalid arguments have been passed. """,
            ),
            name='isElementCallPropagationEnabled',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='isElementCallPropagationEnabled',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This functions checks if certain element has call propagation enabled. """,
                arguments={
                    "theElement": """The element to check """
                },
                result="""returns true if the propagation is enabled, false if disabled or invalid arguments have been passed. """,
            ),
            name='isElementCallPropagationEnabled',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='isElementCollidableWith',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='withElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function can be used to check whether specified element is collidable with another element.<br>
Note: You can only use this function with the element types listed below.
*Player
*Ped
*Vehicle
*Object """,
                arguments={
                    "theElement": """The element which colliding you want to get """,
                    "withElement": """The other element which colliding with the first entity you want to get """
                },
                result="""returns true if the elements collide with eachother, false otherwise. """,
            ),
            name='isElementCollidableWith',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='isElementDoubleSided',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function checks whether an element is double-sided as set by setElementDoubleSided or not. """,
                arguments={
                    "theElement": """The element in which youd like to check the double-sidedness of. """
                },
                result="""returns true if the theelement is double-sided, false otherwise. """,
            ),
            name='isElementDoubleSided',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='isElementDoubleSided',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function checks whether an element is double-sided as set by setElementDoubleSided or not. """,
                arguments={
                    "theElement": """The element in which youd like to check the double-sidedness of. """
                },
                result="""returns true if the theelement is double-sided, false otherwise. """,
            ),
            name='isElementDoubleSided',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='isElementFrozen',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function checks if element has been frozen. """,
                arguments={
                    "theElement": """the element whose freeze status we want to check. """
                },
                result="""*returns true if the element is frozen, false if it isnt or if invalid arguments were passed. """,
            ),
            name='isElementFrozen',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='isElementFrozen',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function checks if element has been frozen. """,
                arguments={
                    "theElement": """the element whose freeze status we want to check. """
                },
                result="""*returns true if the element is frozen, false if it isnt or if invalid arguments were passed. """,
            ),
            name='isElementFrozen',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='isElementInWater',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function checks whether an element is submerged in water. """,
                arguments={
                    "theElement": """: The element to check. """
                },
                result="""returns true if the passed element is in water, false if it isnt, or if the element is invalid. """,
            ),
            name='isElementInWater',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='isElementInWater',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function checks whether an element is submerged in water. """,
                arguments={
                    "theElement": """: The element to check. """
                },
                result="""returns true if the passed element is in water, false if it isnt, or if the element is invalid. """,
            ),
            name='isElementInWater',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='isElementLocal',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function checks whether a clientside element is local to the client (doesnt exist in the server) or not. """,
                arguments={
                    "theElement": """: The element that we want to check. """
                },
                result="""returns true if the passed element is local, false if not or if invalid parameters are passed. """,
            ),
            name='isElementLocal',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='isElementLowLOD',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function reveals if an element is low LOD. """,
                arguments={
                    "theElement": """The element whose low LOD status we want to get. """
                },
                result="""returns true if the element is low lod, false otherwise. """,
            ),
            name='isElementLowLOD',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='isElementLowLOD',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function reveals if an element is low LOD. """,
                arguments={
                    "theElement": """The element whose low LOD status we want to get. """
                },
                result="""returns true if the element is low lod, false otherwise. """,
            ),
            name='isElementLowLOD',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='isElementOnScreen',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function will check if an element is on the screen. Elements behind objects but still in the camera view count as being on screen.
This function is particularly useful for detecting if dynamic objects are in destroyed state. Destroyed objects will return false. """,
                arguments={
                    "theElement": """The element of which you wish to check wether its being rendered on screen. """
                },
                result="""returns true if element is on screen, false if not. """,
            ),
            name='isElementOnScreen',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='isElementStreamable',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function checks whether an element is streamable as set by setElementStreamable or not. """,
                arguments={
                    "theElement": """: The element to check the streamability of. """
                },
                result="""returns true if the passed element is streamable like normal, false if this element must always be streamed in. """,
            ),
            name='isElementStreamable',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='isElementStreamedIn',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function checks whether an element is currently streamed in (not virtualized) and are actual GTA objects in the world. You can force an element to be streamed in using setElementStreamable.<br>
DP2 can return true even if this element is not fully streamed in. This can happen during the period when the vehicle/object model is loading while the element is not actually fully created yet. """,
                arguments={
                    "theElement": """: The element to check whether is streamed in or not. """
                },
                result="""returns true if the passed element is currently streamed in, false if it is virtualized. """,
            ),
            name='isElementStreamedIn',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='isElementSyncer',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function checks whether an element is synced by the local player or not. Accepted elements are ped|peds and vehicle|vehicles. """,
                arguments={
                    "theElement": """: The element to check. """
                },
                result="""returns true if the passed element is synced by the local player, false otherwise. """,
            ),
            name='isElementSyncer',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='isElementVisibleTo',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='visibleTo',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This checks if an element is visible to a player. This does not check if the player can literally see the element, just that they are aware that it exists. Some so-called per-player elements are able to be visible only to some players, as such this checks if this is the case for a particular element/player combination. """,
                arguments={
                    "theElement": """The element you want to check the visibility of """,
                    "visibleTo": """The player you want to check against """
                },
                result="""returns true if element is visible to the specified player, false if not or an invalid argument was passed to the function. """,
            ),
            name='isElementVisibleTo',
        )
        ],
        client=[
            
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='isElementWaitingForGroundToLoad',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description=""" """,
                arguments={
                    "theElement": """the element to check its frozen waiting for custom map objects to load status. It can be a vehicle, ped or player. """
                },
                result="""returns true if the specified element is frozen waiting for collisions of custom map objects to load. returns false if its not or if the specified element is invalid. """,
            ),
            name='isElementWaitingForGroundToLoad',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='isElementWithinColShape',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='theShape',
                                argument_type=FunctionType(
                                    names=['colshape'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function is used to determine if an element is within a collision shape. Please note that for legacy reasons, a colshape created on the client does not collide with elements already existing at that location until they first move. Please also note that before 1.0.3, this did not function correctly when moving a colshape.
Please note that this function doesnt verify whether element is in the same dimension and interior, additional checks could be implemented manually if they are needed. """,
                arguments={
                    "theElement": """The element youre checking. """,
                    "theShape": """The colshape youre checking """
                },
                result="""returns true if the element is within the colshape, false otherwise """,
            ),
            name='isElementWithinColShape',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='isElementWithinColShape',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='theShape',
                                argument_type=FunctionType(
                                    names=['colshape'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function is used to determine if an element is within a collision shape. Please note that for legacy reasons, a colshape created on the client does not collide with elements already existing at that location until they first move. Please also note that before 1.0.3, this did not function correctly when moving a colshape.
Please note that this function doesnt verify whether element is in the same dimension and interior, additional checks could be implemented manually if they are needed. """,
                arguments={
                    "theElement": """The element youre checking. """,
                    "theShape": """The colshape youre checking """
                },
                result="""returns true if the element is within the colshape, false otherwise """,
            ),
            name='isElementWithinColShape',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='isElementWithinMarker',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='theMarker',
                                argument_type=FunctionType(
                                    names=['marker'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function is used to determine if an element is within a marker. """,
                arguments={
                    "theElement": """The element youre checking. """,
                    "theMarker": """The marker youre checking. """
                },
                result="""returns true if the element is within the marker, false otherwise """,
            ),
            name='isElementWithinMarker',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='isElementWithinMarker',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='theMarker',
                                argument_type=FunctionType(
                                    names=['marker'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function is used to determine if an element is within a marker. """,
                arguments={
                    "theElement": """The element youre checking. """,
                    "theMarker": """The marker youre checking. """
                },
                result="""returns true if the element is within the marker, false otherwise """,
            ),
            name='isElementWithinMarker',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='removeElementData',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='key',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function removes the element data with the given key for that element. The element data removal is synced with all the clients. """,
                arguments={
                    "theElement": """The element you wish to remove the data from. """,
                    "key": """The key string you wish to remove. """
                },
                result="""returns true if the data was removed succesfully, false if the given key does not exist in the element or the element is invalid. """,
            ),
            name='removeElementData',
        )
        ],
        client=[
            
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='removeElementDataSubscriber',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='key',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='thePlayer',
                                argument_type=FunctionType(
                                    names=['player'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function is used together with setElementData in subscribe mode. """,
                arguments={
                    "theElement": """The element you wish to unsubscribe the player from. """,
                    "key": """The key you wish to unsubscribe the player from. """,
                    "thePlayer": """The player you wish to unsubscribe. """
                },
                result="""returns true if the player was unsubscribed, false otherwise. """,
            ),
            name='removeElementDataSubscriber',
        )
        ],
        client=[
            
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='setElementAlpha',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='alpha',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function sets the alpha (transparency) value for the specified element. This can be a player, ped, object, vehicle or Element/Weapon|weapon. """,
                arguments={
                    "theElement": """The element whose alpha you want to set. """,
                    "alpha": """The alpha value to set. Values are 0-255, where 255 is fully opaque and 0 is fully transparent. """,
                    "Note": """Objects are fully transparent at 140. """
                },
                result="""returns true or false if invalid arguments were passed. """,
            ),
            name='setElementAlpha',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='setElementAlpha',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='alpha',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function sets the alpha (transparency) value for the specified element. This can be a player, ped, object, vehicle or Element/Weapon|weapon. """,
                arguments={
                    "theElement": """The element whose alpha you want to set. """,
                    "alpha": """The alpha value to set. Values are 0-255, where 255 is fully opaque and 0 is fully transparent. """,
                    "Note": """Objects are fully transparent at 140. """
                },
                result="""returns true or false if invalid arguments were passed. """,
            ),
            name='setElementAlpha',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='setElementAngularVelocity',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='rx',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='ry',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='rz',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description=""" """,
                arguments={
                    "theElement": """The element to apply the spin to. Can be either a player, ped, object, vehicle or a Element/Weapon|custom weapon. """,
                    "rx": """velocity around the X axis """,
                    "ry": """velocity around the Y axis """,
                    "rz": """velocity around the Z axis """
                },
                result="""returns true if it was succesful, false otherwise. """,
            ),
            name='setElementAngularVelocity',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='setElementAngularVelocity',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='rx',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='ry',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='rz',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description=""" """,
                arguments={
                    "theElement": """The element to apply the spin to. Can be either a player, ped, object, vehicle or a Element/Weapon|custom weapon. """,
                    "rx": """velocity around the X axis """,
                    "ry": """velocity around the Y axis """,
                    "rz": """velocity around the Z axis """
                },
                result="""returns true if it was succesful, false otherwise. """,
            ),
            name='setElementAngularVelocity',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='setElementAttachedOffsets',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='xPosOffset',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='yPosOffset',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='zPosOffset',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='xRotOffset',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='yRotOffset',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='zRotOffset',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function updates the offsets of an element that has been attached to another element using attachElements. """,
                arguments={
                    "theElement": """The attached element. """,
                    "xPosOffset": """The x offset, if you want the elements to be a certain distance from one another (default 0). """,
                    "yPosOffset": """The y offset (default 0). """,
                    "zPosOffset": """The z offset (default 0). """,
                    "xRotOffset": """The x rotation offset (default 0). """,
                    "yRotOffset": """The y rotation offset (default 0). """,
                    "zRotOffset": """The z rotation offset (default 0). """
                },
                result="""returns true if the attaching process was successful, false otherwise. """,
            ),
            name='setElementAttachedOffsets',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='setElementAttachedOffsets',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='xPosOffset',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='yPosOffset',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='zPosOffset',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='xRotOffset',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='yRotOffset',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='zRotOffset',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function updates the offsets of an element that has been attached to another element using attachElements. """,
                arguments={
                    "theElement": """The attached element. """,
                    "xPosOffset": """The x offset, if you want the elements to be a certain distance from one another (default 0). """,
                    "yPosOffset": """The y offset (default 0). """,
                    "zPosOffset": """The z offset (default 0). """,
                    "xRotOffset": """The x rotation offset (default 0). """,
                    "yRotOffset": """The y rotation offset (default 0). """,
                    "zRotOffset": """The z rotation offset (default 0). """
                },
                result="""returns true if the attaching process was successful, false otherwise. """,
            ),
            name='setElementAttachedOffsets',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='setElementBoneMatrix',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='bone',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='matrix',
                                argument_type=FunctionType(
                                    names=['matrix'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""* Element/Player|Player
* Element/Ped|Ped """,
                arguments={
                    "theElement": """the element to set the bone matrix on. """,
                    "bone": """the ID of the bone. See Bone IDs """,
                    "matrix": """the MTA matrix to set. """
                },
                result="""returns true if the function was successful, false otherwise. """,
            ),
            name='setElementBoneMatrix',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='setElementBonePosition',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='bone',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='x',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='y',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='z',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""* Element/Player|Player
* Element/Ped|Ped """,
                arguments={
                    "theElement": """the element to set the bone position on. """,
                    "bone": """the ID of the bone to set the position of. See Bone IDs """,
                    "x": """The x coordinate of the destination. """,
                    "y": """The y coordinate of the destination. """,
                    "z": """The z coordinate of the destination. """
                },
                result="""returns true if the function was successful, false otherwise. """,
            ),
            name='setElementBonePosition',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='setElementBoneRotation',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='bone',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='yaw',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='pitch',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='roll',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""* Element/Player|Player
* Element/Ped|Ped """,
                arguments={
                    "theElement": """the element to set the bone rotation on. """,
                    "bone": """the ID of the bone to set the rotation of. See Bone IDs """,
                    "yaw": """the yaw rotation value. """,
                    "pitch": """the pitch rotation value. """,
                    "roll": """the roll rotation value. """
                },
                result="""returns true if the function was successful, false otherwise.
note: updateelementrphanim must be called after this function to apply bone rotation. """,
            ),
            name='setElementBoneRotation',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='setElementCallPropagationEnabled',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='enabled',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function enables/disables call propagation on a certain element. Look at the example for a practical application. """,
                arguments={
                    "theElement": """The element whose propagation behaviour youd like to change """,
                    "enabled": """Whether propagation should be enabled or not """
                },
                result="""returns true, if the propagation behaviour has been changed successfully, false otherwise. """,
            ),
            name='setElementCallPropagationEnabled',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='setElementCallPropagationEnabled',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='enabled',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function enables/disables call propagation on a certain element. Look at the example for a practical application. """,
                arguments={
                    "theElement": """The element whose propagation behaviour youd like to change """,
                    "enabled": """Whether propagation should be enabled or not """
                },
                result="""returns true, if the propagation behaviour has been changed successfully, false otherwise. """,
            ),
            name='setElementCallPropagationEnabled',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='setElementCollidableWith',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='withElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='enabled',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function can be used to set an element to collide with another element. An element with collisions disabled does not interact physically with the other element.<br>
Note: You can only use this function with the element types listed below.
*Player
*Ped
*Vehicle
*Object """,
                arguments={
                    "theElement": """The element which colliding you want to change """,
                    "withElement": """The other element you wish the first entity to collide with """,
                    "enabled": """A boolean to indicate whether elements should be able to collide with eachother (true) or not (false) """
                },
                result="""returns true if the collisions were set succesfully, false otherwise. """,
            ),
            name='setElementCollidableWith',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='setElementCollisionsEnabled',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='enabled',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function can disable or enable an elements collisions. An element without collisions does not interact with the physical environment and remains static. """,
                arguments={
                    "theElement": """The element you wish to set the collisions of """,
                    "enabled": """A boolean to indicate whether collisions are enabled (true) or disabled (false) """
                },
                result="""returns true if the collisions were set succesfully, false otherwise. """,
            ),
            name='setElementCollisionsEnabled',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='setElementCollisionsEnabled',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='enabled',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function can disable or enable an elements collisions. An element without collisions does not interact with the physical environment and remains static. """,
                arguments={
                    "theElement": """The element you wish to set the collisions of """,
                    "enabled": """A boolean to indicate whether collisions are enabled (true) or disabled (false) """
                },
                result="""returns true if the collisions were set succesfully, false otherwise. """,
            ),
            name='setElementCollisionsEnabled',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='setElementData',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='key',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='value',
                                argument_type=FunctionType(
                                    names=['var'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='syncMode',
                                argument_type=FunctionType(
                                    names=['var'],
                                    is_optional=True,
                                ),
                                default_value='"broadcast"',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function stores element data under a certain key, attached to an element. Element data set using this is then synced with all clients and the server. The data can contain server created elements, but you should avoid passing data that is not able to be synced such as xmlnodes, acls, aclgroups etc.
As element data is synced to all clients, it can generate a lot of network traffic and be heavy on performance. Events are much more efficient for sending data from a client to the server only, or from the server to a specific client. <br/>
Usage of element data should be disencouraged where your goal can be achieved with events like above, and table|tables for storing and retrieving data.
Note this mode only works when setting element data serverside. Setting data clientside still sends the update to all clients if synchronize is set to true. """,
                arguments={
                    "theElement": """The element you wish to attach the data to. """,
                    "key": """The key you wish to store the data under. (Maximum 31 characters.) """,
                    "value": """The value you wish to store. See element data for a list of acceptable datatypes. """,
                    "syncMode": """Synchronisation mode. """,
                    "broadcast": """- Synchronise to all clients (default behavior). You can also parse true for this option. """,
                    "local": """- Dont synchronise. You can also parse false for this option. """,
                    "subscribe": """- Only synchronise to specific clients. See addElementDataSubscriber and removeElementDataSubscriber. """
                },
                result=""" """,
            ),
            name='setElementData',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='setElementData',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='key',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='value',
                                argument_type=FunctionType(
                                    names=['var'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='synchronize',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='true',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function stores element data under a certain key, attached to an element. Element data set using this is then synced with all clients and the server. The data can contain server created elements, but you should avoid passing data that is not able to be synced such as xmlnodes, acls, aclgroups etc.
As element data is synced to all clients, it can generate a lot of network traffic and be heavy on performance. Events are much more efficient for sending data from a client to the server only, or from the server to a specific client. <br/>
Usage of element data should be disencouraged where your goal can be achieved with events like above, and table|tables for storing and retrieving data.
Note this mode only works when setting element data serverside. Setting data clientside still sends the update to all clients if synchronize is set to true. """,
                arguments={
                    "theElement": """The element you wish to attach the data to. """,
                    "key": """The key you wish to store the data under. (Maximum 31 characters.) """,
                    "value": """The value you wish to store. See element data for a list of acceptable datatypes. """,
                    "synchronize": """Determines whether or not the data will be synchronized with the server. """
                },
                result=""" """,
            ),
            name='setElementData',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='setElementDimension',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='dimension',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function allows you to set the dimension of any element. The dimension determines what/who the element is visible to. """,
                arguments={
                    "theElement": """The element in which youd like to set the dimension of. """,
                    "dimension": """An integer representing the dimension ID. {{New feature/item|3.0154|1.5.3|11199|You can also use -1 to make the element visible in all dimensions (only valid to objects).}} Valid values are 0 to 65535. """
                },
                result="""returns true if theelement and dimension are valid, false otherwise.
also returns false if theelement is a player and its not alive. """,
            ),
            name='setElementDimension',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='setElementDimension',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='dimension',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function allows you to set the dimension of any element. The dimension determines what/who the element is visible to. """,
                arguments={
                    "theElement": """The element in which youd like to set the dimension of. """,
                    "dimension": """An integer representing the dimension ID. {{New feature/item|3.0154|1.5.3|11199|You can also use -1 to make the element visible in all dimensions (only valid to objects).}} Valid values are 0 to 65535. """
                },
                result="""returns true if theelement and dimension are valid, false otherwise.
also returns false if theelement is a player and its not alive. """,
            ),
            name='setElementDimension',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='setElementDoubleSided',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='enable',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function allows you to set the double-sidedness of an elements model. When an elements model is double-sided, its back facing triangles become visible.
Possible uses of double-sidedness are: Elimination of invisible walls, using buildings as enclosures, using inverted landmasses as large pits or to make cave networks. It can also remove the need to add extra triangles to custom models when trying to make them appear solid from all directions. """,
                arguments={
                    "theElement": """The element in which youd like to set the double-sidedness of. """,
                    "enable": """Set to true/false to enable/disable double-sidedness. """
                },
                result="""returns true if theelement is valid, false otherwise. """,
            ),
            name='setElementDoubleSided',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='setElementDoubleSided',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='enable',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function allows you to set the double-sidedness of an elements model. When an elements model is double-sided, its back facing triangles become visible.
Possible uses of double-sidedness are: Elimination of invisible walls, using buildings as enclosures, using inverted landmasses as large pits or to make cave networks. It can also remove the need to add extra triangles to custom models when trying to make them appear solid from all directions. """,
                arguments={
                    "theElement": """The element in which youd like to set the double-sidedness of. """,
                    "enable": """Set to true/false to enable/disable double-sidedness. """
                },
                result="""returns true if theelement is valid, false otherwise. """,
            ),
            name='setElementDoubleSided',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='setElementFrozen',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='freezeStatus',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function freezes an element (stops it in its position and disables movement) or unfreezes it. """,
                arguments={
                    "theElement": """The element whose freeze status we want to change. """,
                    "freezeStatus": """A boolean denoting whether we want to freeze (true) or unfreeze (false) it. """
                },
                result="""returns true if the element was frozen, false if it wasnt or if invalid arguments are passed. """,
            ),
            name='setElementFrozen',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='setElementFrozen',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='freezeStatus',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function freezes an element (stops it in its position and disables movement) or unfreezes it. """,
                arguments={
                    "theElement": """The element whose freeze status we want to change. """,
                    "freezeStatus": """A boolean denoting whether we want to freeze (true) or unfreeze (false) it. """
                },
                result="""returns true if the element was frozen, false if it wasnt or if invalid arguments are passed. """,
            ),
            name='setElementFrozen',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='setElementHealth',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='newHealth',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function sets the health for the specified element. This can be a ped, object or a vehicle.
*650: white steam 0%, black smoke 0%
*450: white steam 100%, black smoke 50%
*250: white steam 0%, black smoke 100%
*249: fire with big black smoke """,
                arguments={
                    "theElement": """The ped, vehicle or object whose health you want to set. """,
                    "newHealth": """A float indicating the new health to set for the element. """
                },
                result="""returns true if the new health was set successfully, or false if invalid arguments were passed. """,
            ),
            name='setElementHealth',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='setElementHealth',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='newHealth',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function sets the health for the specified element. This can be a ped, object or a vehicle.
*650: white steam 0%, black smoke 0%
*450: white steam 100%, black smoke 50%
*250: white steam 0%, black smoke 100%
*249: fire with big black smoke """,
                arguments={
                    "theElement": """The ped, vehicle or object whose health you want to set. """,
                    "newHealth": """A float indicating the new health to set for the element. """
                },
                result="""returns true if the new health was set successfully, or false if invalid arguments were passed. """,
            ),
            name='setElementHealth',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='setElementID',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='name',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function sets the ID of an element to a string. This can be anything from an identifying number, to a name.
You can only change the ID of an element clientside if that element has been created clientside as well. """,
                arguments={
                    "theElement": """The element you want to set the ID of. """,
                    "name": """The new ID for theElement. """
                },
                result="""this returns true if successful. it will return false if theelement is invalid, or does not exist, or if name is invalid, or is not a string. """,
            ),
            name='setElementID',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='setElementID',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='name',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function sets the ID of an element to a string. This can be anything from an identifying number, to a name.
You can only change the ID of an element clientside if that element has been created clientside as well. """,
                arguments={
                    "theElement": """The element you want to set the ID of. """,
                    "name": """The new ID for theElement. """
                },
                result="""this returns true if successful. it will return false if theelement is invalid, or does not exist, or if name is invalid, or is not a string. """,
            ),
            name='setElementID',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='setElementInterior',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='interior',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='x',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='y',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='z',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function allows you to set the interior of any element. An interior is the current loaded place, 0 being outside. """,
                arguments={
                    "theElement": """The element in which youd like to set the interior of. """,
                    "interior": """The interior you want to set the element to. Valid values are 0 to 255. """,
                    "x": """A floating point number representing the X coordinate on the map. """,
                    "y": """A floating point number representing the Y coordinate on the map. """,
                    "z": """A floating point number representing the Z coordinate on the map. """
                },
                result="""returns true if theelement and interior are valid arguments, false otherwise. """,
            ),
            name='setElementInterior',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='setElementInterior',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='interior',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='x',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='y',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='z',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function allows you to set the interior of any element. An interior is the current loaded place, 0 being outside. """,
                arguments={
                    "theElement": """The element in which youd like to set the interior of. """,
                    "interior": """The interior you want to set the element to. Valid values are 0 to 255. """,
                    "x": """A floating point number representing the X coordinate on the map. """,
                    "y": """A floating point number representing the Y coordinate on the map. """,
                    "z": """A floating point number representing the Z coordinate on the map. """
                },
                result="""returns true if theelement and interior are valid arguments, false otherwise. """,
            ),
            name='setElementInterior',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='setElementMatrix',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='theMatrix',
                                argument_type=FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function sets matrix to element. """,
                arguments={
                    "theElement": """The element which you set matrix """,
                    "theMatrix": """The matrix. """
                },
                result="""returns true if the matrix was set succesfully, false otherwise. """,
            ),
            name='setElementMatrix',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='setElementMatrix',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='theMatrix',
                                argument_type=FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function sets matrix to element. """,
                arguments={
                    "theElement": """The element which you set matrix """,
                    "theMatrix": """The matrix. """
                },
                result="""returns true if the matrix was set succesfully, false otherwise. """,
            ),
            name='setElementMatrix',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='setElementModel',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='model',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""Sets the model of a given element. This allows you to change the model of a player (or ped), a vehicle or an object. """,
                arguments={
                    "theElement": """the element you want to change. """,
                    "model": """the model ID to set.
** For players/peds: A GTASA player model (skin) ID. See [[Character Skins]].
** For vehicles: The [[Vehicle IDs|vehicle ID]] of the vehicle being changed.
** For objects/projectiles/weapons: An [[int]] specifying the model id. """
                },
                result="""returns true if successful, false otherwise. """,
            ),
            name='setElementModel',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='setElementModel',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='model',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""Sets the model of a given element. This allows you to change the model of a player (or ped), a vehicle or an object. """,
                arguments={
                    "theElement": """the element you want to change. """,
                    "model": """the model ID to set.
** For players/peds: A GTASA player model (skin) ID. See [[Character Skins]].
** For vehicles: The [[Vehicle IDs|vehicle ID]] of the vehicle being changed.
** For objects/projectiles/weapons: An [[int]] specifying the model id. """
                },
                result="""returns true if successful, false otherwise. """,
            ),
            name='setElementModel',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='setElementParent',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='parent',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function is used for setting an element as the parent of another element. """,
                arguments={
                    "theElement": """The element that you wish to set the parent of. """,
                    "parent": """The element you wish to be the parent of theElement. """
                },
                result="""returns true if both elements are valid, false otherwise. """,
            ),
            name='setElementParent',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='setElementParent',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='parent',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function is used for setting an element as the parent of another element. """,
                arguments={
                    "theElement": """The element that you wish to set the parent of. """,
                    "parent": """The element you wish to be the parent of theElement. """
                },
                result="""returns true if both elements are valid, false otherwise. """,
            ),
            name='setElementParent',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='setElementPosition',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='x',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='y',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='z',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='warp',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='true',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function sets the position of an element to the specified coordinates. """,
                arguments={
                    "theElement": """A valid element to be moved. """,
                    "x": """The x coordinate of the destination. """,
                    "y": """The y coordinate of the destination. """,
                    "z": """The z coordinate of the destination. """,
                    "warp": """teleports players, resetting any animations they were doing. Setting this to false preserves the current animation. """
                },
                result="""returns true if the function was successful, false otherwise. """,
            ),
            name='setElementPosition',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='setElementPosition',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='x',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='y',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='z',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='warp',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='true',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function sets the position of an element to the specified coordinates. """,
                arguments={
                    "theElement": """A valid element to be moved. """,
                    "x": """The x coordinate of the destination. """,
                    "y": """The y coordinate of the destination. """,
                    "z": """The z coordinate of the destination. """,
                    "warp": """teleports players, resetting any animations they were doing. Setting this to false preserves the current animation. """
                },
                result="""returns true if the function was successful, false otherwise. """,
            ),
            name='setElementPosition',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='setElementRotation',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='rotX',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='rotY',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='rotZ',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='rotOrder',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=True,
                                ),
                                default_value='"default"',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='conformPedRotation',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='false',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""Sets the rotation of elements according to the world (does not work with players that are on the ground). """,
                arguments={
                    "theElement": """The element whose rotation will be set """,
                    "rotX": """The elements rotation around the x axis in degrees """,
                    "rotY": """The elements rotation around the y axis in degrees """,
                    "rotZ": """The elements rotation around the z axis in degrees """,
                    "rotOrder": """A string representing the rotation order desired when interpreting the provided http://en.wikipedia.org/wiki/Euler_angles euler angles. If omitted, default value is default. Allowed values are: """,
                    "default": """default MTA behavior prior to 1.1, where rotation order depends on element type """,
                    "ZXY": """rotation about the Z axis (up), then about the resulting X axis (right), and finally about the resulting Y axis (front). This is the default rotation order for object|objects """,
                    "ZYX": """rotation about the Z axis (up), then about the resulting Y axis (front), and finally about the resulting X axis (right). This is the default rotation order for vehicle|vehicles
The default rotation order for peds/players is -Z-Y-X but this rotation order (set using ''"default"'' on peds) can not be set manually on other element types since it only exists due to historical and backward compatibility reasons.
Specifying a rotation order other than ''"default"'' allows the same angles to be uniformly used on several elements without having to consider their type. """,
                    "conformPedRotation": """Relevant only for peds and will be ignored for other element types. A bool which should be set to true to ensure the ped rotation is correctly set in all circumstances. Failing to set this argument may result in the ped rotation being inverted whilst it is in the air and other inconsistencies. The default value of false is for backward compatibility with scripts which may depend upon the incorrect behaviour. """
                },
                result="""returns true if the element rotation was successfully set and false otherwise. """,
            ),
            name='setElementRotation',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='setElementRotation',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='rotX',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='rotY',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='rotZ',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='rotOrder',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=True,
                                ),
                                default_value='"default"',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='conformPedRotation',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='false',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""Sets the rotation of elements according to the world (does not work with players that are on the ground). """,
                arguments={
                    "theElement": """The element whose rotation will be set """,
                    "rotX": """The elements rotation around the x axis in degrees """,
                    "rotY": """The elements rotation around the y axis in degrees """,
                    "rotZ": """The elements rotation around the z axis in degrees """,
                    "rotOrder": """A string representing the rotation order desired when interpreting the provided http://en.wikipedia.org/wiki/Euler_angles euler angles. If omitted, default value is default. Allowed values are: """,
                    "default": """default MTA behavior prior to 1.1, where rotation order depends on element type """,
                    "ZXY": """rotation about the Z axis (up), then about the resulting X axis (right), and finally about the resulting Y axis (front). This is the default rotation order for object|objects """,
                    "ZYX": """rotation about the Z axis (up), then about the resulting Y axis (front), and finally about the resulting X axis (right). This is the default rotation order for vehicle|vehicles
The default rotation order for peds/players is -Z-Y-X but this rotation order (set using ''"default"'' on peds) can not be set manually on other element types since it only exists due to historical and backward compatibility reasons.
Specifying a rotation order other than ''"default"'' allows the same angles to be uniformly used on several elements without having to consider their type. """,
                    "conformPedRotation": """Relevant only for peds and will be ignored for other element types. A bool which should be set to true to ensure the ped rotation is correctly set in all circumstances. Failing to set this argument may result in the ped rotation being inverted whilst it is in the air and other inconsistencies. The default value of false is for backward compatibility with scripts which may depend upon the incorrect behaviour. """
                },
                result="""returns true if the element rotation was successfully set and false otherwise. """,
            ),
            name='setElementRotation',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='setElementStreamable',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='streamable',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function can be used to disable streaming for an element. This will make sure the element is not virtualized (streamed out from GTA) when the player moves far away from it. This function only works in elements with a physical representation in the world (entities), such as player|players, ped|peds, vehicle|vehicles and object|objects.
* There is a limit of elements that can be streamed in safely for every GTA entity type. If you bypass said limit by using this function, the client can experience problems of disappearing objects and unstability when trying to stream in new elements of that type.
* In general, if you disable too many elements (of the same type or not) to stream out, GTA will always try to render them, so it can cause a noticeable FPS drop.}} """,
                arguments={
                    "theElement": """The element you wish to set the streaming of """,
                    "streamable": """true if this element should stream in/out like normal, false if it should always be streamed in. """
                },
                result="""returns whether the element could be set to be streamable. """,
            ),
            name='setElementStreamable',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='setElementSyncer',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='thePlayer',
                                argument_type=FunctionType(
                                    names=['player'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function can be used to change the syncer (player) of an element. The syncer is the player who is responsible for informing the server about the state of that element - its position, orientation and other state information. The function can be also used to remove an elements syncer.
Only vehicle and ped elements can have a syncer, other element types are not currently automatically synced by MTA.
Please note that using this function to change an elements syncer will only last as long as the element is within syncable range of the player. This is within 140 units for vehicles and 100 units for peds. As soon as it becomes impossible for your chosen player to sync the element, another player (or no player) will be automatically selected, and your setting will be lost. With vehicles, the last occupant to leave a vehicle will be selected as the syncer and override any setting you may have made.
Using this function to remove an elements syncer, means no player will be assigned to syncing the element. That will not be changed until setElementSyncer is called again.
It should also be noted that certain network changes to an element do not require a syncer. Actions such as destroying an element or explicitly setting the elements position (in a server side script), will still be updated on all clients regardless of this setting. """,
                arguments={
                    "theElement": """The element whose syncer you wish to change. """,
                    "thePlayer": """The player who should be the new syncer of the element. If set to false, this element will not have a syncer. If set to true, MTA will pick automatically the nearest or most relevant player to that element. """
                },
                result="""returns true if the syncer was changed successfully, false if the element passed was not a ped or vehicle. """,
            ),
            name='setElementSyncer',
        )
        ],
        client=[
            
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='setElementVelocity',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='speedX',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='speedY',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='speedZ',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function sets the velocity (movement speeds) along each axis, for an element.
This is not compatible with all elements. Only the following elements are compatible:
* Peds.
* Vehicles.
* Objects.
* Projectiles.
Objects and projectiles velocity can only be set clientside.}} """,
                arguments={
                    "theElement": """The element you wish to set the velocity of. """,
                    "speedX": """A floating point value determining the speed along the X axis. """,
                    "speedY": """A floating point value determining the speed along the Y axis. """,
                    "speedZ": """A floating point value determining the speed along the Z axis. """
                },
                result="""returns true if the speed was set successfully, false if a bad element was specified or other bad arguments. """,
            ),
            name='setElementVelocity',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='setElementVelocity',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='speedX',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='speedY',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='speedZ',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function sets the velocity (movement speeds) along each axis, for an element.
This is not compatible with all elements. Only the following elements are compatible:
* Peds.
* Vehicles.
* Objects.
* Projectiles.
Objects and projectiles velocity can only be set clientside.}} """,
                arguments={
                    "theElement": """The element you wish to set the velocity of. """,
                    "speedX": """A floating point value determining the speed along the X axis. """,
                    "speedY": """A floating point value determining the speed along the Y axis. """,
                    "speedZ": """A floating point value determining the speed along the Z axis. """
                },
                result="""returns true if the speed was set successfully, false if a bad element was specified or other bad arguments. """,
            ),
            name='setElementVelocity',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='setElementVisibleTo',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='visibleTo',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='visible',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""Does the order of setElementVisibleTo calls really not matter? visibility|Visibility seems to imply that the order does matter.
Is this function particularly or only useful for changing the visibility of markers, radar blips and radar areas?|User:EAi|EAiUser:Iam2noob4u|Iam2noob4u
This function can change an elements visibility. This does not work with all entities - vehicles, players and objects are exempt. This is because these objects are required for accurate sync (theyre physical objects that contribute to the physics engine). This function is particularly useful for changing the visibility of markers, radar blips and radar areas.
Visibility settings of lower elements in the element tree override higher ones - if visibility for root is set to false and for a player is set to true, it will be visible to the player.
If you want to clear all visibility settings of an object, try clearElementVisibleTo """,
                arguments={
                    "theElement": """The element you want to control the visibility of. """,
                    "visibleTo": """The element you wish the element to be visible or invisible to. Any child elements that are players will also be able to see the element. See visibility. """,
                    "visible": """Whether you are making it visible or invisible to the player. """
                },
                result="""returns true if the elements visibility was changed successfully, false otherwise, for example if you are trying to change the visibility of a vehicle, player or object. """,
            ),
            name='setElementVisibleTo',
        )
        ],
        client=[
            
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='setLowLODElement',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='lowLODElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function assigns a low LOD element to an element. The low LOD element is displayed when its associated element is not fully visible. If a low LOD element is assigned to several elements, it will be displayed when any of these elements are not fully visible. """,
                arguments={
                    "theElement": """The element whose low LOD version we want to change. """,
                    "lowLODElement": """A low LOD element to display when the first element is not fully visible. """
                },
                result="""returns true if the assignment was successful, false otherwise. """,
            ),
            name='setLowLODElement',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='setLowLODElement',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='lowLODElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function assigns a low LOD element to an element. The low LOD element is displayed when its associated element is not fully visible. If a low LOD element is assigned to several elements, it will be displayed when any of these elements are not fully visible. """,
                arguments={
                    "theElement": """The element whose low LOD version we want to change. """,
                    "lowLODElement": """A low LOD element to display when the first element is not fully visible. """
                },
                result="""returns true if the assignment was successful, false otherwise. """,
            ),
            name='setLowLODElement',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='updateElementRpHAnim',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""* Element/Player|Player
* Element/Ped|Ped
This function must be called after setElementBoneRotation for changes to take effect. It should only be called once per frame, after you are done rotating bones on that element, as it is quite heavy. """,
                arguments={
                    "theElement": """the element to update. """
                },
                result="""returns true if successful, false otherwise. """,
            ),
            name='updateElementRpHAnim',
        )
        ],
    )
]
