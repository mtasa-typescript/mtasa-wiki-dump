# Autogenerated file. ANY CHANGES WILL BE OVERWRITTEN
from to_python.core.types import FunctionType, \
    FunctionArgument, \
    FunctionArgumentValues, \
    FunctionReturnTypes, \
    FunctionSignature, \
    FunctionDoc, \
    FunctionData, \
    CompoundFunctionData
     
DUMP_PARTIAL = [
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='dxConvertPixels',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='pixels',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='newFormat',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='quality',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='80',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function converts Texture_pixels|pixels from one format to another.' ,
                arguments={
                    "pixels": """The pixels to convert the format of """,
                    "newFormat": """The new format required (plain or png or jpeg) """,
                    "quality": """The quality of the returned pixels if the new format is jpeg """
                },
                result='returns a copy of the pixels in the new format, or false if invalid arguments were passed to the function.' ,
            )
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='dxCreateFont',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='filepath',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='size',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='9',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='bold',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='false',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='quality',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=True,
                                ),
                                default_value='"proof"',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='<br/>\nThis function creates a DX font element that can be used in dxDrawText. Successful font creation is not guaranteed, and may fail due to hardware or memory limitations.\nTo see if creation is likely to fail, use dxGetStatus. (When VideoMemoryFreeForMTA is zero, failure is guaranteed.)' ,
                arguments={
                    "filepath": """the name of the file containing the font """,
                    "size": """size of the font """,
                    "bold": """flag to indicate if the font should be bold """,
                    "quality": """the font quality
** "default": not the actual default
** "draft"
** "proof": the default
** "nonantialiased"
** "antialiased"
** "cleartype"
** "cleartype_natural" """
                },
                result='returns a dx font element if successful, false if invalid arguments were passed to the function, or there is insufficient resources available.\nyou should always check to see if this function has returned false.' ,
            )
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='dxCreateRenderTarget',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='width',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='height',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='withAlpha',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='false',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function creates a render target element, which is a special type of texture that can be drawn on with the dx functions. Successful render target creation is not guaranteed, and may fail due to hardware or memory limitations.\nTo see if creation is likely to fail, use dxGetStatus. (When VideoMemoryFreeForMTA is zero, failure is guaranteed.)' ,
                arguments={
                    "width": """The width of the texture in pixels. """,
                    "height": """The height of the texture in pixels. """,
                    "withAlpha": """The render target will be created with an alpha channel. false will turn images alpha channels to black color """
                },
                result='returns a texture element if successful, false if the system is unable to create a render target.\nyou should always check to see if this function has returned false.' ,
            )
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='dxCreateScreenSource',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='width',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='height',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function creates a screen source, which is a special type of texture that contains the screen as rendered by GTA\nNote that successful screen source creation is not guaranteed, and may fail due to hardware or memory limitations. You should always check to see if this function has returned false.' ,
                arguments={
                    "width": """The width of the texture in pixels. """,
                    "height": """The height of the texture  in pixels. """
                },
                result='returns a texture element if successful, false if invalid arguments were passed to the function.' ,
            )
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='dxCreateShader',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='filepath',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            ),
                FunctionArgument(
                                name='raw_data',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='priority',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='maxDistance',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='layered',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='false',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='elementTypes',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=True,
                                ),
                                default_value='"world,vehicle,object,other"',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function creates a shader element that can be used in the dxDraw functions. Successful shader creation is not guaranteed unless the shader|Effect File contains a fallback technique which will work on every PC in the universe.\n<syntaxhighlight lang=lua>\nelement, string dxCreateShader ( string filepath / string raw_data , float priority = 0, float maxDistance = 0, bool layered = false, string elementTypes = world,vehicle,object,other  )\n</syntaxhighlight>\n*filepath / raw_data: The filepath of the shader|shader  Effect File (.fx) file or whole data buffer of the shader file\nAll the following optional arguments are only relevant when the shader is used with engineApplyShaderToWorldTexture\n*priority: If more than one shader is matched to a world texture, the shader with the highest priority will be used. If there is more than one shader with the same highest priority, the most recently created shader is used.\n*maxDistance: If non-zero, the shader will be applied to textures nearer than maxDistance only. This can speed up rendering, but (to look good) may require the shader to fade out its own effect as the texture reaches maxDistance.\n*layered: When set to true, the shader will be drawn in a separate render pass. Several layered shaders can be drawn on the same world texture. (To avoid http://en.wikipedia.org/wiki/Z-fighting Z fighting artifacts, you may have to add DepthBias<nowiki>=</nowiki>-0.0002; to the technique pass, but this might cause visual artifacts when applied on vehicles)\n*elementTypes: A comma seperated list of element types to restrict this shader to. Valid element types are:\n** world - Textures in the GTA world\n** ped - Player and ped textures\n** vehicle - Vehicles textures\n** object - Objects textures\n** other - Element textures which are not peds, vehicles or objects\n** all - Everything\n*element: A shader element if successful, false if invalid arguments were passed to the function. You should always check to see if this function has returned false.\n*string: The name of the technique that will be used.\n|20688}}\n<syntaxhighlight lang=lua>\nelement, string dxCreateShader ( string filepath / string raw_data  , table macros = {} , float priority = 0, float maxDistance = 0, bool layered = false, string elementTypes = world,vehicle,object,other  )\n</syntaxhighlight>\n*filepath / raw_data: The filepath of the shader|shader  Effect File (.fx) file or whole data buffer of the shader file\nAll the following optional arguments are only relevant when the shader is used with engineApplyShaderToWorldTexture\n*macros: A table contains macros in an ordered and/or unordered way. See example below.\n*priority: If more than one shader is matched to a world texture, the shader with the highest priority will be used. If there is more than one shader with the same highest priority, the most recently created shader is used.\n*maxDistance: If non-zero, the shader will be applied to textures nearer than maxDistance only. This can speed up rendering, but (to look good) may require the shader to fade out its own effect as the texture reaches maxDistance.\n*layered: When set to true, the shader will be drawn in a separate render pass. Several layered shaders can be drawn on the same world texture. (To avoid http://en.wikipedia.org/wiki/Z-fighting Z fighting artifacts, you may have to add DepthBias<nowiki>=</nowiki>-0.0002; to the technique pass, but this might cause visual artifacts when applied on vehicles)\n*elementTypes: A comma seperated list of element types to restrict this shader to. Valid element types are:\n** world - Textures in the GTA world\n** ped - Player and ped textures\n** vehicle - Vehicles textures\n** object - Objects textures\n** other - Element textures which are not peds, vehicles or objects\n** all - Everything\n*element: A shader element if successful, false if invalid arguments were passed to the function. You should always check to see if this function has returned false.\n*string: The name of the technique that will be used.\n|20688}}' ,
                arguments={
                    
                },
                result='' ,
            )
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='dxCreateTexture',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='pixels',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            ),
                FunctionArgument(
                                name='filepath',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='textureFormat',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=True,
                                ),
                                default_value='"argb"',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='mipmaps',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='true',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='textureEdge',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=True,
                                ),
                                default_value='"wrap"',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function creates a texture element that can be used in the dxDraw functions.\nIt is possible to use dxCreateTexture to load cubemaps and volume textures, but these will only be useable as inputs for a shader. The Microsoft utility http://nightly.mtasa.com/files/shaders/DxTex.zip DxTex can view and change cubemaps and volume textures. DxTex can also convert standard textures into DXT1/3/5 compressed .dds which should reduce file sizes.' ,
                arguments={
                    "filepath": """The filepath of the image. (.bmp, .dds, .jpg, .png, and .tga images are supported). Image files should ideally have dimensions that are a power of two, to prevent possible blurring.
or """,
                    "pixels": """Texture_pixels|Pixels containing image data. (plain, jpeg or png pixels can be used here)
or """,
                    "width": """Desired width, preferably power of two (16, 32, 64 etc.), maximum is 16384 """,
                    "height": """Desired height, preferably power of two (16, 32, 64 etc.), maximum is 16384 """,
                    "textureFormat": """A string representing the desired texture format, which can be one of: """,
                    "argb": """: ARGB uncompressed 32 bit color (default). """,
                    "dxt1": """: DXT1 compressed - Can take a fraction of a second longer to load (unless the file is already a DXT1 .dds). Uses 8 times less video memory than ARGB and can speed up drawing. Quality not as good as ARGB. It supports alpha blending, but it can only be on or off, that is: either 0 or 255. """,
                    "dxt3": """: DXT3 compressed - Can take a fraction of a second longer to load (unless the file is already a DXT3 .dds). Uses 4 times less video memory than ARGB and can speed up drawing. Quality slightly better than DXT1 and supports crisp alpha blending. """,
                    "dxt5": """: DXT5 compressed - Can take a fraction of a second longer to load (unless the file is already a DXT5 .dds). Uses 4 times less video memory than ARGB and can speed up drawing. Quality slightly better than DXT1 and supports smooth alpha blending. """,
                    "mipmaps": """True to create a mip-map chain so the texture looks good when drawn at various sizes. """,
                    "textureEdge": """A string representing the desired texture edge handling, which can be one of: """,
                    "wrap": """: Wrap the texture at the edges (default) """,
                    "clamp": """: Clamp the texture at the edges. This may help avoid edge artifacts. """,
                    "mirror": """: Mirror the texture at the edges. """,
                    "textureType": """A string representing the desired texture type, which can be one of: """,
                    "2d": """: Standard texture (default) """,
                    "3d": """: Volume texture """,
                    "cube": """: Cube map """,
                    "depth": """Desired number of slices when creating a volume texture """
                },
                result='returns a texture if successful, false if invalid arguments were passed to the function.' ,
            )
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='dxDrawCircle',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='posX',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='posY',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='radius',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='startAngle',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value='0.0',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='stopAngle',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value='360.0',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='theColor',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='white',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='theCenterColor',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='theColor',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='segments',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='32',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='ratio',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='1',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='postGUI',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='false',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='<lowercasetitle/>' ,
                arguments={
                    "posX": """: An integer representing the absolute X position of the circle center, represented by pixels on the screen. """,
                    "posY": """: An integer representing the absolute Y position of the circle center, represented by pixels on the screen. """,
                    "radius": """: An integer representing the radius scale of the circle that is being drawn. """,
                    "startAngle": """: An integer representing the angle of the first point of the circle. """,
                    "stopAngle": """: An integer representing the angle of the last point of the circle. """,
                    "theColor": """: An integer of the hex color, produced using tocolor or 0xAARRGGBB (AA = alpha, RR = red, GG = green, BB = blue). """,
                    "theCenterColor": """: An integer of the hex color, produced using tocolor or 0xAARRGGBB (AA = alpha, RR = red, GG = green, BB = blue). """,
                    "segments": """: An integer ranging from 3-1024 representing how many triangles are used to form the circle, more segments = smoother circle. Note: using lots of segments may cause lag. """,
                    "ratio": """: Ratio between width and height, e.g: 2 would mean that the width of the circle is 2 times the height. """,
                    "postGUI": """: A bool representing whether the circle should be drawn on top of or behind any ingame GUI (rendered by CEGUI). """
                },
                result='returns true if the creation of the 2d circle was successful, false otherwise.' ,
            )
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='dxDrawImage',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='posX',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='posY',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='width',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='height',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='image',
                                argument_type=FunctionType(
                                    names=['mixed'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='rotation',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='rotationCenterOffsetX',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='rotationCenterOffsetY',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='color',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='tocolor(255,255,255,255)',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='postGUI',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='false',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Draws an image on the screen for a single frame. In order for the image to stay visible continuously, you need to call this function with the same parameters on each frame update (see onClientRender).<br/>\nImage files should ideally have dimensions that are a power of two, to prevent possible blurring.<br/>\n<b>Power of two: 2px, 4px, 8px, 16px, 32px, 64px, 128px, 256px, 512px, 1024px...</b>' ,
                arguments={
                    "posX": """the absolute X coordinate of the top left corner of the image """,
                    "posY": """the absolute Y coordinate of the top left corner of the image """,
                    "width": """the absolute width of the image """,
                    "height": """the absolute height of the image """,
                    "image": """Either a material element or a filepath of the image which is going to be drawn. (.dds images are also supported). Image files should ideally have dimensions that are a power of two, to prevent possible blurring. Use a texture created with dxCreateTexture to speed up drawing. """,
                    "rotation": """the rotation, in degrees for the image. """,
                    "rotationCenterOffsetX": """the absolute X offset from the image center for which to rotate the image from. """,
                    "rotationCenterOffsetY": """the absolute Y offset from the image center for which to rotate the image from. """,
                    "color": """Tints the image with a value produced by tocolor or hexadecimal number in format: 0xAARRGGBB (RR = red, GG = green, BB = blue, AA = alpha). """,
                    "postGUI": """A bool representing whether the image should be drawn on top of or behind any ingame GUI (rendered by CEGUI). """
                },
                result='returns true if successful, false otherwise.' ,
            )
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='dxDrawImageSection',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='posX',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='posY',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='width',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='height',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='u',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='v',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='usize',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='vsize',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='image',
                                argument_type=FunctionType(
                                    names=['mixed'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='rotation',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='rotationCenterOffsetX',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='rotationCenterOffsetY',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='color',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='white',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='postGUI',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='false',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Differing from dxDrawImage, this function only draws a part of an image on the screen for a single frame. In order for the image to stay visible continuously, you need to call this function with the same parameters on each frame update (see onClientRender).\nImage files should ideally have dimensions that are a power of two, to prevent possible blurring.<br/>\n<b>Power of two: 2px, 4px, 8px, 16px, 32px, 64px, 128px, 256px, 512px, 1024px...</b>' ,
                arguments={
                    "posX": """the absolute X coordinate of the top left corner of the image """,
                    "posY": """the absolute Y coordinate of the top left corner of the image """,
                    "width": """the absolute width of the image """,
                    "height": """the absolute height of the image """,
                    "u": """the absolute X coordinate of the top left corner of the section which should be drawn from image """,
                    "v": """the absolute Y coordinate of the top left corner of the section which should be drawn from image """,
                    "usize": """the absolute width of the image section """,
                    "vsize": """the absolute height of the image section """,
                    "image": """Either a material element or a filepath of the image which is going to be drawn. (.dds images are also supported). Image files should ideally have dimensions that are a power of two, to prevent possible blurring. Use a texture created with dxCreateTexture to speed up drawing. """,
                    "rotation": """the rotation, in degrees for the image. """,
                    "rotationCenterOffsetX": """the absolute X offset from the image center for which to rotate the image from. """,
                    "rotationCenterOffsetY": """the absolute Y offset from the image center for which to rotate the image from. """,
                    "color": """the color of the image, a value produced by tocolor or hexadecimal number in format: 0xAARRGGBB (AA = alpha, RR = red, GG = green, BB = blue). """,
                    "postgui": """A bool representing whether the image should be drawn on top of or behind any ingame GUI (rendered by CEGUI). """
                },
                result='returns true if successful, false otherwise.' ,
            )
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='dxDrawLine',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='startX',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='startY',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='endX',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='endY',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='color',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='width',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value='1.0',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='postGUI',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='false',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function draws a 2D line across the screen - rendered for one frame.  This should be used in conjunction with onClientRender in order to display continuously.' ,
                arguments={
                    "startX": """An integer representing the absolute start X position of the line, represented by pixels on the screen. """,
                    "startY": """An integer representing the absolute start Y position of the line, represented by pixels on the screen. """,
                    "endX": """An integer representing the absolute end X position of the line, represented by pixels on the screen. """,
                    "endY": """An integer representing the absolute end Y position of the line, represented by pixels on the screen. """,
                    "color": """An integer of the hex color, produced using tocolor or 0xAARRGGBB (AA = alpha, RR = red, GG = green, BB = blue). """,
                    "width": """The width/thickness of the line """,
                    "postGUI": """A bool representing whether the line should be drawn on top of or behind any ingame GUI (rendered by CEGUI).
Returns a true if the operation was successful, false otherwise. """
                },
                result='returns a true if the operation was successful, false otherwise.' ,
            )
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='dxDrawLine3D',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='startX',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='startY',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='startZ',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='endX',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='endY',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='endZ',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='color',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='0xFFFFFFFF',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='width',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value='1.0',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='postGUI',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='false',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function draws a 3D line between two points in the 3D world - rendered for one frame.  This should be used in conjunction with onClientRender in order to display continuously.' ,
                arguments={
                    "startX": """The start X position of the 3D line, representing a coordinate in the GTA world. """,
                    "startY": """The start Y position of the 3D line, representing a coordinate in the GTA world. """,
                    "startZ": """The start Z position of the 3D line, representing a coordinate in the GTA world. """,
                    "endX": """The end X position of the 3D line, representing a coordinate in the GTA world. """,
                    "endY": """The end Y position of the 3D line, representing a coordinate in the GTA world. """,
                    "endZ": """The end Z position of the 3D line, representing a coordinate in the GTA world. """,
                    "color": """An integer of the hex color, produced using tocolor or 0xAARRGGBB (AA = alpha, RR = red, GG = green, BB = blue). """,
                    "width": """The width/thickness of the line """,
                    "postGUI": """A bool representing whether the line should be drawn on top of or behind any ingame GUI (rendered by CEGUI).
Returns a ''true'' if the operation was successful, ''false'' otherwise. """
                },
                result='returns a true if the operation was successful, false otherwise.' ,
            )
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='dxDrawMaterialLine3D',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='startX',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='startY',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='startZ',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='endX',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='endY',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='endZ',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='flipUV',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='false',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='material',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='width',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='color',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='white',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='postGUI',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='false',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='faceTowardX',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='faceTowardY',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='faceTowardZ',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function draws a textured 3D line between two points in the 3D world - rendered for one frame.  This should be used in conjunction with onClientPreRender in order to display continuously.\nThe 3D line with a large width value effectively becomes a rectangle, so it it possible to construct basic shapes such as boxes with several large width lines and the appropriate values for faceToward.\n3D lines are drawn at a particular place in the Game_Processing_Order|game processing order, so use onClientPreRender for drawing if you are attaching them to world elements.' ,
                arguments={
                    "startX/Y/Z": """The start position of the 3D line, representing a coordinate in the GTA world. """,
                    "endX/Y/Z": """The end position of the 3D line, representing a coordinate in the GTA world. """,
                    "material": """A material to draw the line with. """,
                    "width": """The width/thickness of the line in GTA world units. (This is 1/75th of the width used in dxDrawLine3D) """,
                    "flipUV": """: A bool representing whether a UV orientation should be flipped.
|20862}} """,
                    "color": """An int|integer of the hex color, produced using tocolor or 0xAARRGGBB (AA = alpha, RR = red, GG = green, BB = blue). """,
                    "postGUI": """: A bool representing whether the line should be drawn on top of or behind any ingame GUI.
|11998}} """,
                    "faceTowardX/Y/Z": """The position the front of the line should face towards. If this is not set, the camera position is used, so the front of the line faces toward the camera.
Returns a ''true'' if the operation was successful, ''false'' otherwise. """
                },
                result='returns a true if the operation was successful, false otherwise.' ,
            )
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='dxDrawMaterialPrimitive',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='pType',
                                argument_type=FunctionType(
                                    names=['primitiveType'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='material',
                                argument_type=FunctionType(
                                    names=['mixed'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='postGUI',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='vertice1',
                                argument_type=FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='vertice2',
                                argument_type=FunctionType(
                                    names=['table'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=True,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='If image file is used, it should ideally have dimensions that are a power of two, to prevent possible blurring.\nPower of two: 2px, 4px, 8px, 16px, 32px, 64px, 128px, 256px, 512px, 1024px...}}' ,
                arguments={
                    "pType": """Type of primitive to be drawn. """,
                    "image": """Either a material element or a filepath of the image which is going to be drawn. (.dds images are also supported). Image files should ideally have dimensions that are a power of two, to prevent possible blurring. Use a texture created with dxCreateTexture to speed up drawing. """,
                    "postGUI": """A bool representing whether the line should be drawn on top of or behind any ingame GUI (rendered by CEGUI). """,
                    "vertices": """Tables representing each primitive vertice, required amount of them is determined by primitive type. """
                },
                result='returns a true if the operation was successful, false otherwise.' ,
            )
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='dxDrawMaterialPrimitive3D',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='pType',
                                argument_type=FunctionType(
                                    names=['primitiveType'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='material',
                                argument_type=FunctionType(
                                    names=['mixed'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='postGUI',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='vertice1',
                                argument_type=FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='vertice2',
                                argument_type=FunctionType(
                                    names=['table'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=True,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function draws a 3D primitive shape with material applied to it in the 3D world - rendered for one frame. This should be used in conjunction with onClientRender in order to display continuously.\nIf image file is used, it should ideally have dimensions that are a power of two, to prevent possible blurring.\nPower of two: 2px, 4px, 8px, 16px, 32px, 64px, 128px, 256px, 512px, 1024px...' ,
                arguments={
                    "pType": """Type of primitive to be drawn. """,
                    "image": """Either a material element or a filepath of the image which is going to be drawn. (.dds images are also supported). Image files should ideally have dimensions that are a power of two, to prevent possible blurring. Use a texture created with dxCreateTexture to speed up drawing. """,
                    "postGUI": """A bool representing whether the line should be drawn on top of or behind any ingame GUI (rendered by CEGUI). """,
                    "vertices": """Tables representing each primitive vertice, required amount of them is determined by primitive type. """
                },
                result='returns a true if the operation was successful, false otherwise.' ,
            )
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='dxDrawMaterialSectionLine3D',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='startX',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='startY',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='startZ',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='endX',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='endY',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='endZ',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='u',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='v',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='usize',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='vsize',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='flipUV',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='false',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='material',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='width',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='color',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='white',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='postGUI',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='false',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='faceTowardX',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='faceTowardY',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='faceTowardZ',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function draws a textured 3D line between two points in the 3D world - rendered for one frame.  This should be used in conjunction with onClientPreRender in order to display continuously.\nThe 3D line with a large width value effectively becomes a rectangle, so it it possible to construct basic shapes such as boxes with several large width lines and the appropriate values for faceToward.' ,
                arguments={
                    "startX/Y/Z": """The start position of the 3D line, representing a coordinate in the GTA world. """,
                    "endX/Y/Z": """The end position of the 3D line, representing a coordinate in the GTA world. """,
                    "u": """the absolute X coordinate of the top left corner of the section """,
                    "v": """the absolute Y coordinate of the top left corner of the section """,
                    "usize": """the absolute width of the section """,
                    "vsize": """the absolute height of the section """,
                    "material": """A material to draw the line with. """,
                    "width": """The width/thickness of the line in GTA world units. (This is 1/75th of the width used in dxDrawLine3D) """,
                    "flipUV": """: A bool representing whether a UV orientation should be flipped.
|20862}} """,
                    "color": """An integer of the hex color, produced using tocolor or 0xAARRGGBB (AA = alpha, RR = red, GG = green, BB = blue). """,
                    "postGUI": """: A bool representing whether the line should be drawn on top of or behind any ingame GUI. """,
                    "faceTowardX/Y/Z": """The direction the front of the line should face towards. If this is not set, the front of the line always faces toward the camera.
Returns a ''true'' if the operation was successful, ''false'' otherwise. """
                },
                result='returns a true if the operation was successful, false otherwise.' ,
            )
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='dxDrawPrimitive',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='pType',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='postGUI',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='vertice1',
                                argument_type=FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='vertice2',
                                argument_type=FunctionType(
                                    names=['table'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=True,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='' ,
                arguments={
                    "pType": """Type of primitive to be drawn. """,
                    "postGUI": """A bool representing whether the line should be drawn on top of or behind any ingame GUI (rendered by CEGUI). """,
                    "vertices": """Tables representing each primitive vertice, required amount of them is determined by primitive type. """
                },
                result='returns a true if the operation was successful, false otherwise.' ,
            )
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='dxDrawPrimitive3D',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='primitiveType',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='postGUI',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='vertex1',
                                argument_type=FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='vertex2',
                                argument_type=FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='vertex3',
                                argument_type=FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='vertex4',
                                argument_type=FunctionType(
                                    names=['table'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=True,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function draws a 3D primitive in the 3D world - rendered for one frame.  This should be used in conjunction with onClientRender in order to display continuously.' ,
                arguments={
                    "primitiveType": """The type of primitive to be drawn. This could be:
"pointlist"
"linelist"
"linestrip"
"trianglefan"
"trianglelist"
"trianglestrip" """,
                    "postGUI": """A bool representing whether the line should be drawn on top of or behind any ingame GUI (rendered by CEGUI). """,
                    "vertex1": """A table with the coordinates of the vertex plus its color. """,
                    "vertex2": """A table with the coordinates of the vertex plus its color. """,
                    "vertex3": """A table with the coordinates of the vertex plus its color.
The vertex should be passed like this:
<syntaxhighlight lang="lua">
{x, y, z, color}
</syntaxhighlight> """,
                    "vertexN": """A table with the coordinates of the vertex plus its color. You can add as much as you want.
Returns a ''true'' if the operation was successful, ''false'' otherwise. """
                },
                result='returns a true if the operation was successful, false otherwise.' ,
            )
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='dxDrawRectangle',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='startX',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='startY',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='width',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='height',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='color',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='white',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='postGUI',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='false',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='subPixelPositioning',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='false',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function draws a 2D rectangle across the screen - rendered for one frame. This should be used in conjunction with onClientRender in order to display continuously.' ,
                arguments={
                    "startX": """An float representing the absolute origin X position of the rectangle, represented by pixels on the screen. """,
                    "startY": """An float representing the absolute origin Y position of the rectangle, represented by pixels on the screen. """,
                    "width": """An float representing the width of the rectangle, drawn in a right direction from the origin. """,
                    "height": """An float representing the height of the rectangle, drawn in a downwards direction from the origin. """,
                    "color": """the hex color of the rectangle, produced using tocolor or 0xAARRGGBB (AA = alpha, RR = red, GG = green, BB = blue). """,
                    "postGUI": """A bool representing whether the line should be drawn on top of or behind any ingame GUI. """,
                    "subPixelPositioning": """A bool representing whether the rectangle can be positioned sub-pixel-ly. """
                },
                result='returns true if the operation was successful, false otherwise.' ,
            )
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='dxDrawText',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='text',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='leftX',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='topY',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='rightX',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value='leftX',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='bottomY',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value='topY',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='color',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='white',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='scaleXY',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value='1.0',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='scaleY',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value='1.0',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='font',
                                argument_type=FunctionType(
                                    names=['mixed'],
                                    is_optional=True,
                                ),
                                default_value='"default"',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='alignX',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=True,
                                ),
                                default_value='"left"',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='alignY',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=True,
                                ),
                                default_value='"top"',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='clip',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='false',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='wordBreak',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='false',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='postGUI',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='false',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='colorCoded',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='false',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='subPixelPositioning',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='false',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='fRotation',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value='0.0',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='fRotationCenterX',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value='0.0',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='fRotationCenterY',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value='0.0',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Draws a string of text on the screen for one frame. In order for the text to stay visible continuously, you need to call this function with the same parameters on each frame update (see onClientRender).' ,
                arguments={
                    "text": """the text to draw """,
                    "leftX": """the absolute X coordinate of the top left corner of the text """,
                    "topY": """the absolute Y coordinate of the top left corner of the text """,
                    "rightX": """the absolute X coordinate of the right side of the text bounding box. Used for text aligning, clipping and word breaking. """,
                    "bottomY": """the absolute Y coordinate of the bottom side of the text bounding box. Used for text aligning, clipping and word breaking. """,
                    "color": """the color of the text, a value produced by tocolor or 0xAARRGGBB (AA = alpha, RR = red, GG = green, BB = blue). """,
                    "scale": """the size of the text.{{New feature|3.0110|1.1|scale: can (optionally) be specified as two floats. i.e. scaleX, scaleY}} """,
                    "font": """Either a custom DX font element or the name of a built-in DX font: Note: Some fonts are incompatible with certain languages such as Arabic. """,
                    "alignX": """horizontal alignment of the text within the bounding box. Can be left, center or right. """,
                    "alignY": """vertical alignment of the text within the bounding box. Can be top, center or bottom. """,
                    "clip": """if set to true, the parts of the text that dont fit within the bounding box will be cut off. """,
                    "wordBreak": """if set to true, the text will wrap to a new line whenever it reaches the right side of the bounding box. If false, the text will always be completely on one line. """,
                    "postGUI": """A bool representing whether the text should be drawn on top of or behind any ingame GUI (rendered by CEGUI). """,
                    "colorCoded": """Set to true to enable embedded #FFFFFF color codes. Note: clip and wordBreak are forced false if this is set. """,
                    "subPixelPositioning": """A bool representing whether the text can be positioned sub-pixel-ly. Looks nicer for moving/scaling animations. """,
                    "fRotation": """Rotation """,
                    "fRotationCenterX": """Rotation Origin X """,
                    "fRotationCenterY": """Rotation Origin Y """
                },
                result='returns true if successful, false otherwise.' ,
            )
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='dxDrawWiredSphere',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='x',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='y',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='z',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='radius',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='theColor',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='fLineWidth',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='iterations',
                                argument_type=FunctionType(
                                    names=['uint'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function drawn same sphere as /showcol. It provides 4 levels of iterations which mean density of sphere. Adjust radius to iterations to get optimum density of mesh. About 50 spheres with iterations = 4 can cause fps drop.' ,
                arguments={
                    "x, y, z": """A position in world of sphere. """,
                    "radius": """A radius of sphere. """,
                    "theColor": """A color of sphere from tocolor function. """,
                    "fLineWidth": """A width of line """,
                    "iterations": """Number 1, 2, 3 or 4. 1 mean low density, 4 mean high. """
                },
                result='returns a true if the operation was successful, false otherwise.' ,
            )
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='dxGetBlendMode',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns the current blend mode for the dxDraw functions. The blend mode is set using dxSetBlendMode' ,
                arguments={
                    
                },
                result='returns the current blend mode, which can be one of:\n*blend\n*add\n*modulate_add\n*overwrite' ,
            )
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='dxGetFontHeight',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='scale',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value='1',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='font',
                                argument_type=FunctionType(
                                    names=['mixed'],
                                    is_optional=True,
                                ),
                                default_value='"default"',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function retrieves the theoretical height of a certain piece of text, if it were to be drawn using dxDrawText.' ,
                arguments={
                    "scale": """The size of the text. """,
                    "font": """Either a custom DX font element or the name of a built-in dx font: """
                },
                result='returns an integer of the height of the text.' ,
            )
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='dxGetMaterialSize',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='material',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This gets the dimensions of the supplied material element.' ,
                arguments={
                    "material": """The material element whose size is to be gotten """
                },
                result='returns two ints representing the width and height in pixels of the material, or false if an invalid parameter was passed to the function.\nif the material is a volume texture, this function will return three ints representing the width, height and depth.' ,
            )
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='dxGetPixelColor',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='pixels',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='x',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='y',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function gets the color of a single pixel from Texture_pixels|pixels contained in a string. It only works with plain format pixels.' ,
                arguments={
                    "pixels": """The pixels to use """,
                    "x": """The X coordinate for the pixel """,
                    "y": """The Y coordinate for the pixel """
                },
                result='returns 4 ints representing the rgba color value of the pixel if succesful, or false if invalid arguments were passed to the function.' ,
            )
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='dxGetPixelsFormat',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='pixels',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns the format of Texture_pixels|pixels contained in a string.' ,
                arguments={
                    "pixels": """The pixels to get the format of """
                },
                result='returns the format of the pixels if successful (plain or png or jpeg), false if invalid arguments were passed to the function.' ,
            )
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='dxGetPixelsSize',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='pixels',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function gets the dimensions of Texture_pixels|pixels contained in a string. It works with all pixel formats.' ,
                arguments={
                    "pixels": """The pixels to get the dimensions of """
                },
                result='returns width and height of the pixels if successful, false if invalid arguments were passed to the function.' ,
            )
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='dxGetStatus',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function gets information about various internal datum' ,
                arguments={
                    
                },
                result='returns a table with the following entries:\n*testmode: the current dx test mode. see dxsettestmode.\n*videocardname: the name of the graphics card.\n*videocardram: the installed memory in mb of the graphics card.\n*videocardpsversion: the maximum pixel shader version of the graphics card.\n*videocardmaxanisotropy: the maximum anisotropic filtering available. (0-4 which respectively mean: off,2x,4x,8x,16x)\n*videocardnumrendertargets: the maximum number of simultaneous render targets a shader can use.\n*videomemoryfreeformta: the amount of memory in mb available for mta to use. when this gets to zero, guicreatefont, dxcreatefont and dxcreaterendertarget will fail.\n*videomemoryusedbyfonts: the amount of graphic memory in mb used by custom fonts.\n*videomemoryusedbytextures: the amount of graphic memory in mb used by textures.\n*videomemoryusedbyrendertargets: the amount of graphic memory in mb used by render targets.\n*settingwindowed: the windowed setting. (true/false)\n*settingfullscreenstyle: display style when in full screen mode. (0-2 which respectively mean: standard, borderless window, borderless keep res)\n*settingfxquality: the fx quality. (0-3)\n*settingdrawdistance: the draw distance setting. (0-100)\n*settingvolumetricshadows: the volumetric shadows setting. (true/false)\n*settingstreamingvideomemoryforgta: the usable graphics memory setting. (64-256)\n*settinganisotropicfiltering: the anisotropic filtering setting. (0-4 which respectively mean: off,2x,4x,8x,16x)\n*settingantialiasing: the anti-aliasing setting. (0-3 which respectively mean: off,1x,2x,3x)\n*settingheathaze: the heat haze setting. (true/false)\n*settinggrasseffect: the grass effect setting. (true/false)\n*setting32bitcolor: the color depth of the screen. (false is 16bit, true is 32bit)\n*settinghudmatchaspectratio: the hud match aspect ratio setting. (true/false)\n*settingaspectratio: the aspect ratio setting. (auto, 4:3, 16:10, 16:9)\n*settingfov: the fov setting.\n*settinghighdetailvehicles: high detail vehicles setting. (true/false)\n*settinghighdetailpeds: high detail peds setting. (true/false)\n*allowscreenupload: the allows screen uploads setting. (true/false)\n*depthbufferformat: the format of the shader readable depth buffer, or unknown if not available.\n*totalphysicalmemory: the amount of total physical memory in mb.\n*usingdepthbuffer: true if the depth buffer is used, false otherwise.' ,
            )
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='dxGetTextSize',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='text',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='width',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='scaleXY',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value='1.0',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='scaleY',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value='1.0',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='font',
                                argument_type=FunctionType(
                                    names=['mixed'],
                                    is_optional=True,
                                ),
                                default_value='"default"',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='wordBreak',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='false',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='colorCoded',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='false',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='NOTE: This function already takes the clients screen resolution into account.' ,
                arguments={
                    "text": """A string representing the text for which you wish to retrieve with width for. """,
                    "width": """The width of the text. Use with wordBreak = true. """,
                    "scaleX": """The scale of the text. Scale can also be inputted as a Vector2. """,
                    "scaleY": """The scale of the text. """,
                    "font": """Either a custom DX font element or the name of a built-in dx font: """,
                    "wordBreak": """If set to true, the text will wrap to a new line whenever it reaches the right side of the bounding box. If false, the text will always be completely on one line. """,
                    "colorCoded": """Should we exclude color codes from the width? False will include the hex in the length.
Returns two floats representing the width and height of the text in pixels. """
                },
                result='returns two floats representing the width and height of the text in pixels.' ,
            )
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='dxGetTexturePixels',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='surfaceIndex',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='texture',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='x',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='y',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='width',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='height',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function fetches the Texture_pixels|pixels from a texture element. It can be used with a standard texture, render target or screen source.\n*This function is slow and not something you want to be doing once a frame.\n*It is slower when reading pixels from a render target or screen source.\n*And is very slow indeed if the texture format is not  argb .' ,
                arguments={
                    "texture": """The texture element to get the pixels from """,
                    "surfaceIndex": """Desired slice to get if the texture is a volume texture, or desired face to get if the texture is a cube map. <nowiki>(Cube map faces: 0=+X 1=-X 2=+Y 3=-Y 4=+Z 5=-Z)</nowiki>
By default the pixels from the whole texture is returned. To get only a portion of the texture, define a rectangular area using all four of these optional arguments: """,
                    "x": """Rectangle left position """,
                    "y": """Rectangle top position """,
                    "width": """Rectangle width """,
                    "height": """Rectangle height """
                },
                result='returns a plain format pixels string if successful, false if invalid arguments were passed to the function.' ,
            )
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='dxGetTextWidth',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='text',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='scale',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value='1',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='font',
                                argument_type=FunctionType(
                                    names=['mixed'],
                                    is_optional=True,
                                ),
                                default_value='"default"',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='bColorCoded',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='false',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function retrieves the theoretical width (in pixels) of a certain piece of text, if it were to be drawn using dxDrawText.\nNOTE: This function already takes the clients screen resolution into account.' ,
                arguments={
                    "text": """A string representing the text for which you wish to retrieve with width for. """,
                    "scale": """The size of the text. """,
                    "font": """Either a custom DX font element or the name of a built-in dx font: """,
                    "bColorCoded": """Should we exclude color codes from the width? (false will include the hex in the length)
Returns the float of the width of the text (in pixels). """
                },
                result='returns the float of the width of the text (in pixels).' ,
            )
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='dxIsAspectRatioAdjustmentEnabled',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function gets the current aspect ratio set by dxSetAspectRatioAdjustmentEnabled.' ,
                arguments={
                    
                },
                result='*boolean: returns true when enabled by dxsetaspectratioadjustmentenabled, false otherwise.\n*float: aspect ratio set by dxsetaspectratioadjustmentenabled' ,
            )
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='dxSetAspectRatioAdjustmentEnabled',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='bEnabled',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='sourceRatio',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value='4/3',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function allows for the positioning of dxDraw calls to be automatically adjusted according to the clients aspect ratio setting.  This lasts for a single execution of an event handler for one of the following events: onClientRender, onClientPreRender and onClientHUDRender. So the function has to be called every frame, just like dxDraws.\nThis is particularly useful for draws that must align with the GTA HUD, for which the sizing and positioning can vary for different aspect ratios.' ,
                arguments={
                    "bEnabled": """: Should the adjustment be enabled or disabled. """,
                    "sourceRatio": """This should be set to the aspect ratio the dxDraws were originally designed in. """
                },
                result='returns true when it was changed successfully, or false otherwise.' ,
            )
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='dxSetBlendMode',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='blendMode',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function sets the current blend mode for the dxDraw functions. Changing the blend mode can increase the quality when drawing text or certain other images to a render target. As a general guide use modulate_add when drawing text to a render target, and add when drawing the render target to the screen. Dont forget to restore the default blend at the end - See the example below.' ,
                arguments={
                    "blendMode": """The blend mode to use which can be one of: """,
                    "blend": """The source textures are alpha blended to the screen/render target. This is the default mode for drawing and gives the results we all know and love. """,
                    "add": """The source textures are added to the screen/render target. """,
                    "modulate_add": """The source textures are multiplied by the alpha and then added to the screen/render target. """,
                    "overwrite": """The source textures are overwritten. This can be useful for clearing render targets. """
                },
                result='returns true if successful, or false if invalid arguments were passed to the function.' ,
            )
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='dxSetPixelColor',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='pixels',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='x',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='y',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='r',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='g',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='b',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='a',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='255',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function sets the color of a single pixel for Texture_pixels|pixels contained in a string. It only works with plain format pixels.' ,
                arguments={
                    "pixels": """The pixels to use """,
                    "x": """The X coordinate for the pixel """,
                    "y": """The Y coordinate for the pixel """,
                    "r": """The red channel for the color (0-255) """,
                    "g": """The green channel for the color (0-255) """,
                    "b": """The blue channel for the color (0-255) """,
                    "a": """The alpha channel for the color (0-255) """
                },
                result='returns true if successful, or false if invalid arguments were passed to the function.' ,
            )
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='dxSetRenderTarget',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='renderTarget',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='clear',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='false',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='' ,
                arguments={
                    "renderTarget": """The render target element whose pixels we want to draw on. """,
                    "clear": """If set to true, the render target will also be cleared. """
                },
                result='returns true if the render target was successfully changed, false otherwise.' ,
            )
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='dxSetShaderTessellation',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theShader',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='tessellationX',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='tessellationY',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function sets the amount of geometric sub-division to use when drawing a shader element with dxDrawImage.\nUsing tessellation allows a shader to manipulate the shape of the rendered image at each sub-division boundary.' ,
                arguments={
                    "theShader": """The shader element whose tessellation is to be changed """,
                    "tessellationX": """The number of sub-division points along the X axis. Range is 1 to 500. """,
                    "tessellationY": """The number of sub-division points along the Y axis. Range is 1 to 500. """
                },
                result='returns true if the shader elements tessellation was successfully changed, false otherwise.' ,
            )
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='dxSetShaderTransform',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theShader',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='rotationX',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='rotationY',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='rotationZ',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='rotationCenterOffsetX',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='rotationCenterOffsetY',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='rotationCenterOffsetZ',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='bRotationCenterOffsetOriginIsScreen',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='false',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='perspectiveCenterOffsetX',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='perspectiveCenterOffsetY',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='bPerspectiveCenterOffsetOriginIsScreen',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='false',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function applies a 3D transformation to a shader element when it is drawn with dxDrawImage.' ,
                arguments={
                    "theShader": """The shader element whose transformation is to be changed """,
                    "rotationX": """Rotation angle in degrees around the X axis (Left,right). This will make the shader rotate along its width. """,
                    "rotationY": """Rotation angle in degrees around the Y axis (Up,down). This will make the shader rotate along its height. """,
                    "rotationZ": """Rotation angle in degrees around the Z axis (In,out). This will make the shader rotate in a similar way to the rotation argument in dxDrawImage. """,
                    "rotationCenterOffsetX": """The center of rotation offset X position in screen relative units. """,
                    "rotationCenterOffsetY": """The center of rotation offset Y position in screen relative units. """,
                    "rotationCenterOffsetZ": """The center of rotation offset Z position in screen relative units. """,
                    "bRotationCenterOffsetOriginIsScreen": """Set to boolean|true if the center of rotation origin should be the center of the screen rather than the center of the image. """,
                    "perspectiveCenterOffsetX": """The center of perspective offset X position in screen relative units. """,
                    "perspectiveCenterOffsetY": """The center of perspective offset Y position in screen relative units. """,
                    "bPerspectiveCenterOffsetOriginIsScreen": """Set to boolean|true if the center of perspective origin should be the center of the screen rather than the center of the image.
To convert screen relative units into screen pixel coordinates, ''multiply'' by the screen size. Conversely, to convert screen pixel coordinates to screen relative units, '''''divide''''' by the screen size. """
                },
                result='returns true if the shader elements transform was successfully changed, false otherwise.' ,
            )
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='dxSetShaderValue',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theShader',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='parameterName',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='value',
                                argument_type=FunctionType(
                                    names=['mixed'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This sets a named parameter for a shader element' ,
                arguments={
                    "theShader": """The shader element whose parameter is to be changed """,
                    "parameterName": """The name of parameter """,
                    "value": """The value to set, which can be a texture, a bool, a number or a list of numbers(max 16 floats(numbers)) """
                },
                result='returns true if the shader elements parameter was successfully changed, false otherwise.' ,
            )
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='dxSetTestMode',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='testMode',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function is used for testing scripts written using guiCreateFont, dxCreateFont, dxCreateShader and dxCreateRenderTarget.\nEach one of the 3 test modes should be used in turn to help highlight any potential problems.' ,
                arguments={
                    "testMode": """The test mode to be set. It can be one of the following values: """,
                    "none": """Test mode disabled """,
                    "no_mem": """Simulate no free video memory available for MTA. """,
                    "low_mem": """Simulate little free video memory available for MTA. """,
                    "no_shader": """Simulate shaders failing validation. """
                },
                result='returns true if the test mode was successfully set, false otherwise.' ,
            )
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='dxSetTextureEdge',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theTexture',
                                argument_type=FunctionType(
                                    names=['texture'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='textureEdge',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='border-color',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This functions allows you to change the edge handling after creating the texture.' ,
                arguments={
                    "theTexture": """The affected texture """,
                    "textureEdge": """The texture edge mode. Available modes are wrap, mirror, clamp, border, mirror-once """,
                    "border-color": """If textureEdge is set to border, you are able to define a border color here """
                },
                result='' ,
            )
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='dxSetTexturePixels',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='surfaceIndex',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='texture',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='pixels',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='x',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='y',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='width',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='height',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function sets the Texture_pixels|pixels of a texture element. It can be used with a standard texture, render target or screen source. Only plain format pixels please.\n* This function is slow and not something you want to be doing once a frame.\n* It is very slow when setting pixels to a render target or screen source.\n* And is very slow indeed if the texture format is not argb.' ,
                arguments={
                    "texture": """The texture element to set the pixels of """,
                    "pixels": """The plain format pixels to use """,
                    "surfaceIndex": """Desired slice to set if the texture is a volume texture, or desired face to set if the texture is a cube map. <nowiki>(Cube map faces: 0=+X 1=-X 2=+Y 3=-Y 4=+Z 5=-Z)</nowiki>
By default the pixels are set starting at the top left corner of the texture. To set a different region, define a rectangular area using all four of these optional arguments: """,
                    "x": """Rectangle left position """,
                    "y": """Rectangle top position """,
                    "width": """Rectangle width """,
                    "height": """Rectangle height """
                },
                result='returns a string if successful, false if invalid arguments were passed to the function.' ,
            )
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='dxUpdateScreenSource',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='screenSource',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='resampleNow',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='false',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function updates the contents of a screen source texture with the screen output from GTA' ,
                arguments={
                    "screenSource": """The screen source element whose pixels we want to fill with the screen capture """,
                    "resampleNow": """A bool to indicate if the screen should be captured immediately. The default is false which means the screen from the end of the previous frame is used (better for performance and consistency). Use true for layering fullscreen effects. """
                },
                result='returns true if the screen was successfully captured, false otherwise.' ,
            )
        )
        ],
    )
]
