# Autogenerated file. ANY CHANGES WILL BE OVERWRITTEN
from to_python.core.types import FunctionType, \
    FunctionArgument, \
    FunctionArgumentValues, \
    FunctionReturnTypes, \
    FunctionSignature, \
    FunctionDoc, \
    FunctionOOP, \
    FunctionData, \
    CompoundFunctionData
    
DUMP_PARTIAL = [
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='getChatboxLayout',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool', 'int', 'table'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='CVar',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""Returns information about how the chatbox looks.
These values come from the file called: Chatboxpresets.xml but it depends on what type of preset you currently have, which is chosen from your settings in the Interface tab. """,
                arguments={
                    "CVar": """the name of the property you want returned. Can be the following values: """,
                    "chat_font": """- Returns the chatbox font """,
                    "chat_lines": """- Returns how many lines the chatbox has """,
                    "chat_color": """- Returns the background color of the chatbox """,
                    "chat_text_color": """- Returns the chatbox text color """,
                    "chat_input_color": """- Returns the background color of the chatbox input """,
                    "chat_input_prefix_color": """- Returns the color of the input prefix text """,
                    "chat_input_text_color": """- Returns the color of the text in the chatbox input """,
                    "chat_scale": """- Returns the scale of the text in the chatbox """,
                    "chat_position_offset_x": """- Returns the x position offset setting """,
                    "chat_position_offset_y": """- Returns the y position offset setting """,
                    "chat_position_horizontal": """- Returns the horizontal alignment setting """,
                    "chat_position_vertical": """- Returns the vertical alignment setting """,
                    "chat_text_alignment": """- Returns the text alignment setting """,
                    "chat_width": """- Returns the scale of the background width """,
                    "chat_css_style_text": """- Returns whether text fades out over time """,
                    "chat_css_style_background": """- Returns whether the background fades out over time """,
                    "chat_line_life": """- Returns how long it takes for text to start fading out """,
                    "chat_line_fade_out": """- Returns how long takes for text to fade out """,
                    "chat_use_cegui": """- Returns whether CEGUI is used to render the chatbox """,
                    "text_scale": """- Returns text scale """
                },
                result="""*4 numbers if the cvar contains color
*2 numbers if chat_scale was entered
*1 number if any other cvar was specified
*a table of all cvar values, if cvar was not specified
*false if an invalid cvar was specified """,
            ),
            oop=None,
            name='getChatboxLayout',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiBlur',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='guiElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description=""" """,
                arguments={
                    "guiElement": """the GUI element that you want to defocus """
                },
                result="""returns true if the function was successful, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='GUI widgets|GuiElement',
                method_name="""blur""",
                field=None,
                is_static=False,
            ),
            name='guiBlur',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiBringToFront',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='guiElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function brings a GUI element on top of others. """,
                arguments={
                    "guiElement": """the GUI element that you want to move to the front. """
                },
                result="""returns true if the function was successful, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='GUI widgets|GuiElement',
                method_name="""bringToFront""",
                field=None,
                is_static=False,
            ),
            name='guiBringToFront',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiCheckBoxGetSelected',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theCheckbox',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function gets a checkboxs selection state. """,
                arguments={
                    "theCheckbox": """The checkbox you wish to retrieve the selection state of. """
                },
                result="""returns true if the checkbox is selected, false if it is not. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Element/GUI/Checkbox|GuiCheckBox',
                method_name="""getSelected""",
                field="""selected""",
                is_static=False,
            ),
            name='guiCheckBoxGetSelected',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiCheckBoxSetSelected',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theCheckbox',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='state',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function selects (ticks) or unselects a checkbox. """,
                arguments={
                    "theCheckbox": """The GUI element in which you wish to change the selection state of """,
                    "state": """The state of the checkbox, where true indicates selected, and false indicates unselected. """
                },
                result="""returns true if the checkboxs selection state was successfully set, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Element/GUI/Checkbox|GuiCheckBox',
                method_name="""setSelected""",
                field="""selected""",
                is_static=False,
            ),
            name='guiCheckBoxSetSelected',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiComboBoxAddItem',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='comboBox',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='value',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""Adds an item to a combobox. """,
                arguments={
                    "comboBox": """The combobox you want to add a row to """,
                    "value": """The text that the item will contain. """
                },
                result="""returns the item id if it has been created, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Element/GUI/Combobox|GuiComboBox',
                method_name="""addItem""",
                field=None,
                is_static=False,
            ),
            name='guiComboBoxAddItem',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiComboBoxClear',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='comboBox',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function removes all the items from a combobox. """,
                arguments={
                    "comboBox": """The combobox element to be cleared """
                },
                result="""returns true if the combobox element is valid and has been cleared successfully, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Element/GUI/Combobox|GuiComboBox',
                method_name="""clear""",
                field=None,
                is_static=False,
            ),
            name='guiComboBoxClear',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiComboBoxGetItemCount',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='comboBox',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description=""" """,
                arguments={
                    "comboBox": """The combo box to get the number of items from. """
                },
                result="""returns the number of items if the function is successful, false otherwise. """,
            ),
            oop=None,
            name='guiComboBoxGetItemCount',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiComboBoxGetItemText',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='comboBox',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='itemId',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function retrieves the text from a specific combobox item. """,
                arguments={
                    "comboBox": """The combobox containing the item youre interested in """,
                    "itemId": """The index of the item """
                },
                result="""returns the text of the item if the arguments are right, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Element/GUI/Combobox|GuiComboBox',
                method_name="""getItemText""",
                field=None,
                is_static=False,
            ),
            name='guiComboBoxGetItemText',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiComboBoxGetSelected',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='comboBox',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function returns the index of the selected combobox item. """,
                arguments={
                    "comboBox": """the combobox you want to know the selected item index of """
                },
                result="""returns the index of the selected item if the specified combobox is valid and has a selected item, -1 if no item is selected, nil otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Element/GUI/Combobox|GuiComboBox',
                method_name="""getSelected""",
                field="""selected""",
                is_static=False,
            ),
            name='guiComboBoxGetSelected',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiComboBoxIsOpen',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='comboBox',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description=""" """,
                arguments={
                    "comboBox": """The combo box to get the state. """
                },
                result="""returns true if combobox is opened, false if combobox is closed, nil otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Element/GUI/Combobox|GuiComboBox',
                method_name="""isOpen""",
                field="""open""",
                is_static=False,
            ),
            name='guiComboBoxIsOpen',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiComboBoxRemoveItem',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='comboBox',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='itemId',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function removes an item from a combobox. """,
                arguments={
                    "comboBox": """The combobox containing the item youre interested in """,
                    "itemId": """The index of the item to remove """
                },
                result="""returns true if the item was removes successfully, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Element/GUI/Combobox|GuiComboBox',
                method_name="""removeItem""",
                field=None,
                is_static=False,
            ),
            name='guiComboBoxRemoveItem',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiComboBoxSetItemText',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='comboBox',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='itemId',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='text',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function changes the text of a combobox item. """,
                arguments={
                    "comboBox": """The combobox containing the item youre interested in """,
                    "itemId": """The index of the item """,
                    "text": """The text you want to put in (does NOT accept numbers, use tostring() for that) """
                },
                result="""returns true if the text was set successfully, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Element/GUI/Combobox|GuiComboBox',
                method_name="""setItemText""",
                field=None,
                is_static=False,
            ),
            name='guiComboBoxSetItemText',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiComboBoxSetOpen',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='comboBox',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='state',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description=""" """,
                arguments={
                    "comboBox": """The combobox to be opened or closed. """,
                    "state": """The state of combobox. true, if the combobox is to be opened. false if the combobox is to be closed. """
                },
                result="""returns true if is successful, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Element/GUI/Combobox|GuiComboBox',
                method_name="""setOpen""",
                field="""open""",
                is_static=False,
            ),
            name='guiComboBoxSetOpen',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiComboBoxSetSelected',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='comboBox',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='itemIndex',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function sets the selected item from a combobox. """,
                arguments={
                    "comboBox": """the combobox you want to select an item from """,
                    "itemIndex": """the item you want to select (item 0 is the first item). If -1 is specified, then the combo box text is set to its caption. """
                },
                result="""returns true if the selected item has been changed successfully, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Element/GUI/Combobox|GuiComboBox',
                method_name="""setSelected""",
                field="""selected""",
                is_static=False,
            ),
            name='guiComboBoxSetSelected',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiCreateBrowser',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['gui-browser'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='x',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='y',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='width',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='height',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='isLocal',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='isTransparent',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='isRelative',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='parent',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=True,
                                ),
                                default_value='nil',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function creates a new CEGUI web Element/Browser|browser element.
<br>The difference between this, and createBrowser is that, this handles inputs internally, and it can be attached to GUI windows. So this one is more suitable for custom dx based interfaces.
You can learn more about the differences https://forum.mtasa.com/topic/80422-dx-browser-vs-gui-browser/?do=findComment&comment=737334 here. """,
                arguments={
                    "x": """A float of the 2D x position of the browser on a players screen.  This is affected by the relative argument. """,
                    "y": """A float of the 2D y position of the browser on a players screen. This is affected by the relative argument. """,
                    "width": """The browsers native width. This should be greater than or equal to 1. """,
                    "height": """The browsers native height. This should be greater than or equal to 1. """,
                    "isLocal": """Sets whether the browser can only show local content or content from the internet (see examples over CreateBrowser|here for more information) """,
                    "isTransparent": """true if you want the browser to support transparency, false otherwise """,
                    "isRelative": """This is whether sizes and positioning are relative.  If this is true, then all x,y,width,height floats must be between 0 and 1, representing sizes/positions as a fraction of the screen size. If false, then the size and co-ordinates are based on clients resolution, accessible using guiGetScreenSize. """,
                    "parent": """This is the parent that the radio button is attached to. If the relative argument is true, sizes and positioning will be made relative to this parent. If the relative argument is false, positioning will be the number of offset pixels from the parents origin. If no parent is passed, the parent will become the screen - causing positioning and sizing according to screen positioning. """
                },
                result="""returns a gui-browser element if it was created successfully, false otherwise. returns also false, if the user disabled remote pages and islocal was set to false. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Element/gui-browser|GuiBrowser',
                method_name=None,
                field=None,
                is_static=True,
            ),
            name='guiCreateBrowser',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiCreateButton',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='x',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='y',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='width',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='height',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='text',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='relative',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='parent',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=True,
                                ),
                                default_value='nil',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function allows creation of a GUI Button, which is a clickable item as part of GUI. """,
                arguments={
                    "x": """A float of the 2D x position of the GUI button on a players screen.  This is affected by the relative argument. """,
                    "y": """A float of the 2D y position of the GUI button on a players screen. This is affected by the relative argument. """,
                    "width": """A float of the width of the GUI button. This is affected by the relative argument. """,
                    "height": """A float of the height of the GUI button. This is affected by the relative argument. """,
                    "text": """A string of the text that will be displayed as a label on the button. """,
                    "relative": """This is whether sizes and positioning are relative.  If this is true, then all x, y, width and height floats must be between 0 and 1, representing sizes relative to the parent. """,
                    "parent": """This is the parent that the gui button is attached to.  If the relative argument is true, sizes and positioning will be made relative to this parent. If the relative argument is false, positioning will be the number of offset pixels from the parents origin. If no parent is passed, the parent will become the screen - causing positioning and sizing according to screen positioning. """
                },
                result="""returns an element of the created element/gui/button|button if it was successfully created, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Element/GUI/Button|GuiButton',
                method_name=None,
                field=None,
                is_static=True,
            ),
            name='guiCreateButton',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiCreateCheckBox',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='x',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='y',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='width',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='height',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='text',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='selected',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='relative',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='parent',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=True,
                                ),
                                default_value='nil',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function creates a Element/GUI/Checkbox|checkbox. """,
                arguments={
                    "x": """A float of the 2D x position of the checkbox on a players screen. This is affected by the relative argument. """,
                    "y": """A float of the 2D y position of the checkbox on a players screen. This is affected by the relative argument. """,
                    "width": """A float of the width of the text field next to the checkbox. This is affected by the relative argument. """,
                    "height": """A float of the height of the text field next to the checkbox. This is affected by the relative argument. """,
                    "text": """The text to be displayed next to the checkbox. """,
                    "selected": """A boolean representing whether the checkbox created should be selected by default. """,
                    "relative": """This is whether sizes and positioning are relative. If this is true, then all x,y,width,height floats must be between 0 and 1, representing measures relative to the parent. """,
                    "parent": """This is the parent that the checkbox is attached to. If the relative argument is true, sizes and positioning will be made relative to this parent. If the relative argument is false, positioning will be the number of offset pixels from the parents origin. If no parent is passed, the parent will become the screen - causing positioning and sizing according to screen positioning. """
                },
                result="""returns element of the checkbox if it was created succesfully, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Element/GUI/Checkbox|GuiCheckBox',
                method_name=None,
                field=None,
                is_static=True,
            ),
            name='guiCreateCheckBox',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiCreateComboBox',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='x',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='y',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='width',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='height',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='caption',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='relative',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='parent',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=True,
                                ),
                                default_value='nil',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function creates a combobox GUI element, which you can compare to a gridlist with a dropdown feature. """,
                arguments={
                    "x": """A float of the 2D x position of the GUI combobox on a players screen.  This is affected by the relative argument. """,
                    "y": """A float of the 2D y position of the GUI combobox on a players screen. This is affected by the relative argument. """,
                    "width": """A float of the width of the GUI combobox. This is affected by the relative argument. """,
                    "height": """A float of the height of the GUI combobox. This is affected by the relative argument. Note: height must be enough to fit the drop down menu, else the drop down wont appear. """,
                    "caption": """A string for what the title of your combobox will be. This will be shown if no item is selected. """,
                    "relative": """This is whether sizes and positioning are relative.  If this is true, then all x,y,width,height floats must be between 0 and 1, representing sizes relative to the parent. """,
                    "parent": """This is the parent that the GUI combobox is attached to.  If the relative argument is true, sizes and positioning will be made relative to this parent. If the relative argument is false, positioning will be the number of offset pixels from the parents origin. If no parent is passed, the parent will become the screen - causing positioning and sizing according to screen positioning. """
                },
                result="""returns an element of the created combobox if it was successfully created, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Element/GUI/Combobox|GuiComboBox',
                method_name=None,
                field=None,
                is_static=True,
            ),
            name='guiCreateComboBox',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiCreateEdit',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='x',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='y',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='width',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='height',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='text',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='relative',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='parent',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=True,
                                ),
                                default_value='nil',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function is for creating a new GUI edit box. This is a text box in which the user can input text. Edit boxes only allow a single line of text. If you want to allow multiple lines of text create a memo box using guiCreateMemo. """,
                arguments={
                    "x": """A float of the 2D x position of the GUI edit box on a players screen.  This is affected by the relative argument. """,
                    "y": """A float of the 2D y position of the GUI edit box on a players screen. This is affected by the relative argument. """,
                    "width": """A float of the width of the GUI edit box. This is affected by the relative argument. """,
                    "height": """A float of the height of the GUI edit box. This is affected by the relative argument. """,
                    "text": """A string of the text that will be displayed by default in the edit box. """,
                    "relative": """This is whether sizes and positioning are relative.  If this is true, then all x,y,width,height floats must be between 0 and 1, representing measures relative to the parent. """,
                    "parent": """This is the parent that the GUI edit box is attached to.  If the relative argument is true, sizes and positioning will be made relative to this parent. If the relative argument is false, positioning will be the number of offset pixels from the parents origin. If no parent is passed, the parent will become the screen - causing positioning and sizing according to screen positioning. """
                },
                result="""returns a gui-edit element of the created edit box if it was successfully created, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Element/GUI/Edit_field|GuiEdit',
                method_name=None,
                field=None,
                is_static=True,
            ),
            name='guiCreateEdit',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiCreateFont',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='filepath',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='size',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='9',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function creates a GUI font element that can be used in guiSetFont. Successful font creation is not guaranteed, and may fail due to hardware or memory limitations.
To see if creation is likely to fail, use dxGetStatus. (When VideoMemoryFreeForMTA is zero, failure is guaranteed.) """,
                arguments={
                    "filepath": """the name of the file containing the font """,
                    "size": """size of the font """
                },
                result="""returns a gui font element if successful, false if invalid arguments were passed to the function, or there is insufficient resources available.
you should always check to see if this function has returned false. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Element/GUI font|GuiFont',
                method_name=None,
                field=None,
                is_static=True,
            ),
            name='guiCreateFont',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiCreateGridList',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='x',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='y',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='width',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='height',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='relative',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='parent',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=True,
                                ),
                                default_value='nil',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function creates a grid list GUI element.  These are menus which are designed in lists and can have multiple columns.  A good example of a gridlist element can be found in MTAs settings box, under Controls. """,
                arguments={
                    "x": """A float of the 2D x position of the GUI gridlist on a players screen.  This is affected by the relative argument. """,
                    "y": """A float of the 2D y position of the GUI gridlist on a players screen. This is affected by the relative argument. """,
                    "width": """A float of the width of the GUI gridlist. This is affected by the relative argument. """,
                    "height": """A float of the height of the GUI gridlist. This is affected by the relative argument. """,
                    "relative": """This is whether sizes and positioning are relative.  If this is true, then all x,y,width,height floats must be between 0 and 1, representing sizes relative to the parent. """,
                    "parent": """This is the parent that the gui gridlist is attached to.  If the relative argument is true, sizes and positioning will be made relative to this parent. If the relative argument is false, positioning will be the number of offset pixels from the parents origin. If no parent is passed, the parent will become the screen - causing positioning and sizing according to screen positioning. """
                },
                result="""returns an element of the created gridlist if it was successfully created, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Element/GUI/Gridlist|GuiGridList',
                method_name=None,
                field=None,
                is_static=True,
            ),
            name='guiCreateGridList',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiCreateLabel',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='x',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='y',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='width',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='height',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='text',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='relative',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='parent',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=True,
                                ),
                                default_value='nil',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""<table><tr><td valign=top height=100>
This function is for creating a new GUI label.  A label is simply a piece of text that cannot be edited by the user. If you would like to have a bigger text youd have to change its font because font size is not supported.
</td></tr></table> """,
                arguments={
                    "x": """A float of the 2D x position of the GUI label on a players screen.  This is affected by the relative argument. """,
                    "y": """A float of the 2D y position of the GUI label on a players screen. This is affected by the relative argument. """,
                    "width": """A float of the width of the GUI label. This is affected by the relative argument. """,
                    "height": """A float of the height of the GUI label. This is affected by the relative argument. """,
                    "text": """A string of the text that will be displayed by the label. """,
                    "relative": """This is whether sizes and positioning are relative.  If this is true, then all x,y,width,height floats must be between 0 and 1, representing sizes relative to the parent. """,
                    "parent": """This is the parent that the gui label is attached to.  If the relative argument is true, sizes and positioning will be made relative to this parent. If the relative argument is false, positioning will be the number of offset pixels from the parents origin. If no parent is passed, the parent will become the screen - causing positioning and sizing according to screen positioning. """
                },
                result="""returns an gui_widgets|element of the created label if it was successfully created, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Element/GUI/Text label|GuiLabel',
                method_name=None,
                field=None,
                is_static=True,
            ),
            name='guiCreateLabel',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiCreateMemo',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['gui-memo'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='x',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='y',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='width',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='height',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='text',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='relative',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='parent',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=True,
                                ),
                                default_value='nil',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function creates a new GUI memo.  This is a multiline edit box in which the user can input text. """,
                arguments={
                    "x": """A float of the 2D x position of the GUI memo on a players screen.  This is affected by the relative argument. """,
                    "y": """A float of the 2D y position of the GUI memo on a players screen. This is affected by the relative argument. """,
                    "width": """A float of the width of the GUI memo. This is affected by the relative argument. """,
                    "height": """A float of the height of the GUI memo. This is affected by the relative argument. """,
                    "text": """A string of the text that will be displayed by default in the memo. """,
                    "relative": """This is whether sizes and positioning are relative.  If this is true, then all x,y,width,height floats must be between 0 and 1, representing measures relative to the parent. """,
                    "parent": """This is the parent that the GUI memo is attached to.  If the relative argument is true, sizes and positioning will be made relative to this parent. If the relative argument is false, positioning will be the number of offset pixels from the parents origin. If no parent is passed, the parent will become the screen - causing positioning and sizing according to screen positioning. """
                },
                result="""returns a gui-memo element of the created memo if it was successfully created, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='GuiMemo',
                method_name=None,
                field=None,
                is_static=True,
            ),
            name='guiCreateMemo',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiCreateProgressBar',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='x',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='y',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='width',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='height',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='relative',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='parent',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=True,
                                ),
                                default_value='nil',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function creates a Element/GUI/Progress bar|progress bar. """,
                arguments={
                    "x": """A float of the 2D x position of the progress bar on a players screen. This is affected by the relative argument. """,
                    "y": """A float of the 2D y position of the progress bar on a players screen. This is affected by the relative argument. """,
                    "width": """A float of the width of the progress bar. This is affected by the relative argument. """,
                    "height": """A float of the height of the progress bar. This is affected by the relative argument. """,
                    "relative": """This is whether sizes and positioning are relative. If this is true, then all x,y,width,height floats must be between 0 and 1, representing measures relative to the parent. """,
                    "parent": """This is the parent that the progress bar is attached to. If the relative argument is true, sizes and positioning will be made relative to this parent. If the relative argument is false, positioning will be the number of offset pixels from the parents origin. If no parent is passed, the parent will become the screen - causing positioning and sizing according to screen positioning. """
                },
                result="""returns element of the progress bar if it was created succesfully, false otherwise. """,
            ),
            oop=None,
            name='guiCreateProgressBar',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiCreateRadioButton',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='x',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='y',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='width',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='height',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='text',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='relative',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='parent',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=True,
                                ),
                                default_value='nil',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function creates a Element/GUI/Radio button|radio button. """,
                arguments={
                    "x": """A float of the 2D x position of the radio button on a players screen. This is affected by the relative argument. """,
                    "y": """A float of the 2D y position of the radio button on a players screen. This is affected by the relative argument. """,
                    "width": """A float of the width of the text field next to the radio button. This is affected by the relative argument. """,
                    "height": """A float of the height of the text field next to the radio button. This is affected by the relative argument. """,
                    "text": """The text to be displayed next to the radio button. """,
                    "relative": """This is whether sizes and positioning are relative. If this is true, then all x,y,width,height floats must be between 0 and 1, representing measures relative to the parent. """,
                    "parent": """This is the parent that the radio button is attached to. If the relative argument is true, sizes and positioning will be made relative to this parent. If the relative argument is false, positioning will be the number of offset pixels from the parents origin. If no parent is passed, the parent will become the screen - causing positioning and sizing according to screen positioning.
''NOTE:'' All radio buttons become grouped together with their parent item.  Only ONE radio button per group/parent will be able to be selected at the same time. """
                },
                result="""returns element of the radio button if it was created succesfully, false otherwise. """,
            ),
            oop=None,
            name='guiCreateRadioButton',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiCreateScrollBar',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['gui-scrollbar'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='x',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='y',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='width',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='height',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='horizontal',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='relative',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='parent',
                                argument_type=FunctionType(
                                    names=['gui-element'],
                                    is_optional=True,
                                ),
                                default_value='nil',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function creates a GUI scrollbar. You can use the functions guiScrollPaneSetHorizontalScrollPosition, guiScrollPaneSetVerticalScrollPosition, guiScrollPaneGetHorizontalScrollPosition and guiScrollPaneGetVerticalScrollPosition to read and modify the scrollbars scroll. """,
                arguments={
                    "x": """the 2D x offset of the GUI scrollbar from its parent.  This is affected by the relative argument. """,
                    "y": """the 2D y offset of the GUI scrollbar from its parent. This is affected by the relative argument. """,
                    "width": """the width of the GUI scrollbar. This is affected by the relative argument. """,
                    "height": """the height of the GUI scrollbar. This is affected by the relative argument. """,
                    "horizontal": """whether this scrollbar is horizontal (true) or vertical (false). """,
                    "relative": """whether sizes and positions are relative to their parents.  If this is true, then all measures must be between 0 and 1, representing sizes/positions as a fraction of the parent widgets size. """,
                    "parent": """the gui-element this scrollbar is attached to. By default, it is nil, meaning the widget is attached to the background. """
                },
                result="""returns a gui-scrollbar if it was created successfully, false otherwise. """,
            ),
            oop=None,
            name='guiCreateScrollBar',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiCreateScrollPane',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='x',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='y',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='width',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='height',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='relative',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='parent',
                                argument_type=FunctionType(
                                    names=['gui-element'],
                                    is_optional=True,
                                ),
                                default_value='nil',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This creates a GUI scroll pane. """,
                arguments={
                    "x": """the 2D x offset of the GUI scrollpane from its parent. This is affected by the relative argument. """,
                    "y": """the 2D y offset of the GUI scrollpane from its parent. This is affected by the relative argument. """,
                    "width": """the width of the GUI scrollpane. This is affected by the relative argument. """,
                    "height": """the height of the GUI scrollpane. This is affected by the relative argument. """,
                    "relative": """whether sizes and positions are relative to their parents. If this is true, then all measures must be between 0 and 1, representing sizes/positions as a fraction of the parent widgets size. """,
                    "parent": """the gui-element this scrollpane is attached to. By default, it is nil, meaning the widget is attached to the background. """
                },
                result="""the gui-element if created, otherwise false. """,
            ),
            oop=None,
            name='guiCreateScrollPane',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiCreateStaticImage',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='x',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='y',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='width',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='height',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='path',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='relative',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='parent',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=True,
                                ),
                                default_value='nil',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function creates a static image using a .png image in the resource. """,
                arguments={
                    "x": """A float of the 2D x position of the image on a players screen. This is affected by the relative argument. """,
                    "y": """A float of the 2D y position of the image on a players screen. This is affected by the relative argument. """,
                    "width": """A float of the width of the image. This is affected by the relative argument. """,
                    "height": """A float of the height of the image. This is affected by the relative argument. """,
                    "path": """The filepath of the image file that is being loaded. """,
                    "relative": """This is whether sizes and positioning are relative. If this is true, then all x,y,width,height floats must be between 0 and 1, representing measures relative to the parent. """,
                    "parent": """This is the parent that the image is attached to. If the relative argument is true, sizes and positioning will be made relative to this parent. If the relative argument is false, positioning will be the number of offset pixels from the parents origin. If no parent is passed, the parent will become the screen - causing positioning and sizing according to screen positioning. """
                },
                result="""returns element if image was created successfully, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Element/GUI/Static_image|GuiStaticImage',
                method_name=None,
                field=None,
                is_static=True,
            ),
            name='guiCreateStaticImage',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiCreateTab',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='text',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='parent',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function creates a tab on a pre-existing tab panel. A tab is a button as well as a dimension that can be used to switch between information by clicking on the tabs.  Tabs are sorted on a tab panel in the order that they are created. """,
                arguments={
                    "text": """The caption for the tab """,
                    "parent": """The parent tab panel, as a tab panel element type """
                },
                result="""returns a tab element if successful, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Element/GUI/Tab|GuiTab',
                method_name=None,
                field=None,
                is_static=True,
            ),
            name='guiCreateTab',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiCreateTabPanel',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='x',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='y',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='width',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='height',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='relative',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='parent',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=True,
                                ),
                                default_value='nil',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function creates a Tab Panel, which acts as a template to create Tabs upon. """,
                arguments={
                    "x": """A float of the 2D x position of the GUI tab panel on a players screen.  This is affected by the relative argument. """,
                    "y": """A float of the 2D y position of the GUI tab panel on a players screen. This is affected by the relative argument. """,
                    "width": """A float of the width of the GUI tab panel. This is affected by the relative argument. """,
                    "height": """A float of the height of the GUI tab panel. This is affected by the relative argument. """,
                    "relative": """This is whether sizes and positioning are relative.  If this is true, then all x,y,width,height floats must be between 0 and 1, representing sizes relative to the parent. """,
                    "parent": """This is the parent that the tab panel is attached to.  If the relative argument is true, sizes and positioning will be made relative to this parent. If the relative argument is false, positioning will be the number of offset pixels from the parents origin. If no parent is passed, the parent will become the screen - causing positioning and sizing according to screen positioning. """
                },
                result="""returns a gui tab panel element if successful, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Element/GUI/Tab panel|GuiTabPanel',
                method_name=None,
                field=None,
                is_static=True,
            ),
            name='guiCreateTabPanel',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiCreateWindow',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='x',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='y',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='width',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='height',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='titleBarText',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='relative',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function is for creating a new GUI window.  This provides a base for other gui elements to be created within.  However, windows do not have a parent and cannot be created in any GUI elements. """,
                arguments={
                    "x": """A float of the 2D x position of the GUI window on a players screen.  This is affected by the relative argument. """,
                    "y": """A float of the 2D y position of the GUI window on a players screen. This is affected by the relative argument. """,
                    "width": """A float of the width of the GUI window. This is affected by the relative argument. """,
                    "height": """A float of the height of the GUI window. This is affected by the relative argument. """,
                    "titleBarText": """A string of the text that will be displayed in the title bar of the window. """,
                    "relative": """This is whether sizes and positioning are relative.  If this is true, then all x,y,width,height floats must be between 0 and 1, representing sizes/positions as a fraction of the screen size. If false, then the size and co-ordinates are based on clients resolution, accessible using guiGetScreenSize. """
                },
                result="""returns a gui window element if it was created successfully, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Element/GUI/Window|GuiWindow',
                method_name=None,
                field=None,
                is_static=True,
            ),
            name='guiCreateWindow',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiDeleteTab',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='tabToDelete',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='tabPanel',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function deletes a tab from a tab panel. """,
                arguments={
                    "tabToDelete": """This is an element representing the tab that you want to delete. """,
                    "tabPanel": """This is the guiCreateTabPanel|tab panel parent that the tab is attached to. """
                },
                result="""returns true the tab was successfully deleted, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Element/GUI/Tab|GuiTab',
                method_name="""delete""",
                field=None,
                is_static=False,
            ),
            name='guiDeleteTab',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiEditGetCaretIndex',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function returns the caret (the text cursor) position within the editbox. """,
                arguments={
                    "theElement": """The edit box you want to get the caret position from """
                },
                result="""returns the caret index on success, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Element/GUI/Edit_field|GuiEdit',
                method_name="""getCaretIndex""",
                field="""caretIndex""",
                is_static=False,
            ),
            name='guiEditGetCaretIndex',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiEditGetMaxLength',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='guiEdit',
                                argument_type=FunctionType(
                                    names=['gui-edit'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description=""" """,
                arguments={
                    "guiEdit": """The edit box you want to get the maximum text length of. """
                },
                result="""returns the maximum text length on success, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Element/GUI/Edit_field|GuiEdit',
                method_name="""getMaxLength""",
                field="""maxLength""",
                is_static=False,
            ),
            name='guiEditGetMaxLength',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiEditIsMasked',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='guiEdit',
                                argument_type=FunctionType(
                                    names=['gui-edit'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description=""" """,
                arguments={
                    "guiEdit": """the edit box to check masked flag of. """
                },
                result="""returns true if the edit box is masked, false if not, nil if an invalid edit box was provided. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='None',
                method_name=None,
                field="""masked""",
                is_static=None,
            ),
            name='guiEditIsMasked',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiEditIsReadOnly',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='guiEdit',
                                argument_type=FunctionType(
                                    names=['gui-edit'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description=""" """,
                arguments={
                    "guiEdit": """The edit box to check read-only status of. """
                },
                result="""returns true if the edit box is read-only, false if not, nil if an invalid edit box was provided. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='None',
                method_name=None,
                field="""readOnly""",
                is_static=None,
            ),
            name='guiEditIsReadOnly',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiEditSetCaretIndex',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='index',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function sets the current position of the caret (the text cursor) within the edit box. """,
                arguments={
                    "theElement": """The edit box to be changed. """,
                    "index": """An integer referring to the desired position within the box. """
                },
                result="""returns true if the index was successfully set, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Element/GUI/Edit_field|GuiEdit',
                method_name="""setCaretIndex""",
                field="""caretIndex""",
                is_static=False,
            ),
            name='guiEditSetCaretIndex',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiEditSetMasked',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='status',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function sets or removes masking (covering up the text being typed) for password text fields. """,
                arguments={
                    "theElement": """The edit box to be changed. """,
                    "status": """A boolean value indicating whether masking is to be enabled or disabled. """
                },
                result="""returns true if the function is successful, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Element/GUI/Edit_field|GuiEdit',
                method_name="""setMasked""",
                field="""masked""",
                is_static=False,
            ),
            name='guiEditSetMasked',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiEditSetMaxLength',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='guiEdit',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='length',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function sets the maximum text length that can be typed into an edit box. """,
                arguments={
                    "theElement": """The edit box to be changed. """,
                    "length": """An integer indicating the maximum number of characters that can be typed into the box. """
                },
                result="""returns true if the max length was set successfully, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Element/GUI/Edit_field|GuiEdit',
                method_name="""setMaxLength""",
                field="""maxLength""",
                is_static=False,
            ),
            name='guiEditSetMaxLength',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiEditSetReadOnly',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='editField',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='status',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function allows you to set or remove read-only status for an edit box. If read-only is set to true, the box is not editable. """,
                arguments={
                    "editField": """The element of the Element/GUI/Edit field|edit field to be modified. """,
                    "status": """A boolean value indicating whether read-only is to be enabled or disabled. """
                },
                result="""returns true if edit fields read-only status was changed successfully, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Element/GUI/Edit_field|GuiEdit',
                method_name="""setReadOnly""",
                field="""readOnly""",
                is_static=False,
            ),
            name='guiEditSetReadOnly',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiFocus',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='guiElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description=""" """,
                arguments={
                    "guiElement": """the GUI element that you want to focus """
                },
                result="""returns true if the function was successful, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='GUI widgets|GuiElement',
                method_name="""focus""",
                field=None,
                is_static=False,
            ),
            name='guiFocus',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiGetAlpha',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='guiElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""Alpha represents the transparency of a gui element.  This function allows retrieval of a gui elements current alpha. """,
                arguments={
                    "guiElement": """The gui element in which you want to retrieve the alpha of. """
                },
                result="""this function returns a positive integer in between 0 and 1 of the gui elements current alpha, or false if it could not be retrieved. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='GUI widgets|GuiElement',
                method_name="""getAlpha""",
                field="""alpha""",
                is_static=False,
            ),
            name='guiGetAlpha',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiGetBrowser',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['browser'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theBrowser',
                                argument_type=FunctionType(
                                    names=['gui-browser'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function gets the browser element behind a gui-browser (a browser that has been created via guiCreateBrowser). """,
                arguments={
                    "theBrowser": """The gui-browser """
                },
                result="""returns the element/browser|browser element if a correct element/gui-browser|gui-browser has been passed, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Element/gui-browser|guiBrowser',
                method_name="""getBrowser""",
                field="""browser""",
                is_static=False,
            ),
            name='guiGetBrowser',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiGetCursorType',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function is used to get the type of the current cursor image. """,
                arguments={
                    
                },
                result="""returns a string containing the cursor type:
* none            // cursor has no image
* arrow           // default cursor
* sizing_ns       // n-s (up-down) sizing cursor
* sizing_ew       // e-w (left-right) sizing cursor
* sizing_nwse     // nw-se diagonal sizing cursor
* sizing_nesw     // ne-sw diagonal sizing cursor
* sizing_eswe     // es-we horizontal sizing cursor
* move            // move cursor
* container_drag  // drag container cursor (note: not in use)
* segment_moving  // segment moving cursor (note: not in use)
* segment_sizing  // segment sizing cursor (note: not in use) """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='GUI widgets|GuiElement',
                method_name="""getCursorType""",
                field="""cursorType""",
                is_static=True,
            ),
            name='guiGetCursorType',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiGetEnabled',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='guiElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function determines if a GUI element is enabled. """,
                arguments={
                    "guiElement": """the GUI element to be checked. """
                },
                result="""returns true if the element is enabled, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='GUI widgets|GuiElement',
                method_name="""getEnabled""",
                field="""enabled""",
                is_static=False,
            ),
            name='guiGetEnabled',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiGetFont',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='guiElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function is used to get the current font that is used to draw text in GUI elements. """,
                arguments={
                    "guiElement": """element you wish to get the font of. """
                },
                result="""*string a string containing the name of the elements current font, or false if the gui element passed to the function is invalid.
*element  the custom gui font that is used, or nil otherwise """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='GUI widgets|GuiElement',
                method_name="""getFont""",
                field="""font""",
                is_static=False,
            ),
            name='guiGetFont',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiGetInputEnabled',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function checks whether user input is focused on the GUI or the game. """,
                arguments={
                    
                },
                result="""returns true if input is focused on gui, false if its focused on the game. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='GUI widgets|GuiElement',
                method_name="""isInputEnabled""",
                field="""inputEnabled""",
                is_static=True,
            ),
            name='guiGetInputEnabled',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiGetInputMode',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function returns the current input mode as set by guiSetInputMode.
Default mode is allow_binds. """,
                arguments={
                    
                },
                result="""returns a string defining the current input mode, potential values are:
* allow_binds: binds are enabled, hence using a key such as t in an editbox will still activate the chatbox
* no_binds: binds are disabled, hence using a key such as t in an editbox will not activate the chatbox
* no_binds_when_editing: binds are always enabled except when an editable editbox or memo has input focus """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='GUI widgets|GuiElement',
                method_name="""getInputMode""",
                field="""inputMode""",
                is_static=True,
            ),
            name='guiGetInputMode',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiGetPosition',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='guiElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='relative',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function allows retrieval of a GUI elements current position, relative to its parent. """,
                arguments={
                    "guiElement": """The gui element of which you wish to retrieve the position. """,
                    "relative": """A boolean representing whether the position should be relative to the elements parent width, or the number of offset pixels from the parents origin. """
                },
                result="""returns floats representing the x and y position of the element, or false if the position could not be retrieved. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='GUI widgets|GuiElement',
                method_name="""getPosition""",
                field="""position""",
                is_static=False,
            ),
            name='guiGetPosition',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiGetProperties',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='guiElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function gets a list of the CEGUI property names and values of a GUI element. To find out what the different properties mean, check out the http://static.cegui.org.uk/static/WindowsLookProperties.html CEGUI properties page. """,
                arguments={
                    "guiElement": """the GUI element you wish to get the properties of. """
                },
                result="""if the function succeeds, the return value is a table. its keys are property names, the corresponding values are the values of the properties (both names and values are always strings). if the function fails, it returns false. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='GUI widgets|GuiElement',
                method_name="""getProperties""",
                field="""properties""",
                is_static=False,
            ),
            name='guiGetProperties',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiGetProperty',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='guiElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='property',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function gets the value of a specific CEGUI property of a GUI element. For a list of properties and their meaning, see the http://static.cegui.org.uk/static/WindowsLookProperties.html CEGUI properties page. """,
                arguments={
                    "guiElement": """the GUI element you wish to get a property of. """,
                    "property": """the name of of property you want the value of. """
                },
                result="""if the function succeeds, it returns a string with the value of the property. if it fails, it returns false. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='GUI widgets|GuiElement',
                method_name="""getProperty""",
                field=None,
                is_static=False,
            ),
            name='guiGetProperty',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiGetScreenSize',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function retrieves the local screen size according to the resolution they are using. """,
                arguments={
                    
                },
                result="""this returns two floats representing the players screen resolution, width and height. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='GUI widgets|GuiElement',
                method_name="""getScreenSize""",
                field=None,
                is_static=True,
            ),
            name='guiGetScreenSize',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiGetSelectedTab',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='tabPanel',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function returns the currently selected tab in the specified Element/GUI/Tab panel|tab panel. """,
                arguments={
                    "tabPanel": """The Element/GUI/Tab panel|tab panel which current tab you want to retrieve. """
                },
                result="""returns an element of the element/gui/tab|tab if a tab was selected or nil if no tab was selected. if passed arguments were invalid or something went wrong, the function will return false. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Element/GUI/Tab panel|GuiTabPanel',
                method_name="""getSelectedTab""",
                field="""selectedTab""",
                is_static=False,
            ),
            name='guiGetSelectedTab',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiGetSize',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='relative',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function gets the size of a GUI element. """,
                arguments={
                    "theElement": """The GUI element to get size of. """,
                    "relative": """A boolean representing whether the size should be relative to the elements parent width, or an absolute size in pixels. """
                },
                result="""returns the gui element size x and y if the function has been successful, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='GUI widgets|GuiElement',
                method_name="""getSize""",
                field=None,
                is_static=False,
            ),
            name='guiGetSize',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiGetText',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='guiElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function is used to get the text of GUI elements like edit boxes, labels, buttons etc. """,
                arguments={
                    "guiElement": """element you wish to get text of. """
                },
                result="""returns a string containing the requested elements text, or false if the gui element passed to the function is invalid. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='GUI widgets|GuiElement',
                method_name="""getText""",
                field="""text""",
                is_static=False,
            ),
            name='guiGetText',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiGetVisible',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='guiElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function determines if a GUI element is visible. """,
                arguments={
                    "guiElement": """the GUI element to be checked """
                },
                result="""returns true if the element is visible, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='GUI widgets|GuiElement',
                method_name="""getVisible""",
                field="""visible""",
                is_static=False,
            ),
            name='guiGetVisible',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiGridListAddColumn',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='gridList',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='title',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='width',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function is used to create columns in grid lists. """,
                arguments={
                    "gridList": """The grid list you want to add a column to """,
                    "title": """Title of the column """,
                    "width": """Column width, relative to the grid list width """
                },
                result="""returns the column id if it was created, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Element/GUI/Gridlist|GuiGridList',
                method_name="""addColumn""",
                field=None,
                is_static=False,
            ),
            name='guiGridListAddColumn',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiGridListAddRow',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='gridList',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='itemText1',
                                argument_type=FunctionType(
                                    names=['int', 'string'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='itemText2',
                                argument_type=FunctionType(
                                    names=['int', 'string'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=True,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""Adds a row to a grid list, and optionally add simple text items with your rows.  Use guiGridListSetItemText to add row headers.
ATTENTION: Without guiGridListSetItemText there is no row added to the grid.
Look at the example, first you give the row a name with row = guiGridListAddRow ( playerList ), and then you use guiGridListSetItemText. }} """,
                arguments={
                    "gridList": """The grid list you want to add a row to """,
                    "itemText1": """The text for the first column item in the row.  Either a string or a number can be passed (use numbers for sorting purposes). """,
                    "itemText2": """The text for the second column item in the row.  Either a string or a number can be passed (use numbers for sorting purposes). """,
                    "...": """Item text for any other columns """
                },
                result="""returns the row id if it has been created, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Element/GUI/Gridlist|GuiGridList',
                method_name="""addRow""",
                field=None,
                is_static=False,
            ),
            name='guiGridListAddRow',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiGridListAutoSizeColumn',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='gridList',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='columnIndex',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This allows you to automatically size a column to display everything in it correctly, with the most minimal width. """,
                arguments={
                    "gridList": """The Element/GUI/Gridlist|grid list element where the column is located. """,
                    "columnIndex": """The ID of the column you want to be auto-sized. """
                },
                result="""returns true if the column was auto-sized, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Element/GUI/Gridlist|GuiGridList',
                method_name="""autoSizeColumn""",
                field=None,
                is_static=False,
            ),
            name='guiGridListAutoSizeColumn',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiGridListClear',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='gridList',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function clears all the data from a grid list. """,
                arguments={
                    "gridList": """The grid list element to be cleared """
                },
                result="""returns true if the grid list element is valid and has been cleared successfully, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Element/GUI/Gridlist|GuiGridList',
                method_name="""clear""",
                field=None,
                is_static=False,
            ),
            name='guiGridListClear',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiGridListGetColumnCount',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='gridList',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This allows you to get the count of existing columns in a gridlist. """,
                arguments={
                    "gridList": """The grid list you want to add a column to """
                },
                result="""returns an integer with the amount of columns in the gridlist, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Element/GUI/Gridlist|GuiGridList',
                method_name="""getColumnCount""",
                field="""columnCount""",
                is_static=False,
            ),
            name='guiGridListGetColumnCount',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiGridListGetColumnTitle',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='guiGridlist',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='columnIndex',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function is used to get the column title of a gridlist column. """,
                arguments={
                    "guiGridlist": """: The grid list you want to get the column title from """,
                    "columnIndex": """: Column ID """
                },
                result="""returns a string containing the column title, or false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Element/GUI/Gridlist|GuiGridList',
                method_name="""getColumnTitle""",
                field=None,
                is_static=False,
            ),
            name='guiGridListGetColumnTitle',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiGridListGetColumnWidth',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='gridList',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='columnIndex',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='relative',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This allows you to get the width of an existing column in a gridlist. """,
                arguments={
                    "gridList": """The grid list you want to add a column to """,
                    "columnIndex": """Column ID of the Get size """,
                    "relative": """A boolean defining whether width measurements will be relative to the Gridlist size, or absolute pixels. """
                },
                result="""returns the width of the gridlist column, false if bad arguments were given. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Element/GUI/Gridlist|GuiGridList',
                method_name="""getColumnWidth""",
                field=None,
                is_static=False,
            ),
            name='guiGridListGetColumnWidth',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiGridListGetHorizontalScrollPosition',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='guiGridlist',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function is used to get the horizontal scroll position from a grid list """,
                arguments={
                    "guiGridlist": """: The grid list you want to get the horizontal scroll position from """
                },
                result="""returns a integer between 0 and 100 indicating the horizontal scroll position, or false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Element/GUI/Gridlist|GuiGridList',
                method_name="""getHorizontalScrollPosition""",
                field="""horizontalScrollPosition""",
                is_static=False,
            ),
            name='guiGridListGetHorizontalScrollPosition',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiGridListGetItemColor',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='gridList',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='rowIndex',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='columnIndex',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function gets the color of a gridlist item. """,
                arguments={
                    "gridList": """The grid list element """,
                    "rowIndex": """Row ID """,
                    "columnIndex": """Column ID """
                },
                result="""returns four int values, representing the amount of red, green, blue and alpha if successful. false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Element/GUI/Gridlist|GuiGridList',
                method_name="""getItemColor""",
                field=None,
                is_static=False,
            ),
            name='guiGridListGetItemColor',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiGridListGetItemData',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['var'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='gridList',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='rowIndex',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='columnIndex',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""With this function you can retrieve the string data associated with an item in a Element/GUI/Gridlist|grid list. This is not the text that is displayed on the item, but an internal string that you can use to hold extra information about the item.<br/>
Note: This function will only work after you set the items text using guiGridListSetItemText! """,
                arguments={
                    "gridList": """the grid list containing the item youre interested in """,
                    "rowIndex": """the row index of the item """,
                    "columnIndex": """the column index of the item """
                },
                result="""returns the item data of the specified item if succesful, false if one of the arguments was invalid. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Element/GUI/Gridlist|GuiGridList',
                method_name="""getItemData""",
                field=None,
                is_static=False,
            ),
            name='guiGridListGetItemData',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiGridListGetItemText',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='gridList',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='rowIndex',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='columnIndex',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function retrieves the text from a specific grid list item. """,
                arguments={
                    "gridList": """the gridlist containing the item youre interested in """,
                    "rowIndex": """row id of the item """,
                    "columnIndex": """column id of the item """
                },
                result="""returns the text of the item if the arguments are right, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Element/GUI/Gridlist|GuiGridList',
                method_name="""getItemText""",
                field=None,
                is_static=False,
            ),
            name='guiGridListGetItemText',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiGridListGetRowCount',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='gridList',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function returns the number of rows in a grid list. """,
                arguments={
                    "gridList": """The grid list to get the number of rows from. """
                },
                result="""returns the number of rows if the function is successful, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Element/GUI/Gridlist|GuiGridList',
                method_name="""getRowCount""",
                field="""rowCount""",
                is_static=False,
            ),
            name='guiGridListGetRowCount',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiGridListGetSelectedCount',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='gridList',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function returns the amount of options selected in the specified Element/GUI/Gridlist|grid list. """,
                arguments={
                    "gridList": """The Element/GUI/Gridlist|grid list which amount of selected items you want to retrieve. """
                },
                result="""returns an integer representing the amount of selected options if everything was successful or false if invalid arguments were passed. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Element/GUI/Gridlist|GuiGridList',
                method_name="""getSelectedCount""",
                field="""selectedCount""",
                is_static=False,
            ),
            name='guiGridListGetSelectedCount',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiGridListGetSelectedItem',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='gridList',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function returns the row and column indexes of the selected item in a grid list. First selected row and column is (0, 0). """,
                arguments={
                    "gridList": """the grid list you want to know the selected row index of """
                },
                result="""returns the row and column indexes of the selected item if the specified grid list is valid and has a selected item, (-1, -1) if no item is selected, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Element/GUI/Gridlist|GuiGridList',
                method_name="""getSelectedItem""",
                field=None,
                is_static=False,
            ),
            name='guiGridListGetSelectedItem',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiGridListGetSelectedItems',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='gridList',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function returns the items selected in the specified Element/GUI/Gridlist|grid list.
Note that for some reason the column ID is 1 lower than it should be, for example 0 is returned but if you try and get the text for column 0 there is nothing, but column 1 has what you clicked on. """,
                arguments={
                    "gridList": """The Element/GUI/Gridlist|grid list which selected items you want to retrieve. """
                },
                result="""returns a table over the selected items in the element/gui/gridlist|grid list in this format:
<syntaxhighlight lang=lua>
table = {
1 = {
column, -- has the first selected items column id
row -- has the first selected items row id
},
2 = {
column,-- has the second selected items column id
row -- has the second selected items row id
},
...
}
</syntaxhighlight>
if everything was successful or false if invalid arguments were passed. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Element/GUI/Gridlist|GuiGridList',
                method_name="""getSelectedItems""",
                field="""selectedItems""",
                is_static=False,
            ),
            name='guiGridListGetSelectedItems',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiGridListGetSelectionMode',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='gridlist',
                                argument_type=FunctionType(
                                    names=['gui-Element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description=""" """,
                arguments={
                    "gridlist": """The gridlist you want to get the selection mode of. """
                },
                result="""returns the id of the current gridlists selection mode. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Element/GUI/Gridlist|GuiGridList',
                method_name="""getSelectionMode""",
                field="""selectionMode""",
                is_static=False,
            ),
            name='guiGridListGetSelectionMode',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiGridListGetVerticalScrollPosition',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='guiGridlist',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function is used to get the vertical scroll position from a grid list """,
                arguments={
                    "guiGridlist": """: The grid list you want to get the vertical scroll position from """
                },
                result="""returns a integer between 0 and 100 indicating the vertical scroll position, or false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Element/GUI/Gridlist|GuiGridList',
                method_name="""getVerticalScrollPosition""",
                field="""verticalScrollPosition""",
                is_static=False,
            ),
            name='guiGridListGetVerticalScrollPosition',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiGridListInsertRowAfter',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='gridList',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='rowIndex',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This allows you to insert a new row after a specified row, and simultaneously set text. Good for inserting new rows in the middle of existing rows. To insert at the top use -1 as row index. """,
                arguments={
                    "gridList": """The grid list you want to add a row to """,
                    "rowIndex": """Row ID of the row you want to insert the new row after. """,
                    "itemText1": """The text for the first column item in the row.  Either a string or a number can be passed (use numbers for sorting purposes). """,
                    "itemText2": """The text for the second column item in the row.  Either a string or a number can be passed (use numbers for sorting purposes). """,
                    "...": """Item text for any other columns """
                },
                result="""returns true if the row was successfully added, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Element/GUI/Gridlist|GuiGridList',
                method_name="""insertRowAfter""",
                field=None,
                is_static=False,
            ),
            name='guiGridListInsertRowAfter',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiGridListIsSortingEnabled',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='guiGridlist',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description=""" """,
                arguments={
                    "guiGridlist": """The GUI gridlist you wish to check if sorting is enabled or not. """
                },
                result="""returns true if sorting is enabled, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Element/GUI/Gridlist|GuiGridList',
                method_name="""isSortingEnabled""",
                field="""sortingEnabled""",
                is_static=False,
            ),
            name='guiGridListIsSortingEnabled',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiGridListRemoveColumn',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='gridList',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='columnIndex',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This allows you to delete columns that exist in grid lists. """,
                arguments={
                    "gridList": """The grid list you want to remove a column from """,
                    "columnIndex": """Column ID """
                },
                result="""returns true if the grid list column was successfully removed, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Element/GUI/Gridlist|GuiGridList',
                method_name="""removeColumn""",
                field=None,
                is_static=False,
            ),
            name='guiGridListRemoveColumn',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiGridListRemoveRow',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='gridList',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='rowIndex',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This allows you to delete rows that exist in grid lists. """,
                arguments={
                    "gridList": """The grid list you want to remove a row from """,
                    "rowIndex": """The row ID which you want to remove """
                },
                result="""returns true if the grid list row was successfully removed, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Element/GUI/Gridlist|GuiGridList',
                method_name="""removeRow""",
                field=None,
                is_static=False,
            ),
            name='guiGridListRemoveRow',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiGridListSetColumnTitle',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='guiGridlist',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='columnIndex',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='title',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function is used to change the column title of a gridlist column. """,
                arguments={
                    "guiGridlist": """: The grid list you want to change the column title from """,
                    "columnIndex": """: Column ID """,
                    "title": """: The title of the column """
                },
                result="""returns true if the new title was set, or false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Element/GUI/Gridlist|GuiGridList',
                method_name="""setColumnTitle""",
                field=None,
                is_static=False,
            ),
            name='guiGridListSetColumnTitle',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiGridListSetColumnWidth',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='gridList',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='columnIndex',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='width',
                                argument_type=FunctionType(
                                    names=['number'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='relative',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This allows you to set the width of an existing column in a gridlist. """,
                arguments={
                    "gridList": """The grid list you want to add a column to """,
                    "columnIndex": """Column ID of the size you want to change """,
                    "width": """A float or integer of the width of the column depending on the relative argument. """,
                    "relative": """A boolean defining whether width measurements will be relative to the Gridlist size, or absolute pixels. """
                },
                result="""returns true if the gridlist column width was successfully set, false if bad arguments were given. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Element/GUI/Gridlist|GuiGridList',
                method_name="""setColumnWidth""",
                field=None,
                is_static=False,
            ),
            name='guiGridListSetColumnWidth',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiGridListSetHorizontalScrollPosition',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='guiGridlist',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='fPosition',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function is used to set the horizontal scroll position from a grid list """,
                arguments={
                    "guiGridlist": """: The grid list you want to set the horizontal scroll position from """,
                    "fPosition": """: A float representing the horizontal scroll position (0-100) """
                },
                result="""returns true if the horizontal scroll position was set, or false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Element/GUI/Gridlist|GuiGridList',
                method_name="""setHorizontalScrollPosition""",
                field="""horizontalScrollPosition""",
                is_static=False,
            ),
            name='guiGridListSetHorizontalScrollPosition',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiGridListSetItemColor',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='gridList',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='rowIndex',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='columnIndex',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='red',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='green',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='blue',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='alpha',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='255',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function changes the color of a gridlist item. """,
                arguments={
                    "gridList": """The grid list element """,
                    "rowIndex": """Row ID """,
                    "columnIndex": """Column ID """,
                    "red": """The amount of red in the color (0-255) """,
                    "green": """The amount of green in the color (0-255) """,
                    "blue": """The amount of blue in the color (0-255) """,
                    "alpha": """The amount of alpha in the color (0-255). """
                },
                result="""returns true if the item color was set successfully, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Element/GUI/Gridlist|GuiGridList',
                method_name="""setItemColor""",
                field=None,
                is_static=False,
            ),
            name='guiGridListSetItemColor',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiGridListSetItemData',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='gridList',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='rowIndex',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='columnIndex',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='data',
                                argument_type=FunctionType(
                                    names=['var'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function sets a Item Data associated to a grid list item.<br/>
Note: This function will only work after you set the items text using guiGridListSetItemText! """,
                arguments={
                    "gridList": """A gridlist element of the data you wish to set to """,
                    "rowIndex": """The row of the item you wish to set to """,
                    "columnIndex": """The column of the item you wish to set to """,
                    "data": """The data you wish to set to the item. """
                },
                result="""returns true if the data was set successfully, false otherwise """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Element/GUI/Gridlist|GuiGridList',
                method_name="""setItemData""",
                field=None,
                is_static=False,
            ),
            name='guiGridListSetItemData',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiGridListSetItemText',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='gridList',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='rowIndex',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='columnIndex',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='text',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='section',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='number',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function changes the text of a gridlist item.
Notice: This function doesnt work well with Sorting. If you are using sorting, please use the optional arguments of guiGridListAddRow as much as possible. """,
                arguments={
                    "gridList": """The grid list element """,
                    "rowIndex": """Row ID """,
                    "columnIndex": """Column ID """,
                    "text": """The text you want to put in (does NOT accept numbers, use tostring() for that) """,
                    "section": """Determines if the item is a section """,
                    "number": """Tells whether the text item is a number value or not (used for sorting) """
                },
                result="""returns true if the item text was set successfully, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Element/GUI/Gridlist|GuiGridList',
                method_name="""setItemText""",
                field=None,
                is_static=False,
            ),
            name='guiGridListSetItemText',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiGridListSetScrollBars',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='guiGridlist',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='horizontalBar',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='verticalBar',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function allows a gridlists scrollbar to be forced on, or returned to default. """,
                arguments={
                    "guiGridlist": """The GUI gridlist you wish to change the state of scrollbars """,
                    "horizontalBar": """A bool where true forces the horizontal scrollbar on, and false returns them to default. """,
                    "verticalBar": """A bool where true forces the verical scrollbar on, and false returns them to default. """
                },
                result="""returns true if the scrollbars were successfully set, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Element/GUI/Gridlist|GuiGridList',
                method_name="""setScrollBars""",
                field=None,
                is_static=False,
            ),
            name='guiGridListSetScrollBars',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiGridListSetSelectedItem',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='gridList',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='rowIndex',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='columnIndex',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='bReset',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='true',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function selects an item from a gridlist. If you wish to deselect whatever item is selected, pass 0 as both the rowIndex and  columnIndex arguments. """,
                arguments={
                    "gridList": """the grid list you want to select an item from """,
                    "rowIndex": """the row you want to select (index 0 is the first row) """,
                    "columnIndex": """the column you want to select (index 1 is the first column) """,
                    "bReset": """set to false for multiple selections """
                },
                result="""returns true if the passed arguments are correct and the item has been selected, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Element/GUI/Gridlist|GuiGridList',
                method_name="""setSelectedItem""",
                field=None,
                is_static=False,
            ),
            name='guiGridListSetSelectedItem',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiGridListSetSelectionMode',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='gridlist',
                                argument_type=FunctionType(
                                    names=['gui-Element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='mode',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function sets the selection mode of a gui gridlist.  For example, the MTA server browser selects a whole row, while the Controls dialog selects a single cell. To select multiple items you must be holding down ctrl. """,
                arguments={
                    "gridlist": """The gridlist in which you wish to set the selection mode. """,
                    "mode": """The mode of the selection.  Can be the following values: """,
                    "0": """Single row selection """,
                    "1": """Multiple row selection """,
                    "2": """Single cell selection """,
                    "3": """Multiple cell selection """,
                    "4": """Nominated(First) single column selection """,
                    "5": """Nominated(First) multiple column selection """,
                    "6": """Single column selection """,
                    "7": """Multiple column selection """,
                    "8": """Nominated(First) single row selection """,
                    "9": """Nominated(First) multiple row selection """
                },
                result="""returns true if the selection mode was successfully set, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Element/GUI/Gridlist|GuiGridList',
                method_name="""setSelectionMode""",
                field="""selectionMode""",
                is_static=False,
            ),
            name='guiGridListSetSelectionMode',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiGridListSetSortingEnabled',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='guiGridlist',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='enabled',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function allows the disabling or enabling of sorting within a gridlist.  Sorting is achieved by clicking a column header.  Gridlist items will be sorted according to the clicked column.  By default, gridlists have sorting enabled.  This function will allow you to toggle this. """,
                arguments={
                    "guiGridlist": """The GUI gridlist you wish to toggle the sorting of. """,
                    "enabled": """A boolean representing whether the sorting is enabled, or disabled. """
                },
                result="""returns true if sorting was successfully toggled., false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Element/GUI/Gridlist|GuiGridList',
                method_name="""setSortingEnabled""",
                field="""sortingEnabled""",
                is_static=False,
            ),
            name='guiGridListSetSortingEnabled',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiGridListSetVerticalScrollPosition',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='guiGridlist',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='fPosition',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function is used to set the vertical scroll position from a grid list """,
                arguments={
                    "guiGridlist": """: The grid list you want to set the vertical scroll position from """,
                    "fPosition": """: A float representing the vertical scroll position (0-100) """
                },
                result="""returns true if the vertical scroll position was set, or false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Element/GUI/Gridlist|GuiGridList',
                method_name="""setVerticalScrollPosition""",
                field="""verticalScrollPosition""",
                is_static=False,
            ),
            name='guiGridListSetVerticalScrollPosition',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiLabelGetColor',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theLabel',
                                argument_type=FunctionType(
                                    names=['gui-element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function gets the color of a label. """,
                arguments={
                    "theLabel": """The label to get color. """
                },
                result="""returns three int values, representing the amount of red, green, blue if successful. false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Element/GUI/Text label|GuiLabel',
                method_name="""getColor""",
                field=None,
                is_static=False,
            ),
            name='guiLabelGetColor',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiLabelGetFontHeight',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theLabel',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function returns the height of the font currently used in a GUI text label. """,
                arguments={
                    "theLabel": """The text label to get the font height from. """
                },
                result="""returns the absolute height of the font currently used in the text label if the function is successful, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Element/GUI/Text label|GuiLabel',
                method_name="""getFontHeight""",
                field="""fontHeight""",
                is_static=False,
            ),
            name='guiLabelGetFontHeight',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiLabelGetTextExtent',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theLabel',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function returns the extent, or width, of the current text inside a GUI text label. """,
                arguments={
                    "theLabel": """The text label to get the text extent from. """
                },
                result="""returns the absolute width of the current text inside the text label if the function is successful, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Element/GUI/Text label|GuiLabel',
                method_name="""getTextExtent""",
                field="""textExtent""",
                is_static=False,
            ),
            name='guiLabelGetTextExtent',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiLabelSetColor',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='red',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='green',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='blue',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function allows you to set the color of a GUI label. """,
                arguments={
                    "theElement": """The label to be changed. """,
                    "red": """An integer specifying the amount of red (0 to 255). """,
                    "green": """An integer specifying the amount of green (0 to 255). """,
                    "blue": """An integer specifying the amount of blue (0 to 255). """
                },
                result="""returns true if the the color of the gui label was successfully changed, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Element/GUI/Text label|GuiLabel',
                method_name="""setColor""",
                field=None,
                is_static=False,
            ),
            name='guiLabelSetColor',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiLabelSetHorizontalAlign',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theLabel',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='align',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='wordwrap',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='false',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function sets the horizontal alignment of a text label. """,
                arguments={
                    "theLabel": """The text label to set the horizontal alignment on. """,
                    "align": """The alignment type. Valid type strings are:
**"left"
**"center"
**"right" """,
                    "wordwrap": """Whether or not to enable wordwrap for the gui-label. """
                },
                result="""returns true on success, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Element/GUI/Text label|GuiLabel',
                method_name="""setHorizontalAlign""",
                field="""horizontalAlign""",
                is_static=False,
            ),
            name='guiLabelSetHorizontalAlign',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiLabelSetVerticalAlign',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theLabel',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='align',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function sets the vertical alignment of a text label. """,
                arguments={
                    "theLabel": """The text label to set the vertical alignment on. """,
                    "align": """The alignment type. Valid type strings are:
**"top"
**"center"
**"bottom" """
                },
                result="""returns true on success, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Element/GUI/Text label|GuiLabel',
                method_name="""setVerticalAlign""",
                field="""verticalAlign""",
                is_static=False,
            ),
            name='guiLabelSetVerticalAlign',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiMemoGetCaretIndex',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function returns the caret (the text cursor) position within the memo box. """,
                arguments={
                    "theElement": """The memo box you want to get the caret position from """
                },
                result="""returns the caret index on success, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='GuiMemo',
                method_name="""getCaretIndex""",
                field="""caretIndex""",
                is_static=False,
            ),
            name='guiMemoGetCaretIndex',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiMemoGetVerticalScrollPosition',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theMemo',
                                argument_type=FunctionType(
                                    names=['gui-memo'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description=""" """,
                arguments={
                    "theMemo": """: the guiCreateMemo|memo you want to know the vertical scroll position of. """
                },
                result="""returns a float ranging between 0 and 100, or false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='GuiMemo',
                method_name="""getVerticalScrollPosition""",
                field="""verticalScrollPosition""",
                is_static=False,
            ),
            name='guiMemoGetVerticalScrollPosition',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiMemoIsReadOnly',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theMemo',
                                argument_type=FunctionType(
                                    names=['gui-memo'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description=""" """,
                arguments={
                    "theMemo": """The memo to check read-only status of. """
                },
                result="""returns true if the memo is read only, false if the memo isnt read only, nil otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='GuiMemo',
                method_name="""isReadOnly""",
                field="""readOnly""",
                is_static=False,
            ),
            name='guiMemoIsReadOnly',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiMemoSetCaretIndex',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theMemo',
                                argument_type=FunctionType(
                                    names=['gui-memo'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='index',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function sets the current position of the caret (the text cursor) within the memo. """,
                arguments={
                    "theMemo": """The memo edit box where the caret position is to be changed. """,
                    "index": """An integer referring to the desired character position within the box. 0 would be before the first character in the box, 1 before the second, etc. """
                },
                result="""returns true if the caret was successfully moved, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='GuiMemo',
                method_name="""setCaretIndex""",
                field="""caretIndex""",
                is_static=False,
            ),
            name='guiMemoSetCaretIndex',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiMemoSetReadOnly',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theMemo',
                                argument_type=FunctionType(
                                    names=['gui-memo'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='status',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function allows you to set or remove read-only status for a GUI memo. If read-only is set to true, the contents are not editable. """,
                arguments={
                    "theMemo": """The memo to change read-only status of. """,
                    "status": """A boolean value indicating whether read-only is to be enabled or disabled. """
                },
                result="""returns true if the status was successfully changed, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Element/GUI/Memo_field|GuiMemo',
                method_name="""setReadOnly""",
                field="""readOnly""",
                is_static=False,
            ),
            name='guiMemoSetReadOnly',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiMemoSetVerticalScrollPosition',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theMemo',
                                argument_type=FunctionType(
                                    names=['gui-memo'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='position',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description=""" """,
                arguments={
                    "theMemo": """: the guiCreateMemo|memo you want to change the vertical scroll position of. """,
                    "position": """: a float ranging between 0 and 100. """
                },
                result="""returns true if the position was set, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='GuiMemo',
                method_name="""setVerticalScrollPosition""",
                field="""verticalScrollPosition""",
                is_static=False,
            ),
            name='guiMemoSetVerticalScrollPosition',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiMoveToBack',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='guiElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function moves a GUI element to the very back of all other GUI elements. """,
                arguments={
                    "guiElement": """the GUI element that you want to move to the back """
                },
                result="""returns true if the function was successful, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='GUI widgets|GuiElement',
                method_name="""moveToBack""",
                field=None,
                is_static=False,
            ),
            name='guiMoveToBack',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiProgressBarGetProgress',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theProgressbar',
                                argument_type=FunctionType(
                                    names=['progressBar'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function gets the progress of a progress bar as a percentage. """,
                arguments={
                    "theProgressbar": """: The progressbar you want to check. """
                },
                result="""returns a float ranging between 0 and 100. """,
            ),
            oop=None,
            name='guiProgressBarGetProgress',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiProgressBarSetProgress',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theProgressbar',
                                argument_type=FunctionType(
                                    names=['progressBar'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='progress',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function is used to set the progress of a progressbar as a percentage. """,
                arguments={
                    "theProgressbar": """: The progressbar you want to change the progress of """,
                    "progress": """: a float ranging from 0 - 100 """
                },
                result="""returns true if the progress was set, false otherwise. """,
            ),
            oop=None,
            name='guiProgressBarSetProgress',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiRadioButtonGetSelected',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='guiRadioButton',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function gets a radio buttons selection state. """,
                arguments={
                    "guiRadioButton": """The radio button you wish to retrieve the selection state of. """
                },
                result="""returns true if the radio button is selected, false if it is not. """,
            ),
            oop=None,
            name='guiRadioButtonGetSelected',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiRadioButtonSetSelected',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='guiRadioButton',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='state',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function selects or unselects a radio button. """,
                arguments={
                    "guiRadioButton": """The GUI radio button in which you wish to change the selection state of """,
                    "state": """The state of the radio button, where true indicates selected, and false indicates unselected. """
                },
                result="""returns true if the radio buttons selection state was successfully set, false otherwise. """,
            ),
            oop=None,
            name='guiRadioButtonSetSelected',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiScrollBarGetScrollPosition',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theScrollBar',
                                argument_type=FunctionType(
                                    names=['gui-scrollBar'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function gets the scroll amount of a scrollbar as a percentage. """,
                arguments={
                    "theScrollBar": """: The scrollbar you want to check. """
                },
                result="""returns a float ranging between 0 and 100, representing the amount the scrollbar has been scrolled. """,
            ),
            oop=None,
            name='guiScrollBarGetScrollPosition',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiScrollBarSetScrollPosition',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theScrollBar',
                                argument_type=FunctionType(
                                    names=['gui-scrollBar'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='amount',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function is used to set the scroll amount of a scrollbar as a percentage. """,
                arguments={
                    "theScrollBar": """: The scrollbar you want to change the progress of """,
                    "amount": """: a float ranging from 0 - 100 representing the amount you wish to set the scroll bar. """
                },
                result="""returns true if the scroll position was successfully set, false otherwise. """,
            ),
            oop=None,
            name='guiScrollBarSetScrollPosition',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiScrollPaneGetHorizontalScrollPosition',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='horizontalScrollPane',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function is used to get the position of a horizontal scroll pane as a percentage. """,
                arguments={
                    "horizontalScrollPane": """: The scroll pane you want to know the position of """
                },
                result="""returns a float ranging between 0 and 100, or false otherwise. """,
            ),
            oop=None,
            name='guiScrollPaneGetHorizontalScrollPosition',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiScrollPaneGetVerticalScrollPosition',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='verticalScrollPane',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function is used to get the position of a vertical scroll pane as a percentage. """,
                arguments={
                    "verticalScrollPane": """: The scroll pane you want to know the position of """
                },
                result="""returns a float ranging between 0 and 100, or false otherwise. """,
            ),
            oop=None,
            name='guiScrollPaneGetVerticalScrollPosition',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiScrollPaneSetHorizontalScrollPosition',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='horizontalScrollPane',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='position',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function is used to set the position of a horizontal scroll pane as a percentage. """,
                arguments={
                    "horizontalScrollPane": """: The scroll pane you want to change the position of """,
                    "position": """: a float ranging from 0 - 100 """
                },
                result="""returns true if the position was set, false otherwise. """,
            ),
            oop=None,
            name='guiScrollPaneSetHorizontalScrollPosition',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiScrollPaneSetScrollBars',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='scrollPane',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='horizontal',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='vertical',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function allows a scrollpanes scrollbars to be forced on, or returned to default. """,
                arguments={
                    "scrollPane": """the GUI scrollpane element you want to set the scrollbars of. """,
                    "horizontal": """A bool where true forces the horizontal scrollbar on, and false returns them to default. """,
                    "vertical": """A bool where true forces the vertical scrollbar on, and false returns them to default. """
                },
                result="""returns true if the call was successfully, false otherwise. """,
            ),
            oop=None,
            name='guiScrollPaneSetScrollBars',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiScrollPaneSetVerticalScrollPosition',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='verticalScrollPane',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='position',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function is used to set the position of a vertical scroll pane as a percentage. """,
                arguments={
                    "verticalScrollPane": """: The scroll pane you want to change the position of """,
                    "position": """: a float ranging from 0 - 100 """
                },
                result="""returns true if the position was set, false otherwise. """,
            ),
            oop=None,
            name='guiScrollPaneSetVerticalScrollPosition',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiSetAlpha',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='guielement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='alpha',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This changes the alpha level (the visibleness/transparency) of a GUI element """,
                arguments={
                    "guiElement": """the GUI element whose visibility is to be changed """,
                    "alpha": """The visibility/transparency of the GUI element. Ranges from 0 (fully transparent) to 1 (fully opaque). Default value is 0.80. """
                },
                result="""returns true if the gui elements alpha was successfully changed, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='GUI widgets|GuiElement',
                method_name="""setAlpha""",
                field="""alpha""",
                is_static=False,
            ),
            name='guiSetAlpha',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiSetEnabled',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='guiElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='enabled',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function enables/disables a GUI element. A disabled GUI element cant be used, gets a gray aspect and doesnt receive any events. """,
                arguments={
                    "guiElement": """the GUI element you wish to enable or disable """,
                    "enabled": """the new state """
                },
                result="""if the function succeeds it returns true, if it fails it returns false. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='GUI widgets|GuiElement',
                method_name="""setEnabled""",
                field="""enabled""",
                is_static=False,
            ),
            name='guiSetEnabled',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiSetFont',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='guiElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='font',
                                argument_type=FunctionType(
                                    names=['mixed'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function sets the font of a GUI_widgets|GUI element to be used when drawing text. """,
                arguments={
                    "guiElement": """The GUI element you wish to change the font of """,
                    "font": """Either a custom GUI font element or the name of a built-in GUI font. See Standard GUI Font Names """
                },
                result="""returns true if the font has been successfully set on the gui element, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='GUI widgets|GuiElement',
                method_name="""setFont""",
                field="""font""",
                is_static=False,
            ),
            name='guiSetFont',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiSetInputEnabled',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='enabled',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function enables or disables input focus for the GUI.  This means that any keybinds or MTA binds are overidden so that text can be input into an editbox, for example.  In other words, keys such as t and y which activate the chatbox are disabled.
guiSetInputMode can be used as an extended version of guiSetInputEnabled since it provides the same functionality with one added feature. """,
                arguments={
                    "enabled": """true if input should go to GUI, false if it should go to the game. """
                },
                result="""returns true if input mode could be changed, false if invalid parameters are passed. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='GUI widgets|GuiElement',
                method_name="""setInputEnabled""",
                field="""inputEnabled""",
                is_static=True,
            ),
            name='guiSetInputEnabled',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiSetInputMode',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='mode',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function controls the input mode to define whether or not (and when) keybinds or MTA binds are overridden (disabled) so that text can be input into an editbox, for example.
The binds can be either:
* never disabled (hence using a key such as t in an editbox will still activate the chatbox)
* always disabled (hence using a key such as t in an editbox will not activate the chatbox)
* only disabled when actually editing an editbox or a memo (binds are always enabled except when an editbox or memo has input focus) """,
                arguments={
                    "mode": """a string representing the desired input mode. Accepted values are: """,
                    "allow_binds": """binds are enabled, hence using a key such as t in an editbox will still activate the chatbox (default) """,
                    "no_binds": """binds are disabled, hence using a key such as t in an editbox will not activate the chatbox """,
                    "no_binds_when_editing": """binds are always enabled except when an editable editbox or memo has input focus """
                },
                result="""returns true if input mode could be changed, false if invalid parameters are passed. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='GUI widgets|GuiElement',
                method_name="""setInputMode""",
                field="""inputMode""",
                is_static=True,
            ),
            name='guiSetInputMode',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiSetPosition',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='x',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='y',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='relative',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function sets the position of a GUI element. """,
                arguments={
                    "theElement": """The GUI element to change position for """,
                    "x": """Position over the X axis """,
                    "y": """Position over the Y axis """,
                    "relative": """Bool that indicates if the x/y positions are relative to the elements parent element. """
                },
                result="""returns true if the position has been successfully set, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='GUI widgets|GuiElement',
                method_name="""setPosition""",
                field="""position""",
                is_static=False,
            ),
            name='guiSetPosition',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiSetProperty',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='guiElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='property',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='value',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function sets the value of a specific CEGUI property of a GUI element. For a list of properties and their meaning, see the http://static.cegui.org.uk/static/WindowsLookProperties.html CEGUI properties page. """,
                arguments={
                    "guiElement": """the GUI element you wish to get a property of. """,
                    "property": """the name of of property you want the value of. """,
                    "value": """the new value for the property. """
                },
                result="""if the function succeeds it returns true, if it fails it returns false. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='GUI widgets|GuiElement',
                method_name="""setProperty""",
                field=None,
                is_static=False,
            ),
            name='guiSetProperty',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiSetSelectedTab',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='tabPanel',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='theTab',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function is used to change the currently selected Element/GUI/Tab|tab in a Element/GUI/Tab panel|tab panel. """,
                arguments={
                    "tabPanel": """The Element/GUI/Tab panel|tab panel which current tab you want to change. """,
                    "theTab": """The Element/GUI/Tab|tab which will be the new active tab. """
                },
                result="""returns true if the selected tab was changed to a new one successfully, false otherwise. """,
            ),
            oop=None,
            name='guiSetSelectedTab',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiSetSize',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='guiElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='width',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='height',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='relative',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function sets the dimensions (size) of a GUI element. It refers to the bounding box size for GUI elements. It does not make GUI elements smaller or larger in appearance. """,
                arguments={
                    "guiElement": """the GUI element whose visibility is to be changed """,
                    "width": """The desired width setting for the gui element """,
                    "height": """The desired height setting for the gui element """,
                    "relative": """This is whether sizes and positioning are relative.  If this is true, then all x,y,width,height floats must be between 0 and 1, representing sizes relative to the parent. """
                },
                result="""returns true if the gui elements size was set successfully, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='GUI widgets|GuiElement',
                method_name="""setSize""",
                field=None,
                is_static=False,
            ),
            name='guiSetSize',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiSetText',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='guiElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='text',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function sets the text of a GUI element. """,
                arguments={
                    "guiElement": """The GUI element you wish to change the text of """,
                    "text": """The new text """
                },
                result="""returns true if text has been successfully set on the gui element, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='GUI widgets|GuiElement',
                method_name="""setText""",
                field="""text""",
                is_static=False,
            ),
            name='guiSetText',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiSetVisible',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='guiElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='state',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function changes the visibility state of a GUI element. """,
                arguments={
                    "guiElement": """the GUI element whose visibility is to be changed """,
                    "state": """the new visibility state """
                },
                result="""returns true if the elements visibility could be changed, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='GUI widgets|GuiElement',
                method_name="""setVisible""",
                field="""visible""",
                is_static=False,
            ),
            name='guiSetVisible',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiStaticImageGetNativeSize',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theImage',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function gets the native size of image. That means the original size in pixels of the image file. """,
                arguments={
                    "theImage": """The static image element to get the original size of. """
                },
                result="""returns two integers where first is the width and second the height of the image in pixels, false if the image element was invalid. """,
            ),
            oop=None,
            name='guiStaticImageGetNativeSize',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiStaticImageLoadImage',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='filename',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function allows you to change the image in GUI static image element to another one. Tip: If you set other images as children you will have to use setElementCallPropagationEnabled to only affect the parent image. """,
                arguments={
                    "theElement": """The static image element to be changed. """,
                    "filename": """A string specifying the filepath of the image file being loaded in current resource. """
                },
                result="""returns true if the the image in the static image element was successfully changed, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Element/GUI/Static_image|GuiStaticImage',
                method_name="""loadImage""",
                field="""image""",
                is_static=False,
            ),
            name='guiStaticImageLoadImage',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiWindowIsMovable',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='guiWindow',
                                argument_type=FunctionType(
                                    names=['gui-window'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description=""" """,
                arguments={
                    "guiWindow": """the window to check the movable flag of """
                },
                result="""returns true if the window is movable, false if not, nil if an invalid window was provided. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='None',
                method_name=None,
                field="""movable""",
                is_static=None,
            ),
            name='guiWindowIsMovable',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiWindowIsSizable',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='guiWindow',
                                argument_type=FunctionType(
                                    names=['gui-window'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description=""" """,
                arguments={
                    "guiWindow": """the window to check the sizable flag of """
                },
                result="""returns true if the window is sizable, false if not, nil if an invalid window was provided. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='None',
                method_name=None,
                field="""sizable""",
                is_static=None,
            ),
            name='guiWindowIsSizable',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiWindowSetMovable',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='status',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function allows you to specify whether or not a user can move a GUI window. """,
                arguments={
                    "theElement": """The window to be changed. """,
                    "status": """A boolean value indicating whether the window is movable or not. """
                },
                result="""returns true if the function is successful, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Element/GUI/Window|GuiWindow',
                method_name="""setMovable""",
                field="""movable""",
                is_static=False,
            ),
            name='guiWindowSetMovable',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='guiWindowSetSizable',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='status',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function enables or disables user resizing of a GUI window. """,
                arguments={
                    "theElement": """The window to be changed. """,
                    "status": """A boolean value indicating whether user resizing is to be enabled or disabled. """
                },
                result="""returns true if the function is successful, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Element/GUI/Window|GuiWindow',
                method_name="""setSizable""",
                field="""sizable""",
                is_static=False,
            ),
            name='guiWindowSetSizable',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='isChatBoxInputActive',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function returns whether the ingame chatbox is being used (accepting chatbox input) or not. """,
                arguments={
                    
                },
                result="""returns true if the chatbox is receiving input, false if not active. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='GUI widgets|GuiElement',
                method_name="""isChatBoxInputActive""",
                field="""chatBoxInputActive""",
                is_static=True,
            ),
            name='isChatBoxInputActive',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='isConsoleActive',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function returns whether the ingame console window is visible or not. """,
                arguments={
                    
                },
                result="""returns true if the console is visible, false if not. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='GUI widgets|GuiElement',
                method_name="""isConsoleActive""",
                field="""consoleActive""",
                is_static=False,
            ),
            name='isConsoleActive',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='isDebugViewActive',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function returns whether the ingame debug window is visible or not. This is the debugwindow visible using the debugscript <level> command. """,
                arguments={
                    
                },
                result="""returns true if the debug view is visible, false if not. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='GUI widgets|GuiElement',
                method_name="""isDebugViewActive""",
                field="""debugViewActive""",
                is_static=True,
            ),
            name='isDebugViewActive',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='isMainMenuActive',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function returns whether the user is in the mainmenu or not. """,
                arguments={
                    
                },
                result="""returns true if the mainmenu is visible, false if not. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='GUI widgets|GuiElement',
                method_name="""isMainMenuActive""",
                field="""mainMenuActive""",
                is_static=True,
            ),
            name='isMainMenuActive',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='isMTAWindowActive',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function returns whether any system windows that take focus are active. This includes:
* Chatbox input
* Console window
* Main menu
* Transferbox
To get the status of the debug view, see isDebugViewActive. """,
                arguments={
                    
                },
                result="""returns true if the focus is on the mta window, false if it isnt. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='GUI_widgets|GuiElement',
                method_name="""isMTAWindowActive""",
                field=None,
                is_static=True,
            ),
            name='isMTAWindowActive',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='isTransferBoxActive',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function returns whether the file downloading dialog box is active or not. This appears when a resource is started and the client doesnt have all the files that resource requires the client to have.
Its important to note that resources arent started on the client until theyre completely downloaded, so a resource cannot use this function to detect if its own files are downloaded. A client-side resource triggers the onClientResourceStart event when the files it requires are downloaded. """,
                arguments={
                    
                },
                result="""returns true if the file transfer box is visible, false if not. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='GUI widgets|GuiElement',
                method_name="""isTransferBoxActive""",
                field=None,
                is_static=True,
            ),
            name='isTransferBoxActive',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='setDebugViewActive',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='enabled',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function enables or disables the debug window. """,
                arguments={
                    "enabled": """true if debug window should be visible, false otherwise. """
                },
                result="""returns true, false if invalid parameters are passed. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='GUI widgets|GuiElement',
                method_name="""setDebugViewActive""",
                field="""debugViewActive""",
                is_static=True,
            ),
            name='setDebugViewActive',
        )
        ],
    )
]
