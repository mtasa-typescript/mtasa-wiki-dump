# Autogenerated file. ANY CHANGES WILL BE OVERWRITTEN
from to_python.core.types import FunctionType, \
    FunctionArgument, \
    FunctionArgumentValues, \
    FunctionReturnTypes, \
    FunctionSignature, \
    FunctionDoc, \
    FunctionData, \
    CompoundFunctionData
     
DUMP_PARTIAL = [
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='fileClose',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theFile',
                                argument_type=FunctionType(
                                    names=['file'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Closes a file handle obtained by fileCreate or fileOpen.' ,
                arguments={
                    "theFile": """The file handle to close. """
                },
                result='returns true if successful, false otherwise.' ,
            )
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='fileClose',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theFile',
                                argument_type=FunctionType(
                                    names=['file'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Closes a file handle obtained by fileCreate or fileOpen.' ,
                arguments={
                    "theFile": """The file handle to close. """
                },
                result='returns true if successful, false otherwise.' ,
            )
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='fileCopy',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='filePath',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='copyToFilePath',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='overwrite',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='false',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function copies a file.{{Note|The file functions should not be used to implement configuration files. It is encouraged to use the XML functions for this instead.}}' ,
                arguments={
                    "filePath": """: The path of the file you want to copy. """,
                    "copyToFilePath": """: Where to copy the specified file to. """,
                    "overwrite": """: If set to true it will overwrite a file that already exists at copyToFilePath. """
                },
                result='return true if the file was copied, else false if the filepath doesnt exist.' ,
            )
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='fileCopy',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='filePath',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='copyToFilePath',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='overwrite',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='false',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function copies a file.{{Note|The file functions should not be used to implement configuration files. It is encouraged to use the XML functions for this instead.}}' ,
                arguments={
                    "filePath": """: The path of the file you want to copy. """,
                    "copyToFilePath": """: Where to copy the specified file to. """,
                    "overwrite": """: If set to true it will overwrite a file that already exists at copyToFilePath. """
                },
                result='return true if the file was copied, else false if the filepath doesnt exist.' ,
            )
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='fileCreate',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['file'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='filePath',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Creates a new file in a directory of a resource. If there already exists a file with the specified name, it is overwritten with an empty file.' ,
                arguments={
                    "filePath": """The filepath of the file to be created in the following format: :resourceName/path. resourceName is the name of the resource the file is in, and path is the path from the root directory of the resource to the file.
:For example, if you want to create a file named 'myfile.txt' in the resource 'mapcreator', it can be created from another resource this way: ''fileCreate(":mapcreator/myfile.txt")''.
:If the file is in the current resource, only the file path is necessary, e.g. ''fileCreate("myfile.txt")''. """
                },
                result='if successful, returns a file handle which can be used with other file functions (filewrite, fileclose...). returns false if an error occured.' ,
            )
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='fileCreate',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['file'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='filePath',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Creates a new file in a directory of a resource. If there already exists a file with the specified name, it is overwritten with an empty file.' ,
                arguments={
                    "filePath": """The filepath of the file to be created in the following format: :resourceName/path. resourceName is the name of the resource the file is in, and path is the path from the root directory of the resource to the file.
:For example, if you want to create a file named 'myfile.txt' in the resource 'mapcreator', it can be created from another resource this way: ''fileCreate(":mapcreator/myfile.txt")''.
:If the file is in the current resource, only the file path is necessary, e.g. ''fileCreate("myfile.txt")''. """
                },
                result='if successful, returns a file handle which can be used with other file functions (filewrite, fileclose...). returns false if an error occured.' ,
            )
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='fileDelete',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='filePath',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Deletes the specified file.' ,
                arguments={
                    "filePath": """The filepath of the file to delete in the following format: :resourceName/path. resourceName is the name of the resource the file is in, and path is the path from the root directory of the resource to the file.
:For example, if you want to delete a file name "myFile.txt" in the resource 'fileres', it can be deleted from another resource this way: ''fileDelete(":fileres/myFile.txt")''.
:If the file is in the current resource, only the file path is necessary, e.g. ''fileDelete("myFile.txt")''. """
                },
                result='returns true if successful, false otherwise (for example if there exists no file with the given name, or it does exist but is in use).' ,
            )
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='fileDelete',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='filePath',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Deletes the specified file.' ,
                arguments={
                    "filePath": """The filepath of the file to delete in the following format: :resourceName/path. resourceName is the name of the resource the file is in, and path is the path from the root directory of the resource to the file.
:For example, if you want to delete a file name "myFile.txt" in the resource 'fileres', it can be deleted from another resource this way: ''fileDelete(":fileres/myFile.txt")''.
:If the file is in the current resource, only the file path is necessary, e.g. ''fileDelete("myFile.txt")''. """
                },
                result='returns true if successful, false otherwise (for example if there exists no file with the given name, or it does exist but is in use).' ,
            )
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='fileExists',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='filePath',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This functions checks whether a specified file exists inside a resource.' ,
                arguments={
                    "filePath": """The filepath of the file, whose existence is going to be checked, in the following format: :resourceName/path. resourceName is the name of the resource the file is checked to be in, and path is the path from the root directory of the resource to the file.
:For example, if you want to check whether a file named 'myfile.txt' exists in the resource 'mapcreator', it can be done from another resource this way: ''fileExists(":mapcreator/myfile.txt")''.
:If the file, whose existence is going to be checked, is in the current resource, only the file path is necessary, e.g. ''fileExists("myfile.txt")''. Note that you must use forward slashes '/' for the folders, backslashes '\' will return false. """
                },
                result='returns true if the file exists, false otherwise.' ,
            )
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='fileExists',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='filePath',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This functions checks whether a specified file exists inside a resource.' ,
                arguments={
                    "filePath": """The filepath of the file, whose existence is going to be checked, in the following format: :resourceName/path. resourceName is the name of the resource the file is checked to be in, and path is the path from the root directory of the resource to the file.
:For example, if you want to check whether a file named 'myfile.txt' exists in the resource 'mapcreator', it can be done from another resource this way: ''fileExists(":mapcreator/myfile.txt")''.
:If the file, whose existence is going to be checked, is in the current resource, only the file path is necessary, e.g. ''fileExists("myfile.txt")''. Note that you must use forward slashes '/' for the folders, backslashes '\' will return false. """
                },
                result='returns true if the file exists, false otherwise.' ,
            )
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='fileFlush',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theFile',
                                argument_type=FunctionType(
                                    names=['file'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Forces pending disk writes to be executed. fileWrite doesnt directly write to the hard disk but places the data in a temporary buffer; only when there is enough data in the buffer it is actually written to disk. Call this function if you need the data written right now without closing the file. This is useful for log files that might want to be read while the resource is still executing. fileFlush can be called after each log entry is written. Without this, the file may appear empty or outdated to the user.' ,
                arguments={
                    "theFile": """The file handle of the file you wish to flush. """
                },
                result='returns true if succeeded, false in case of failure (e.g. the file handle is invalid).' ,
            )
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='fileFlush',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theFile',
                                argument_type=FunctionType(
                                    names=['file'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Forces pending disk writes to be executed. fileWrite doesnt directly write to the hard disk but places the data in a temporary buffer; only when there is enough data in the buffer it is actually written to disk. Call this function if you need the data written right now without closing the file. This is useful for log files that might want to be read while the resource is still executing. fileFlush can be called after each log entry is written. Without this, the file may appear empty or outdated to the user.' ,
                arguments={
                    "theFile": """The file handle of the file you wish to flush. """
                },
                result='returns true if succeeded, false in case of failure (e.g. the file handle is invalid).' ,
            )
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='fileGetPath',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theFile',
                                argument_type=FunctionType(
                                    names=['file'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function retrieves the path of the given file.' ,
                arguments={
                    "theFile": """The file you want to get the path. """
                },
                result='returns a string representing the file path, false if invalid file was provided.' ,
            )
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='fileGetPath',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theFile',
                                argument_type=FunctionType(
                                    names=['file'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function retrieves the path of the given file.' ,
                arguments={
                    "theFile": """The file you want to get the path. """
                },
                result='returns a string representing the file path, false if invalid file was provided.' ,
            )
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='fileGetPos',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theFile',
                                argument_type=FunctionType(
                                    names=['file'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Returns the current read/write position in the given file.' ,
                arguments={
                    "theFile": """the file handle you wish to get the position of. """
                },
                result='returns the file position if successful, or false if an error occured (e.g. an invalid handle was passed).' ,
            )
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='fileGetPos',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theFile',
                                argument_type=FunctionType(
                                    names=['file'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Returns the current read/write position in the given file.' ,
                arguments={
                    "theFile": """the file handle you wish to get the position of. """
                },
                result='returns the file position if successful, or false if an error occured (e.g. an invalid handle was passed).' ,
            )
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='fileGetSize',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theFile',
                                argument_type=FunctionType(
                                    names=['file'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Returns the total size in bytes of the given file.' ,
                arguments={
                    "theFile": """the file handle you wish to get the size of. """
                },
                result='returns the file size if successful, or false if an error occured (e.g. an invalid file handle was passed).' ,
            )
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='fileGetSize',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theFile',
                                argument_type=FunctionType(
                                    names=['file'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Returns the total size in bytes of the given file.' ,
                arguments={
                    "theFile": """the file handle you wish to get the size of. """
                },
                result='returns the file size if successful, or false if an error occured (e.g. an invalid file handle was passed).' ,
            )
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='fileIsEOF',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theFile',
                                argument_type=FunctionType(
                                    names=['file'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Checks if the file position is at the end of the file.' ,
                arguments={
                    "theFile": """A handle to the file you wish to check. """
                },
                result='returns true if the file position of the specified file is at the end of the file, false otherwise.' ,
            )
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='fileIsEOF',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theFile',
                                argument_type=FunctionType(
                                    names=['file'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Checks if the file position is at the end of the file.' ,
                arguments={
                    "theFile": """A handle to the file you wish to check. """
                },
                result='returns true if the file position of the specified file is at the end of the file, false otherwise.' ,
            )
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='fileOpen',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['file'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='filePath',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='readOnly',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='false',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Opens an existing file for reading and writing.' ,
                arguments={
                    "filePath": """The filepath of the file in the following format: :resourceName/path. resourceName is the name of the resource the file is in, and path is the path from the root directory of the resource to the file.
:For example, if there is a file named 'coolObjects.txt' in the resource 'objectSearch', it can be opened from another resource this way: ''fileOpen(":objectSearch/coolObjects.txt")''.
:If the file is in the current resource, only the file path is necessary, e.g. ''fileOpen("coolObjects.txt")''. """,
                    "readOnly": """By default, the file is opened with reading and writing access. You can specify true for this parameter if you only need reading access. """
                },
                result='if successful, returns a file handle for the file. otherwise returns false (f.e. if the file doesnt exist).' ,
            )
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='fileOpen',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['file'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='filePath',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='readOnly',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='false',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Opens an existing file for reading and writing.' ,
                arguments={
                    "filePath": """The filepath of the file in the following format: :resourceName/path. resourceName is the name of the resource the file is in, and path is the path from the root directory of the resource to the file.
:For example, if there is a file named 'coolObjects.txt' in the resource 'objectSearch', it can be opened from another resource this way: ''fileOpen(":objectSearch/coolObjects.txt")''.
:If the file is in the current resource, only the file path is necessary, e.g. ''fileOpen("coolObjects.txt")''. """,
                    "readOnly": """By default, the file is opened with reading and writing access. You can specify true for this parameter if you only need reading access. """
                },
                result='if successful, returns a file handle for the file. otherwise returns false (f.e. if the file doesnt exist).' ,
            )
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='fileRead',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theFile',
                                argument_type=FunctionType(
                                    names=['file'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='count',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Reads the specified number of bytes from the given file starting at its current read/write position, and returns them as a string.' ,
                arguments={
                    "theFile": """A handle to the file you wish to read from. Use fileOpen to obtain this handle. """,
                    "count": """The number of bytes you wish to read. """
                },
                result='returns the bytes that were read in a string. note that this string might not contain as many bytes as you specified if an error occured, i.e. end of file.' ,
            )
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='fileRead',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theFile',
                                argument_type=FunctionType(
                                    names=['file'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='count',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Reads the specified number of bytes from the given file starting at its current read/write position, and returns them as a string.' ,
                arguments={
                    "theFile": """A handle to the file you wish to read from. Use fileOpen to obtain this handle. """,
                    "count": """The number of bytes you wish to read. """
                },
                result='returns the bytes that were read in a string. note that this string might not contain as many bytes as you specified if an error occured, i.e. end of file.' ,
            )
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='fileRename',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='filePath',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='newFilePath',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Renames the specified file.' ,
                arguments={
                    "filePath": """The filepath of the source file in the following format: :resourceName/path. resourceName is the name of the resource the file is in, and path is the path from the root directory of the resource to the file. If the file is in the current resource, only the file path is necessary. """,
                    "newFilePath": """Destination filepath for the specified source file in the same format. """
                },
                result='if successful, returns true. otherwise returns false.' ,
            )
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='fileRename',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='filePath',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='newFilePath',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Renames the specified file.' ,
                arguments={
                    "filePath": """The filepath of the source file in the following format: :resourceName/path. resourceName is the name of the resource the file is in, and path is the path from the root directory of the resource to the file. If the file is in the current resource, only the file path is necessary. """,
                    "newFilePath": """Destination filepath for the specified source file in the same format. """
                },
                result='if successful, returns true. otherwise returns false.' ,
            )
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='fileSetPos',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theFile',
                                argument_type=FunctionType(
                                    names=['file'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='offset',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Sets the current read/write position in the file.' ,
                arguments={
                    "theFile": """The file handle of which you want to change the read/write position. """,
                    "offset": """The new position. This is the number of bytes from the beginning of the file. If this value is larger than the file size, it is limited to 52,428,800 bytes (50 MB). """
                },
                result='returns where the offset was actually set at. i.e. if offset was past the end of the file, it will be set at the end of the file, and this position will be returned. returns false in case of failure (e.g. the specified file handle is invalid).' ,
            )
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='fileSetPos',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theFile',
                                argument_type=FunctionType(
                                    names=['file'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='offset',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Sets the current read/write position in the file.' ,
                arguments={
                    "theFile": """The file handle of which you want to change the read/write position. """,
                    "offset": """The new position. This is the number of bytes from the beginning of the file. If this value is larger than the file size, it is limited to 52,428,800 bytes (50 MB). """
                },
                result='returns where the offset was actually set at. i.e. if offset was past the end of the file, it will be set at the end of the file, and this position will be returned. returns false in case of failure (e.g. the specified file handle is invalid).' ,
            )
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='fileWrite',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theFile',
                                argument_type=FunctionType(
                                    names=['file'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='string1',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='string2',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='string3',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=True,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Writes one or more strings to a given file, starting at the current read/write position. Advances the position over the number of bytes that were written.' ,
                arguments={
                    "theFile": """A handle to the file you wish to write to. The file must have been opened with write access, i.e. the file handle must be a result of fileCreate or fileOpen with the readonly parameter set to false. """,
                    "string1": """The string to write. """
                },
                result='returns the number of bytes successfully written to the file, returns false if invalid arguments were specified.' ,
            )
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='fileWrite',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theFile',
                                argument_type=FunctionType(
                                    names=['file'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='string1',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='string2',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='string3',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=True,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Writes one or more strings to a given file, starting at the current read/write position. Advances the position over the number of bytes that were written.' ,
                arguments={
                    "theFile": """A handle to the file you wish to write to. The file must have been opened with write access, i.e. the file handle must be a result of fileCreate or fileOpen with the readonly parameter set to false. """,
                    "string1": """The string to write. """
                },
                result='returns the number of bytes successfully written to the file, returns false if invalid arguments were specified.' ,
            )
        )
        ],
    )
]
