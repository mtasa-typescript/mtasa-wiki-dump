# Autogenerated file. ANY CHANGES WILL BE OVERWRITTEN
from to_python.core.types import FunctionType, \
    FunctionArgument, \
    FunctionArgumentValues, \
    FunctionReturnTypes, \
    FunctionSignature, \
    FunctionDoc, \
    FunctionData, \
    CompoundFunctionData

DUMP_PARTIAL = [
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='addEvent',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='eventName',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='allowRemoteTrigger',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='false',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function allows you to register a custom event. Custom events function exactly like the built-in events. See event system for more information on the event system.' ,
                arguments={
                    "eventName": """The name of the event you wish to create. """,
                    "allowRemoteTrigger": """A boolean specifying whether this event can be called remotely using triggerClientEvent / triggerServerEvent or not. """
                },
                result='returns true if the event was added successfully, false if the event was already added.' ,
            ),
            url='addEvent',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='addEvent',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='eventName',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='allowRemoteTrigger',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='false',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function allows you to register a custom event. Custom events function exactly like the built-in events. See event system for more information on the event system.' ,
                arguments={
                    "eventName": """The name of the event you wish to create. """,
                    "allowRemoteTrigger": """A boolean specifying whether this event can be called remotely using triggerClientEvent / triggerServerEvent or not. """
                },
                result='returns true if the event was added successfully, false if the event was already added.' ,
            ),
            url='addEvent',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='addEventHandler',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='eventName',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='attachedTo',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='handlerFunction',
                                argument_type=FunctionType(
                                    names=['function'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='propagate',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='true',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='priority',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=True,
                                ),
                                default_value='"normal"',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function will add an event handler. An event handler is a function that will be called when the event its attached to is triggered. See event system for more information on how the event system works.\nEvent handlers are functions that are called when a particular event happens. Each event specifies a specific set of variables that are passed to the event handler and can be read by your function. The following global variables are available for use in handler functions:\n*source: the element that triggered the event\n*this: the element that the event handler is attached to\n*sourceResource: the resource that triggered the event\n*sourceResourceRoot: the root element of the resource that triggered the event\n*client: the client that triggered the event using triggerServerEvent. Not set if the event was not triggered from a client.\n*eventName: the name of the event which triggered the handler function.\nIt is important to remember that events pass up and down the element tree. An event triggered on the root element is triggered on every element in the tree. An event triggered on any other element is triggered on its ancestors (its parent element and its parents parent etc) and its children, grandchildren and great-grandchildren. You can use the getPropagated argument to specify if you wish your handler to receive events that have propagated up or down the tree.\nThe order in which event handlers are triggered is undefined, you should not rely on one event handler being executed before another.' ,
                arguments={
                    "eventName": """The name of the event you want to attach the handler function to. Note: The maximum allowed length is 100 ASCII characters (that is, English letters and numerals)``` """,
                    "attachedTo": """The element you wish to attach the handler to. The handler will only be called when the event it is attached to is triggered for this element, or one of its children. Often, this can be the root element (meaning the handler will be called when the event is triggered for any element). """,
                    "handlerFunction": """The handler function you wish to call when the event is triggered. This function will be passed all of the events parameters as arguments, but it isnt required that it takes all of them. """,
                    "propagate": """A boolean representing whether the handler will be triggered if the event was propagated down or up the element tree (starting from the source), and not triggered directly on attachedTo (that is, handlers attached with this argument set to false will only be triggered if source == this). In GUI events you will probably want to set this to false. """,
                    "priority": """A string representing the trigger order priority relative to other event handlers of the same name. Possible values are: """,
                    "high": """ """,
                    "normal": """ """,
                    "low": """''It is also possible to add finer priority control by appending a positive or negative number to the priority string. For example (in priority order for reference): "high+4" "high" "high-1" "normal-6" "normal-7" "low+1" "low" "low-1"'' """
                },
                result='returns true if the event handler was attached successfully. returns false if the specified event could not be found or any parameters were invalid.' ,
            ),
            url='addEventHandler',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='addEventHandler',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='eventName',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='attachedTo',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='handlerFunction',
                                argument_type=FunctionType(
                                    names=['function'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='propagate',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='true',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='priority',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=True,
                                ),
                                default_value='"normal"',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function will add an event handler. An event handler is a function that will be called when the event its attached to is triggered. See event system for more information on how the event system works.\nEvent handlers are functions that are called when a particular event happens. Each event specifies a specific set of variables that are passed to the event handler and can be read by your function. The following global variables are available for use in handler functions:\n*source: the element that triggered the event\n*this: the element that the event handler is attached to\n*sourceResource: the resource that triggered the event\n*sourceResourceRoot: the root element of the resource that triggered the event\n*client: the client that triggered the event using triggerServerEvent. Not set if the event was not triggered from a client.\n*eventName: the name of the event which triggered the handler function.\nIt is important to remember that events pass up and down the element tree. An event triggered on the root element is triggered on every element in the tree. An event triggered on any other element is triggered on its ancestors (its parent element and its parents parent etc) and its children, grandchildren and great-grandchildren. You can use the getPropagated argument to specify if you wish your handler to receive events that have propagated up or down the tree.\nThe order in which event handlers are triggered is undefined, you should not rely on one event handler being executed before another.' ,
                arguments={
                    "eventName": """The name of the event you want to attach the handler function to. Note: The maximum allowed length is 100 ASCII characters (that is, English letters and numerals)``` """,
                    "attachedTo": """The element you wish to attach the handler to. The handler will only be called when the event it is attached to is triggered for this element, or one of its children. Often, this can be the root element (meaning the handler will be called when the event is triggered for any element). """,
                    "handlerFunction": """The handler function you wish to call when the event is triggered. This function will be passed all of the events parameters as arguments, but it isnt required that it takes all of them. """,
                    "propagate": """A boolean representing whether the handler will be triggered if the event was propagated down or up the element tree (starting from the source), and not triggered directly on attachedTo (that is, handlers attached with this argument set to false will only be triggered if source == this). In GUI events you will probably want to set this to false. """,
                    "priority": """A string representing the trigger order priority relative to other event handlers of the same name. Possible values are: """,
                    "high": """ """,
                    "normal": """ """,
                    "low": """''It is also possible to add finer priority control by appending a positive or negative number to the priority string. For example (in priority order for reference): "high+4" "high" "high-1" "normal-6" "normal-7" "low+1" "low" "low-1"'' """
                },
                result='returns true if the event handler was attached successfully. returns false if the specified event could not be found or any parameters were invalid.' ,
            ),
            url='addEventHandler',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='cancelEvent',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='cancel',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='true',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='reason',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=True,
                                ),
                                default_value='""',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function is used to stop the automatic internal handling of events, for example this can be used to prevent an item being given to a player when they walk over a pickup, by canceling the onPickupUse event.\ncancelEvent does not have an effect on all events, see the individual events pages for information on what happens when the event is canceled. cancelEvent does not stop further event handlers from being called, as the order of event handlers being called is undefined in many cases. Instead, you can see if the currently active event has been cancelled using wasEventCancelled.\nThe use of cancelEvent outside of an event handler has no effect.\nIf you implement your own custom events and want to handle them being cancelled, you should call wasEventCancelled to check after your call to triggerEvent.' ,
                arguments={
                    
                },
                result='' ,
            ),
            url='cancelEvent',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='cancelEvent',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function is used to stop the automatic internal handling of events, for example this can be used to prevent an item being given to a player when they walk over a pickup, by canceling the onPickupUse event.\ncancelEvent does not have an effect on all events, see the individual events pages for information on what happens when the event is canceled. cancelEvent does not stop further event handlers from being called, as the order of event handlers being called is undefined in many cases. Instead, you can see if the currently active event has been cancelled using wasEventCancelled.\nThe use of cancelEvent outside of an event handler has no effect.\nIf you implement your own custom events and want to handle them being cancelled, you should call wasEventCancelled to check after your call to triggerEvent.' ,
                arguments={
                    
                },
                result='' ,
            ),
            url='cancelEvent',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='cancelLatentEvent',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePlayer',
                                argument_type=FunctionType(
                                    names=['player'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='handle',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Stops a latent event from completing' ,
                arguments={
                    "thePlayer": """The player who is receiving the event. """,
                    "handle": """A handle previous got from getLatentEventHandles. """
                },
                result='' ,
            ),
            url='cancelLatentEvent',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='cancelLatentEvent',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='handle',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Stops a latent event from completing' ,
                arguments={
                    "handle": """A handle previous got from getLatentEventHandles. """
                },
                result='' ,
            ),
            url='cancelLatentEvent',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='getCancelReason',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Gets the reason for cancelling an event.' ,
                arguments={
                    
                },
                result='returns the reason that was given with cancelevent' ,
            ),
            url='getCancelReason',
        )
        ],
        client=[
            
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='getEventHandlers',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='eventName',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='attachedTo',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function gets the attached functions from the event and attached element from current lua script.' ,
                arguments={
                    "eventName": """The name of the event. For example ( onPlayerWasted ). """,
                    "attachedTo": """The element attached to. """
                },
                result='returns table with attached functions, empty table otherwise.' ,
            ),
            url='getEventHandlers',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='getEventHandlers',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='eventName',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='attachedTo',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function gets the attached functions from the event and attached element from current lua script.' ,
                arguments={
                    "eventName": """The name of the event. For example ( onPlayerWasted ). """,
                    "attachedTo": """The element attached to. """
                },
                result='returns table with attached functions, empty table otherwise.' ,
            ),
            url='getEventHandlers',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='getLatentEventHandles',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePlayer',
                                argument_type=FunctionType(
                                    names=['player'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Gets the currently queued latent events. The last one in the table is always the latest event queued. Each returned handle can be used with getLatentEventStatus or cancelLatentEvent' ,
                arguments={
                    "thePlayer": """The player who is receiving the events. """
                },
                result='' ,
            ),
            url='getLatentEventHandles',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='getLatentEventHandles',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Gets the currently queued latent events. The last one in the table is always the latest event queued. Each returned handle can be used with getLatentEventStatus or cancelLatentEvent' ,
                arguments={
                    
                },
                result='' ,
            ),
            url='getLatentEventHandles',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='getLatentEventStatus',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePlayer',
                                argument_type=FunctionType(
                                    names=['player'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='handle',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Gets the status of one queued latent event.' ,
                arguments={
                    "thePlayer": """The player who is receiving the event. """,
                    "handle": """A handle previous got from getLatentEventHandles. """
                },
                result='' ,
            ),
            url='getLatentEventStatus',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='getLatentEventStatus',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='handle',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Gets the status of one queued latent event.' ,
                arguments={
                    "handle": """A handle previous got from getLatentEventHandles. """
                },
                result='' ,
            ),
            url='getLatentEventStatus',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='removeEventHandler',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='eventName',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='attachedTo',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='functionVar',
                                argument_type=FunctionType(
                                    names=['function'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This functions removes a handler function from an event, so that the function is not called anymore when the event is triggered. See event system for more information on how the event system works.' ,
                arguments={
                    "eventName": """The name of the event you want to detach the handler function from. """,
                    "attachedTo": """The element the handler was attached to. """,
                    "functionVar": """The handler function that was attached. """
                },
                result='returns true if the event handler was removed successfully. returns false if the specified event handler could not be found or invalid parameters were passed.' ,
            ),
            url='removeEventHandler',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='removeEventHandler',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='eventName',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='attachedTo',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='functionVar',
                                argument_type=FunctionType(
                                    names=['function'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This functions removes a handler function from an event, so that the function is not called anymore when the event is triggered. See event system for more information on how the event system works.' ,
                arguments={
                    "eventName": """The name of the event you want to detach the handler function from. """,
                    "attachedTo": """The element the handler was attached to. """,
                    "functionVar": """The handler function that was attached. """
                },
                result='returns true if the event handler was removed successfully. returns false if the specified event handler could not be found or invalid parameters were passed.' ,
            ),
            url='removeEventHandler',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='triggerClientEvent',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='sendTo',
                                argument_type=FunctionType(
                                    names=['table', 'element'],
                                    is_optional=True,
                                ),
                                default_value='getRootElement()',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='name',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='sourceElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='arguments',
                                argument_type=None,
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=True,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function triggers an event previously registered on a client. This is the primary means of passing information between the server and the client. Clients have a similar triggerServerEvent function that can do the reverse. You can treat this function as if it was an asynchronous function call, using triggerServerEvent to pass back any returned information if necessary.\nAlmost any data types can be passed as expected, including elements and complex nested tables. Non-element MTA data types like xmlNodes or resource pointers will not be able to be passed as they do not necessarily have a valid representation on the client.\nEvents are sent reliably, so clients will receive them, but there may be (but shouldnt be) a significant delay before they are received. You should take this into account when using them.\nKeep in mind the bandwidth issues when using events - dont pass a large list of arguments unless you really need to. It is marginally more efficient to pass one large event than two smaller ones.' ,
                arguments={
                    "name": """The name of the event to trigger client side. You should register this event with addEvent and add at least one event handler using addEventHandler. """,
                    "sourceElement": """The element that is the Event system#Event handlers|source of the event. """,
                    "sendTo": """The event will be sent to all players that are children of the specified element. By default this is the root element, and hence the event is sent to all players. If you specify a single player it will just be sent to that player. This argument can also be a table of player elements. """,
                    "arguments...": """A list of arguments to trigger with the event. You can pass any lua data type (except functions). You can also pass elements. """
                },
                result='returns true if the event trigger has been sent, false if invalid arguments were specified.' ,
            ),
            url='triggerClientEvent',
        )
        ],
        client=[
            
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='triggerEvent',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='eventName',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='baseElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='argument1',
                                argument_type=FunctionType(
                                    names=['var'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=True,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function will trigger a named event on a specific element in the element tree. See event system for more information on how the event system works.\nYou can use the value returned from this function to determine if the event was cancelled by one of the event handlers. You should determine what your response (if any) to this should be based on the events purpose. Generally, cancelling an event should prevent any further code being run that is dependent on whatever triggered that event. For example, if you have an onFlagCapture event, cancelling it would be expected to prevent the flag being able to be captured. Similarly, if you have onPlayerKill as an event you trigger, canceling it would either be expected to prevent the player being killed from dying or at least prevent the player from getting a score for it.' ,
                arguments={
                    "eventName": """The name of the event you wish to trigger """,
                    "baseElement": """The element you wish to trigger the event on. See event system for information on how this works. """,
                    "argument1": """The first argument that the event handler expects should be added after the baseElement variable. """,
                    "NOTE": """This function can have more than one of these arguments specified, once for each argument the event handler is expecting. """
                },
                result='* returns nil if the arguments are invalid or the event could not be found.\n* returns true if the event was triggered successfully, and was not cancelled using cancelevent.\n* returns false if the event was triggered successfully, and was cancelled using cancelevent.' ,
            ),
            url='triggerEvent',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='triggerEvent',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='eventName',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='baseElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='argument1',
                                argument_type=FunctionType(
                                    names=['var'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=True,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function will trigger a named event on a specific element in the element tree. See event system for more information on how the event system works.\nYou can use the value returned from this function to determine if the event was cancelled by one of the event handlers. You should determine what your response (if any) to this should be based on the events purpose. Generally, cancelling an event should prevent any further code being run that is dependent on whatever triggered that event. For example, if you have an onFlagCapture event, cancelling it would be expected to prevent the flag being able to be captured. Similarly, if you have onPlayerKill as an event you trigger, canceling it would either be expected to prevent the player being killed from dying or at least prevent the player from getting a score for it.' ,
                arguments={
                    "eventName": """The name of the event you wish to trigger """,
                    "baseElement": """The element you wish to trigger the event on. See event system for information on how this works. """,
                    "argument1": """The first argument that the event handler expects should be added after the baseElement variable. """,
                    "NOTE": """This function can have more than one of these arguments specified, once for each argument the event handler is expecting. """
                },
                result='* returns nil if the arguments are invalid or the event could not be found.\n* returns true if the event was triggered successfully, and was not cancelled using cancelevent.\n* returns false if the event was triggered successfully, and was cancelled using cancelevent.' ,
            ),
            url='triggerEvent',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='triggerLatentClientEvent',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='sendTo',
                                argument_type=FunctionType(
                                    names=['table', 'element'],
                                    is_optional=True,
                                ),
                                default_value='getRootElement()',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='name',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='bandwidth',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='50000',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='persist',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='false',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='arguments',
                                argument_type=None,
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=True,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function is the same as triggerClientEvent  except the transmission rate of the data contained in the arguments can be limited\nand other network traffic is not blocked while the data is being transferred.' ,
                arguments={
                    "name": """The name of the event to trigger client side. You should register this event with addEvent and add at least one event handler using addEventHandler. """,
                    "theElement": """The element that is the Event system#Event handlers|source of the event. This could be another player, or if this isnt relevant, use the root element. """,
                    "sendTo": """The event will be sent to all players that are children of the specified element. By default this is the root element, and hence the event is sent to all players. If you specify a single player it will just be sent to that player. This argument can also be a table of player elements. """,
                    "bandwidth": """The bytes per second rate to send the data contained in the arguments. """,
                    "persist": """A bool indicating whether the transmission should be allowed to continue even after the resource that triggered it has since stopped. """,
                    "arguments...": """A list of arguments to trigger with the event. You can pass any Lua data type (except functions). You can also pass elements. The total amount of data should not exceed 100MB. """
                },
                result='returns true if the event trigger has been sent, false if invalid arguments were specified.' ,
            ),
            url='triggerLatentClientEvent',
        )
        ],
        client=[
            
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='triggerLatentServerEvent',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='event',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='bandwidth',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='5000',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='persist',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='false',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='arguments',
                                argument_type=None,
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=True,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function is the same as triggerServerEvent except the transmission rate of the data contained in the arguments can be limited and other network traffic is not blocked while the data is being transferred.' ,
                arguments={
                    "event": """The name of the event to trigger server-side. You should register this event with addEvent and add at least one event handler using addEventHandler. """,
                    "theElement": """The element that is the Event system#Event handlers|source of the event. This could be another player, or if this isnt relevant, use the root element. """,
                    "bandwidth": """The bytes per second rate to send the data contained in the arguments. """,
                    "persist": """A bool indicating whether the transmission should be allowed to continue even after the resource that triggered it has since stopped. """,
                    "arguments...": """A list of arguments to trigger with the event. You can pass any Lua data type (except functions). You can also pass elements. The total amount of data should not exceed 100MB. """
                },
                result='returns true if the event trigger has been sent, false if invalid arguments were specified.' ,
            ),
            url='triggerLatentServerEvent',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='triggerServerEvent',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='event',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='arguments',
                                argument_type=None,
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=True,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function triggers an event previously registered on the server. This is the primary means of passing information between the client and the server. Servers have a similar triggerClientEvent function that can do the reverse. You can treat this function as if it was an asynchronous function call, using triggerClientEvent to pass back any returned information if necessary.\nAlmost any data types can be passed as expected, including elements and complex nested tables. Non-element MTA data types like xmlNodes or resource pointers will not be able to be passed as they do not necessarily have a valid representation on the client. Elements of the Vector or Matrix classes cannot be passed!\nEvents are sent reliably, so the server will receive them, but there may be (but shouldnt be) a significant delay before they are received. You should take this into account when using them.\nKeep in mind the bandwidth issues when using events - dont pass a large list of arguments unless you really need to. It is marginally more efficient to pass one large event than two smaller ones.' ,
                arguments={
                    "event": """The name of the event to trigger server-side. You should register this event with addEvent and add at least one event handler using addEventHandler. """,
                    "theElement": """The element that is the Event system#Event handlers|source of the event. """,
                    "arguments...": """A list of arguments to trigger with the event. You can pass any lua data type (except functions). You can also pass elements. """
                },
                result='returns true if the event trigger has been sent, false if invalid arguments were specified or a client side element was a parameter.' ,
            ),
            url='triggerServerEvent',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='wasEventCancelled',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function checks if the last completed event was cancelled. This is mainly useful for custom events created by scripts.\nEvents can be cancelled using cancelEvent, this indicates that the resource which triggered the event should do whatever it can to reverse any changes made by whatever caused the event. See triggerEvent for a more detailed explanation of this.' ,
                arguments={
                    
                },
                result='returns true if the event was cancelled, false if it wasnt or doesnt exist.' ,
            ),
            url='wasEventCancelled',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='wasEventCancelled',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function checks if the last completed event was cancelled. This is mainly useful for custom events created by scripts.\nEvents can be cancelled using cancelEvent, this indicates that the resource which triggered the event should do whatever it can to reverse any changes made by whatever caused the event. See triggerEvent for a more detailed explanation of this.' ,
                arguments={
                    
                },
                result='returns true if the event was cancelled, false if it wasnt or doesnt exist.' ,
            ),
            url='wasEventCancelled',
        )
        ],
    )
]
