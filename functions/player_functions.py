# Autogenerated file. ANY CHANGES WILL BE OVERWRITTEN
from to_python.core.types import FunctionType, \
    FunctionArgument, \
    FunctionArgumentValues, \
    FunctionReturnTypes, \
    FunctionSignature, \
    FunctionDoc, \
    FunctionData, \
    CompoundFunctionData
     
DUMP_PARTIAL = [
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='forcePlayerMap',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePlayer',
                                argument_type=FunctionType(
                                    names=['player'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='forceOn',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function is used to forcefully show a players radar map.' ,
                arguments={
                    "thePlayer": """: A player object referencing the specified player """,
                    "forceOn": """: A boolean value representing whether or not the players radar map will be forced on """
                },
                result='' ,
            )
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='forcePlayerMap',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='forceOn',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function is used to forcefully show a players radar map.' ,
                arguments={
                    "forceOn": """: A boolean value representing whether or not the players radar map will be forced on """
                },
                result='' ,
            )
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='getAlivePlayers',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns a table of all the alive players on the server. Opposite function of getDeadPlayers.' ,
                arguments={
                    
                },
                result='returns a table of all the alive players.' ,
            )
        )
        ],
        client=[
            
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='getDeadPlayers',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns a table of all currently dead players on the server.' ,
                arguments={
                    
                },
                result='returns a table of all the dead players.' ,
            )
        )
        ],
        client=[
            
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='getLocalPlayer',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['player'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function gets the player element of the client running the current script.\nYou can use the predefined variable localPlayer instead of typing getLocalPlayer()' ,
                arguments={
                    
                },
                result='returns the local player element.' ,
            )
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='getPlayerACInfo',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePlayer',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns anti-cheat info for a player. The info returned by this function can change over time, so use the server event onPlayerACInfo instead.' ,
                arguments={
                    "thePlayer": """The player whose anti-cheat info you want to check. """
                },
                result='returns a table with the following entries:\n* detectedac: a string containing a comma separated list of anti-cheat_guide|anti-cheat codes the player has triggered.\n*d3d9size: a number representing the file size of any custom d3d9.dll the player may have installed.\n*d3d9md5: a string containing the md5 of any custom d3d9.dll the player may have installed.\n*d3d9sha256: a string containing the sha256 of any custom d3d9.dll the player may have installed.' ,
            )
        )
        ],
        client=[
            
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='getPlayerAnnounceValue',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePlayer',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='key',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='' ,
                arguments={
                    "thePlayer": """This is the Player whos value you want to retrieve. """,
                    "key": """The name of the key. """
                },
                result='this function returns a string containing the requested value if a valid key was specified or false otherwise.' ,
            )
        )
        ],
        client=[
            
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='getPlayerBlurLevel',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePlayer',
                                argument_type=FunctionType(
                                    names=['player'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function allows you to check the current blur level of a specified player.' ,
                arguments={
                    "thePlayer": """The player whose blur level you want to check. """
                },
                result='returns the players blur level if successful, false if an invalid player was given.' ,
            )
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='getBlurLevel',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function allows you to check the current blur level of a specified player.' ,
                arguments={
                    
                },
                result='returns the local blur level.' ,
            )
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='getPlayerCount',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns the number of players currently connected to the server.' ,
                arguments={
                    
                },
                result='returns the number of players connected to the server as an int.' ,
            )
        )
        ],
        client=[
            
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='getPlayerFromName',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['player'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='playerName',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns a player element for the player with the name passed to the function.' ,
                arguments={
                    "playerName": """: A string containing the name of the player you want to reference """
                },
                result='returns a player element for the player with the nickname provided. if there is no player with that name, false is returned.' ,
            )
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='getPlayerFromName',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['player'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='playerName',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns a player element for the player with the name passed to the function.' ,
                arguments={
                    "playerName": """: A string containing the name of the player you want to reference """
                },
                result='returns a player element for the player with the nickname provided. if there is no player with that name, false is returned.' ,
            )
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='getPlayerIdleTime',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePlayer',
                                argument_type=FunctionType(
                                    names=['player'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function gets the amount of time in milliseconds that a players position has not changed.' ,
                arguments={
                    "thePlayer": """: The player you wish to get the idle time of. """
                },
                result='returns the amount of time in milliseconds that a player has been idle, false otherwise.' ,
            )
        )
        ],
        client=[
            
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='getPlayerIP',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePlayer',
                                argument_type=FunctionType(
                                    names=['player'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns a string containing the IP address of the player.' ,
                arguments={
                    "thePlayer": """The player element you want to get the IP of. """
                },
                result='returns a string containing the requested playerss ip, or false if the player passed to the function is invalid.' ,
            )
        )
        ],
        client=[
            
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='getPlayerMapBoundingBox',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function gets the GUI bounding box of the radar map texture.' ,
                arguments={
                    
                },
                result='* if the players map is showing, it returns four integers: minx, miny, maxx, maxy.  these are absolute position coordinates of where the players map is drawn on the screen.\n** minx, miny represent the world coordinates -3000, 3000 (upper-left corner of the world map).\n** maxx, maxy represent the world coordinates 3000, -3000 (lower-right corner of the world map).\n** negative values may be returned if these coordinates are off screen.\n* if the map is not showing, a false boolean value is returned.' ,
            )
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='getPlayerMoney',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePlayer',
                                argument_type=FunctionType(
                                    names=['player'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Returns the amount of money a player currently has.' ,
                arguments={
                    "thePlayer": """The player you wish the retrieve the amount of money from. """
                },
                result='returns an integer with the amount of money the specified player has, false if the player is invalid.' ,
            )
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='getPlayerMoney',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Returns the amount of money a player currently has.' ,
                arguments={
                    
                },
                result='returns an integer with the amount of money the local player has.' ,
            )
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='getPlayerName',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePlayer',
                                argument_type=FunctionType(
                                    names=['player'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns a string containing the name of the specified player.' ,
                arguments={
                    "thePlayer": """the player you want to get the name of """
                },
                result='returns a string containing the requested players name, or false if the player passed to the function is invalid.' ,
            )
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='getPlayerName',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePlayer',
                                argument_type=FunctionType(
                                    names=['player'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns a string containing the name of the specified player.' ,
                arguments={
                    "thePlayer": """the player you want to get the name of """
                },
                result='returns a string containing the requested players name, or false if the player passed to the function is invalid.' ,
            )
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='getPlayerNametagColor',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePlayer',
                                argument_type=FunctionType(
                                    names=['player'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function gets the current color of a players name tag as RGB values. These are in the range 0-255.' ,
                arguments={
                    "thePlayer": """The player whose name tag RGB color values you wish to retrieve. """
                },
                result='returns red, green and blue values if an existent player was specified, false otherwise.' ,
            )
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='getPlayerNametagColor',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePlayer',
                                argument_type=FunctionType(
                                    names=['player'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function gets the current color of a players name tag as RGB values. These are in the range 0-255.' ,
                arguments={
                    "thePlayer": """The player whose name tag RGB color values you wish to retrieve. """
                },
                result='returns red, green and blue values if an existent player was specified, false otherwise.' ,
            )
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='getPlayerNametagText',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePlayer',
                                argument_type=FunctionType(
                                    names=['player'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This will allow you to retrieve the name tag a player is currently using.' ,
                arguments={
                    "thePlayer": """The person whose name tag you want to retrieve """
                },
                result='returns a string with the nametag text, false if the player is invalid.' ,
            )
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='getPlayerNametagText',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePlayer',
                                argument_type=FunctionType(
                                    names=['player'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This will allow you to retrieve the name tag a player is currently using.' ,
                arguments={
                    "thePlayer": """The person whose name tag you want to retrieve """
                },
                result='returns a string with the nametag text, false if the player is invalid.' ,
            )
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='getPlayerPing',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePlayer',
                                argument_type=FunctionType(
                                    names=['player'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns the ping of a specified player. The ping is the number of milliseconds that data takes to travel from the players client to the server or vice versa.' ,
                arguments={
                    "thePlayer": """: The player whose ping you want to determine. """
                },
                result='returns the ping as an int, or false if the player is invalid.' ,
            )
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='getPlayerPing',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePlayer',
                                argument_type=FunctionType(
                                    names=['player'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns the ping of a specified player. The ping is the number of milliseconds that data takes to travel from the players client to the server or vice versa.' ,
                arguments={
                    "thePlayer": """: The player whose ping you want to determine. """
                },
                result='returns the ping as an int, or false if the player is invalid.' ,
            )
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='getPlayerScriptDebugLevel',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePlayer',
                                argument_type=FunctionType(
                                    names=['player'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This will allow you to retrieve the player current debug script level.' ,
                arguments={
                    "thePlayer": """The person whose debug script level you want """
                },
                result='returns an int with the player debug script level, false if the player is invalid.' ,
            )
        )
        ],
        client=[
            
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='getPlayerSerial',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePlayer',
                                argument_type=FunctionType(
                                    names=['player'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns the serial for a specified player.' ,
                arguments={
                    "thePlayer": """A player object referencing the specified player. """
                },
                result='returns the serial as a string if it was found, false otherwise.' ,
            )
        )
        ],
        client=[
            
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='getPlayerVersion',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePlayer',
                                argument_type=FunctionType(
                                    names=['player'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function gets the client version of the specified player as a sortable string. The string is always 15 characters long and is formatted as follows:\n* 1 character representing the major version\n* 1 dot character\n* 1 character representing the minor version\n* 1 dot character\n* 1 character representing the maintenance version\n* 1 dash character\n* 1 character representing the build type\n* 1 dot character\n* 5 characters representing the build number\n* 1 dot character\n* 1 character representing the build revision\nAn example of a version string would be: 1.0.4-9.01746.0\nWhere the first three numbers represent the major/minor/maintenance version, i.e. 1.0.4<br>\nThe fourth number is 9, which means its a release build, (Development and beta builds have lower numbers here)<br>\nAnd the fifth and sixth numbers represent the build number.' ,
                arguments={
                    "thePlayer": """The player whose client version you wish to get. """
                },
                result='returns a string containing the client version, or false if the player is invalid.' ,
            )
        )
        ],
        client=[
            
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='getPlayerWantedLevel',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePlayer',
                                argument_type=FunctionType(
                                    names=['player'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function gets a players current wanted level. The wanted level is indicated by the amount of stars a player has on the GTA HUD.' ,
                arguments={
                    "thePlayer": """The player whose wanted level you wish to get """
                },
                result='' ,
            )
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='getPlayerWantedLevel',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function gets a players current wanted level. The wanted level is indicated by the amount of stars a player has on the GTA HUD.' ,
                arguments={
                    
                },
                result='' ,
            )
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='getRandomPlayer',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['player'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns a random player.' ,
                arguments={
                    
                },
                result='returns a random player, false if the server is empty.' ,
            )
        )
        ],
        client=[
            
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='givePlayerMoney',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePlayer',
                                argument_type=FunctionType(
                                    names=['player'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='amount',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function adds money to a players current money amount.  To set absolute values, setPlayerMoney can be used.<br>' ,
                arguments={
                    "thePlayer": """the player you are giving the money to. """,
                    "amount": """a positive integer number specifying the amount of money to give to the player. """
                },
                result='' ,
            )
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='givePlayerMoney',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='amount',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function adds money to a players current money amount.  To set absolute values, setPlayerMoney can be used.<br>' ,
                arguments={
                    "amount": """a positive integer number specifying the amount of money to give to the player. """
                },
                result='' ,
            )
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='isPlayerHudComponentVisible',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='component',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function can be used to check whether an hud component is visable or not.' ,
                arguments={
                    "component": """The component you wish to check. Valid values are: """,
                    "ammo": """The display showing how much ammo the player has in their weapon """,
                    "area_name": """The text that appears containing the name of the area a player has entered """,
                    "armour": """The display showing the players armor """,
                    "breath": """The display showing the players breath """,
                    "clock": """The display showing the in-game time """,
                    "health": """The display showing the players health """,
                    "money": """The display showing how much money the player has """,
                    "radar": """The bottom-left corner miniradar """,
                    "vehicle_name": """The text that appears containing the players vehicle name when the player enters a vehicle """,
                    "weapon": """The display showing the players weapon """,
                    "radio": """The display showing the radio label """,
                    "wanted": """The display showing the players wanted level """,
                    "crosshair": """The weapon crosshair and sniper scope """
                },
                result='returns true if the component is visable, false if not.' ,
            )
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='isPlayerMapForced',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePlayer',
                                argument_type=FunctionType(
                                    names=['player'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function checks if the specified players radar map has been forced on or not.' ,
                arguments={
                    "thePlayer": """A player object referencing the specified player """
                },
                result='returns true if the players radar map is forced on, false otherwise.' ,
            )
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='isPlayerMapForced',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function checks if the specified players radar map has been forced on or not.' ,
                arguments={
                    
                },
                result='returns true if the local players radar map is forced on, false otherwise.' ,
            )
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='isPlayerMapVisible',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function checks if the local player has their map showing.' ,
                arguments={
                    
                },
                result='returns true if the player has the map visible, false otherwise.' ,
            )
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='isPlayerMuted',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePlayer',
                                argument_type=FunctionType(
                                    names=['player'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Use this function to check if a player has been muted.' ,
                arguments={
                    "thePlayer": """The player you are checking. """
                },
                result='returns true if the player is muted and false otherwise.' ,
            )
        )
        ],
        client=[
            
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='isPlayerNametagShowing',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePlayer',
                                argument_type=FunctionType(
                                    names=['player'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function will allow you to determine if a players name tag is currently showing.' ,
                arguments={
                    "thePlayer": """The player whose current name tag condition you want to check """
                },
                result='returns true if the players name tag is being shown, false otherwise.' ,
            )
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='isPlayerNametagShowing',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePlayer',
                                argument_type=FunctionType(
                                    names=['player'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function will allow you to determine if a players name tag is currently showing.' ,
                arguments={
                    "thePlayer": """The player whose current name tag condition you want to check """
                },
                result='returns true if the players name tag is being shown, false otherwise.' ,
            )
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='isVoiceEnabled',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Added to client side.\nThis function allows you to make the server reveal whether or not voice is currently enabled.' ,
                arguments={
                    
                },
                result='returns true if the voice is enabled on the server, false otherwise.' ,
            )
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='isVoiceEnabled',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Added to client side.\nThis function allows you to make the server reveal whether or not voice is currently enabled.' ,
                arguments={
                    
                },
                result='returns true if the voice is enabled on the server, false otherwise.' ,
            )
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='redirectPlayer',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePlayer',
                                argument_type=FunctionType(
                                    names=['player'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='serverIP',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value='""',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='serverPort',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value='0',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='serverPassword',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=True,
                                ),
                                default_value='""',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function redirects the player to a specified server.' ,
                arguments={
                    "thePlayer": """The player you want to redirect """,
                    "serverIP": """The IP address (or domain name that resolves to the IP address) of the server you want to redirect the player to. Use an empty string to reconnect to the same server. """,
                    "serverPort": """The game port of the server you want to redirect the player to, this is usually 22003. Set to zero to use the same port as the current server. """,
                    "serverPassword": """The password for the server if its protected """
                },
                result='returns true if the player was redirected successfully, false if bad arguments were passed.' ,
            )
        )
        ],
        client=[
            
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='resendPlayerACInfo',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePlayer',
                                argument_type=FunctionType(
                                    names=['player'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function will force the specified player to resend their AC info, triggering the onPlayerACInfo event again.' ,
                arguments={
                    "thePlayer": """: A player object referencing the specified player """
                },
                result='returns true if the ac info will be resent, false otherwise.' ,
            )
        )
        ],
        client=[
            
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='resendPlayerModInfo',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePlayer',
                                argument_type=FunctionType(
                                    names=['player'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function will force the specified player to resend their mod info, triggering the onPlayerModInfo event again.' ,
                arguments={
                    "thePlayer": """: A player object referencing the specified player """
                },
                result='returns true if the mod info will be resent, false otherwise.' ,
            )
        )
        ],
        client=[
            
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='setPlayerAnnounceValue',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePlayer',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='key',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='value',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function allows you to change ASE announce values for any player using a specified key.\nAs an example this can be used to change the score value which will be shown at https://www.game-state.com/ game-state.coms server list.\nFor server-wide changes you can use setRuleValue!' ,
                arguments={
                    "thePlayer": """The player whos announce value you wish to change. """,
                    "key": """The key which the value will be stored at. """,
                    "value": """The value you wish to store. """
                },
                result='returns true if the value was set succesfully, false otherwise.' ,
            )
        )
        ],
        client=[
            
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='setPlayerBlurLevel',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePlayer',
                                argument_type=FunctionType(
                                    names=['player'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='level',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Sets the motion blur level on the clients screen. Accepts a value between 0 and 255.' ,
                arguments={
                    "thePlayer": """The player whose blur level will be changed. """,
                    "level": """The level to set the blur to (default: 36) """
                },
                result='' ,
            )
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='setBlurLevel',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='level',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Sets the motion blur level on the clients screen. Accepts a value between 0 and 255.' ,
                arguments={
                    "level": """The level to set the blur to (default: 36) """
                },
                result='' ,
            )
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='setPlayerHudComponentVisible',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePlayer',
                                argument_type=FunctionType(
                                    names=['player'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='component',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='show',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function will show or hide a part of the players HUD.' ,
                arguments={
                    "thePlayer": """The player element for which you wish to show/hide a HUD component """,
                    "component": """The component you wish to show or hide. Valid values are: """,
                    "all": """All of the following at the same time """,
                    "ammo": """The display showing how much ammo the player has in their weapon """,
                    "area_name": """The text that appears containing the name of the area a player has entered """,
                    "armour": """The display showing the players armor """,
                    "breath": """The display showing the players breath """,
                    "clock": """The display showing the in-game time """,
                    "health": """The display showing the players health """,
                    "money": """The display showing how much money the player has """,
                    "radar": """The bottom-left corner miniradar """,
                    "vehicle_name": """The text that appears containing the players vehicle name when the player enters a vehicle """,
                    "weapon": """The display showing the players weapon """,
                    "radio": """The display showing the radio label """,
                    "wanted": """The display showing the players wanted level """,
                    "crosshair": """The weapon crosshair and sniper scope """,
                    "show": """Specify if the component should be shown (true) or hidden (false) """
                },
                result='' ,
            )
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='setPlayerHudComponentVisible',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='component',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='show',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function will show or hide a part of the players HUD.' ,
                arguments={
                    "component": """The component you wish to show or hide. Valid values are: """,
                    "all": """All of the following at the same time """,
                    "ammo": """The display showing how much ammo the player has in their weapon """,
                    "area_name": """The text that appears containing the name of the area a player has entered """,
                    "armour": """The display showing the players armor """,
                    "breath": """The display showing the players breath """,
                    "clock": """The display showing the in-game time """,
                    "health": """The display showing the players health """,
                    "money": """The display showing how much money the player has """,
                    "radar": """The bottom-left corner miniradar """,
                    "vehicle_name": """The text that appears containing the players vehicle name when the player enters a vehicle """,
                    "weapon": """The display showing the players weapon """,
                    "radio": """The display showing the radio label """,
                    "wanted": """The display showing the players wanted level """,
                    "crosshair": """The weapon crosshair and sniper scope """,
                    "show": """Specify if the component should be shown (true) or hidden (false) """
                },
                result='' ,
            )
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='setPlayerMoney',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePlayer',
                                argument_type=FunctionType(
                                    names=['player'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='amount',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='instant',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='false',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Sets a players money to a certain value, regardless of current player money. It should be noted that setting negative values does not work and in fact gives the player large amounts of money.' ,
                arguments={
                    "thePlayer": """Which player to set the money of. """,
                    "amount": """A whole integer specifying the new amount of money the player will have. """,
                    "instant": """If set to true money will be set instantly without counting up/down like in singleplayer.}} """
                },
                result='' ,
            )
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='setPlayerMoney',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='amount',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='instant',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='false',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Sets a players money to a certain value, regardless of current player money. It should be noted that setting negative values does not work and in fact gives the player large amounts of money.' ,
                arguments={
                    "amount": """A whole integer specifying the new amount of money the local player will have. """,
                    "instant": """If set to true money will be set instantly without counting up/down like in singleplayer.}} """
                },
                result='' ,
            )
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='setPlayerMuted',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePlayer',
                                argument_type=FunctionType(
                                    names=['player'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='state',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Use this function to mute or unmute the player.' ,
                arguments={
                    "thePlayer": """The player you are muting or unmuting. """,
                    "state": """Use true to mute and false to unmute the player. """
                },
                result='returns true if the player was successfully muted or unmuted, false otherwise.' ,
            )
        )
        ],
        client=[
            
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='setPlayerName',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePlayer',
                                argument_type=FunctionType(
                                    names=['player'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='newName',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function changes the specified players name. Note that any change made to a players name with this function is not saved in their settings so the name change only lasts till they disconnect.' ,
                arguments={
                    "thePlayer": """the player that will have its name set. """,
                    "newName": """the new name to set for the player. """
                },
                result='returns true if the player name was changed succesfully, false if invalid arguments are specified.' ,
            )
        )
        ],
        client=[
            
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='setPlayerNametagColor',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePlayer',
                                argument_type=FunctionType(
                                    names=['player'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='r',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='g',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='b',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This allows you to change the RGB color mixture in the name tags of players.' ,
                arguments={
                    "thePlayer": """The player whose name tag text you wish to change the color of """,
                    "r": """The amount of red you want in the mixture of RGB (0-255 is valid) """,
                    "g": """The amount of green you want in the mixture of RGB (0-255 is valid) """,
                    "b": """The amount of blue you want in the mixture of RGB (0-255 is valid) """,
                    "false": """If false is specified instead of the colors, the nametag color will reset to defaulting to your team color. """
                },
                result='returns true if the function was successful, false otherwise.' ,
            )
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='setPlayerNametagColor',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePlayer',
                                argument_type=FunctionType(
                                    names=['player'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='r',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='g',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='b',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This allows you to change the RGB color mixture in the name tags of players.' ,
                arguments={
                    "thePlayer": """The player whose name tag text you wish to change the color of """,
                    "r": """The amount of red you want in the mixture of RGB (0-255 is valid) """,
                    "g": """The amount of green you want in the mixture of RGB (0-255 is valid) """,
                    "b": """The amount of blue you want in the mixture of RGB (0-255 is valid) """,
                    "false": """If false is specified instead of the colors, the nametag color will reset to defaulting to your team color. """
                },
                result='returns true if the function was successful, false otherwise.' ,
            )
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='setPlayerNametagShowing',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePlayer',
                                argument_type=FunctionType(
                                    names=['player'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='showing',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Use this to define whether the players name tag is visible or invisible.' ,
                arguments={
                    "thePlayer": """Define the player whos tag visiblity status you want to change """,
                    "showing": """Use true or false to show/hide the tag """
                },
                result='returns true if successful, false otherwise' ,
            )
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='setPlayerNametagShowing',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePlayer',
                                argument_type=FunctionType(
                                    names=['player'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='showing',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Use this to define whether the players name tag is visible or invisible.' ,
                arguments={
                    "thePlayer": """Define the player whos tag visiblity status you want to change """,
                    "showing": """Use true or false to show/hide the tag """
                },
                result='returns true if successful, false otherwise' ,
            )
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='setPlayerNametagText',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePlayer',
                                argument_type=FunctionType(
                                    names=['player'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='text',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This will change the text of a players nickname in the world to something besides the nickname he chose. This will not change the players actual nickname, it only changes the visible aspect inside the world (you will see his original nickname in the scoreboard and will refer to his original name in scripts).' ,
                arguments={
                    "thePlayer": """The player whose nickname text you wish to change """,
                    "text": """The new nickname text that will be displayed """
                },
                result='returns true if successful, false otherwise.' ,
            )
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='setPlayerNametagText',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePlayer',
                                argument_type=FunctionType(
                                    names=['player'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='text',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This will change the text of a players nickname in the world to something besides the nickname he chose. This will not change the players actual nickname, it only changes the visible aspect inside the world (you will see his original nickname in the scoreboard and will refer to his original name in scripts).' ,
                arguments={
                    "thePlayer": """The player whose nickname text you wish to change """,
                    "text": """The new nickname text that will be displayed """
                },
                result='returns true if successful, false otherwise.' ,
            )
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='setPlayerScriptDebugLevel',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePlayer',
                                argument_type=FunctionType(
                                    names=['player'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='level',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This will set players debug level, equivalent to Debugging|debugscript <level>.' ,
                arguments={
                    "thePlayer": """The player whose debug level you wish to change """,
                    "level": """0: close debug console, 1: only errors, 2: errors and warnings, 3: errors, warnings and info messages """
                },
                result='returns true if successful, false otherwise.' ,
            )
        )
        ],
        client=[
            
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='setPlayerVoiceBroadcastTo',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePlayer',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='broadcastTo',
                                argument_type=FunctionType(
                                    names=['mixed'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function allows you to change who can hear the voice of a player.' ,
                arguments={
                    "thePlayer": """The player you wish to change """,
                    "broadcastTo": """Element or table of elements who should hear the voice from this player """
                },
                result='returns true if the value was set successfully, false otherwise.' ,
            )
        )
        ],
        client=[
            
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='setPlayerVoiceIgnoreFrom',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePlayer',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='ignoreFrom',
                                argument_type=FunctionType(
                                    names=['mixed'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function allows you to mute voices for a player.' ,
                arguments={
                    "thePlayer": """The player you wish to change """,
                    "ignoreFrom": """Element or table of elements which the player should not hear voices from. Use nil if no one should be ignored. """
                },
                result='returns true if the value was set successfully, false otherwise.' ,
            )
        )
        ],
        client=[
            
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='setPlayerWantedLevel',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePlayer',
                                argument_type=FunctionType(
                                    names=['player'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='stars',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function is used to set a players wanted level. The wanted level is indicated by the amount of stars a player has on the GTA HUD.' ,
                arguments={
                    "thePlayer": """The player whose wanted level is to be set """,
                    "stars": """An integer from 0 to 6 representing the wanted level """
                },
                result='returns true if the wanted level was set successfully, false if any of the arguments were invalid.' ,
            )
        )
        ],
        client=[
            
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='spawnPlayer',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePlayer',
                                argument_type=FunctionType(
                                    names=['player'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='x',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='y',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='z',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='rotation',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='skinID',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='interior',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='dimension',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='theTeam',
                                argument_type=FunctionType(
                                    names=['team'],
                                    is_optional=True,
                                ),
                                default_value='getPlayerTeam(thePlayer)',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function spawns the player at an arbitary point on the map.<br>' ,
                arguments={
                    "thePlayer": """The player you want to spawn. """,
                    "x": """The x co-ordinate to spawn the player at. """,
                    "y": """The y co-ordinate to spawn the player at. """,
                    "z": """The z co-ordinate to spawn the player at. """,
                    "rotation": """rotation of the player on spawn. """,
                    "skinID": """players skin on spawn. Character Skins """,
                    "interior": """interior the player will spawn into. Interior IDs """,
                    "dimension": """The ID of the dimension that the player should be in. """,
                    "theTeam": """the team the player will join. """
                },
                result='returns true if the player was spawned successfully, false otherwise.' ,
            )
        )
        ],
        client=[
            
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='takePlayerMoney',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePlayer',
                                argument_type=FunctionType(
                                    names=['player'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='amount',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function subtracts money from a players current money amount.' ,
                arguments={
                    "thePlayer": """the player you are taking the money from. """,
                    "amount": """an integer number specifying the amount of money to take from the player. """
                },
                result='' ,
            )
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='takePlayerMoney',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='amount',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function subtracts money from a players current money amount.' ,
                arguments={
                    "amount": """an integer number specifying the amount of money to take from the player. """
                },
                result='' ,
            )
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='takePlayerScreenShot',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePlayer',
                                argument_type=FunctionType(
                                    names=['player'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='width',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='height',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='tag',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=True,
                                ),
                                default_value='""',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='quality',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='30',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='maxBandwith',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='5000',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='maxPacketSize',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='500',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function forces a client to capture the current screen output and send it back to the server. The image will contain the GTA HUD and the output of any dxDraw functions that are not flagged as post GUI. The image specifically excludes the chat box and all GUI (including the client console). The result is received with the event onPlayerScreenShot.' ,
                arguments={
                    "thePlayer": """the player to get the screen capture from. """,
                    "width": """the width of the capture image. """,
                    "height": """the height of the capture image. """,
                    "tag": """A string to help identify the screen capture. The string is passed to the matching onPlayerScreenShot event for your personal convenience. """,
                    "quality": """Quality of the final JPEG image from 0 to 100. A lower value can reduce the memory used by the image considerably which will result in faster and less intrusive uploads. """,
                    "maxBandwith": """The amount of client upload bandwidth to use (in bytes per second) when sending the image.
*'''maxPacketSize: ''' The maximum size of one packet. """
                },
                result='returns true if the function was successfully, false if invalid arguments are specified.' ,
            )
        )
        ],
        client=[
            
        ],
    )
]
