# Autogenerated file. ANY CHANGES WILL BE OVERWRITTEN
from to_python.core.types import FunctionType, \
    FunctionArgument, \
    FunctionArgumentValues, \
    FunctionReturnTypes, \
    FunctionSignature, \
    FunctionDoc, \
    FunctionData, \
    CompoundFunctionData

DUMP_PARTIAL = [
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='addBan',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['ban'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='IP',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='Username',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='Serial',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='responsibleElement',
                                argument_type=FunctionType(
                                    names=['player'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='reason',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='seconds',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function will add a ban for the specified IP/username/serial to the server.' ,
                arguments={
                    "IP": """The IP to be banned. If you dont want to ban by IP, set this to nil.
'''or''' """,
                    "Username": """The http://community.mtasa.com/ MTA Community username to be banned (now obsolete). If you dont want to ban by username, set this to nil.
'''or''' """,
                    "Serial": """The serial to be banned. If you dont want to ban by serial, set this to nil.
''' or any combination.''' """,
                    "responsibleElement": """The element that is responsible for banning the IP/username/serial. This can be a player or the root (getRootElement()). """,
                    "reason": """The reason the IP/username/serial will be banned from the server. """,
                    "seconds": """The amount of seconds the player will be banned from the server for. This can be 0 for an infinite amount of time. """
                },
                result='returns the new ban if the ip/username/serial was banned successfully, false if invalid arguments are specified.' ,
            ),
            url='addBan',
        )
        ],
        client=[
            
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='banPlayer',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['ban'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='bannedPlayer',
                                argument_type=FunctionType(
                                    names=['player'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='IP',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='true',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='Username',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='false',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='Serial',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='false',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='responsiblePlayer',
                                argument_type=FunctionType(
                                    names=['player', 'string'],
                                    is_optional=True,
                                ),
                                default_value='nil',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='reason',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=True,
                                ),
                                default_value='nil',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='seconds',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function will ban the specified player by either IP, serial or username\nThis function will ban the specified player from the server by IP.' ,
                arguments={
                    "bannedPlayer": """The player that will be banned from the server. """,
                    "IP": """Will player be banned by IP? """,
                    "Username": """Will player be banned by username? """,
                    "Serial": """Will player be banned by serial? """,
                    "responsibleElement": """The element that is responsible for banning the player. This can be a player or the root (getRootElement()) (Maximum 30 characters if using a string). """,
                    "reason": """The reason the player will be banned from the server. """,
                    "seconds": """The amount of seconds the player will be banned from the server for. This can be 0 for an infinite amount of time. """
                },
                result='returns a ban object if banned successfully, or false if unsuccessful.' ,
            ),
            url='banPlayer',
        )
        ],
        client=[
            
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='getBanAdmin',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theBan',
                                argument_type=FunctionType(
                                    names=['ban'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function will return the responsible admin (nickname of the admin) of the specified ban.' ,
                arguments={
                    "theBan": """The ban you want to return the admin of. """
                },
                result='returns a string of the admin if everything was successful, false if invalid arguments are specified if there was no admin specified for the ban.' ,
            ),
            url='getBanAdmin',
        )
        ],
        client=[
            
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='getBanIP',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theBan',
                                argument_type=FunctionType(
                                    names=['ban'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function will return the IP of the specified ban.' ,
                arguments={
                    "theBan": """The ban in which you want to return the IP of. """
                },
                result='returns a string of the ip if everything was successful, false if invalid arguments are specified if there was no ip specified for the ban.' ,
            ),
            url='getBanIP',
        )
        ],
        client=[
            
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='getBanNick',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theBan',
                                argument_type=FunctionType(
                                    names=['ban'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function will return the nickname (nickname that the player had when he was banned) of the specified ban.' ,
                arguments={
                    "theBan": """The ban element which nickname you want to return. """
                },
                result='returns a string of the nickname if everything was successfull, false if invalid arguments are specified if there was no nickname specified for the ban element.' ,
            ),
            url='getBanNick',
        )
        ],
        client=[
            
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='getBanReason',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theBan',
                                argument_type=FunctionType(
                                    names=['ban'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function will return the ban reason of the specified ban.' ,
                arguments={
                    "theBan": """The ban in which you want to return the reason of. """
                },
                result='returns a string of the reason if everything was successful, false if invalid arguments are specified if there was no reason specified for the ban.' ,
            ),
            url='getBanReason',
        )
        ],
        client=[
            
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='getBans',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function will return a table containing all the bans present in the servers banlist.xml.' ,
                arguments={
                    
                },
                result='returns a table containing all the bans.' ,
            ),
            url='getBans',
        )
        ],
        client=[
            
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='getBanSerial',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theBan',
                                argument_type=FunctionType(
                                    names=['ban'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function will return the serial of the specified ban.' ,
                arguments={
                    "theBan": """The ban you want to retrieve the serial of. """
                },
                result='returns a string of the serial if everything was successful, false if invalid arguments are specified or if there was no serial specified for the ban.' ,
            ),
            url='getBanSerial',
        )
        ],
        client=[
            
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='getBanTime',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theBan',
                                argument_type=FunctionType(
                                    names=['ban'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function will return the time the specified ban was created, in seconds.' ,
                arguments={
                    "theBan": """The ban of which you wish to retrieve the time of. """
                },
                result='* returns an integer of the banning time in the format of seconds from the year 1970.  use in conjunction with getrealtime in order to retrieve detailed information.\n* returns false if invalid arguments were specified or if there was no banning time specified for the ban.' ,
            ),
            url='getBanTime',
        )
        ],
        client=[
            
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='getBanUsername',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theBan',
                                argument_type=FunctionType(
                                    names=['ban'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function will return the username of the specified ban.' ,
                arguments={
                    "theBan": """The ban in which you wish to retrieve the username of. """
                },
                result='returns a string of the username if everything was successful, false if invalid arguments are specified if there was no username specified for the ban.' ,
            ),
            url='getBanUsername',
        )
        ],
        client=[
            
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='getUnbanTime',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theBan',
                                argument_type=FunctionType(
                                    names=['ban'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function will return the unbanning time of the specified ban in seconds.' ,
                arguments={
                    "theBan": """The ban in which you wish to retrieve the unban time of. """
                },
                result='* returns an integer of the unbanning time in the format of seconds from the year 1970.  use in conjunction with getrealtime in order to retrieve detailed information.\n* returns false if invalid arguments are specified or if there was no unbanning time specified for the ban.' ,
            ),
            url='getUnbanTime',
        )
        ],
        client=[
            
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='isBan',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theBan',
                                argument_type=FunctionType(
                                    names=['ban'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function checks whether the passed value is valid ban or not.' ,
                arguments={
                    "theBan": """The value to check """
                },
                result='returns true if the value is a ban, false otherwise.' ,
            ),
            url='isBan',
        )
        ],
        client=[
            
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='kickPlayer',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='kickedPlayer',
                                argument_type=FunctionType(
                                    names=['player'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='responsiblePlayer',
                                argument_type=FunctionType(
                                    names=['player', 'string'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='reason',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=True,
                                ),
                                default_value='""',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function will kick the specified player from the server.' ,
                arguments={
                    "kickedPlayer": """The player that will be kicked from the server """,
                    "responsiblePlayer": """The player that is responsible for the event. Note: If left out as in the second syntax, responsible player for the kick will be Console (Maximum 30 characters if using a string). """,
                    "reason": """The reason for the kick. (Maximum 64 characters before 1.5.8, Maximum 128 characters after 1.5.8) """
                },
                result='returns true if the player was kicked succesfully, false if invalid arguments are specified.' ,
            ),
            url='kickPlayer',
        )
        ],
        client=[
            
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='reloadBans',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function will reload the server ban list file.' ,
                arguments={
                    
                },
                result='returns true if the ban list was reloaded successfully, false otherwise.' ,
            ),
            url='reloadBans',
        )
        ],
        client=[
            
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='removeBan',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theBan',
                                argument_type=FunctionType(
                                    names=['ban'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='responsibleElement',
                                argument_type=FunctionType(
                                    names=['player'],
                                    is_optional=True,
                                ),
                                default_value='nil',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function will remove a specific ban.' ,
                arguments={
                    "theBan": """The ban to be removed. """,
                    "responsibleElement": """The element that is responsible for removing the ban element. This can be a player or the root (getRootElement()). """
                },
                result='returns true if the ban was removed succesfully, false if invalid arguments are specified.' ,
            ),
            url='removeBan',
        )
        ],
        client=[
            
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='setBanAdmin',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theBan',
                                argument_type=FunctionType(
                                    names=['ban'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='theAdmin',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function sets a new admin for a ban.' ,
                arguments={
                    "theBan": """The ban you want to change the admin of. """,
                    "theAdmin": """The new admin. """
                },
                result='returns true if changed, false otherwise.' ,
            ),
            url='setBanAdmin',
        )
        ],
        client=[
            
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='setBanNick',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theBan',
                                argument_type=FunctionType(
                                    names=['ban'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='theNick',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='' ,
                arguments={
                    "theBan": """The ban you want to change the nick of. """,
                    "theNick": """A string representing the nick you want to set the ban to. """
                },
                result='returns true if changed, false otherwise.' ,
            ),
            url='setBanNick',
        )
        ],
        client=[
            
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='setBanReason',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theBan',
                                argument_type=FunctionType(
                                    names=['ban'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='theReason',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function sets the reason for the specified ban.' ,
                arguments={
                    "theBan": """The ban that you wish to set the reason of. """,
                    "theReason": """the new reason (max 60 characters). """
                },
                result='returns true if the new reason was set successfully, false otherwise.' ,
            ),
            url='setBanReason',
        )
        ],
        client=[
            
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='setUnbanTime',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theBan',
                                argument_type=FunctionType(
                                    names=['ban'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='theTime',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function sets a new unban time of a given ban using unix timestamp (seconds since Jan 01 1970).' ,
                arguments={
                    "theBan": """The ban of which to change the unban time of """,
                    "theTime": """the new unban time """
                },
                result='returns true if changed successfully, false otherwise.' ,
            ),
            url='setUnbanTime',
        )
        ],
        client=[
            
        ],
    )
]
