# Autogenerated file. ANY CHANGES WILL BE OVERWRITTEN
from to_python.core.types import FunctionType, \
    FunctionArgument, \
    FunctionArgumentValues, \
    FunctionReturnTypes, \
    FunctionSignature, \
    FunctionDoc, \
    FunctionOOP, \
    FunctionData, \
    CompoundFunctionData
    
DUMP_PARTIAL = [
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='fadeCamera',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePlayer',
                                argument_type=FunctionType(
                                    names=['player'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='fadeIn',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='timeToFade',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value='1.0',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='red',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='green',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='blue',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function will fade a players camera to a color or back to normal over a specified time period. This will also affect the sound volume for the player (50% faded = 50% volume, full fade = no sound). For clientside scripts you can perform 2 fade ins or fade outs in a row, but for serverside scripts you must use one then the other. """,
                arguments={
                    "thePlayer": """The player whose camera you wish to fade. """,
                    "fadeIn": """Should the camera be faded in or out? Pass true to fade the camera in, false to fade it out to a color. """,
                    "timeToFade": """The number of seconds it should take to fade. """,
                    "red": """The amount of red in the color that the camera fades out to (0 - 255). Not required for fading in. """,
                    "green": """The amount of green in the color that the camera fades out to (0 - 255). Not required for fading in. """,
                    "blue": """The amount of blue in the color that the camera fades out to (0 - 255). Not required for fading in. """
                },
                result=""" """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='player',
                method_name="""fadeCamera""",
                field=None,
                is_static=False,
            ),
            name='fadeCamera',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='fadeCamera',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='fadeIn',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='timeToFade',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value='1.0',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='red',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='green',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='blue',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function will fade a players camera to a color or back to normal over a specified time period. This will also affect the sound volume for the player (50% faded = 50% volume, full fade = no sound). For clientside scripts you can perform 2 fade ins or fade outs in a row, but for serverside scripts you must use one then the other. """,
                arguments={
                    "fadeIn": """Should the camera be faded in our out? Pass true to fade the camera in, false to fade it out to a color. """,
                    "timeToFade": """The number of seconds it should take to fade. """,
                    "red": """The amount of red in the color that the camera fades out to (0 - 255). Not required for fading in. """,
                    "green": """The amount of green in the color that the camera fades out to (0 - 255). Not required for fading in. """,
                    "blue": """The amount of blue in the color that the camera fades out to (0 - 255). Not required for fading in. """
                },
                result=""" """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Camera',
                method_name="""fade""",
                field=None,
                is_static=True,
            ),
            name='fadeCamera',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='getCamera',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function returns an element that corresponds to the game camera """,
                arguments={
                    
                },
                result="""returns an element that corresponds to the game camera """,
            ),
            oop=None,
            name='getCamera',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='getCameraClip',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description=""" """,
                arguments={
                    
                },
                result="""*objects: if you want the camera to clip on objects.
*vehicles: if you want the camera to clip on vehicles. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Camera',
                method_name="""getClip""",
                field=None,
                is_static=True,
            ),
            name='getCameraClip',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='getCameraFieldOfView',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='cameraMode',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description=""" """,
                arguments={
                    "cameraMode": """the camera mode to get the field of view of
** "player": whilst walking/running
** "vehicle": whilst in vehicle
** "vehicle_max": the max the field of view can go to when the vehicle is moving at a high speed (must be higher than "vehicle") """
                },
                result="""returns one float - the field of view angle """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Camera',
                method_name="""getFieldOfView""",
                field="""fov""",
                is_static=True,
            ),
            name='getCameraFieldOfView',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='getCameraGoggleEffect',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function returns what goggle effect is currently affecting the camera. """,
                arguments={
                    
                },
                result="""* string indicating the current camera goggle effect. their meanings can be seen below. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Camera',
                method_name="""getGoggleEffect""",
                field="""goggleEffect""",
                is_static=True,
            ),
            name='getCameraGoggleEffect',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='getCameraInterior',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePlayer',
                                argument_type=FunctionType(
                                    names=['player'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""Returns the interior of the local camera (independent of the interior of the local player). """,
                arguments={
                    "thePlayer": """: The player whose camera interior you want to get. """
                },
                result=""" """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='player',
                method_name="""getCameraInterior""",
                field="""cameraInterior""",
                is_static=False,
            ),
            name='getCameraInterior',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='getCameraInterior',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""Returns the interior of the local camera (independent of the interior of the local player). """,
                arguments={
                    
                },
                result=""" """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Camera',
                method_name="""getInterior""",
                field="""interior""",
                is_static=True,
            ),
            name='getCameraInterior',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='getCameraMatrix',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePlayer',
                                argument_type=FunctionType(
                                    names=['player'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function gets the position of the camera and the position of the point it is facing. """,
                arguments={
                    "thePlayer": """The player whose camera matrix is to be returned. """
                },
                result=""" """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='player',
                method_name="""getCameraMatrix""",
                field="""cameraMatrix""",
                is_static=False,
            ),
            name='getCameraMatrix',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='getCameraMatrix',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function gets the position of the camera and the position of the point it is facing. """,
                arguments={
                    
                },
                result=""" """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Camera',
                method_name="""getMatrix""",
                field="""matrix""",
                is_static=True,
            ),
            name='getCameraMatrix',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='getCameraShakeLevel',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function gets the camera shake level set by setCameraShakeLevel.}} """,
                arguments={
                    
                },
                result="""returns an integer representing the camera shake level, from 0 (no shaking effect) to 255 (maximum shaking effect). by default, the camera has no shaking effect. """,
            ),
            oop=None,
            name='getCameraShakeLevel',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='getCameraTarget',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePlayer',
                                argument_type=FunctionType(
                                    names=['player'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function returns an element that corresponds to the current target of the specified players camera (i.e. what it is following). """,
                arguments={
                    "thePlayer": """The player whose camera you wish to receive the target of. """
                },
                result=""" """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='player',
                method_name="""getCameraTarget""",
                field="""cameraTarget""",
                is_static=False,
            ),
            name='getCameraTarget',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='getCameraTarget',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function returns an element that corresponds to the current target of the specified players camera (i.e. what it is following). """,
                arguments={
                    
                },
                result=""" """,
            ),
            oop=None,
            name='getCameraTarget',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='getCameraViewMode',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function allows you to get the active camera view modes. This indicates at what distance the camera will follow the player or vehicle. """,
                arguments={
                    
                },
                result=""" """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Camera',
                method_name="""getCameraViewMode""",
                field="""viewMode""",
                is_static=True,
            ),
            name='getCameraViewMode',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='setCameraClip',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='objects',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='true',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='vehicles',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='true',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function sets if the camera will collide with any objects or vehicles in its way. This means that if object clip is enabled an object is in the way of where the camera actually wants to be, the camera will try to be in front of it. This function can disable that. """,
                arguments={
                    "objects": """Sets if you want the camera to clip on objects. """,
                    "vehicles": """Sets if you want the camera to clip on vehicles. """
                },
                result="""always returns true. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Camera',
                method_name="""setClip""",
                field=None,
                is_static=True,
            ),
            name='setCameraClip',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='setCameraFieldOfView',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='cameraMode',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='fieldOfView',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description=""" """,
                arguments={
                    "cameraMode": """the camera mode to get the field of view of
** "player": whilst walking/running
** "vehicle": whilst in vehicle
** "vehicle_max": the max the field of view can go to when the vehicle is moving at a high speed (must be higher than "vehicle") """,
                    "fieldOfView": """The field of view angle, 0 to 179. """
                },
                result="""returns true if the arguments are valid, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Camera',
                method_name="""setFieldOfView""",
                field=None,
                is_static=True,
            ),
            name='setCameraFieldOfView',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='setCameraGoggleEffect',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='goggleEffect',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='noiseEnabled',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='true',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function allows you to set the cameras current goggle effect. This means you can activate nightvision or infrared effects by script """,
                arguments={
                    "goggleEffect": """: the goggle effect you wish to set """,
                    "noiseEnabled": """: whether or not there should be a fuzzy noise effect """
                },
                result="""* true if the effect was set correctly.
* false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Camera',
                method_name="""setGoggleEffect""",
                field="""goggleEffect""",
                is_static=True,
            ),
            name='setCameraGoggleEffect',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='setCameraInterior',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePlayer',
                                argument_type=FunctionType(
                                    names=['player'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='interior',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""Sets the interior of the local camera. Only the interior of the camera is changed, the local player stays in the interior he was in. """,
                arguments={
                    "thePlayer": """the player whose camera interior will be set. """,
                    "interior": """the interior to place the camera in. """
                },
                result=""" """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='player',
                method_name="""setCameraInterior""",
                field="""cameraInterior""",
                is_static=False,
            ),
            name='setCameraInterior',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='setCameraInterior',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='interior',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""Sets the interior of the local camera. Only the interior of the camera is changed, the local player stays in the interior he was in. """,
                arguments={
                    "interior": """the interior to place the camera in. """
                },
                result=""" """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Camera',
                method_name="""setInterior""",
                field="""interior""",
                is_static=True,
            ),
            name='setCameraInterior',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='setCameraMatrix',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePlayer',
                                argument_type=FunctionType(
                                    names=['player'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='positionX',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='positionY',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='positionZ',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='lookAtX',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='lookAtY',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='lookAtZ',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='roll',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='fov',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value='70',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function sets the cameras position and direction. The first three arguments are the point at which the camera lies, the last three are the point the camera faces (or the point it looks at). """,
                arguments={
                    "thePlayer": """The player whose camera is to be changed. """,
                    "positionX": """The x coordinate of the cameras position. """,
                    "positionY": """The y coordinate of the cameras position. """,
                    "positionZ": """The z coordinate of the cameras position. """,
                    "{{New feature/item|3.0141|1.4.1|7005|Instead of six coordinates, or two vectors, a Matrix can be supplied.}}": """ """,
                    "lookAtX": """The x coordinate of the point the camera faces. """,
                    "lookAtY": """The y coordinate of the point the camera faces. """,
                    "lookAtZ": """The z coordinate of the point the camera faces. """,
                    "roll": """The camera roll angle, -180 to 180. A value of 0 means the camera sits straight, positive values will turn it counter-clockwise and negative values will turn it clockwise. -180 or 180 means the camera is upside down. """,
                    "fov": """the field of view angle, 0.01 to 180. The higher this value is, the more you will be able to see what is to your sides. """
                },
                result=""" """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='player',
                method_name="""setCameraMatrix""",
                field="""cameraMatrix""",
                is_static=False,
            ),
            name='setCameraMatrix',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='setCameraMatrix',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='positionX',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='positionY',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='positionZ',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='lookAtX',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='lookAtY',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='lookAtZ',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='roll',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='fov',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value='70',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function sets the cameras position and direction. The first three arguments are the point at which the camera lies, the last three are the point the camera faces (or the point it looks at). """,
                arguments={
                    "positionX": """The x coordinate of the cameras position. """,
                    "positionY": """The y coordinate of the cameras position. """,
                    "positionZ": """The z coordinate of the cameras position. """,
                    "{{New feature/item|3.0141|1.4.1|7005|Instead of six coordinates, or two vectors, a Matrix can be supplied.}}": """ """,
                    "lookAtX": """The x coordinate of the point the camera faces. """,
                    "lookAtY": """The y coordinate of the point the camera faces. """,
                    "lookAtZ": """The z coordinate of the point the camera faces. """,
                    "roll": """The camera roll angle, -180 to 180. A value of 0 means the camera sits straight, positive values will turn it counter-clockwise and negative values will turn it clockwise. -180 or 180 means the camera is upside down. """,
                    "fov": """the field of view angle, 0.01 to 180. The higher this value is, the more you will be able to see what is to your sides. """
                },
                result=""" """,
            ),
            oop=FunctionOOP(
                description="""This is under the static class '''Camera'''""",
                class_name='Camera',
                method_name="""setMatrix""",
                field="""matrix""",
                is_static=True,
            ),
            name='setCameraMatrix',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='setCameraShakeLevel',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='shakeLevel',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function sets the camera shake level (as seen on the Are you going to San Fierro? singleplayer mission).}} """,
                arguments={
                    "shakeLevel": """: an integer between 0 and 255, which represents the camera shake intensity level. """
                },
                result="""returns true if the camera shake level was changed, false if the required argument is incorrect or missing. """,
            ),
            oop=None,
            name='setCameraShakeLevel',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            FunctionData(
            signature=FunctionSignature(
                name='setCameraTarget',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePlayer',
                                argument_type=FunctionType(
                                    names=['player'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='target',
                                argument_type=FunctionType(
                                    names=['player'],
                                    is_optional=True,
                                ),
                                default_value='nil',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function allows you to set a players camera to follow other elements instead. Currently supported element type is:
*Players """,
                arguments={
                    "thePlayer": """The player whose camera you wish to modify. """,
                    "target": """The player who you want the camera to follow. If none is specified, the camera will target the player. """
                },
                result=""" """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='player',
                method_name="""setCameraTarget""",
                field="""cameraTarget""",
                is_static=False,
            ),
            name='setCameraTarget',
        )
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='setCameraTarget',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='target',
                                argument_type=FunctionType(
                                    names=['player'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function allows you to set a players camera to follow other elements instead. Currently supported element type is:
*Players """,
                arguments={
                    "target": """The player who you want the local camera to follow. """
                },
                result=""" """,
            ),
            oop=None,
            name='setCameraTarget',
        )
        ],
    ),
    CompoundFunctionData(
        server=[
            
        ],
        client=[
            FunctionData(
            signature=FunctionSignature(
                name='setCameraViewMode',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='vehicleCameraMode',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='pedCameraMode',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description="""This function allows you to set the camera view modes. This indicates at what distance the camera will follow the player or vehicle. """,
                arguments={
                    "vehicleCameraMode": """: The view mode you wish to use when inside vehicles. """,
                    "pedCameraMode": """: The view mode you wish to use when you are not inside vehicles. """
                },
                result="""returns true if the view(s) were set correctly, false otherwise. """,
            ),
            oop=FunctionOOP(
                description=None,
                class_name='Camera',
                method_name="""setCameraViewMode""",
                field="""viewMode""",
                is_static=True,
            ),
            name='setCameraViewMode',
        )
        ],
    )
]
