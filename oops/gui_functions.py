# Autogenerated file. ANY CHANGES WILL BE OVERWRITTEN
from to_python.core.types import FunctionType, \
    FunctionArgument, \
    FunctionArgumentValues, \
    FunctionReturnTypes, \
    FunctionSignature, \
    FunctionDoc, \
    FunctionOOP, \
    FunctionOOPField, \
    CompoundOOPData, \
    FunctionData, \
    CompoundFunctionData

DUMP_PARTIAL = [
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiBlur",
                class_name='GUI widgets|GuiElement',
                method=FunctionData(
            signature=FunctionSignature(
                name='blur',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='guiElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='' ,
                arguments={
                    "guiElement": """the GUI element that you want to defocus """
                },
                result='returns true if the function was successful, false otherwise.' ,
            ),
            url='guiBlur',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiBringToFront",
                class_name='GUI widgets|GuiElement',
                method=FunctionData(
            signature=FunctionSignature(
                name='bringToFront',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='guiElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function brings a GUI element on top of others.' ,
                arguments={
                    "guiElement": """the GUI element that you want to move to the front. """
                },
                result='returns true if the function was successful, false otherwise.' ,
            ),
            url='guiBringToFront',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiCheckBoxGetSelected",
                class_name='Element/GUI/Checkbox|GuiCheckBox',
                method=FunctionData(
            signature=FunctionSignature(
                name='getSelected',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theCheckbox',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function gets a checkboxs selection state.' ,
                arguments={
                    "theCheckbox": """The checkbox you wish to retrieve the selection state of. """
                },
                result='returns true if the checkbox is selected, false if it is not.' ,
            ),
            url='guiCheckBoxGetSelected',
        ),
                field=FunctionOOPField(
                                name='selected',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiCheckBoxSetSelected",
                class_name='Element/GUI/Checkbox|GuiCheckBox',
                method=FunctionData(
            signature=FunctionSignature(
                name='setSelected',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theCheckbox',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='state',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function selects (ticks) or unselects a checkbox.' ,
                arguments={
                    "theCheckbox": """The GUI element in which you wish to change the selection state of """,
                    "state": """The state of the checkbox, where true indicates selected, and false indicates unselected. """
                },
                result='returns true if the checkboxs selection state was successfully set, false otherwise.' ,
            ),
            url='guiCheckBoxSetSelected',
        ),
                field=FunctionOOPField(
                                name='selected',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiComboBoxAddItem",
                class_name='Element/GUI/Combobox|GuiComboBox',
                method=FunctionData(
            signature=FunctionSignature(
                name='addItem',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='comboBox',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='value',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Adds an item to a combobox.' ,
                arguments={
                    "comboBox": """The combobox you want to add a row to """,
                    "value": """The text that the item will contain. """
                },
                result='returns the item id if it has been created, false otherwise.' ,
            ),
            url='guiComboBoxAddItem',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiComboBoxClear",
                class_name='Element/GUI/Combobox|GuiComboBox',
                method=FunctionData(
            signature=FunctionSignature(
                name='clear',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='comboBox',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function removes all the items from a combobox.' ,
                arguments={
                    "comboBox": """The combobox element to be cleared """
                },
                result='returns true if the combobox element is valid and has been cleared successfully, false otherwise.' ,
            ),
            url='guiComboBoxClear',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiComboBoxGetItemText",
                class_name='Element/GUI/Combobox|GuiComboBox',
                method=FunctionData(
            signature=FunctionSignature(
                name='getItemText',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='comboBox',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='itemId',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function retrieves the text from a specific combobox item.' ,
                arguments={
                    "comboBox": """The combobox containing the item youre interested in """,
                    "itemId": """The index of the item """
                },
                result='returns the text of the item if the arguments are right, false otherwise.' ,
            ),
            url='guiComboBoxGetItemText',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiComboBoxGetSelected",
                class_name='Element/GUI/Combobox|GuiComboBox',
                method=FunctionData(
            signature=FunctionSignature(
                name='getSelected',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='comboBox',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns the index of the selected combobox item.' ,
                arguments={
                    "comboBox": """the combobox you want to know the selected item index of """
                },
                result='returns the index of the selected item if the specified combobox is valid and has a selected item, -1 if no item is selected, nil otherwise.' ,
            ),
            url='guiComboBoxGetSelected',
        ),
                field=FunctionOOPField(
                                name='selected',
                                types=[
                                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiComboBoxIsOpen",
                class_name='Element/GUI/Combobox|GuiComboBox',
                method=FunctionData(
            signature=FunctionSignature(
                name='isOpen',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='comboBox',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='' ,
                arguments={
                    "comboBox": """The combo box to get the state. """
                },
                result='returns true if combobox is opened, false if combobox is closed, nil otherwise.' ,
            ),
            url='guiComboBoxIsOpen',
        ),
                field=FunctionOOPField(
                                name='open',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiComboBoxRemoveItem",
                class_name='Element/GUI/Combobox|GuiComboBox',
                method=FunctionData(
            signature=FunctionSignature(
                name='removeItem',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='comboBox',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='itemId',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function removes an item from a combobox.' ,
                arguments={
                    "comboBox": """The combobox containing the item youre interested in """,
                    "itemId": """The index of the item to remove """
                },
                result='returns true if the item was removes successfully, false otherwise.' ,
            ),
            url='guiComboBoxRemoveItem',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiComboBoxSetItemText",
                class_name='Element/GUI/Combobox|GuiComboBox',
                method=FunctionData(
            signature=FunctionSignature(
                name='setItemText',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='comboBox',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='itemId',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='text',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function changes the text of a combobox item.' ,
                arguments={
                    "comboBox": """The combobox containing the item youre interested in """,
                    "itemId": """The index of the item """,
                    "text": """The text you want to put in (does NOT accept numbers, use tostring() for that) """
                },
                result='returns true if the text was set successfully, false otherwise.' ,
            ),
            url='guiComboBoxSetItemText',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiComboBoxSetOpen",
                class_name='Element/GUI/Combobox|GuiComboBox',
                method=FunctionData(
            signature=FunctionSignature(
                name='setOpen',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='comboBox',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='state',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='' ,
                arguments={
                    "comboBox": """The combobox to be opened or closed. """,
                    "state": """The state of combobox. true, if the combobox is to be opened. false if the combobox is to be closed. """
                },
                result='returns true if is successful, false otherwise.' ,
            ),
            url='guiComboBoxSetOpen',
        ),
                field=FunctionOOPField(
                                name='open',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiComboBoxSetSelected",
                class_name='Element/GUI/Combobox|GuiComboBox',
                method=FunctionData(
            signature=FunctionSignature(
                name='setSelected',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='comboBox',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='itemIndex',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function sets the selected item from a combobox.' ,
                arguments={
                    "comboBox": """the combobox you want to select an item from """,
                    "itemIndex": """the item you want to select (item 0 is the first item). If -1 is specified, then the combo box text is set to its caption. """
                },
                result='returns true if the selected item has been changed successfully, false otherwise.' ,
            ),
            url='guiComboBoxSetSelected',
        ),
                field=FunctionOOPField(
                                name='selected',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiCreateBrowser",
                class_name='Element/gui-browser|GuiBrowser',
                method=None,
                field=None,
                is_static=True,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiCreateButton",
                class_name='Element/GUI/Button|GuiButton',
                method=None,
                field=None,
                is_static=True,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiCreateCheckBox",
                class_name='Element/GUI/Checkbox|GuiCheckBox',
                method=None,
                field=None,
                is_static=True,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiCreateComboBox",
                class_name='Element/GUI/Combobox|GuiComboBox',
                method=None,
                field=None,
                is_static=True,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiCreateEdit",
                class_name='Element/GUI/Edit_field|GuiEdit',
                method=None,
                field=None,
                is_static=True,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiCreateFont",
                class_name='Element/GUI font|GuiFont',
                method=None,
                field=None,
                is_static=True,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiCreateGridList",
                class_name='Element/GUI/Gridlist|GuiGridList',
                method=None,
                field=None,
                is_static=True,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiCreateLabel",
                class_name='Element/GUI/Text label|GuiLabel',
                method=None,
                field=None,
                is_static=True,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiCreateMemo",
                class_name='GuiMemo',
                method=None,
                field=None,
                is_static=True,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiCreateRadioButton",
                class_name='Element/GUI/Radio button|GuiRadioButton',
                method=None,
                field=None,
                is_static=True,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiCreateStaticImage",
                class_name='Element/GUI/Static_image|GuiStaticImage',
                method=None,
                field=None,
                is_static=True,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiCreateTab",
                class_name='Element/GUI/Tab|GuiTab',
                method=None,
                field=None,
                is_static=True,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiCreateTabPanel",
                class_name='Element/GUI/Tab panel|GuiTabPanel',
                method=None,
                field=None,
                is_static=True,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiCreateWindow",
                class_name='Element/GUI/Window|GuiWindow',
                method=None,
                field=None,
                is_static=True,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiDeleteTab",
                class_name='Element/GUI/Tab|GuiTab',
                method=FunctionData(
            signature=FunctionSignature(
                name='delete',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='tabToDelete',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='tabPanel',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function deletes a tab from a tab panel.' ,
                arguments={
                    "tabToDelete": """This is an element representing the tab that you want to delete. """,
                    "tabPanel": """This is the guiCreateTabPanel|tab panel parent that the tab is attached to. """
                },
                result='returns true the tab was successfully deleted, false otherwise.' ,
            ),
            url='guiDeleteTab',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiEditGetCaretIndex",
                class_name='Element/GUI/Edit_field|GuiEdit',
                method=FunctionData(
            signature=FunctionSignature(
                name='getCaretIndex',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns the caret (the text cursor) position within the editbox.' ,
                arguments={
                    "theElement": """The edit box you want to get the caret position from """
                },
                result='returns the caret index on success, false otherwise.' ,
            ),
            url='guiEditGetCaretIndex',
        ),
                field=FunctionOOPField(
                                name='caretIndex',
                                types=[
                                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiEditGetMaxLength",
                class_name='Element/GUI/Edit_field|GuiEdit',
                method=FunctionData(
            signature=FunctionSignature(
                name='getMaxLength',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='guiEdit',
                                argument_type=FunctionType(
                                    names=['gui-edit'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='' ,
                arguments={
                    "guiEdit": """The edit box you want to get the maximum text length of. """
                },
                result='returns the maximum text length on success, false otherwise.' ,
            ),
            url='guiEditGetMaxLength',
        ),
                field=FunctionOOPField(
                                name='maxLength',
                                types=[
                                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiEditIsMasked",
                class_name='None',
                method=None,
                field=FunctionOOPField(
                                name='masked',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=None,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiEditIsReadOnly",
                class_name='None',
                method=None,
                field=FunctionOOPField(
                                name='readOnly',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=None,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiEditSetCaretIndex",
                class_name='Element/GUI/Edit_field|GuiEdit',
                method=FunctionData(
            signature=FunctionSignature(
                name='setCaretIndex',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='index',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function sets the current position of the caret (the text cursor) within the edit box.' ,
                arguments={
                    "theElement": """The edit box to be changed. """,
                    "index": """An integer referring to the desired position within the box. """
                },
                result='returns true if the index was successfully set, false otherwise.' ,
            ),
            url='guiEditSetCaretIndex',
        ),
                field=FunctionOOPField(
                                name='caretIndex',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiEditSetMasked",
                class_name='Element/GUI/Edit_field|GuiEdit',
                method=FunctionData(
            signature=FunctionSignature(
                name='setMasked',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='status',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function sets or removes masking (covering up the text being typed) for password text fields.' ,
                arguments={
                    "theElement": """The edit box to be changed. """,
                    "status": """A boolean value indicating whether masking is to be enabled or disabled. """
                },
                result='returns true if the function is successful, false otherwise.' ,
            ),
            url='guiEditSetMasked',
        ),
                field=FunctionOOPField(
                                name='masked',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiEditSetMaxLength",
                class_name='Element/GUI/Edit_field|GuiEdit',
                method=FunctionData(
            signature=FunctionSignature(
                name='setMaxLength',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='guiEdit',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='length',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function sets the maximum text length that can be typed into an edit box.' ,
                arguments={
                    "theElement": """The edit box to be changed. """,
                    "length": """An integer indicating the maximum number of characters that can be typed into the box. """
                },
                result='returns true if the max length was set successfully, false otherwise.' ,
            ),
            url='guiEditSetMaxLength',
        ),
                field=FunctionOOPField(
                                name='maxLength',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiEditSetReadOnly",
                class_name='Element/GUI/Edit_field|GuiEdit',
                method=FunctionData(
            signature=FunctionSignature(
                name='setReadOnly',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='editField',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='status',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function allows you to set or remove read-only status for an edit box. If read-only is set to true, the box is not editable.' ,
                arguments={
                    "editField": """The element of the Element/GUI/Edit field|edit field to be modified. """,
                    "status": """A boolean value indicating whether read-only is to be enabled or disabled. """
                },
                result='returns true if edit fields read-only status was changed successfully, false otherwise.' ,
            ),
            url='guiEditSetReadOnly',
        ),
                field=FunctionOOPField(
                                name='readOnly',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiFocus",
                class_name='GUI widgets|GuiElement',
                method=FunctionData(
            signature=FunctionSignature(
                name='focus',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='guiElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='' ,
                arguments={
                    "guiElement": """the GUI element that you want to focus """
                },
                result='returns true if the function was successful, false otherwise.' ,
            ),
            url='guiFocus',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiGetAlpha",
                class_name='GUI widgets|GuiElement',
                method=FunctionData(
            signature=FunctionSignature(
                name='getAlpha',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='guiElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Alpha represents the transparency of a gui element.  This function allows retrieval of a gui elements current alpha.' ,
                arguments={
                    "guiElement": """The gui element in which you want to retrieve the alpha of. """
                },
                result='this function returns a positive integer in between 0 and 1 of the gui elements current alpha, or false if it could not be retrieved.' ,
            ),
            url='guiGetAlpha',
        ),
                field=FunctionOOPField(
                                name='alpha',
                                types=[
                                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiGetBrowser",
                class_name='Element/gui-browser|guiBrowser',
                method=FunctionData(
            signature=FunctionSignature(
                name='getBrowser',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['browser'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theBrowser',
                                argument_type=FunctionType(
                                    names=['gui-browser'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function gets the browser element behind a gui-browser (a browser that has been created via guiCreateBrowser).' ,
                arguments={
                    "theBrowser": """The gui-browser """
                },
                result='returns the element/browser|browser element if a correct element/gui-browser|gui-browser has been passed, false otherwise.' ,
            ),
            url='guiGetBrowser',
        ),
                field=FunctionOOPField(
                                name='browser',
                                types=[
                                    FunctionType(
                                    names=['browser'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiGetCursorType",
                class_name='GUI widgets|GuiElement',
                method=FunctionData(
            signature=FunctionSignature(
                name='getCursorType',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function is used to get the type of the current cursor image.' ,
                arguments={
                    
                },
                result='returns a string containing the cursor type:\n* none            // cursor has no image\n* arrow           // default cursor\n* sizing_ns       // n-s (up-down) sizing cursor\n* sizing_ew       // e-w (left-right) sizing cursor\n* sizing_nwse     // nw-se diagonal sizing cursor\n* sizing_nesw     // ne-sw diagonal sizing cursor\n* sizing_eswe     // es-we horizontal sizing cursor\n* move            // move cursor\n* container_drag  // drag container cursor (note: not in use)\n* segment_moving  // segment moving cursor (note: not in use)\n* segment_sizing  // segment sizing cursor (note: not in use)' ,
            ),
            url='guiGetCursorType',
        ),
                field=FunctionOOPField(
                                name='cursorType',
                                types=[
                                    FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=True,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiGetEnabled",
                class_name='GUI widgets|GuiElement',
                method=FunctionData(
            signature=FunctionSignature(
                name='getEnabled',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='guiElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function determines if a GUI element is enabled.' ,
                arguments={
                    "guiElement": """the GUI element to be checked. """
                },
                result='returns true if the element is enabled, false otherwise.' ,
            ),
            url='guiGetEnabled',
        ),
                field=FunctionOOPField(
                                name='enabled',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiGetFont",
                class_name='GUI widgets|GuiElement',
                method=FunctionData(
            signature=FunctionSignature(
                name='getFont',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='guiElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function is used to get the current font that is used to draw text in GUI elements.' ,
                arguments={
                    "guiElement": """element you wish to get the font of. """
                },
                result='*string a string containing the name of the elements current font, or false if the gui element passed to the function is invalid.\n*element  the custom gui font that is used, or nil otherwise' ,
            ),
            url='guiGetFont',
        ),
                field=FunctionOOPField(
                                name='font',
                                types=[
                                    FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                    FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiGetInputEnabled",
                class_name='GUI widgets|GuiElement',
                method=FunctionData(
            signature=FunctionSignature(
                name='isInputEnabled',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function checks whether user input is focused on the GUI or the game.' ,
                arguments={
                    
                },
                result='returns true if input is focused on gui, false if its focused on the game.' ,
            ),
            url='guiGetInputEnabled',
        ),
                field=FunctionOOPField(
                                name='inputEnabled',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=True,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiGetInputMode",
                class_name='GUI widgets|GuiElement',
                method=FunctionData(
            signature=FunctionSignature(
                name='getInputMode',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns the current input mode as set by guiSetInputMode.\nDefault mode is allow_binds.' ,
                arguments={
                    
                },
                result='returns a string defining the current input mode, potential values are:\n* allow_binds: binds are enabled, hence using a key such as t in an editbox will still activate the chatbox\n* no_binds: binds are disabled, hence using a key such as t in an editbox will not activate the chatbox\n* no_binds_when_editing: binds are always enabled except when an editable editbox or memo has input focus' ,
            ),
            url='guiGetInputMode',
        ),
                field=FunctionOOPField(
                                name='inputMode',
                                types=[
                                    FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=True,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiGetPosition",
                class_name='GUI widgets|GuiElement',
                method=FunctionData(
            signature=FunctionSignature(
                name='getPosition',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='guiElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='relative',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function allows retrieval of a GUI elements current position, relative to its parent.' ,
                arguments={
                    "guiElement": """The gui element of which you wish to retrieve the position. """,
                    "relative": """A boolean representing whether the position should be relative to the elements parent width, or the number of offset pixels from the parents origin. """
                },
                result='returns floats representing the x and y position of the element, or false if the position could not be retrieved.' ,
            ),
            url='guiGetPosition',
        ),
                field=FunctionOOPField(
                                name='position',
                                types=[
                                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiGetProperties",
                class_name='GUI widgets|GuiElement',
                method=FunctionData(
            signature=FunctionSignature(
                name='getProperties',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='guiElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function gets a list of the CEGUI property names and values of a GUI element. To find out what the different properties mean, check out the http://static.cegui.org.uk/static/WindowsLookProperties.html CEGUI properties page.' ,
                arguments={
                    "guiElement": """the GUI element you wish to get the properties of. """
                },
                result='if the function succeeds, the return value is a table. its keys are property names, the corresponding values are the values of the properties (both names and values are always strings). if the function fails, it returns false.' ,
            ),
            url='guiGetProperties',
        ),
                field=FunctionOOPField(
                                name='properties',
                                types=[
                                    FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiGetProperty",
                class_name='GUI widgets|GuiElement',
                method=FunctionData(
            signature=FunctionSignature(
                name='getProperty',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='guiElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='property',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function gets the value of a specific CEGUI property of a GUI element. For a list of properties and their meaning, see the http://static.cegui.org.uk/static/WindowsLookProperties.html CEGUI properties page.' ,
                arguments={
                    "guiElement": """the GUI element you wish to get a property of. """,
                    "property": """the name of of property you want the value of. """
                },
                result='if the function succeeds, it returns a string with the value of the property. if it fails, it returns false.' ,
            ),
            url='guiGetProperty',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiGetScreenSize",
                class_name='GUI widgets|GuiElement',
                method=FunctionData(
            signature=FunctionSignature(
                name='getScreenSize',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function retrieves the local screen size according to the resolution they are using.' ,
                arguments={
                    
                },
                result='this returns two floats representing the players screen resolution, width and height.' ,
            ),
            url='guiGetScreenSize',
        ),
                field=None,
                is_static=True,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiGetSelectedTab",
                class_name='Element/GUI/Tab panel|GuiTabPanel',
                method=FunctionData(
            signature=FunctionSignature(
                name='getSelectedTab',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='tabPanel',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns the currently selected tab in the specified Element/GUI/Tab panel|tab panel.' ,
                arguments={
                    "tabPanel": """The Element/GUI/Tab panel|tab panel which current tab you want to retrieve. """
                },
                result='returns an element of the element/gui/tab|tab if a tab was selected or nil if no tab was selected. if passed arguments were invalid or something went wrong, the function will return false.' ,
            ),
            url='guiGetSelectedTab',
        ),
                field=FunctionOOPField(
                                name='selectedTab',
                                types=[
                                    FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiGetSize",
                class_name='GUI widgets|GuiElement',
                method=FunctionData(
            signature=FunctionSignature(
                name='getSize',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='relative',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function gets the size of a GUI element.' ,
                arguments={
                    "theElement": """The GUI element to get size of. """,
                    "relative": """A boolean representing whether the size should be relative to the elements parent width, or an absolute size in pixels. """
                },
                result='returns the gui element size x and y if the function has been successful, false otherwise.' ,
            ),
            url='guiGetSize',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiGetText",
                class_name='GUI widgets|GuiElement',
                method=FunctionData(
            signature=FunctionSignature(
                name='getText',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='guiElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function is used to get the text of GUI elements like edit boxes, labels, buttons etc.' ,
                arguments={
                    "guiElement": """element you wish to get text of. """
                },
                result='returns a string containing the requested elements text, or false if the gui element passed to the function is invalid.' ,
            ),
            url='guiGetText',
        ),
                field=FunctionOOPField(
                                name='text',
                                types=[
                                    FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiGetVisible",
                class_name='GUI widgets|GuiElement',
                method=FunctionData(
            signature=FunctionSignature(
                name='getVisible',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='guiElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function determines if a GUI element is visible.' ,
                arguments={
                    "guiElement": """the GUI element to be checked """
                },
                result='returns true if the element is visible, false otherwise.' ,
            ),
            url='guiGetVisible',
        ),
                field=FunctionOOPField(
                                name='visible',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiGridListAddColumn",
                class_name='Element/GUI/Gridlist|GuiGridList',
                method=FunctionData(
            signature=FunctionSignature(
                name='addColumn',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='gridList',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='title',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='width',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function is used to create columns in grid lists.' ,
                arguments={
                    "gridList": """The grid list you want to add a column to """,
                    "title": """Title of the column """,
                    "width": """Column width, relative to the grid list width """
                },
                result='returns the column id if it was created, false otherwise.' ,
            ),
            url='guiGridListAddColumn',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiGridListAddRow",
                class_name='Element/GUI/Gridlist|GuiGridList',
                method=FunctionData(
            signature=FunctionSignature(
                name='addRow',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='gridList',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='itemText1',
                                argument_type=FunctionType(
                                    names=['int', 'string'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='itemText2',
                                argument_type=FunctionType(
                                    names=['int', 'string'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=True,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Adds a row to a grid list, and optionally add simple text items with your rows.  Use guiGridListSetItemText to add row headers.\nATTENTION: Without guiGridListSetItemText there is no row added to the grid.\nLook at the example, first you give the row a name with row = guiGridListAddRow ( playerList ), and then you use guiGridListSetItemText. }}' ,
                arguments={
                    "gridList": """The grid list you want to add a row to """,
                    "itemText1": """The text for the first column item in the row.  Either a string or a number can be passed (use numbers for sorting purposes). """,
                    "itemText2": """The text for the second column item in the row.  Either a string or a number can be passed (use numbers for sorting purposes). """,
                    "...": """Item text for any other columns """
                },
                result='returns the row id if it has been created, false otherwise.' ,
            ),
            url='guiGridListAddRow',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiGridListAutoSizeColumn",
                class_name='Element/GUI/Gridlist|GuiGridList',
                method=FunctionData(
            signature=FunctionSignature(
                name='autoSizeColumn',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='gridList',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='columnIndex',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This allows you to automatically size a column to display everything in it correctly, with the most minimal width.' ,
                arguments={
                    "gridList": """The Element/GUI/Gridlist|grid list element where the column is located. """,
                    "columnIndex": """The ID of the column you want to be auto-sized. """
                },
                result='returns true if the column was auto-sized, false otherwise.' ,
            ),
            url='guiGridListAutoSizeColumn',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiGridListClear",
                class_name='Element/GUI/Gridlist|GuiGridList',
                method=FunctionData(
            signature=FunctionSignature(
                name='clear',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='gridList',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function clears all the data from a grid list.' ,
                arguments={
                    "gridList": """The grid list element to be cleared """
                },
                result='returns true if the grid list element is valid and has been cleared successfully, false otherwise.' ,
            ),
            url='guiGridListClear',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiGridListGetColumnCount",
                class_name='Element/GUI/Gridlist|GuiGridList',
                method=FunctionData(
            signature=FunctionSignature(
                name='getColumnCount',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='gridList',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This allows you to get the count of existing columns in a gridlist.' ,
                arguments={
                    "gridList": """The grid list you want to add a column to """
                },
                result='returns an integer with the amount of columns in the gridlist, false otherwise.' ,
            ),
            url='guiGridListGetColumnCount',
        ),
                field=FunctionOOPField(
                                name='columnCount',
                                types=[
                                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiGridListGetColumnTitle",
                class_name='Element/GUI/Gridlist|GuiGridList',
                method=FunctionData(
            signature=FunctionSignature(
                name='getColumnTitle',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='guiGridlist',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='columnIndex',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function is used to get the column title of a gridlist column.' ,
                arguments={
                    "guiGridlist": """: The grid list you want to get the column title from """,
                    "columnIndex": """: Column ID """
                },
                result='returns a string containing the column title, or false otherwise.' ,
            ),
            url='guiGridListGetColumnTitle',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiGridListGetColumnWidth",
                class_name='Element/GUI/Gridlist|GuiGridList',
                method=FunctionData(
            signature=FunctionSignature(
                name='getColumnWidth',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='gridList',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='columnIndex',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='relative',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This allows you to get the width of an existing column in a gridlist.' ,
                arguments={
                    "gridList": """The grid list you want to add a column to """,
                    "columnIndex": """Column ID of the Get size """,
                    "relative": """A boolean defining whether width measurements will be relative to the Gridlist size, or absolute pixels. """
                },
                result='returns the width of the gridlist column, false if bad arguments were given.' ,
            ),
            url='guiGridListGetColumnWidth',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiGridListGetHorizontalScrollPosition",
                class_name='Element/GUI/Gridlist|GuiGridList',
                method=FunctionData(
            signature=FunctionSignature(
                name='getHorizontalScrollPosition',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='guiGridlist',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function is used to get the horizontal scroll position from a grid list' ,
                arguments={
                    "guiGridlist": """: The grid list you want to get the horizontal scroll position from """
                },
                result='returns a integer between 0 and 100 indicating the horizontal scroll position, or false otherwise.' ,
            ),
            url='guiGridListGetHorizontalScrollPosition',
        ),
                field=FunctionOOPField(
                                name='horizontalScrollPosition',
                                types=[
                                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiGridListGetItemColor",
                class_name='Element/GUI/Gridlist|GuiGridList',
                method=FunctionData(
            signature=FunctionSignature(
                name='getItemColor',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='gridList',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='rowIndex',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='columnIndex',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function gets the color of a gridlist item.' ,
                arguments={
                    "gridList": """The grid list element """,
                    "rowIndex": """Row ID """,
                    "columnIndex": """Column ID """
                },
                result='returns four int values, representing the amount of red, green, blue and alpha if successful. false otherwise.' ,
            ),
            url='guiGridListGetItemColor',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiGridListGetItemData",
                class_name='Element/GUI/Gridlist|GuiGridList',
                method=FunctionData(
            signature=FunctionSignature(
                name='getItemData',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['var'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='gridList',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='rowIndex',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='columnIndex',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='With this function you can retrieve the string data associated with an item in a Element/GUI/Gridlist|grid list. This is not the text that is displayed on the item, but an internal string that you can use to hold extra information about the item.<br/>\nNote: This function will only work after you set the items text using guiGridListSetItemText!' ,
                arguments={
                    "gridList": """the grid list containing the item youre interested in """,
                    "rowIndex": """the row index of the item """,
                    "columnIndex": """the column index of the item """
                },
                result='returns the item data of the specified item if succesful, false if one of the arguments was invalid.' ,
            ),
            url='guiGridListGetItemData',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiGridListGetItemText",
                class_name='Element/GUI/Gridlist|GuiGridList',
                method=FunctionData(
            signature=FunctionSignature(
                name='getItemText',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='gridList',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='rowIndex',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='columnIndex',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function retrieves the text from a specific grid list item.' ,
                arguments={
                    "gridList": """the gridlist containing the item youre interested in """,
                    "rowIndex": """row id of the item """,
                    "columnIndex": """column id of the item """
                },
                result='returns the text of the item if the arguments are right, false otherwise.' ,
            ),
            url='guiGridListGetItemText',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiGridListGetRowCount",
                class_name='Element/GUI/Gridlist|GuiGridList',
                method=FunctionData(
            signature=FunctionSignature(
                name='getRowCount',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='gridList',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns the number of rows in a grid list.' ,
                arguments={
                    "gridList": """The grid list to get the number of rows from. """
                },
                result='returns the number of rows if the function is successful, false otherwise.' ,
            ),
            url='guiGridListGetRowCount',
        ),
                field=FunctionOOPField(
                                name='rowCount',
                                types=[
                                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiGridListGetSelectedCount",
                class_name='Element/GUI/Gridlist|GuiGridList',
                method=FunctionData(
            signature=FunctionSignature(
                name='getSelectedCount',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='gridList',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns the amount of options selected in the specified Element/GUI/Gridlist|grid list.' ,
                arguments={
                    "gridList": """The Element/GUI/Gridlist|grid list which amount of selected items you want to retrieve. """
                },
                result='returns an integer representing the amount of selected options if everything was successful or false if invalid arguments were passed.' ,
            ),
            url='guiGridListGetSelectedCount',
        ),
                field=FunctionOOPField(
                                name='selectedCount',
                                types=[
                                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiGridListGetSelectedItem",
                class_name='Element/GUI/Gridlist|GuiGridList',
                method=FunctionData(
            signature=FunctionSignature(
                name='getSelectedItem',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='gridList',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns the row and column indexes of the selected item in a grid list. First selected row and column is (0, 0).' ,
                arguments={
                    "gridList": """the grid list you want to know the selected row index of """
                },
                result='returns the row and column indexes of the selected item if the specified grid list is valid and has a selected item, (-1, -1) if no item is selected, false otherwise.' ,
            ),
            url='guiGridListGetSelectedItem',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiGridListGetSelectedItems",
                class_name='Element/GUI/Gridlist|GuiGridList',
                method=FunctionData(
            signature=FunctionSignature(
                name='getSelectedItems',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='gridList',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns the items selected in the specified Element/GUI/Gridlist|grid list.\nNote that for some reason the column ID is 1 lower than it should be, for example 0 is returned but if you try and get the text for column 0 there is nothing, but column 1 has what you clicked on.' ,
                arguments={
                    "gridList": """The Element/GUI/Gridlist|grid list which selected items you want to retrieve. """
                },
                result='returns a table over the selected items in the element/gui/gridlist|grid list in this format:\n<syntaxhighlight lang=lua>\ntable = {\n1 = {\ncolumn, -- has the first selected items column id\nrow -- has the first selected items row id\n},\n2 = {\ncolumn,-- has the second selected items column id\nrow -- has the second selected items row id\n},\n...\n}\n</syntaxhighlight>\nif everything was successful or false if invalid arguments were passed.' ,
            ),
            url='guiGridListGetSelectedItems',
        ),
                field=FunctionOOPField(
                                name='selectedItems',
                                types=[
                                    FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiGridListGetSelectionMode",
                class_name='Element/GUI/Gridlist|GuiGridList',
                method=FunctionData(
            signature=FunctionSignature(
                name='getSelectionMode',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='gridlist',
                                argument_type=FunctionType(
                                    names=['gui-Element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='' ,
                arguments={
                    "gridlist": """The gridlist you want to get the selection mode of. """
                },
                result='returns the id of the current gridlists selection mode.' ,
            ),
            url='guiGridListGetSelectionMode',
        ),
                field=FunctionOOPField(
                                name='selectionMode',
                                types=[
                                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiGridListGetVerticalScrollPosition",
                class_name='Element/GUI/Gridlist|GuiGridList',
                method=FunctionData(
            signature=FunctionSignature(
                name='getVerticalScrollPosition',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='guiGridlist',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function is used to get the vertical scroll position from a grid list' ,
                arguments={
                    "guiGridlist": """: The grid list you want to get the vertical scroll position from """
                },
                result='returns a integer between 0 and 100 indicating the vertical scroll position, or false otherwise.' ,
            ),
            url='guiGridListGetVerticalScrollPosition',
        ),
                field=FunctionOOPField(
                                name='verticalScrollPosition',
                                types=[
                                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiGridListInsertRowAfter",
                class_name='Element/GUI/Gridlist|GuiGridList',
                method=FunctionData(
            signature=FunctionSignature(
                name='insertRowAfter',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='gridList',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='rowIndex',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This allows you to insert a new row after a specified row, and simultaneously set text. Good for inserting new rows in the middle of existing rows. To insert at the top use -1 as row index.' ,
                arguments={
                    "gridList": """The grid list you want to add a row to """,
                    "rowIndex": """Row ID of the row you want to insert the new row after. """,
                    "itemText1": """The text for the first column item in the row.  Either a string or a number can be passed (use numbers for sorting purposes). """,
                    "itemText2": """The text for the second column item in the row.  Either a string or a number can be passed (use numbers for sorting purposes). """,
                    "...": """Item text for any other columns """
                },
                result='returns true if the row was successfully added, false otherwise.' ,
            ),
            url='guiGridListInsertRowAfter',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiGridListIsSortingEnabled",
                class_name='Element/GUI/Gridlist|GuiGridList',
                method=FunctionData(
            signature=FunctionSignature(
                name='isSortingEnabled',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='guiGridlist',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='' ,
                arguments={
                    "guiGridlist": """The GUI gridlist you wish to check if sorting is enabled or not. """
                },
                result='returns true if sorting is enabled, false otherwise.' ,
            ),
            url='guiGridListIsSortingEnabled',
        ),
                field=FunctionOOPField(
                                name='sortingEnabled',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiGridListRemoveColumn",
                class_name='Element/GUI/Gridlist|GuiGridList',
                method=FunctionData(
            signature=FunctionSignature(
                name='removeColumn',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='gridList',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='columnIndex',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This allows you to delete columns that exist in grid lists.' ,
                arguments={
                    "gridList": """The grid list you want to remove a column from """,
                    "columnIndex": """Column ID """
                },
                result='returns true if the grid list column was successfully removed, false otherwise.' ,
            ),
            url='guiGridListRemoveColumn',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiGridListRemoveRow",
                class_name='Element/GUI/Gridlist|GuiGridList',
                method=FunctionData(
            signature=FunctionSignature(
                name='removeRow',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='gridList',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='rowIndex',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This allows you to delete rows that exist in grid lists.' ,
                arguments={
                    "gridList": """The grid list you want to remove a row from """,
                    "rowIndex": """The row ID which you want to remove """
                },
                result='returns true if the grid list row was successfully removed, false otherwise.' ,
            ),
            url='guiGridListRemoveRow',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiGridListSetColumnTitle",
                class_name='Element/GUI/Gridlist|GuiGridList',
                method=FunctionData(
            signature=FunctionSignature(
                name='setColumnTitle',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='guiGridlist',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='columnIndex',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='title',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function is used to change the column title of a gridlist column.' ,
                arguments={
                    "guiGridlist": """: The grid list you want to change the column title from """,
                    "columnIndex": """: Column ID """,
                    "title": """: The title of the column """
                },
                result='returns true if the new title was set, or false otherwise.' ,
            ),
            url='guiGridListSetColumnTitle',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiGridListSetColumnWidth",
                class_name='Element/GUI/Gridlist|GuiGridList',
                method=FunctionData(
            signature=FunctionSignature(
                name='setColumnWidth',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='gridList',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='columnIndex',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='width',
                                argument_type=FunctionType(
                                    names=['number'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='relative',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This allows you to set the width of an existing column in a gridlist.' ,
                arguments={
                    "gridList": """The grid list you want to add a column to """,
                    "columnIndex": """Column ID of the size you want to change """,
                    "width": """A float or integer of the width of the column depending on the relative argument. """,
                    "relative": """A boolean defining whether width measurements will be relative to the Gridlist size, or absolute pixels. """
                },
                result='returns true if the gridlist column width was successfully set, false if bad arguments were given.' ,
            ),
            url='guiGridListSetColumnWidth',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiGridListSetHorizontalScrollPosition",
                class_name='Element/GUI/Gridlist|GuiGridList',
                method=FunctionData(
            signature=FunctionSignature(
                name='setHorizontalScrollPosition',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='guiGridlist',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='fPosition',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function is used to set the horizontal scroll position from a grid list' ,
                arguments={
                    "guiGridlist": """: The grid list you want to set the horizontal scroll position from """,
                    "fPosition": """: A float representing the horizontal scroll position (0-100) """
                },
                result='returns true if the horizontal scroll position was set, or false otherwise.' ,
            ),
            url='guiGridListSetHorizontalScrollPosition',
        ),
                field=FunctionOOPField(
                                name='horizontalScrollPosition',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiGridListSetItemColor",
                class_name='Element/GUI/Gridlist|GuiGridList',
                method=FunctionData(
            signature=FunctionSignature(
                name='setItemColor',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='gridList',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='rowIndex',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='columnIndex',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='red',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='green',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='blue',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='alpha',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='255',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function changes the color of a gridlist item.' ,
                arguments={
                    "gridList": """The grid list element """,
                    "rowIndex": """Row ID """,
                    "columnIndex": """Column ID """,
                    "red": """The amount of red in the color (0-255) """,
                    "green": """The amount of green in the color (0-255) """,
                    "blue": """The amount of blue in the color (0-255) """,
                    "alpha": """The amount of alpha in the color (0-255). """
                },
                result='returns true if the item color was set successfully, false otherwise.' ,
            ),
            url='guiGridListSetItemColor',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiGridListSetItemData",
                class_name='Element/GUI/Gridlist|GuiGridList',
                method=FunctionData(
            signature=FunctionSignature(
                name='setItemData',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='gridList',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='rowIndex',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='columnIndex',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='data',
                                argument_type=FunctionType(
                                    names=['var'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function sets a Item Data associated to a grid list item.<br/>\nNote: This function will only work after you set the items text using guiGridListSetItemText!' ,
                arguments={
                    "gridList": """A gridlist element of the data you wish to set to """,
                    "rowIndex": """The row of the item you wish to set to """,
                    "columnIndex": """The column of the item you wish to set to """,
                    "data": """The data you wish to set to the item. """
                },
                result='returns true if the data was set successfully, false otherwise' ,
            ),
            url='guiGridListSetItemData',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiGridListSetItemText",
                class_name='Element/GUI/Gridlist|GuiGridList',
                method=FunctionData(
            signature=FunctionSignature(
                name='setItemText',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='gridList',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='rowIndex',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='columnIndex',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='text',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='section',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='number',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function changes the text of a gridlist item.\nNotice: This function doesnt work well with Sorting. If you are using sorting, please use the optional arguments of guiGridListAddRow as much as possible.' ,
                arguments={
                    "gridList": """The grid list element """,
                    "rowIndex": """Row ID """,
                    "columnIndex": """Column ID """,
                    "text": """The text you want to put in (does NOT accept numbers, use tostring() for that) """,
                    "section": """Determines if the item is a section """,
                    "number": """Tells whether the text item is a number value or not (used for sorting) """
                },
                result='returns true if the item text was set successfully, false otherwise.' ,
            ),
            url='guiGridListSetItemText',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiGridListSetScrollBars",
                class_name='Element/GUI/Gridlist|GuiGridList',
                method=FunctionData(
            signature=FunctionSignature(
                name='setScrollBars',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='guiGridlist',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='horizontalBar',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='verticalBar',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function allows a gridlists scrollbar to be forced on, or returned to default.' ,
                arguments={
                    "guiGridlist": """The GUI gridlist you wish to change the state of scrollbars """,
                    "horizontalBar": """A bool where true forces the horizontal scrollbar on, and false returns them to default. """,
                    "verticalBar": """A bool where true forces the verical scrollbar on, and false returns them to default. """
                },
                result='returns true if the scrollbars were successfully set, false otherwise.' ,
            ),
            url='guiGridListSetScrollBars',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiGridListSetSelectedItem",
                class_name='Element/GUI/Gridlist|GuiGridList',
                method=FunctionData(
            signature=FunctionSignature(
                name='setSelectedItem',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='gridList',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='rowIndex',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='columnIndex',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='bReset',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='true',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function selects an item from a gridlist. If you wish to deselect whatever item is selected, pass 0 as both the rowIndex and  columnIndex arguments.' ,
                arguments={
                    "gridList": """the grid list you want to select an item from """,
                    "rowIndex": """the row you want to select (index 0 is the first row) """,
                    "columnIndex": """the column you want to select (index 1 is the first column) """,
                    "bReset": """set to false for multiple selections """
                },
                result='returns true if the passed arguments are correct and the item has been selected, false otherwise.' ,
            ),
            url='guiGridListSetSelectedItem',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiGridListSetSelectionMode",
                class_name='Element/GUI/Gridlist|GuiGridList',
                method=FunctionData(
            signature=FunctionSignature(
                name='setSelectionMode',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='gridlist',
                                argument_type=FunctionType(
                                    names=['gui-Element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='mode',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function sets the selection mode of a gui gridlist.  For example, the MTA server browser selects a whole row, while the Controls dialog selects a single cell. To select multiple items you must be holding down ctrl.' ,
                arguments={
                    "gridlist": """The gridlist in which you wish to set the selection mode. """,
                    "mode": """The mode of the selection.  Can be the following values: """,
                    "0": """Single row selection """,
                    "1": """Multiple row selection """,
                    "2": """Single cell selection """,
                    "3": """Multiple cell selection """,
                    "4": """Nominated(First) single column selection """,
                    "5": """Nominated(First) multiple column selection """,
                    "6": """Single column selection """,
                    "7": """Multiple column selection """,
                    "8": """Nominated(First) single row selection """,
                    "9": """Nominated(First) multiple row selection """
                },
                result='returns true if the selection mode was successfully set, false otherwise.' ,
            ),
            url='guiGridListSetSelectionMode',
        ),
                field=FunctionOOPField(
                                name='selectionMode',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiGridListSetSortingEnabled",
                class_name='Element/GUI/Gridlist|GuiGridList',
                method=FunctionData(
            signature=FunctionSignature(
                name='setSortingEnabled',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='guiGridlist',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='enabled',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function allows the disabling or enabling of sorting within a gridlist.  Sorting is achieved by clicking a column header.  Gridlist items will be sorted according to the clicked column.  By default, gridlists have sorting enabled.  This function will allow you to toggle this.' ,
                arguments={
                    "guiGridlist": """The GUI gridlist you wish to toggle the sorting of. """,
                    "enabled": """A boolean representing whether the sorting is enabled, or disabled. """
                },
                result='returns true if sorting was successfully toggled., false otherwise.' ,
            ),
            url='guiGridListSetSortingEnabled',
        ),
                field=FunctionOOPField(
                                name='sortingEnabled',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiGridListSetVerticalScrollPosition",
                class_name='Element/GUI/Gridlist|GuiGridList',
                method=FunctionData(
            signature=FunctionSignature(
                name='setVerticalScrollPosition',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='guiGridlist',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='fPosition',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function is used to set the vertical scroll position from a grid list' ,
                arguments={
                    "guiGridlist": """: The grid list you want to set the vertical scroll position from """,
                    "fPosition": """: A float representing the vertical scroll position (0-100) """
                },
                result='returns true if the vertical scroll position was set, or false otherwise.' ,
            ),
            url='guiGridListSetVerticalScrollPosition',
        ),
                field=FunctionOOPField(
                                name='verticalScrollPosition',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiLabelGetColor",
                class_name='Element/GUI/Text label|GuiLabel',
                method=FunctionData(
            signature=FunctionSignature(
                name='getColor',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theLabel',
                                argument_type=FunctionType(
                                    names=['gui-element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function gets the color of a label.' ,
                arguments={
                    "theLabel": """The label to get color. """
                },
                result='returns three int values, representing the amount of red, green, blue if successful. false otherwise.' ,
            ),
            url='guiLabelGetColor',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiLabelGetFontHeight",
                class_name='Element/GUI/Text label|GuiLabel',
                method=FunctionData(
            signature=FunctionSignature(
                name='getFontHeight',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theLabel',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns the height of the font currently used in a GUI text label.' ,
                arguments={
                    "theLabel": """The text label to get the font height from. """
                },
                result='returns the absolute height of the font currently used in the text label if the function is successful, false otherwise.' ,
            ),
            url='guiLabelGetFontHeight',
        ),
                field=FunctionOOPField(
                                name='fontHeight',
                                types=[
                                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiLabelGetTextExtent",
                class_name='Element/GUI/Text label|GuiLabel',
                method=FunctionData(
            signature=FunctionSignature(
                name='getTextExtent',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theLabel',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns the extent, or width, of the current text inside a GUI text label.' ,
                arguments={
                    "theLabel": """The text label to get the text extent from. """
                },
                result='returns the absolute width of the current text inside the text label if the function is successful, false otherwise.' ,
            ),
            url='guiLabelGetTextExtent',
        ),
                field=FunctionOOPField(
                                name='textExtent',
                                types=[
                                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiLabelSetColor",
                class_name='Element/GUI/Text label|GuiLabel',
                method=FunctionData(
            signature=FunctionSignature(
                name='setColor',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='red',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='green',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='blue',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function allows you to set the color of a GUI label.' ,
                arguments={
                    "theElement": """The label to be changed. """,
                    "red": """An integer specifying the amount of red (0 to 255). """,
                    "green": """An integer specifying the amount of green (0 to 255). """,
                    "blue": """An integer specifying the amount of blue (0 to 255). """
                },
                result='returns true if the the color of the gui label was successfully changed, false otherwise.' ,
            ),
            url='guiLabelSetColor',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiLabelSetHorizontalAlign",
                class_name='Element/GUI/Text label|GuiLabel',
                method=FunctionData(
            signature=FunctionSignature(
                name='setHorizontalAlign',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theLabel',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='align',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='wordwrap',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='false',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function sets the horizontal alignment of a text label.' ,
                arguments={
                    "theLabel": """The text label to set the horizontal alignment on. """,
                    "align": """The alignment type. Valid type strings are:
**"left"
**"center"
**"right" """,
                    "wordwrap": """Whether or not to enable wordwrap for the gui-label. """
                },
                result='returns true on success, false otherwise.' ,
            ),
            url='guiLabelSetHorizontalAlign',
        ),
                field=FunctionOOPField(
                                name='horizontalAlign',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiLabelSetVerticalAlign",
                class_name='Element/GUI/Text label|GuiLabel',
                method=FunctionData(
            signature=FunctionSignature(
                name='setVerticalAlign',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theLabel',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='align',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function sets the vertical alignment of a text label.' ,
                arguments={
                    "theLabel": """The text label to set the vertical alignment on. """,
                    "align": """The alignment type. Valid type strings are:
**"top"
**"center"
**"bottom" """
                },
                result='returns true on success, false otherwise.' ,
            ),
            url='guiLabelSetVerticalAlign',
        ),
                field=FunctionOOPField(
                                name='verticalAlign',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiMemoGetCaretIndex",
                class_name='GuiMemo',
                method=FunctionData(
            signature=FunctionSignature(
                name='getCaretIndex',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns the caret (the text cursor) position within the memo box.' ,
                arguments={
                    "theElement": """The memo box you want to get the caret position from """
                },
                result='returns the caret index on success, false otherwise.' ,
            ),
            url='guiMemoGetCaretIndex',
        ),
                field=FunctionOOPField(
                                name='caretIndex',
                                types=[
                                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiMemoGetVerticalScrollPosition",
                class_name='GuiMemo',
                method=FunctionData(
            signature=FunctionSignature(
                name='getVerticalScrollPosition',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theMemo',
                                argument_type=FunctionType(
                                    names=['gui-memo'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='' ,
                arguments={
                    "theMemo": """: the guiCreateMemo|memo you want to know the vertical scroll position of. """
                },
                result='returns a float ranging between 0 and 100, or false otherwise.' ,
            ),
            url='guiMemoGetVerticalScrollPosition',
        ),
                field=FunctionOOPField(
                                name='verticalScrollPosition',
                                types=[
                                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiMemoIsReadOnly",
                class_name='GuiMemo',
                method=FunctionData(
            signature=FunctionSignature(
                name='isReadOnly',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theMemo',
                                argument_type=FunctionType(
                                    names=['gui-memo'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='' ,
                arguments={
                    "theMemo": """The memo to check read-only status of. """
                },
                result='returns true if the memo is read only, false if the memo isnt read only, nil otherwise.' ,
            ),
            url='guiMemoIsReadOnly',
        ),
                field=FunctionOOPField(
                                name='readOnly',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiMemoSetCaretIndex",
                class_name='GuiMemo',
                method=FunctionData(
            signature=FunctionSignature(
                name='setCaretIndex',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theMemo',
                                argument_type=FunctionType(
                                    names=['gui-memo'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='index',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function sets the current position of the caret (the text cursor) within the memo.' ,
                arguments={
                    "theMemo": """The memo edit box where the caret position is to be changed. """,
                    "index": """An integer referring to the desired character position within the box. 0 would be before the first character in the box, 1 before the second, etc. """
                },
                result='returns true if the caret was successfully moved, false otherwise.' ,
            ),
            url='guiMemoSetCaretIndex',
        ),
                field=FunctionOOPField(
                                name='caretIndex',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiMemoSetReadOnly",
                class_name='Element/GUI/Memo_field|GuiMemo',
                method=FunctionData(
            signature=FunctionSignature(
                name='setReadOnly',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theMemo',
                                argument_type=FunctionType(
                                    names=['gui-memo'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='status',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function allows you to set or remove read-only status for a GUI memo. If read-only is set to true, the contents are not editable.' ,
                arguments={
                    "theMemo": """The memo to change read-only status of. """,
                    "status": """A boolean value indicating whether read-only is to be enabled or disabled. """
                },
                result='returns true if the status was successfully changed, false otherwise.' ,
            ),
            url='guiMemoSetReadOnly',
        ),
                field=FunctionOOPField(
                                name='readOnly',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiMemoSetVerticalScrollPosition",
                class_name='GuiMemo',
                method=FunctionData(
            signature=FunctionSignature(
                name='setVerticalScrollPosition',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theMemo',
                                argument_type=FunctionType(
                                    names=['gui-memo'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='position',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='' ,
                arguments={
                    "theMemo": """: the guiCreateMemo|memo you want to change the vertical scroll position of. """,
                    "position": """: a float ranging between 0 and 100. """
                },
                result='returns true if the position was set, false otherwise.' ,
            ),
            url='guiMemoSetVerticalScrollPosition',
        ),
                field=FunctionOOPField(
                                name='verticalScrollPosition',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiMoveToBack",
                class_name='GUI widgets|GuiElement',
                method=FunctionData(
            signature=FunctionSignature(
                name='moveToBack',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='guiElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function moves a GUI element to the very back of all other GUI elements.' ,
                arguments={
                    "guiElement": """the GUI element that you want to move to the back """
                },
                result='returns true if the function was successful, false otherwise.' ,
            ),
            url='guiMoveToBack',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiRadioButtonGetSelected",
                class_name='Element/GUI/Radio button|GuiRadioButton',
                method=FunctionData(
            signature=FunctionSignature(
                name='getSelected',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='guiRadioButton',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function gets a radio buttons selection state.' ,
                arguments={
                    "guiRadioButton": """The radio button you wish to retrieve the selection state of. """
                },
                result='returns true if the radio button is selected, false if it is not.' ,
            ),
            url='guiRadioButtonGetSelected',
        ),
                field=FunctionOOPField(
                                name='selected',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiRadioButtonSetSelected",
                class_name='Element/GUI/Radio button|GuiRadioButton',
                method=FunctionData(
            signature=FunctionSignature(
                name='setSelected',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='guiRadioButton',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='state',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function selects or unselects a radio button.' ,
                arguments={
                    "guiRadioButton": """The GUI radio button in which you wish to change the selection state of """,
                    "state": """The state of the radio button, where true indicates selected, and false indicates unselected. """
                },
                result='returns true if the radio buttons selection state was successfully set, false otherwise.' ,
            ),
            url='guiRadioButtonSetSelected',
        ),
                field=FunctionOOPField(
                                name='selected',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiSetAlpha",
                class_name='GUI widgets|GuiElement',
                method=FunctionData(
            signature=FunctionSignature(
                name='setAlpha',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='guielement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='alpha',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This changes the alpha level (the visibleness/transparency) of a GUI element' ,
                arguments={
                    "guiElement": """the GUI element whose visibility is to be changed """,
                    "alpha": """The visibility/transparency of the GUI element. Ranges from 0 (fully transparent) to 1 (fully opaque). Default value is 0.80. """
                },
                result='returns true if the gui elements alpha was successfully changed, false otherwise.' ,
            ),
            url='guiSetAlpha',
        ),
                field=FunctionOOPField(
                                name='alpha',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiSetEnabled",
                class_name='GUI widgets|GuiElement',
                method=FunctionData(
            signature=FunctionSignature(
                name='setEnabled',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='guiElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='enabled',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function enables/disables a GUI element. A disabled GUI element cant be used, gets a gray aspect and doesnt receive any events.' ,
                arguments={
                    "guiElement": """the GUI element you wish to enable or disable """,
                    "enabled": """the new state """
                },
                result='if the function succeeds it returns true, if it fails it returns false.' ,
            ),
            url='guiSetEnabled',
        ),
                field=FunctionOOPField(
                                name='enabled',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiSetFont",
                class_name='GUI widgets|GuiElement',
                method=FunctionData(
            signature=FunctionSignature(
                name='setFont',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='guiElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='font',
                                argument_type=FunctionType(
                                    names=['mixed'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function sets the font of a GUI_widgets|GUI element to be used when drawing text.' ,
                arguments={
                    "guiElement": """The GUI element you wish to change the font of """,
                    "font": """Either a custom GUI font element or the name of a built-in GUI font. See Standard GUI Font Names """
                },
                result='returns true if the font has been successfully set on the gui element, false otherwise.' ,
            ),
            url='guiSetFont',
        ),
                field=FunctionOOPField(
                                name='font',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiSetInputEnabled",
                class_name='GUI widgets|GuiElement',
                method=FunctionData(
            signature=FunctionSignature(
                name='setInputEnabled',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='enabled',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function enables or disables input focus for the GUI.  This means that any keybinds or MTA binds are overidden so that text can be input into an editbox, for example.  In other words, keys such as t and y which activate the chatbox are disabled.\nguiSetInputMode can be used as an extended version of guiSetInputEnabled since it provides the same functionality with one added feature.' ,
                arguments={
                    "enabled": """true if input should go to GUI, false if it should go to the game. """
                },
                result='returns true if input mode could be changed, false if invalid parameters are passed.' ,
            ),
            url='guiSetInputEnabled',
        ),
                field=FunctionOOPField(
                                name='inputEnabled',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=True,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiSetInputMode",
                class_name='GUI widgets|GuiElement',
                method=FunctionData(
            signature=FunctionSignature(
                name='setInputMode',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='mode',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function controls the input mode to define whether or not (and when) keybinds or MTA binds are overridden (disabled) so that text can be input into an editbox, for example.\nThe binds can be either:\n* never disabled (hence using a key such as t in an editbox will still activate the chatbox)\n* always disabled (hence using a key such as t in an editbox will not activate the chatbox)\n* only disabled when actually editing an editbox or a memo (binds are always enabled except when an editbox or memo has input focus)' ,
                arguments={
                    "mode": """a string representing the desired input mode. Accepted values are: """,
                    "allow_binds": """binds are enabled, hence using a key such as t in an editbox will still activate the chatbox (default) """,
                    "no_binds": """binds are disabled, hence using a key such as t in an editbox will not activate the chatbox """,
                    "no_binds_when_editing": """binds are always enabled except when an editable editbox or memo has input focus """
                },
                result='returns true if input mode could be changed, false if invalid parameters are passed.' ,
            ),
            url='guiSetInputMode',
        ),
                field=FunctionOOPField(
                                name='inputMode',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=True,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiSetPosition",
                class_name='GUI widgets|GuiElement',
                method=FunctionData(
            signature=FunctionSignature(
                name='setPosition',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='x',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='y',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='relative',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function sets the position of a GUI element.' ,
                arguments={
                    "theElement": """The GUI element to change position for """,
                    "x": """Position over the X axis """,
                    "y": """Position over the Y axis """,
                    "relative": """Bool that indicates if the x/y positions are relative to the elements parent element. """
                },
                result='returns true if the position has been successfully set, false otherwise.' ,
            ),
            url='guiSetPosition',
        ),
                field=FunctionOOPField(
                                name='position',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiSetProperty",
                class_name='GUI widgets|GuiElement',
                method=FunctionData(
            signature=FunctionSignature(
                name='setProperty',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='guiElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='property',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='value',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function sets the value of a specific CEGUI property of a GUI element. For a list of properties and their meaning, see the http://static.cegui.org.uk/static/WindowsLookProperties.html CEGUI properties page.' ,
                arguments={
                    "guiElement": """the GUI element you wish to get a property of. """,
                    "property": """the name of of property you want the value of. """,
                    "value": """the new value for the property. """
                },
                result='if the function succeeds it returns true, if it fails it returns false.' ,
            ),
            url='guiSetProperty',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiSetSize",
                class_name='GUI widgets|GuiElement',
                method=FunctionData(
            signature=FunctionSignature(
                name='setSize',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='guiElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='width',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='height',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='relative',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function sets the dimensions (size) of a GUI element. It refers to the bounding box size for GUI elements. It does not make GUI elements smaller or larger in appearance.' ,
                arguments={
                    "guiElement": """the GUI element whose visibility is to be changed """,
                    "width": """The desired width setting for the gui element """,
                    "height": """The desired height setting for the gui element """,
                    "relative": """This is whether sizes and positioning are relative.  If this is true, then all x,y,width,height floats must be between 0 and 1, representing sizes relative to the parent. """
                },
                result='returns true if the gui elements size was set successfully, false otherwise.' ,
            ),
            url='guiSetSize',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiSetText",
                class_name='GUI widgets|GuiElement',
                method=FunctionData(
            signature=FunctionSignature(
                name='setText',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='guiElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='text',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function sets the text of a GUI element.' ,
                arguments={
                    "guiElement": """The GUI element you wish to change the text of """,
                    "text": """The new text """
                },
                result='returns true if text has been successfully set on the gui element, false otherwise.' ,
            ),
            url='guiSetText',
        ),
                field=FunctionOOPField(
                                name='text',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiSetVisible",
                class_name='GUI widgets|GuiElement',
                method=FunctionData(
            signature=FunctionSignature(
                name='setVisible',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='guiElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='state',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function changes the visibility state of a GUI element.' ,
                arguments={
                    "guiElement": """the GUI element whose visibility is to be changed """,
                    "state": """the new visibility state """
                },
                result='returns true if the elements visibility could be changed, false otherwise.' ,
            ),
            url='guiSetVisible',
        ),
                field=FunctionOOPField(
                                name='visible',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiStaticImageLoadImage",
                class_name='Element/GUI/Static_image|GuiStaticImage',
                method=FunctionData(
            signature=FunctionSignature(
                name='loadImage',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='filename',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function allows you to change the image in GUI static image element to another one. Tip: If you set other images as children you will have to use setElementCallPropagationEnabled to only affect the parent image.' ,
                arguments={
                    "theElement": """The static image element to be changed. """,
                    "filename": """A string specifying the filepath of the image file being loaded in current resource. """
                },
                result='returns true if the the image in the static image element was successfully changed, false otherwise.' ,
            ),
            url='guiStaticImageLoadImage',
        ),
                field=FunctionOOPField(
                                name='image',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiWindowIsMovable",
                class_name='None',
                method=None,
                field=FunctionOOPField(
                                name='movable',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=None,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiWindowIsSizable",
                class_name='None',
                method=None,
                field=FunctionOOPField(
                                name='sizable',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=None,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiWindowSetMovable",
                class_name='Element/GUI/Window|GuiWindow',
                method=FunctionData(
            signature=FunctionSignature(
                name='setMovable',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='status',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function allows you to specify whether or not a user can move a GUI window.' ,
                arguments={
                    "theElement": """The window to be changed. """,
                    "status": """A boolean value indicating whether the window is movable or not. """
                },
                result='returns true if the function is successful, false otherwise.' ,
            ),
            url='guiWindowSetMovable',
        ),
                field=FunctionOOPField(
                                name='movable',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="guiWindowSetSizable",
                class_name='Element/GUI/Window|GuiWindow',
                method=FunctionData(
            signature=FunctionSignature(
                name='setSizable',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='status',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function enables or disables user resizing of a GUI window.' ,
                arguments={
                    "theElement": """The window to be changed. """,
                    "status": """A boolean value indicating whether user resizing is to be enabled or disabled. """
                },
                result='returns true if the function is successful, false otherwise.' ,
            ),
            url='guiWindowSetSizable',
        ),
                field=FunctionOOPField(
                                name='sizable',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="isChatBoxInputActive",
                class_name='GUI widgets|GuiElement',
                method=FunctionData(
            signature=FunctionSignature(
                name='isChatBoxInputActive',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns whether the ingame chatbox is being used (accepting chatbox input) or not.' ,
                arguments={
                    
                },
                result='returns true if the chatbox is receiving input, false if not active.' ,
            ),
            url='isChatBoxInputActive',
        ),
                field=FunctionOOPField(
                                name='chatBoxInputActive',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=True,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="isConsoleActive",
                class_name='GUI widgets|GuiElement',
                method=FunctionData(
            signature=FunctionSignature(
                name='isConsoleActive',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns whether the ingame console window is visible or not.' ,
                arguments={
                    
                },
                result='returns true if the console is visible, false if not.' ,
            ),
            url='isConsoleActive',
        ),
                field=FunctionOOPField(
                                name='consoleActive',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="isDebugViewActive",
                class_name='GUI widgets|GuiElement',
                method=FunctionData(
            signature=FunctionSignature(
                name='isDebugViewActive',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns whether the ingame debug window is visible or not. This is the debugwindow visible using the debugscript <level> command.' ,
                arguments={
                    
                },
                result='returns true if the debug view is visible, false if not.' ,
            ),
            url='isDebugViewActive',
        ),
                field=FunctionOOPField(
                                name='debugViewActive',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=True,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="isMainMenuActive",
                class_name='GUI widgets|GuiElement',
                method=FunctionData(
            signature=FunctionSignature(
                name='isMainMenuActive',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns whether the user is in the mainmenu or not.' ,
                arguments={
                    
                },
                result='returns true if the mainmenu is visible, false if not.' ,
            ),
            url='isMainMenuActive',
        ),
                field=FunctionOOPField(
                                name='mainMenuActive',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=True,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="isMTAWindowActive",
                class_name='GUI_widgets|GuiElement',
                method=FunctionData(
            signature=FunctionSignature(
                name='isMTAWindowActive',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns whether any system windows that take focus are active. This includes:\n* Chatbox input\n* Console window\n* Main menu\n* Transferbox\nTo get the status of the debug view, see isDebugViewActive.' ,
                arguments={
                    
                },
                result='returns true if the focus is on the mta window, false if it isnt.' ,
            ),
            url='isMTAWindowActive',
        ),
                field=None,
                is_static=True,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="isTransferBoxActive",
                class_name='GUI widgets|GuiElement',
                method=FunctionData(
            signature=FunctionSignature(
                name='isTransferBoxActive',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns whether the file downloading dialog box is active or not. This appears when a resource is started and the client doesnt have all the files that resource requires the client to have.\nIts important to note that resources arent started on the client until theyre completely downloaded, so a resource cannot use this function to detect if its own files are downloaded. A client-side resource triggers the onClientResourceStart event when the files it requires are downloaded.' ,
                arguments={
                    
                },
                result='returns true if the file transfer box is visible, false if not.' ,
            ),
            url='isTransferBoxActive',
        ),
                field=None,
                is_static=True,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="setDebugViewActive",
                class_name='GUI widgets|GuiElement',
                method=FunctionData(
            signature=FunctionSignature(
                name='setDebugViewActive',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='enabled',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function enables or disables the debug window.' ,
                arguments={
                    "enabled": """true if debug window should be visible, false otherwise. """
                },
                result='returns true, false if invalid parameters are passed.' ,
            ),
            url='setDebugViewActive',
        ),
                field=FunctionOOPField(
                                name='debugViewActive',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=True,
            )
        ],
    )
]
