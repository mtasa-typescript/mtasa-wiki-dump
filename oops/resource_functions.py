# Autogenerated file. ANY CHANGES WILL BE OVERWRITTEN
from to_python.core.types import FunctionType, \
    FunctionArgument, \
    FunctionArgumentValues, \
    FunctionReturnTypes, \
    FunctionSignature, \
    FunctionDoc, \
    FunctionOOP, \
    FunctionOOPField, \
    CompoundOOPData, \
    FunctionData, \
    CompoundFunctionData

DUMP_PARTIAL = [
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="call",
                class_name='resource',
                method=FunctionData(
            signature=FunctionSignature(
                name='call',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['var'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=True,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theResource',
                                argument_type=FunctionType(
                                    names=['resource'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='theFunction',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='arguments',
                                argument_type=None,
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=True,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function is used to call a function from another resource (which must be running).\nThe function which you wish to call must first be exported within the resources meta.  For example:\n<syntaxhighlight lang=xml><meta>\n<info author=jbeta type=script description=Scoreboard resource />\n<script src=scoreboard_client.lua type=client/>\n<script src=scoreboard_exports.lua type=server/>\n<script src=scoreboard_http.lua type=server/>\n<export function=getScoreboardColumns http=true />\n<export function=getScoreboardRows http=true />\n<export function=addScoreboardColumn type=server/>\n<export function=removeScoreboardColumn type=server/>\n<export function=setPlayerScoreboardForced type=server/>\n<export function=setScoreboardForced type=client/>\n</meta></syntaxhighlight>\nThis enables other resources to call a function from this resource.\nYou cannot call a server function from the client or vice versa. See triggerServerEvent and triggerClientEvent for possibilities to do that.\nThere is an easier syntax replacing this function. For example, you can instead of:<br>\n<syntaxhighlight lang=lua>call ( getResourceFromName ( resource ), exportedFunction, 1, 2, three )</syntaxhighlight>\ndo much like a normal call:<br>\n<syntaxhighlight lang=lua>exports.resource:exportedFunction ( 1, 2, three )</syntaxhighlight>\nIf the resource name contains illegal characters (such as hyphens), you can also do:<br>\n<syntaxhighlight lang=lua>exportsresource-name:exportedFunction ( 1, 2, three )</syntaxhighlight>\nTwo extra hidden variables are passed to the exported function:\n* sourceResource - The resource that called the exported function\n* sourceResourceRoot - The resource root element of the resource which called the exported function.' ,
                arguments={
                    "theResource": """This is a resource pointer which refers to the resource you are calling a function from. """,
                    "theFunction": """This is a string with the name of the function which you want to call. """,
                    "arguments": """Any arguments you may want to pass to the function when it is called. Any number of arguments of can be specified, each being passed to the designated function. """,
                    "resource_name": """Resource name """,
                    "exportedFunction": """The name of the function you want to call. Its not a string. """
                },
                result='returns anything that the designated function has returned, if the function has no return, nil is returned. if the function does not exist, is not exported, or the call was not successful it will return false.\nreturns anything that the designated function has returned, if the function has no return, nil is returned. if the function does not exist, is not exported, or the call was not successful it will return false.' ,
            ),
            url='call',
        ),
                field=None,
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="call",
                class_name='resource',
                method=FunctionData(
            signature=FunctionSignature(
                name='call',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['var'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=True,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theResource',
                                argument_type=FunctionType(
                                    names=['resource'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='theFunction',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='arguments',
                                argument_type=None,
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=True,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function is used to call a function from another resource (which must be running).\nThe function which you wish to call must first be exported within the resources meta.  For example:\n<syntaxhighlight lang=xml><meta>\n<info author=jbeta type=script description=Scoreboard resource />\n<script src=scoreboard_client.lua type=client/>\n<script src=scoreboard_exports.lua type=server/>\n<script src=scoreboard_http.lua type=server/>\n<export function=getScoreboardColumns http=true />\n<export function=getScoreboardRows http=true />\n<export function=addScoreboardColumn type=server/>\n<export function=removeScoreboardColumn type=server/>\n<export function=setPlayerScoreboardForced type=server/>\n<export function=setScoreboardForced type=client/>\n</meta></syntaxhighlight>\nThis enables other resources to call a function from this resource.\nYou cannot call a server function from the client or vice versa. See triggerServerEvent and triggerClientEvent for possibilities to do that.\nThere is an easier syntax replacing this function. For example, you can instead of:<br>\n<syntaxhighlight lang=lua>call ( getResourceFromName ( resource ), exportedFunction, 1, 2, three )</syntaxhighlight>\ndo much like a normal call:<br>\n<syntaxhighlight lang=lua>exports.resource:exportedFunction ( 1, 2, three )</syntaxhighlight>\nIf the resource name contains illegal characters (such as hyphens), you can also do:<br>\n<syntaxhighlight lang=lua>exportsresource-name:exportedFunction ( 1, 2, three )</syntaxhighlight>\nTwo extra hidden variables are passed to the exported function:\n* sourceResource - The resource that called the exported function\n* sourceResourceRoot - The resource root element of the resource which called the exported function.' ,
                arguments={
                    "theResource": """This is a resource pointer which refers to the resource you are calling a function from. """,
                    "theFunction": """This is a string with the name of the function which you want to call. """,
                    "arguments": """Any arguments you may want to pass to the function when it is called. Any number of arguments of can be specified, each being passed to the designated function. """,
                    "resource_name": """Resource name """,
                    "exportedFunction": """The name of the function you want to call. Its not a string. """
                },
                result='returns anything that the designated function has returned, if the function has no return, nil is returned. if the function does not exist, is not exported, or the call was not successful it will return false.\nreturns anything that the designated function has returned, if the function has no return, nil is returned. if the function does not exist, is not exported, or the call was not successful it will return false.' ,
            ),
            url='call',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="copyResource",
                class_name='resource',
                method=FunctionData(
            signature=FunctionSignature(
                name='copy',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['resource'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theResource',
                                argument_type=FunctionType(
                                    names=['resource'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='newResourceName',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='organizationalDir',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function copies a specified resource with a new name.' ,
                arguments={
                    "theResource": """the resource which is going to be copied """,
                    "newResourceName": """the name that the copied resource will receive """,
                    "organizationalDir": """: A string containing the path where the resource should be copied to (e.g. gamemodes/amx). """
                },
                result='returns the resource element of the copy. returns false if the arguments are incorrect.' ,
            ),
            url='copyResource',
        ),
                field=None,
                is_static=False,
            )
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="createResource",
                class_name='Resource',
                method=None,
                field=None,
                is_static=True,
            )
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description="""This function is a static function underneath the Resource class.""",
                base_function_name="deleteResource",
                class_name='Resource',
                method=FunctionData(
            signature=FunctionSignature(
                name='delete',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='resourceName',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function deletes a resource from the MTA memory and moves it to the /resources-cache/trash/ directory.' ,
                arguments={
                    "resourceName": """The name of resource to delete. """
                },
                result='returns true if the resource has been deleted successfully, false otherwise.' ,
            ),
            url='deleteResource',
        ),
                field=None,
                is_static=True,
            )
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="getResourceACLRequests",
                class_name='resource',
                method=FunctionData(
            signature=FunctionSignature(
                name='getACLRequests',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theResource',
                                argument_type=FunctionType(
                                    names=['resource'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function retrieves the ACL request section from the meta.xml file of the given resource.' ,
                arguments={
                    "theResource": """the resource to get the ACL requests for. """
                },
                result='returns a table with the acl requests for the given resource, or false if the resource is not valid. a valid resource with no acl requests will return an empty table.' ,
            ),
            url='getResourceACLRequests',
        ),
                field=FunctionOOPField(
                                name='aclRequests',
                                types=[
                                    FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="getResourceDynamicElementRoot",
                class_name='resource',
                method=FunctionData(
            signature=FunctionSignature(
                name='getDynamicElementRoot',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theResource',
                                argument_type=FunctionType(
                                    names=['resource'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function retrieves the dynamic element root of a specified resource. The dynamic element root is the parent of elements that are created by scripts (e.g. with createObject) unless they specify a different parent.' ,
                arguments={
                    "theResource": """the resource of which dynamic element root we want. """
                },
                result='returns an element of the resources dynamic element root if the resource specified was valid and active (currently running), false otherwise.' ,
            ),
            url='getResourceDynamicElementRoot',
        ),
                field=FunctionOOPField(
                                name='dynamicElementRoot',
                                types=[
                                    FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getResourceDynamicElementRoot",
                class_name='resource',
                method=FunctionData(
            signature=FunctionSignature(
                name='getDynamicElementRoot',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theResource',
                                argument_type=FunctionType(
                                    names=['resource'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function retrieves the dynamic element root of a specified resource. The dynamic element root is the parent of elements that are created by scripts (e.g. with createObject) unless they specify a different parent.' ,
                arguments={
                    "theResource": """the resource of which dynamic element root we want. """
                },
                result='returns an element of the resources dynamic element root if the resource specified was valid and active (currently running), false otherwise.' ,
            ),
            url='getResourceDynamicElementRoot',
        ),
                field=FunctionOOPField(
                                name='dynamicElementRoot',
                                types=[
                                    FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="getResourceExportedFunctions",
                class_name='resource',
                method=FunctionData(
            signature=FunctionSignature(
                name='getExportedFunctions',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theResource',
                                argument_type=FunctionType(
                                    names=['resource'],
                                    is_optional=True,
                                ),
                                default_value='getThisResource()',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Returns a table containing the names of the functions that a resource exports. It will return the exports of the current resource if there is no argument passed in.' ,
                arguments={
                    "theResource": """the resource of which you want to know the call|exported functions. """
                },
                result='returns a table of function names if successful, false otherwise.' ,
            ),
            url='getResourceExportedFunctions',
        ),
                field=FunctionOOPField(
                                name='exportedFunctions',
                                types=[
                                    FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getResourceExportedFunctions",
                class_name='resource',
                method=FunctionData(
            signature=FunctionSignature(
                name='getExportedFunctions',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theResource',
                                argument_type=FunctionType(
                                    names=['resource'],
                                    is_optional=True,
                                ),
                                default_value='getThisResource()',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Returns a table containing the names of the functions that a resource exports. It will return the exports of the current resource if there is no argument passed in.' ,
                arguments={
                    "theResource": """the resource of which you want to know the call|exported functions. """
                },
                result='returns a table of function names if successful, false otherwise.' ,
            ),
            url='getResourceExportedFunctions',
        ),
                field=FunctionOOPField(
                                name='exportedFunctions',
                                types=[
                                    FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description="""This function is a static function underneath the Resource class. {{New feature/item|3.0141|1.4.1|7005|OOP function available client side}}""",
                base_function_name="getResourceFromName",
                class_name='Resource',
                method=FunctionData(
            signature=FunctionSignature(
                name='getFromName',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['resource'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='resourceName',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function is used to retrieve a resource from its name. A resources name is the same as its folder or file archive name on the server (without the extension).' ,
                arguments={
                    "resourceName": """the name of the resource you wish to get. """
                },
                result='returns the resource with the specified name, or false if no resource of that name exists. note that clientside this will also return false for resources that are in the loaded state, since the client is unaware of resources that have not been started.' ,
            ),
            url='getResourceFromName',
        ),
                field=None,
                is_static=True,
            )
        ],
        client=[
            FunctionOOP(
                description="""This function is a static function underneath the Resource class. {{New feature/item|3.0141|1.4.1|7005|OOP function available client side}}""",
                base_function_name="getResourceFromName",
                class_name='Resource',
                method=FunctionData(
            signature=FunctionSignature(
                name='getFromName',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['resource'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='resourceName',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function is used to retrieve a resource from its name. A resources name is the same as its folder or file archive name on the server (without the extension).' ,
                arguments={
                    "resourceName": """the name of the resource you wish to get. """
                },
                result='returns the resource with the specified name, or false if no resource of that name exists. note that clientside this will also return false for resources that are in the loaded state, since the client is unaware of resources that have not been started.' ,
            ),
            url='getResourceFromName',
        ),
                field=None,
                is_static=True,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="getResourceInfo",
                class_name='resource',
                method=FunctionData(
            signature=FunctionSignature(
                name='getInfo',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theResource',
                                argument_type=FunctionType(
                                    names=['resource'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='attribute',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function retrieves the value of any attribute in a resource info tag.' ,
                arguments={
                    "theResource": """the resource we are getting the info from. """,
                    "attribute": """the name of the attribute we want info about. """
                },
                result='returns a string with the attribute value if it exists, false otherwise.' ,
            ),
            url='getResourceInfo',
        ),
                field=None,
                is_static=False,
            )
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="getResourceLastStartTime",
                class_name='resource',
                method=FunctionData(
            signature=FunctionSignature(
                name='getLastStartTime',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theResource',
                                argument_type=FunctionType(
                                    names=['resource'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Used to check the last starting time and date of a resource' ,
                arguments={
                    "theResource": """The resource of which youd like to check the last starting time. """
                },
                result='if successful, returns the unix timestamp when the resource was last started, or the string never if the resource has not been started yet, otherwise false. use in conjunction with getrealtime in order to retrieve detailed information.\nreturns a string with the time and date, or false if the resource does not exist.' ,
            ),
            url='getResourceLastStartTime',
        ),
                field=FunctionOOPField(
                                name='lastStartTime',
                                types=[
                                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="getResourceLoadFailureReason",
                class_name='resource',
                method=FunctionData(
            signature=FunctionSignature(
                name='getLoadFailureReason',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theResource',
                                argument_type=FunctionType(
                                    names=['resource'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function retrieves the reason why a resource failed to start.' ,
                arguments={
                    "theResource": """The resource you wish to check. """
                },
                result='if the resource failed to load, returns a string with the failure reason in it. if it loaded successfully, returns an empty string. returns false if the resource doesnt exist.' ,
            ),
            url='getResourceLoadFailureReason',
        ),
                field=FunctionOOPField(
                                name='loadFailureReason',
                                types=[
                                    FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="getResourceLoadTime",
                class_name='resource',
                method=FunctionData(
            signature=FunctionSignature(
                name='getLoadTime',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='res',
                                argument_type=FunctionType(
                                    names=['resource'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Gets the date and time at which a resource was last loaded in the server.' ,
                arguments={
                    "res": """the resource you want to know the load time of. """
                },
                result='if successful, returns the unix timestamp when the resource was loaded, otherwise false. use in conjunction with getrealtime in order to retrieve detailed information.\nif successful, returns a string with the date and time that the resource was last loaded into memory (for example when the server started, or when the resource was changed and reloaded). returns false on failure.\nan example string is fri mar 28 13:51:04 2008.' ,
            ),
            url='getResourceLoadTime',
        ),
                field=FunctionOOPField(
                                name='loadTime',
                                types=[
                                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="getResourceMapRootElement",
                class_name='resource',
                method=FunctionData(
            signature=FunctionSignature(
                name='getMapRootElement',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theResource',
                                argument_type=FunctionType(
                                    names=['resource'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='mapName',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function retrieves the root element of a certain map in a specified resource.' ,
                arguments={
                    "theResource": """the resource where the map is located """,
                    "mapName": """name of the maps which root element we want to retrieve, file extension is required """
                },
                result='returns an the resources map root element if the map exists and resource specified was valid and active (currently running), false otherwise.' ,
            ),
            url='getResourceMapRootElement',
        ),
                field=None,
                is_static=False,
            )
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="getResourceName",
                class_name='resource',
                method=FunctionData(
            signature=FunctionSignature(
                name='getName',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='res',
                                argument_type=FunctionType(
                                    names=['resource'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function gets the name of the specified resource.' ,
                arguments={
                    "res": """The resource you wish to get the name of. """
                },
                result='returns a string with the resource name in it, or false if the resource does not exist.' ,
            ),
            url='getResourceName',
        ),
                field=FunctionOOPField(
                                name='name',
                                types=[
                                    FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getResourceName",
                class_name='resource',
                method=FunctionData(
            signature=FunctionSignature(
                name='getName',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='res',
                                argument_type=FunctionType(
                                    names=['resource'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function gets the name of the specified resource.' ,
                arguments={
                    "res": """The resource you wish to get the name of. """
                },
                result='returns a string with the resource name in it, or false if the resource does not exist.' ,
            ),
            url='getResourceName',
        ),
                field=FunctionOOPField(
                                name='name',
                                types=[
                                    FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="getResourceOrganizationalPath",
                class_name='resource',
                method=FunctionData(
            signature=FunctionSignature(
                name='getOrganizationalPath',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theResource',
                                argument_type=FunctionType(
                                    names=['resource'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns the organizational file path (e.g. admin) of a resource.' ,
                arguments={
                    "theResource": """the resource of which you want to know the organizational path """
                },
                result='returns the organizational folder name of the resource. it returns empty string if the resource is on root resources folder. it returns false if the resource could not be found.' ,
            ),
            url='getResourceOrganizationalPath',
        ),
                field=FunctionOOPField(
                                name='organizationalPath',
                                types=[
                                    FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="getResourceRootElement",
                class_name='resource',
                method=FunctionData(
            signature=FunctionSignature(
                name='getRootElement',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theResource',
                                argument_type=FunctionType(
                                    names=['resource'],
                                    is_optional=True,
                                ),
                                default_value='getThisResource()',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function retrieves a resources root element. The resources root element is the element in the element tree which is the parent of all elements that belong to a particular resource (except for elements specifically created elsewhere). You can attach event handlers to this element to easily capture events that originate from your resource (and global events that originate from the root element).\nNote: every resource has a Predefined_variables_list|predefined global variable called resourceRoot whose value is the root element of that resource.' ,
                arguments={
                    "theResource": """the resource whose root element we are getting. If not specified, assumes the current resource. (the resource returned from getThisResource) """
                },
                result='returns an element representing the resources root, false if the specified resource doesnt exist.' ,
            ),
            url='getResourceRootElement',
        ),
                field=FunctionOOPField(
                                name='rootElement',
                                types=[
                                    FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getResourceRootElement",
                class_name='resource',
                method=FunctionData(
            signature=FunctionSignature(
                name='getRootElement',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theResource',
                                argument_type=FunctionType(
                                    names=['resource'],
                                    is_optional=True,
                                ),
                                default_value='getThisResource()',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function retrieves a resources root element. The resources root element is the element in the element tree which is the parent of all elements that belong to a particular resource (except for elements specifically created elsewhere). You can attach event handlers to this element to easily capture events that originate from your resource (and global events that originate from the root element).\nNote: every resource has a Predefined_variables_list|predefined global variable called resourceRoot whose value is the root element of that resource.' ,
                arguments={
                    "theResource": """the resource whose root element we are getting. If not specified, assumes the current resource. (the resource returned from getThisResource) """
                },
                result='returns an element representing the resources root, false if the specified resource doesnt exist.' ,
            ),
            url='getResourceRootElement',
        ),
                field=FunctionOOPField(
                                name='rootElement',
                                types=[
                                    FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="getResources",
                class_name='Resource',
                method=FunctionData(
            signature=FunctionSignature(
                name='getAll',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function retrieves a table of all the resources that exist on the server.' ,
                arguments={
                    
                },
                result='returns a table of resources.' ,
            ),
            url='getResources',
        ),
                field=None,
                is_static=True,
            )
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description="""This function is a static function underneath the Resource class.""",
                base_function_name="getThisResource",
                class_name='Resource',
                method=FunctionData(
            signature=FunctionSignature(
                name='getThis',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['resource'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function retrieves the resource from which the function call was made.' ,
                arguments={
                    
                },
                result='returns the resource in which the current script is.' ,
            ),
            url='getThisResource',
        ),
                field=None,
                is_static=True,
            )
        ],
        client=[
            FunctionOOP(
                description="""This function is a static function underneath the Resource class.""",
                base_function_name="getThisResource",
                class_name='Resource',
                method=FunctionData(
            signature=FunctionSignature(
                name='getThis',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['resource'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function retrieves the resource from which the function call was made.' ,
                arguments={
                    
                },
                result='returns the resource in which the current script is.' ,
            ),
            url='getThisResource',
        ),
                field=None,
                is_static=True,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="isResourceArchived",
                class_name='resource',
                method=FunctionData(
            signature=FunctionSignature(
                name='isArchived',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='resourceElement',
                                argument_type=FunctionType(
                                    names=['resource'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Checks whether a resource is currently archived (running from within a ZIP file).' ,
                arguments={
                    "resource": """the resource to check """
                },
                result='returns true if a resource is archived, false if it is not archived, or nil if there is problem with resource.' ,
            ),
            url='isResourceArchived',
        ),
                field=FunctionOOPField(
                                name='archived',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="isResourceProtected",
                class_name='resource',
                method=FunctionData(
            signature=FunctionSignature(
                name='isProtected',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theResource',
                                argument_type=FunctionType(
                                    names=['resource'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This will check if a resource is currently protected, as defined in Server_mtaserver.conf#resource|mtaserver.conf.' ,
                arguments={
                    "theResource": """the resource to check """
                },
                result='returns true if the resource is protected, false otherwise.' ,
            ),
            url='isResourceProtected',
        ),
                field=FunctionOOPField(
                                name='protected',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="removeResourceFile",
                class_name='resource',
                method=FunctionData(
            signature=FunctionSignature(
                name='removeFile',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theResource',
                                argument_type=FunctionType(
                                    names=['resource'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='fileName',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function removes a file from the resource.' ,
                arguments={
                    "theResource": """The resource element. """,
                    "fileName": """The filename what you want to delete. """
                },
                result='returns true if file was deleted, otherwise false if the resource is in use or the file doesnt exist.' ,
            ),
            url='removeResourceFile',
        ),
                field=None,
                is_static=False,
            )
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="renameResource",
                class_name='resource',
                method=FunctionData(
            signature=FunctionSignature(
                name='rename',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theResource',
                                argument_type=FunctionType(
                                    names=['string', 'resource'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='newResourceName',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='organizationalPath',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function renames a resource.' ,
                arguments={
                    "theResource": """The name of resource or the resource you want to rename. """,
                    "newResourceName": """The name of what the resource should be renamed to. """,
                    "organizationalPath": """If you want to store the new resource inside a category. """
                },
                result='returns true if the resource has been renamed successfully, false otherwise. this could fail if the resource name already is in use, if a directory already exists with the name youve specified (but this isnt a valid resource) or if the name you specify isnt valid. it could also fail if the disk was full or for other similar reasons. wont work on a started resource or if the resource is not loaded (not known by mta (use /refresh))' ,
            ),
            url='renameResource',
        ),
                field=FunctionOOPField(
                                name='name',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="restartResource",
                class_name='resource',
                method=FunctionData(
            signature=FunctionSignature(
                name='restart',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theResource',
                                argument_type=FunctionType(
                                    names=['resource'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='persistent',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='false',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='configs',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='true',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='maps',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='true',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='scripts',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='true',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='html',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='true',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='clientConfigs',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='true',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='clientScripts',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='true',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='clientFiles',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='true',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function restarts a running resource. Restarting will destroy all the elements that the resource has created (as stopping the resource does).\n*Dont forget to give admin rights to the resource, in which you are using restartResource function or it wont work.\n*This function does not restart the resource immediately. Restarts are queued up until the end of the servers frame to ensure that they occur in the correct order (and that dependent resources can start and stop correctly). The resource being restarted will have an onResourceStop event triggered and the restarted instance will receive an onResourceStart event. Remember that the element and resource variables will be invalidated during the restart, though of course, the resources name will not.}}' ,
                arguments={
                    "theResource": """the resource you want to restart. """,
                    "persistent": """Unused """,
                    "configs": """Reload configs? """,
                    "maps": """Reload maps? """,
                    "scripts": """Reload (server) scripts? """,
                    "html": """Reload html files (for resource web access)? """,
                    "clientConfigs": """Reload client configs? """,
                    "clientScripts": """Reload client scripts? """,
                    "clientFiles": """Reload files? """
                },
                result='returns true if the resource was restarted, false if the resource wasnt running, or an invalid resource was passed.' ,
            ),
            url='restartResource',
        ),
                field=None,
                is_static=False,
            )
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="setResourceInfo",
                class_name='resource',
                method=FunctionData(
            signature=FunctionSignature(
                name='setInfo',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theResource',
                                argument_type=FunctionType(
                                    names=['resource'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='attribute',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='value',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function sets the value of any attribute in a resource info tag.' ,
                arguments={
                    "theResource": """the resource we are setting info to. """,
                    "attribute": """the name of the attribute that is to be set. """,
                    "value": """the value of this attribute """
                },
                result='returns true if the info was successfully set, false otherwise' ,
            ),
            url='setResourceInfo',
        ),
                field=None,
                is_static=False,
            )
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="startResource",
                class_name='resource',
                method=FunctionData(
            signature=FunctionSignature(
                name='start',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='resourceToStart',
                                argument_type=FunctionType(
                                    names=['resource'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='persistent',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='false',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='startIncludedResources',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='true',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='loadServerConfigs',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='true',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='loadMaps',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='true',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='loadServerScripts',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='true',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='loadHTML',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='true',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='loadClientConfigs',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='true',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='loadClientScripts',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='true',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='loadFiles',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='true',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function starts a resource either persistently or as a dependency of the current resource. If you start the resource persistently, the resource will run until stopped either using stopResource or by the server admin. A resource started as a dependency will stop when your resource stops, if no other resources have it as a depdendency. This is the same effect as using an include in your meta.xml file.\nThe function also allows you to specify a number of boolean options. These allow you to disable the loading of various aspects of the resource. This is generally useful for editors rather than for actual gamemodes. It could also be used as a way to preview a resource before enabling the scripting aspects, though this could produce unreliable results. There is no way for a resource to tell if it is being run with any of these booleans set.' ,
                arguments={
                    "resourceToStart": """The resource that should be started. """,
                    "persistent": """A boolean specifying if the resource should continue to run even after the current resource has been stopped or not. If this is true then the resource will run until another resource or user terminates it or the server shuts down. If this is false then resourceToStart will stop when thisResource stops. """,
                    "startIncludedResources": """A boolean specifying if the resources included/dependant resources will be started. """,
                    "loadServerConfigs": """A boolean specifying if server side config (XML) files should be loaded with the resource. """,
                    "loadMaps": """A boolean specifying if any .map files will be started with the resource. """,
                    "loadServerScripts": """A boolean specifying if server side script files should be started alongside the resource. """,
                    "loadHTML": """A boolean specifying if HTML files should be started alongside the resource. """,
                    "loadClientConfigs": """A boolean specifying if client configs should be loaded alongside the resource. """,
                    "loadClientScripts": """A boolean specifying if client scripts should be loaded and started alongside the resource. """,
                    "loadFiles": """A boolean specifying if client-side files should be loaded alongside the resource. """
                },
                result='returns true if the resource has been started successfully, false otherwise.' ,
            ),
            url='startResource',
        ),
                field=None,
                is_static=False,
            )
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="stopResource",
                class_name='resource',
                method=FunctionData(
            signature=FunctionSignature(
                name='stop',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theResource',
                                argument_type=FunctionType(
                                    names=['resource'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function stops a running resource.<br>' ,
                arguments={
                    "theResource": """the resource that should be stopped. """
                },
                result='returns true if the resource was stopped, false if the stopping failed, or an invalid resource was passed.' ,
            ),
            url='stopResource',
        ),
                field=None,
                is_static=False,
            )
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    )
]
