# Autogenerated file. ANY CHANGES WILL BE OVERWRITTEN
from to_python.core.types import FunctionType, \
    FunctionArgument, \
    FunctionArgumentValues, \
    FunctionReturnTypes, \
    FunctionSignature, \
    FunctionDoc, \
    FunctionOOP, \
    FunctionOOPField, \
    CompoundOOPData, \
    FunctionData, \
    CompoundFunctionData

DUMP_PARTIAL = [
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="createMarker",
                class_name='Marker',
                method=None,
                field=None,
                is_static=True,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="createMarker",
                class_name='Marker',
                method=None,
                field=None,
                is_static=True,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="getMarkerColor",
                class_name='Marker',
                method=FunctionData(
            signature=FunctionSignature(
                name='getColor',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theMarker',
                                argument_type=FunctionType(
                                    names=['marker'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns the color and transparency for a marker element. Not all marker types support transparency.' ,
                arguments={
                    "theMarker": """: The marker that you wish to retrieve the color of. """
                },
                result='returns four ints corresponding to the amount of red, green, blue and alpha (respectively) of the marker, false if invalid arguments were passed.' ,
            ),
            url='getMarkerColor',
        ),
                field=None,
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getMarkerColor",
                class_name='Marker',
                method=FunctionData(
            signature=FunctionSignature(
                name='getColor',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theMarker',
                                argument_type=FunctionType(
                                    names=['marker'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns the color and transparency for a marker element. Not all marker types support transparency.' ,
                arguments={
                    "theMarker": """: The marker that you wish to retrieve the color of. """
                },
                result='returns four ints corresponding to the amount of red, green, blue and alpha (respectively) of the marker, false if invalid arguments were passed.' ,
            ),
            url='getMarkerColor',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="getMarkerIcon",
                class_name='Marker',
                method=FunctionData(
            signature=FunctionSignature(
                name='getIcon',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theMarker',
                                argument_type=FunctionType(
                                    names=['marker'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns the icon name for a marker.' ,
                arguments={
                    "theMarker": """: A marker element referencing the specified marker. """
                },
                result='returns false if the marker passed is invalid or a string containing one of the following:\n* none: no icon\n* arrow: arrow icon\n* finish: finish (end-race) icon' ,
            ),
            url='getMarkerIcon',
        ),
                field=FunctionOOPField(
                                name='icon',
                                types=[
                                    FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getMarkerIcon",
                class_name='Marker',
                method=FunctionData(
            signature=FunctionSignature(
                name='getIcon',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theMarker',
                                argument_type=FunctionType(
                                    names=['marker'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns the icon name for a marker.' ,
                arguments={
                    "theMarker": """: A marker element referencing the specified marker. """
                },
                result='returns false if the marker passed is invalid or a string containing one of the following:\n* none: no icon\n* arrow: arrow icon\n* finish: finish (end-race) icon' ,
            ),
            url='getMarkerIcon',
        ),
                field=FunctionOOPField(
                                name='icon',
                                types=[
                                    FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="getMarkerSize",
                class_name='Marker',
                method=FunctionData(
            signature=FunctionSignature(
                name='getSize',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='myMarker',
                                argument_type=FunctionType(
                                    names=['marker'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns a float containing the size of the specified marker.' ,
                arguments={
                    "myMarker": """: The marker that you wish to retrieve the size of. """
                },
                result='returns a float containing the size of the specified marker.' ,
            ),
            url='getMarkerSize',
        ),
                field=FunctionOOPField(
                                name='size',
                                types=[
                                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getMarkerSize",
                class_name='Marker',
                method=FunctionData(
            signature=FunctionSignature(
                name='getSize',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='myMarker',
                                argument_type=FunctionType(
                                    names=['marker'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns a float containing the size of the specified marker.' ,
                arguments={
                    "myMarker": """: The marker that you wish to retrieve the size of. """
                },
                result='returns a float containing the size of the specified marker.' ,
            ),
            url='getMarkerSize',
        ),
                field=FunctionOOPField(
                                name='size',
                                types=[
                                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="getMarkerTarget",
                class_name='Marker',
                method=FunctionData(
            signature=FunctionSignature(
                name='getTarget',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theMarker',
                                argument_type=FunctionType(
                                    names=['marker'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns the position of the specified markers target, the position it points to. This only works for checkpoint markers and ring markers. For checkpoints it returns the position the arrow is pointing to, for ring markers it returns the position the ring is facing. You can set this target with setMarkerTarget.' ,
                arguments={
                    "theMarker": """The marker you wish to retrieve the target position of. """
                },
                result='returns three floats if a target is set, or false in the first variable and nil in the two others if the marker is invalid or no target is set.' ,
            ),
            url='getMarkerTarget',
        ),
                field=FunctionOOPField(
                                name='target',
                                types=[
                                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getMarkerTarget",
                class_name='Marker',
                method=FunctionData(
            signature=FunctionSignature(
                name='getTarget',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theMarker',
                                argument_type=FunctionType(
                                    names=['marker'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns the position of the specified markers target, the position it points to. This only works for checkpoint markers and ring markers. For checkpoints it returns the position the arrow is pointing to, for ring markers it returns the position the ring is facing. You can set this target with setMarkerTarget.' ,
                arguments={
                    "theMarker": """The marker you wish to retrieve the target position of. """
                },
                result='returns three floats if a target is set, or false in the first variable and nil in the two others if the marker is invalid or no target is set.' ,
            ),
            url='getMarkerTarget',
        ),
                field=FunctionOOPField(
                                name='target',
                                types=[
                                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="getMarkerType",
                class_name='Marker',
                method=FunctionData(
            signature=FunctionSignature(
                name='getMarkerType',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theMarker',
                                argument_type=FunctionType(
                                    names=['marker'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns a markers type.' ,
                arguments={
                    "theMarker": """: A marker element referencing the specified marker. """
                },
                result='* returns one of the following strings:\nif an invalid marker is specified, false is returned.' ,
            ),
            url='getMarkerType',
        ),
                field=FunctionOOPField(
                                name='markerType',
                                types=[
                                    FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getMarkerType",
                class_name='Marker',
                method=FunctionData(
            signature=FunctionSignature(
                name='getMarkerType',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theMarker',
                                argument_type=FunctionType(
                                    names=['marker'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns a markers type.' ,
                arguments={
                    "theMarker": """: A marker element referencing the specified marker. """
                },
                result='* returns one of the following strings:\nif an invalid marker is specified, false is returned.' ,
            ),
            url='getMarkerType',
        ),
                field=FunctionOOPField(
                                name='markerType',
                                types=[
                                    FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="isCoronaReflectionEnabled",
                class_name='Marker',
                method=FunctionData(
            signature=FunctionSignature(
                name='isCoronaReflectionEnabled',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theMarker',
                                argument_type=FunctionType(
                                    names=['marker'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='' ,
                arguments={
                    "theMarker": """marker """
                },
                result='* returns false is setmarkertype|marker type is not corona.\n* returns true if corona reflection is enabled, false otherwise.' ,
            ),
            url='isCoronaReflectionEnabled',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="setCoronaReflectionEnabled",
                class_name='Marker',
                method=FunctionData(
            signature=FunctionSignature(
                name='setCoronaReflectionEnabled',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theMarker',
                                argument_type=FunctionType(
                                    names=['marker'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='enabled',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='' ,
                arguments={
                    "theMarker": """the corona marker that you wish set visibility of corona reflection """,
                    "enabled": """whenever corona reflection should be visible """
                },
                result='returns true if setmarkertype|marker type is corona, false otherwise.' ,
            ),
            url='setCoronaReflectionEnabled',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="setMarkerColor",
                class_name='Marker',
                method=FunctionData(
            signature=FunctionSignature(
                name='setColor',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theMarker',
                                argument_type=FunctionType(
                                    names=['marker'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='r',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='g',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='b',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='a',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function sets the color of the specified marker by modifying the values for red, green, blue and alpha.' ,
                arguments={
                    "theMarker": """The marker that you wish to set the color of. """,
                    "r": """The amount of red in the final color (0 to 255). """,
                    "g": """The amount of green in the final color (0 to 255). """,
                    "b": """The amount of blue in the final color (0 to 255). """,
                    "a": """The amount of alpha in the final color (0 to 255). """
                },
                result='' ,
            ),
            url='setMarkerColor',
        ),
                field=None,
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="setMarkerColor",
                class_name='Marker',
                method=FunctionData(
            signature=FunctionSignature(
                name='setColor',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theMarker',
                                argument_type=FunctionType(
                                    names=['marker'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='r',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='g',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='b',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='a',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function sets the color of the specified marker by modifying the values for red, green, blue and alpha.' ,
                arguments={
                    "theMarker": """The marker that you wish to set the color of. """,
                    "r": """The amount of red in the final color (0 to 255). """,
                    "g": """The amount of green in the final color (0 to 255). """,
                    "b": """The amount of blue in the final color (0 to 255). """,
                    "a": """The amount of alpha in the final color (0 to 255). """
                },
                result='' ,
            ),
            url='setMarkerColor',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="setMarkerIcon",
                class_name='Marker',
                method=FunctionData(
            signature=FunctionSignature(
                name='setIcon',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theMarker',
                                argument_type=FunctionType(
                                    names=['marker'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='icon',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function allows changing the icon of a checkpoint marker.' ,
                arguments={
                    "theMarker": """The marker to change the visual style of """,
                    "icon": """A string referring to the type of icon, acceptable values are: """,
                    "none": """: No icon """,
                    "arrow": """: Arrow icon """,
                    "finish": """: Finish icon (at end of race) """
                },
                result='' ,
            ),
            url='setMarkerIcon',
        ),
                field=FunctionOOPField(
                                name='icon',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="setMarkerIcon",
                class_name='Marker',
                method=FunctionData(
            signature=FunctionSignature(
                name='setIcon',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theMarker',
                                argument_type=FunctionType(
                                    names=['marker'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='icon',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function allows changing the icon of a checkpoint marker.' ,
                arguments={
                    "theMarker": """The marker to change the visual style of """,
                    "icon": """A string referring to the type of icon, acceptable values are: """,
                    "none": """: No icon """,
                    "arrow": """: Arrow icon """,
                    "finish": """: Finish icon (at end of race) """
                },
                result='' ,
            ),
            url='setMarkerIcon',
        ),
                field=FunctionOOPField(
                                name='icon',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="setMarkerSize",
                class_name='Marker',
                method=FunctionData(
            signature=FunctionSignature(
                name='setSize',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theMarker',
                                argument_type=FunctionType(
                                    names=['marker'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='size',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function sets the size of the specified marker.\nSetting negative value will flip the marker, do nothing or make it invisible:\n* cylinder or arrow: upside down\n* ring: inside out\n* checkpoint: disappear\n* corona: bigger' ,
                arguments={
                    "theMarker": """The marker that you wish to set the size of. """,
                    "size": """A float representing new size of the marker. """
                },
                result='returns true if successful, false if failed.' ,
            ),
            url='setMarkerSize',
        ),
                field=FunctionOOPField(
                                name='size',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="setMarkerSize",
                class_name='Marker',
                method=FunctionData(
            signature=FunctionSignature(
                name='setSize',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theMarker',
                                argument_type=FunctionType(
                                    names=['marker'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='size',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function sets the size of the specified marker.\nSetting negative value will flip the marker, do nothing or make it invisible:\n* cylinder or arrow: upside down\n* ring: inside out\n* checkpoint: disappear\n* corona: bigger' ,
                arguments={
                    "theMarker": """The marker that you wish to set the size of. """,
                    "size": """A float representing new size of the marker. """
                },
                result='returns true if successful, false if failed.' ,
            ),
            url='setMarkerSize',
        ),
                field=FunctionOOPField(
                                name='size',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="setMarkerTarget",
                class_name='Marker',
                method=FunctionData(
            signature=FunctionSignature(
                name='setTarget',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theMarker',
                                argument_type=FunctionType(
                                    names=['marker'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='x',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='y',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='z',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function sets the target for a marker. Only the checkpoint and ring marker types can have a target.\nFor checkpoint markers, the target is shown as an arrow aiming at the point specified.\nFor ring markers, the target is shown by rotating the whole ring so that it faces the point specified.\nThis function is most useful for setting up markers for races, where each marker points to the next ones position.\n(This is mostly used in races!)' ,
                arguments={
                    "theMarker": """The marker to set the target of """,
                    "x": """The x axis of the coordinate to target the marker at """,
                    "y": """The y axis of the coordinate to target the marker at """,
                    "z": """The z axis of the coordinate to target the marker at """
                },
                result='returns true if target was set, false otherwise.' ,
            ),
            url='setMarkerTarget',
        ),
                field=FunctionOOPField(
                                name='target',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="setMarkerTarget",
                class_name='Marker',
                method=FunctionData(
            signature=FunctionSignature(
                name='setTarget',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theMarker',
                                argument_type=FunctionType(
                                    names=['marker'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='x',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='y',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='z',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function sets the target for a marker. Only the checkpoint and ring marker types can have a target.\nFor checkpoint markers, the target is shown as an arrow aiming at the point specified.\nFor ring markers, the target is shown by rotating the whole ring so that it faces the point specified.\nThis function is most useful for setting up markers for races, where each marker points to the next ones position.\n(This is mostly used in races!)' ,
                arguments={
                    "theMarker": """The marker to set the target of """,
                    "x": """The x axis of the coordinate to target the marker at """,
                    "y": """The y axis of the coordinate to target the marker at """,
                    "z": """The z axis of the coordinate to target the marker at """
                },
                result='returns true if target was set, false otherwise.' ,
            ),
            url='setMarkerTarget',
        ),
                field=FunctionOOPField(
                                name='target',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="setMarkerType",
                class_name='Marker',
                method=FunctionData(
            signature=FunctionSignature(
                name='setMarkerType',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theMarker',
                                argument_type=FunctionType(
                                    names=['marker'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='markerType',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function changes a markers type. The type controls how the marker is displayed in the game. Its important that you use marker types that users are used to from the single player game. For example, checkpoints are used in races, rings are used for aircraft races, arrows are used for entering buildings etc.' ,
                arguments={
                    "theMarker": """: A marker element referencing the specified marker. """,
                    "markerType": """: A string denoting the marker type. Valid values are: """
                },
                result='returns true if the marker type was changed, false if it wasnt or marker values were invalid.' ,
            ),
            url='setMarkerType',
        ),
                field=FunctionOOPField(
                                name='markerType',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="setMarkerType",
                class_name='Marker',
                method=FunctionData(
            signature=FunctionSignature(
                name='setMarkerType',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theMarker',
                                argument_type=FunctionType(
                                    names=['marker'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='markerType',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function changes a markers type. The type controls how the marker is displayed in the game. Its important that you use marker types that users are used to from the single player game. For example, checkpoints are used in races, rings are used for aircraft races, arrows are used for entering buildings etc.' ,
                arguments={
                    "theMarker": """: A marker element referencing the specified marker. """,
                    "markerType": """: A string denoting the marker type. Valid values are: """
                },
                result='returns true if the marker type was changed, false if it wasnt or marker values were invalid.' ,
            ),
            url='setMarkerType',
        ),
                field=FunctionOOPField(
                                name='markerType',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    )
]
