# Autogenerated file. ANY CHANGES WILL BE OVERWRITTEN
from to_python.core.types import FunctionType, \
    FunctionArgument, \
    FunctionArgumentValues, \
    FunctionReturnTypes, \
    FunctionSignature, \
    FunctionDoc, \
    FunctionOOP, \
    FunctionOOPField, \
    CompoundOOPData, \
    FunctionData, \
    CompoundFunctionData

DUMP_PARTIAL = [
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="engineApplyShaderToWorldTexture",
                class_name='shader',
                method=FunctionData(
            signature=FunctionSignature(
                name='applyToWorldTexture',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='shader',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='textureName',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='targetElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=True,
                                ),
                                default_value='nil',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='appendLayers',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='true',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function applies a shader to one or more world textures.\n* The resource Shader_examples#Texture_names|shader_tex_names can help in finding the names of world textures.\n* When replacing the texture for a ped using the CJ skin, set textureName to CJ\n* The shader inherits the render states of the original when it is drawn, so texture stage 0 will already be set to the original texture.\n* When using with a ped, ensure you have set ped or all in the elementTypes when calling dxCreateShader\n* CJ body parts textures can be replaced by using: cj_ped_head, cj_ped_hat, cj_ped_torso, cj_ped_legs, cj_ped_feet, cj_ped_glasses, cj_ped_necklace, cj_ped_watch and cj_ped_extra1. Latest version of http://wiki.multitheftauto.com/wiki/Shader_examples#Texture_names shader_tex_names will show what is being used.' ,
                arguments={
                    "shader": """The shader which is to be applied """,
                    "textureName": """The name of the world texture to apply the shader to. Wildcard matching e.g. ro?ds* can be used to apply to more than one texture at a time. """,
                    "targetElement": """The element to restrict applying the shader to. If this is not set the shader will be applied to everything using the texture name. Valid element types for targetElement are vehicle|vehicles, Object|objects and Ped|peds. """,
                    "appendLayers": """allows two or more layered shaders to be applied in the same texture. You may want to modify the DepthBias in the technique pass to avoid Z-fighting artifacts when using this. """
                },
                result='returns true if the shader was successfully applied, false otherwise.' ,
            ),
            url='engineApplyShaderToWorldTexture',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="engineGetModelIDFromName",
                class_name='Engine',
                method=FunctionData(
            signature=FunctionSignature(
                name='getModelIDFromName',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='modelName',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function gets the model ID of an object model from object name. This function is the counterpart of engineGetModelNameFromID.' ,
                arguments={
                    "modelName": """The model name of the object """
                },
                result='returns an int with the id of the object model, false otherwise.' ,
            ),
            url='engineGetModelIDFromName',
        ),
                field=None,
                is_static=True,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="engineGetModelLODDistance",
                class_name='Engine',
                method=FunctionData(
            signature=FunctionSignature(
                name='getModelLODDistance',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='model',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function gets the LOD distance for any object / model ID.' ,
                arguments={
                    "model": """The model / object ID number you want to get the LOD distance of. """
                },
                result='returns a float representing the lod distance of the model, or false if the model argument is incorrect.' ,
            ),
            url='engineGetModelLODDistance',
        ),
                field=None,
                is_static=True,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="engineGetModelNameFromID",
                class_name='Engine',
                method=FunctionData(
            signature=FunctionSignature(
                name='getModelNameFromID',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='modelID',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function gets the model name of an object model from model ID. This function is the counterpart of engineGetModelIDFromName.' ,
                arguments={
                    "modelID": """The model ID of the object """
                },
                result='returns a string with the name of the object model, false otherwise.' ,
            ),
            url='engineGetModelNameFromID',
        ),
                field=None,
                is_static=True,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="engineGetModelTextureNames",
                class_name='Engine',
                method=FunctionData(
            signature=FunctionSignature(
                name='getModelTextureNames',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='modelId',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=True,
                                ),
                                default_value='""',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns a table of the world textures which are applied to the specified model.' ,
                arguments={
                    "modelId": """You can either use the model id or the model name. """
                },
                result='returns a table if this function succeeds, false if it fails for some reason.' ,
            ),
            url='engineGetModelTextureNames',
        ),
                field=None,
                is_static=True,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="engineGetVisibleTextureNames",
                class_name='Engine',
                method=FunctionData(
            signature=FunctionSignature(
                name='getVisibleTextureNames',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='nameFilter',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=True,
                                ),
                                default_value='"*"',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='modelId',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=True,
                                ),
                                default_value='""',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns a list of the world textures which are being used to draw the current scene.' ,
                arguments={
                    "nameFilter": """Only include textures that match the wildcard string. """,
                    "modelId": """Only include textures that are used by the model id (or model name) """
                },
                result='returns a table of texture names.' ,
            ),
            url='engineGetVisibleTextureNames',
        ),
                field=None,
                is_static=True,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="engineImportTXD",
                class_name='TXD|txd',
                method=FunctionData(
            signature=FunctionSignature(
                name='import',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='texture',
                                argument_type=FunctionType(
                                    names=['txd'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='model_id',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function imports (adds) a loaded RenderWare Texture Dictionary into a specific model. This is necessary in order for the DFF loader to find any new textures. Please call this function before loading the DFF model file, in order to allow the DFF loading process to find the new textures. This function can also replace default GTA textures, so that it becomes possible to e.g. put custom images on existing billboards. Ped and weapon textures are also supported.\nSee here for Optimize_Custom_TXD|tips on reducing the size of TXD files.\n* CJ clothing component textures can be replaced by using the ids listed on Clothing Component IDs|this page' ,
                arguments={
                    "texture": """The TXD that was loaded with engineLoadTXD """,
                    "model_id": """The model id to import the TXD into """
                },
                result='returns true if the function executed succesfully, false otherwise.' ,
            ),
            url='engineImportTXD',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="engineLoadCOL",
                class_name='COL|EngineCOL',
                method=None,
                field=None,
                is_static=True,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="engineLoadDFF",
                class_name='DFF|EngineDFF',
                method=None,
                field=None,
                is_static=True,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="engineLoadTXD",
                class_name='TXD|EngineTXD',
                method=None,
                field=None,
                is_static=True,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="engineRemoveShaderFromWorldTexture",
                class_name='shader',
                method=FunctionData(
            signature=FunctionSignature(
                name='removeFromWorldTexture',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='shader',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='textureName',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='targetElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=True,
                                ),
                                default_value='nil',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function removes a shader from one or more world textures.' ,
                arguments={
                    "shader": """The shader which is to be removed """,
                    "textureName": """The name of the world texture to remove the shader from. It should be exactly the same string as used with engineApplyShaderToWorldTexture when the shader was initially applied. """,
                    "targetElement": """The element to remove the shader from. It should be the same element as used with engineApplyShaderToWorldTexture when the shader was initially applied. """
                },
                result='returns true if the shader was successfully removed, false otherwise.' ,
            ),
            url='engineRemoveShaderFromWorldTexture',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="engineReplaceCOL",
                class_name='COL|col',
                method=FunctionData(
            signature=FunctionSignature(
                name='replace',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theCol',
                                argument_type=FunctionType(
                                    names=['col'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='modelID',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function replaces the collision file of the given model id to the collision file passed. Use engineLoadCOL to load the collision file first.' ,
                arguments={
                    "theCol": """The collision file to replace with """,
                    "modelID": """The model ID whose collision file you want to replace """
                },
                result='returns true if the collision was successfully replaced, false or nil if the collision could not be replaced for a reason.' ,
            ),
            url='engineReplaceCOL',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="engineReplaceModel",
                class_name='DFF|dff',
                method=FunctionData(
            signature=FunctionSignature(
                name='replace',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theModel',
                                argument_type=FunctionType(
                                    names=['dff'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='modelID',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='alphaTransparency',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='false',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function replaces the given model ID with the model contained in a DFF file loaded by engineLoadDFF. This function supports vehicle|vehicles, object|objects, ped|peds and player|players but not CJ clothing and body parts.\nTo replace weapon models you must use their object IDs, not weapon IDs. There is a weapon model list available at weapons.\n* Default GTA map objects behave inconsistently when using this function on them. If you want to replace models in the original GTA map, use one of the EngineReplaceModel notes|methods shown here.}}' ,
                arguments={
                    "theModel": """The model to replace the given model ID with """,
                    "modelID": """The model it to replace the model of """,
                    "alphaTransparency": """Set to true if model uses semi-transparent textures, e.g. windows. This will ensure other objects behind the semi-transparent textures are rendered correctly. (Can slightly impact performance, so only set when required) """
                },
                result='returns true if the model was successfully replaced, false if it failed for some reason, ie. the dff or the model id is not valid.' ,
            ),
            url='engineReplaceModel',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="engineResetModelLODDistance",
                class_name='Engine',
                method=FunctionData(
            signature=FunctionSignature(
                name='resetModelLODDistance',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='model',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='' ,
                arguments={
                    "model": """The model / object ID number you want to reset the LOD distance of. """
                },
                result='returns true if the lod distance was reset to default, or false if the model argument is incorrect, or the lod distance hasnt been changed.' ,
            ),
            url='engineResetModelLODDistance',
        ),
                field=None,
                is_static=True,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="engineRestoreCOL",
                class_name='Engine',
                method=FunctionData(
            signature=FunctionSignature(
                name='restoreCOL',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='modelID',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function restores the original collision model of the given model ID. Reverses the effect of engineReplaceCOL.' ,
                arguments={
                    "modelID": """The ID of the model to restore the model of """
                },
                result='returns true if this function succeeds, false or nil if it fails for some reason.' ,
            ),
            url='engineRestoreCOL',
        ),
                field=None,
                is_static=True,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="engineRestoreModel",
                class_name='Engine',
                method=FunctionData(
            signature=FunctionSignature(
                name='restoreModel',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='modelID',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function restores the visual DFF model of the given model ID. This restores the result of engineReplaceModel.' ,
                arguments={
                    "modelID": """The model ID to restore the visuals of """
                },
                result='returns true if the model was successfully restored, false or nil if it failed for some reason.' ,
            ),
            url='engineRestoreModel',
        ),
                field=None,
                is_static=True,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="engineSetAsynchronousLoading",
                class_name='Engine',
                method=FunctionData(
            signature=FunctionSignature(
                name='setAsynchronousLoading',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='enable',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='force',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function enables or disables asynchronous model loading. Enabling asynchronous model loading may reduce the small pauses that occur when a new model is displayed for the first time. However, it can cause the new models to appear slightly later than they might have otherwise.' ,
                arguments={
                    "enable": """Set to true/false to enable/disable asynchronous loading. Only works if the clients preferences has Asynchronous Loading set to Auto. """,
                    "force": """If set to true, ignores the clients preferences. """
                },
                result='returns true if the function executed successfully, false otherwise.' ,
            ),
            url='engineSetAsynchronousLoading',
        ),
                field=None,
                is_static=True,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="engineSetModelLODDistance",
                class_name='Engine',
                method=FunctionData(
            signature=FunctionSignature(
                name='setModelLODDistance',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='model',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='distance',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function sets a custom LOD distance for any object / model ID. This is the distance at which objects of that model ID are switched to their LOD model, or (if there is no LOD model) become invisible.\nNotes:\nThe actual draw distance used is modified by the draw distance slider in the settings Video tab of the MTA client.\n*When the Video tab draw distance slider is 0%, the engineSetModelLODDistance setting approximately matches the draw distance used.\n:e.g. engineSetModelLODDistance(1337,100) will mean model 1337 will be visible up to a distance of 100 units.\n*When the Video tab draw distance slider is 100%, the engineSetModelLODDistance setting is approximately doubled before use.\n:e.g. engineSetModelLODDistance(1337,100) will mean model 1337 will be visible up to a distance of 200 units.\nHowever, there is a general draw distance limit of 300 units. So engineSetModelLODDistance(1337,400) will mean model 1337 will be visible up to a distance of 300 units no matter what the Video tab says.\nTherefore, unless its really important, engineSetModelLODDistance should not be set to anything greater than 170.<br>\n170 will still give the maximum draw distance (of 300 units) on clients that have a Video tab draw distance setting of 100%, and it will help reduce lag for players who chose a lower draw distance in their settings.\nFor low LOD elements, engineSetModelLODDistance still has a limit of 300 units, but the actual draw distance used is 5 times the setting value. Also, low LOD elements ignore the Video tab draw distance slider. So a setting of 200 will mean a low LOD element will always have a draw distance of 1000 units.' ,
                arguments={
                    "model": """The model / object ID number you want to change the LOD distance of. """,
                    "distance": """New LOD distance value in San Andreas units. """
                },
                result='returns true if the function executed succesfully, false otherwise.' ,
            ),
            url='engineSetModelLODDistance',
        ),
                field=None,
                is_static=True,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    )
]
