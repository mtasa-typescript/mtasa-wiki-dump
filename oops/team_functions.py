# Autogenerated file. ANY CHANGES WILL BE OVERWRITTEN
from to_python.core.types import FunctionType, \
    FunctionArgument, \
    FunctionArgumentValues, \
    FunctionReturnTypes, \
    FunctionSignature, \
    FunctionDoc, \
    FunctionOOP, \
    FunctionOOPField, \
    CompoundOOPData, \
    FunctionData, \
    CompoundFunctionData

DUMP_PARTIAL = [
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="countPlayersInTeam",
                class_name='team',
                method=FunctionData(
            signature=FunctionSignature(
                name='countPlayers',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theTeam',
                                argument_type=FunctionType(
                                    names=['team'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function is for returning the number of players in the specified team.' ,
                arguments={
                    "theTeam": """The team you wish to retrieve the player count of. """
                },
                result='returns an integer containing the number of players in the team, false if it could not be retrieved.' ,
            ),
            url='countPlayersInTeam',
        ),
                field=FunctionOOPField(
                                name='playerCount',
                                types=[
                                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="countPlayersInTeam",
                class_name='team',
                method=FunctionData(
            signature=FunctionSignature(
                name='countPlayers',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theTeam',
                                argument_type=FunctionType(
                                    names=['team'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function is for returning the number of players in the specified team.' ,
                arguments={
                    "theTeam": """The team you wish to retrieve the player count of. """
                },
                result='returns an integer containing the number of players in the team, false if it could not be retrieved.' ,
            ),
            url='countPlayersInTeam',
        ),
                field=FunctionOOPField(
                                name='playerCount',
                                types=[
                                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="createTeam",
                class_name='Team',
                method=FunctionData(
            signature=FunctionSignature(
                name='create',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['team'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='teamName',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='colorR',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='255',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='colorG',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='255',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='colorB',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='255',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function is for creating a new team, which can be used to group players. Players will not join the team until they are respawned.' ,
                arguments={
                    "teamName": """A string representing the teams name. """,
                    "colorR": """An integer representing the red color value. """,
                    "colorG": """An integer representing the green color value. """,
                    "colorB": """An integer representing the blue color value. """
                },
                result='returns a team element if it was successfully created, false if invalid arguments are passed or a team with that name already exists.' ,
            ),
            url='createTeam',
        ),
                field=None,
                is_static=True,
            )
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="getPlayersInTeam",
                class_name='team',
                method=FunctionData(
            signature=FunctionSignature(
                name='getPlayers',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theTeam',
                                argument_type=FunctionType(
                                    names=['team'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function retrieves all the players of the specified team.' ,
                arguments={
                    "theTeam": """The team you wish to retrieve all the players from. """
                },
                result='returns a table of all the players in the team, or an empty one if there are none else false if invalid arguments are passed.' ,
            ),
            url='getPlayersInTeam',
        ),
                field=FunctionOOPField(
                                name='players',
                                types=[
                                    FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getPlayersInTeam",
                class_name='team',
                method=FunctionData(
            signature=FunctionSignature(
                name='getPlayers',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theTeam',
                                argument_type=FunctionType(
                                    names=['team'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function retrieves all the players of the specified team.' ,
                arguments={
                    "theTeam": """The team you wish to retrieve all the players from. """
                },
                result='returns a table of all the players in the team, or an empty one if there are none else false if invalid arguments are passed.' ,
            ),
            url='getPlayersInTeam',
        ),
                field=FunctionOOPField(
                                name='players',
                                types=[
                                    FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="getPlayerTeam",
                class_name='player',
                method=FunctionData(
            signature=FunctionSignature(
                name='getTeam',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['team'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePlayer',
                                argument_type=FunctionType(
                                    names=['player'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function gets the current team a player is on.' ,
                arguments={
                    "thePlayer": """: The player whose team you want to find out. """
                },
                result='returns a team element representing the team the player is on, false if the player is not part of a team.' ,
            ),
            url='getPlayerTeam',
        ),
                field=FunctionOOPField(
                                name='team',
                                types=[
                                    FunctionType(
                                    names=['team'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getPlayerTeam",
                class_name='player',
                method=FunctionData(
            signature=FunctionSignature(
                name='getTeam',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['team'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePlayer',
                                argument_type=FunctionType(
                                    names=['player'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function gets the current team a player is on.' ,
                arguments={
                    "thePlayer": """: The player whose team you want to find out. """
                },
                result='returns a team element representing the team the player is on, false if the player is not part of a team.' ,
            ),
            url='getPlayerTeam',
        ),
                field=FunctionOOPField(
                                name='team',
                                types=[
                                    FunctionType(
                                    names=['team'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="getTeamColor",
                class_name='team',
                method=FunctionData(
            signature=FunctionSignature(
                name='getColor',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theTeam',
                                argument_type=FunctionType(
                                    names=['team'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function retrieves the color of a team.' ,
                arguments={
                    "theTeam": """The team you want to get the color of. """
                },
                result='returns 3 integers representing the red, green, and blue color components of the team if its valid, false otherwise.' ,
            ),
            url='getTeamColor',
        ),
                field=None,
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getTeamColor",
                class_name='team',
                method=FunctionData(
            signature=FunctionSignature(
                name='getColor',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theTeam',
                                argument_type=FunctionType(
                                    names=['team'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function retrieves the color of a team.' ,
                arguments={
                    "theTeam": """The team you want to get the color of. """
                },
                result='returns 3 integers representing the red, green, and blue color components of the team if its valid, false otherwise.' ,
            ),
            url='getTeamColor',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="getTeamFriendlyFire",
                class_name='team',
                method=FunctionData(
            signature=FunctionSignature(
                name='getFriendlyFire',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theTeam',
                                argument_type=FunctionType(
                                    names=['team'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function tells you if friendly fire is turned on for the specified team.' ,
                arguments={
                    "theTeam": """The team object that will be checked """
                },
                result='returns true if friendly fire is on for the specified team, false if it is turned off or if invalid arguments are specified.' ,
            ),
            url='getTeamFriendlyFire',
        ),
                field=FunctionOOPField(
                                name='friendlyFire',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getTeamFriendlyFire",
                class_name='team',
                method=FunctionData(
            signature=FunctionSignature(
                name='getFriendlyFire',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theTeam',
                                argument_type=FunctionType(
                                    names=['team'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function tells you if friendly fire is turned on for the specified team.' ,
                arguments={
                    "theTeam": """The team object that will be checked """
                },
                result='returns true if friendly fire is on for the specified team, false if it is turned off or if invalid arguments are specified.' ,
            ),
            url='getTeamFriendlyFire',
        ),
                field=FunctionOOPField(
                                name='friendlyFire',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="getTeamFromName",
                class_name='Team',
                method=FunctionData(
            signature=FunctionSignature(
                name='getFromName',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['team'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='teamName',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function finds a team element using the provided team name.' ,
                arguments={
                    "teamName": """A string determining the name of the team you wish to find. """
                },
                result='returns the team element if it was found, false otherwise.' ,
            ),
            url='getTeamFromName',
        ),
                field=None,
                is_static=True,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getTeamFromName",
                class_name='Team',
                method=FunctionData(
            signature=FunctionSignature(
                name='getFromName',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['team'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='teamName',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function finds a team element using the provided team name.' ,
                arguments={
                    "teamName": """A string determining the name of the team you wish to find. """
                },
                result='returns the team element if it was found, false otherwise.' ,
            ),
            url='getTeamFromName',
        ),
                field=None,
                is_static=True,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="getTeamName",
                class_name='team',
                method=FunctionData(
            signature=FunctionSignature(
                name='getName',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theTeam',
                                argument_type=FunctionType(
                                    names=['team'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function gets the team name of a team object.' ,
                arguments={
                    "theTeam": """The team you want to retrieve the name of. """
                },
                result='returns a string representing the teams name if the team object was valid, false otherwise.' ,
            ),
            url='getTeamName',
        ),
                field=FunctionOOPField(
                                name='name',
                                types=[
                                    FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getTeamName",
                class_name='team',
                method=FunctionData(
            signature=FunctionSignature(
                name='getName',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theTeam',
                                argument_type=FunctionType(
                                    names=['team'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function gets the team name of a team object.' ,
                arguments={
                    "theTeam": """The team you want to retrieve the name of. """
                },
                result='returns a string representing the teams name if the team object was valid, false otherwise.' ,
            ),
            url='getTeamName',
        ),
                field=FunctionOOPField(
                                name='name',
                                types=[
                                    FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="setPlayerTeam",
                class_name='player',
                method=FunctionData(
            signature=FunctionSignature(
                name='setTeam',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePlayer',
                                argument_type=FunctionType(
                                    names=['player'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='theTeam',
                                argument_type=FunctionType(
                                    names=['team'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function adds a player to an existing team. The player will automatically be removed from his current team if hes on one.' ,
                arguments={
                    "thePlayer": """The player you wish to add to a team. """,
                    "theTeam": """The team you want to add the player to, or nil if you wish to unassign a player from his team. """
                },
                result='returns true if the player was successfully added to the specified team or removed from his previous one, false otherwise.' ,
            ),
            url='setPlayerTeam',
        ),
                field=FunctionOOPField(
                                name='team',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="setTeamColor",
                class_name='team',
                method=FunctionData(
            signature=FunctionSignature(
                name='setColor',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theTeam',
                                argument_type=FunctionType(
                                    names=['team'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='colorR',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='colorG',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='colorB',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function is for setting the color of a specified team. This color is shown, for example, in the team players nametags.' ,
                arguments={
                    "theTeam": """The team you want to change the color of. """,
                    "colorR": """An integer representing the red color value, from 0 to 255. """,
                    "colorG": """An integer representing the green color value, from 0 to 255. """,
                    "colorB": """An integer representing the blue color value, from 0 to 255. """
                },
                result='returns true if the team is valid and the color is different, otherwise false.' ,
            ),
            url='setTeamColor',
        ),
                field=None,
                is_static=False,
            )
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="setTeamFriendlyFire",
                class_name='team',
                method=FunctionData(
            signature=FunctionSignature(
                name='setFriendlyFire',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theTeam',
                                argument_type=FunctionType(
                                    names=['team'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='friendlyFire',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function sets the friendly fire value for the specified team.' ,
                arguments={
                    "theTeam": """The  team that will have friendly fire set """,
                    "friendlyFire": """A boolean denoting whether the players from the same team can kill each other (true) or whether the players cant kill each other (false). """
                },
                result='returns true if the friendly fire value is set for the specified team, false if the friendly fire value cant be set for the specified team or if invalid arguments are specified.' ,
            ),
            url='setTeamFriendlyFire',
        ),
                field=FunctionOOPField(
                                name='friendlyFire',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="setTeamName",
                class_name='team',
                method=FunctionData(
            signature=FunctionSignature(
                name='setName',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theTeam',
                                argument_type=FunctionType(
                                    names=['team'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='newName',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function is used to set a teams name.' ,
                arguments={
                    "theTeam": """The team you want to change the name of. """,
                    "newName": """A string representing the name you want the team to be called. """
                },
                result='returns true if the team was valid and the name was changed, false otherwise.' ,
            ),
            url='setTeamName',
        ),
                field=FunctionOOPField(
                                name='name',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            
        ],
    )
]
