# Autogenerated file. ANY CHANGES WILL BE OVERWRITTEN
from to_python.core.types import FunctionType, \
    FunctionArgument, \
    FunctionArgumentValues, \
    FunctionReturnTypes, \
    FunctionSignature, \
    FunctionDoc, \
    FunctionOOP, \
    FunctionOOPField, \
    CompoundOOPData, \
    FunctionData, \
    CompoundFunctionData

DUMP_PARTIAL = [
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="addPedClothes",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='addClothes',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='clothesTexture',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='clothesModel',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='clothesType',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function is used to set the current clothes on a ped.' ,
                arguments={
                    "thePed": """: The ped whose clothes you want to change. """,
                    "clothesTexture": """: A string determining the clothes texture that will be added. See the CJ Clothes|clothes catalog. """,
                    "clothesModel": """: A string determining the clothes model that will be added. See the CJ Clothes|clothes catalog. """,
                    "clothesType": """: A integer representing the clothes slot/type the clothes should be added to. See the CJ Clothes|clothes catalog. """
                },
                result='this function returns true if the clothes were successfully added to the ped, false otherwise.' ,
            ),
            url='addPedClothes',
        ),
                field=None,
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="addPedClothes",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='addClothes',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='clothesTexture',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='clothesModel',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='clothesType',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function is used to set the current clothes on a ped.' ,
                arguments={
                    "thePed": """: The ped whose clothes you want to change. """,
                    "clothesTexture": """: A string determining the clothes texture that will be added. See the CJ Clothes|clothes catalog. """,
                    "clothesModel": """: A string determining the clothes model that will be added. See the CJ Clothes|clothes catalog. """,
                    "clothesType": """: A integer representing the clothes slot/type the clothes should be added to. See the CJ Clothes|clothes catalog. """
                },
                result='this function returns true if the clothes were successfully added to the ped, false otherwise.' ,
            ),
            url='addPedClothes',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="canPedBeKnockedOffBike",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='canBeKnockedOffBike',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function checks if the given ped can fall off bikes.' ,
                arguments={
                    "thePed": """the ped you want to check. """
                },
                result='returns true if the ped can be knocked off bikes, false if he cannot or an invalid element was passed.' ,
            ),
            url='canPedBeKnockedOffBike',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="getPedAmmoInClip",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='getAmmoInClip',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='weaponSlot',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='current',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns an integer that contains the ammo in a specified peds weapon. See weapon|Weapon Info' ,
                arguments={
                    "thePed": """The ped whose ammo you want to check. """,
                    "weaponSlot": """an integer representing the weapon slot (set to the peds currently selected slot if not specified). """
                },
                result='returns an int containing the amount of ammo in the specified peds currently selected or specified clip, or 0 if the ped specified is invalid.' ,
            ),
            url='getPedAmmoInClip',
        ),
                field=FunctionOOPField(
                                name='ammoInClip',
                                types=[
                                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getPedAmmoInClip",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='getAmmoInClip',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='weaponSlot',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='current',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns an integer that contains the ammo in a specified peds weapon. See weapon|Weapon Info' ,
                arguments={
                    "thePed": """The ped whose ammo you want to check. """,
                    "weaponSlot": """an integer representing the weapon slot (set to the peds currently selected slot if not specified). """
                },
                result='returns an int containing the amount of ammo in the specified peds currently selected or specified clip, or 0 if the ped specified is invalid.' ,
            ),
            url='getPedAmmoInClip',
        ),
                field=FunctionOOPField(
                                name='ammoInClip',
                                types=[
                                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getPedAnimation",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='getAnimation',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Gets the animation of a player or ped that was set using setPedAnimation.' ,
                arguments={
                    "thePed": """the player or ped you want to get the animations|animation of. """
                },
                result='<syntaxhighlight lang=lua>string anim, string block, int time, bool loop, bool updateposition, bool interruptable, bool freezelastframe, int blendtime, bool restoretaskonanimend</syntaxhighlight>' ,
            ),
            url='getPedAnimation',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="getPedArmor",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='getArmor',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns the current armor of the specified ped.' ,
                arguments={
                    "thePed": """The ped whose armor you want to check """
                },
                result='a float with the armor, false if an invalid ped was given.' ,
            ),
            url='getPedArmor',
        ),
                field=FunctionOOPField(
                                name='armor',
                                types=[
                                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getPedArmor",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='getArmor',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns the current armor of the specified ped.' ,
                arguments={
                    "thePed": """The ped whose armor you want to check """
                },
                result='a float with the armor, false if an invalid ped was given.' ,
            ),
            url='getPedArmor',
        ),
                field=FunctionOOPField(
                                name='armor',
                                types=[
                                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getPedBonePosition",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='getBonePosition',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='bone',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Returns the 3D world coordinates of a specific bone of a given ped.' ,
                arguments={
                    "thePed": """the ped you want to inspect. """,
                    "bone": """the number of the bone to get the position of.
<div style="border: 3px red solid; margin-bottom:3px; padding-left:5px;"> """,
                    "1": """BONE_PELVIS1 """,
                    "2": """BONE_PELVIS """,
                    "3": """BONE_SPINE1 """,
                    "4": """BONE_UPPERTORSO """,
                    "5": """BONE_NECK """,
                    "6": """BONE_HEAD2 """,
                    "7": """BONE_HEAD1 """,
                    "8": """BONE_HEAD """,
                    "21": """BONE_RIGHTUPPERTORSO """,
                    "22": """BONE_RIGHTSHOULDER """,
                    "23": """BONE_RIGHTELBOW """,
                    "24": """BONE_RIGHTWRIST """,
                    "25": """BONE_RIGHTHAND """,
                    "26": """BONE_RIGHTTHUMB """,
                    "31": """BONE_LEFTUPPERTORSO """,
                    "32": """BONE_LEFTSHOULDER """,
                    "33": """BONE_LEFTELBOW """,
                    "34": """BONE_LEFTWRIST """,
                    "35": """BONE_LEFTHAND """,
                    "36": """BONE_LEFTTHUMB """,
                    "41": """BONE_LEFTHIP """,
                    "42": """BONE_LEFTKNEE """,
                    "43": """BONE_LEFTANKLE """,
                    "44": """BONE_LEFTFOOT """,
                    "51": """BONE_RIGHTHIP """,
                    "52": """BONE_RIGHTKNEE """,
                    "53": """BONE_RIGHTANKLE """,
                    "54": """BONE_RIGHTFOOT
</div> """
                },
                result='returns the x, y, z world position of the bone.' ,
            ),
            url='getPedBonePosition',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getPedCameraRotation",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='getCameraRotation',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function gets the current camera rotation of a ped.' ,
                arguments={
                    "thePed": """the ped to retrieve the camera rotation of. """
                },
                result='returns the camera rotation of the ped in degrees if successful. returns false if an invalid element was passed.' ,
            ),
            url='getPedCameraRotation',
        ),
                field=FunctionOOPField(
                                name='cameraRotation',
                                types=[
                                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="getPedClothes",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='getClothes',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='clothesType',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function is used to get the current clothes texture and model of a certain type on a ped.' ,
                arguments={
                    "thePed": """The ped whose clothes you want to retrieve. """,
                    "clothesType": """The type/slot of clothing you want to get. """
                },
                result='this function returns 2 string|strings, the clothes texture and model. the first return value will be false if this players clothes type is empty or an invalid player was specified.' ,
            ),
            url='getPedClothes',
        ),
                field=None,
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getPedClothes",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='getClothes',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='clothesType',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function is used to get the current clothes texture and model of a certain type on a ped.' ,
                arguments={
                    "thePed": """The ped whose clothes you want to retrieve. """,
                    "clothesType": """The type/slot of clothing you want to get. """
                },
                result='this function returns 2 string|strings, the clothes texture and model. the first return value will be false if this players clothes type is empty or an invalid player was specified.' ,
            ),
            url='getPedClothes',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="getPedContactElement",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='getContactElement',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function detects the element a ped is standing on. This can be a vehicle or an object.' ,
                arguments={
                    "thePed": """The ped of which you want to get the element he is standing on. """
                },
                result='returns an object or a vehicle if the ped is standing on one, false if he is touching none or an invalid element was passed.' ,
            ),
            url='getPedContactElement',
        ),
                field=FunctionOOPField(
                                name='contactElement',
                                types=[
                                    FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getPedContactElement",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='getContactElement',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function detects the element a ped is standing on. This can be a vehicle or an object.' ,
                arguments={
                    "thePed": """The ped of which you want to get the element he is standing on. """
                },
                result='returns an object or a vehicle if the ped is standing on one, false if he is touching none or an invalid element was passed.' ,
            ),
            url='getPedContactElement',
        ),
                field=FunctionOOPField(
                                name='contactElement',
                                types=[
                                    FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getPedControlState",
                class_name='Ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='getControlState',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='control',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Checks whether a ped or the localplayer has a certain control pressed.' ,
                arguments={
                    "thePed": """the ped you want to check. """,
                    "control": """the control to get the status of. See control names for a list of valid names. """
                },
                result='returns true if the ped is pressing the specified control, false if not or an invalid argument was passed.' ,
            ),
            url='getPedControlState',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="getPedFightingStyle",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='getFightingStyle',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Retrieves the fighting style a player/ped is currently using.' ,
                arguments={
                    "thePed": """the ped whose current fighting style ID you wish to retrieve. """
                },
                result='returns the peds current fighting style as an integer id, false if it fails to retrieve a value.' ,
            ),
            url='getPedFightingStyle',
        ),
                field=FunctionOOPField(
                                name='fightingStyle',
                                types=[
                                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getPedFightingStyle",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='getFightingStyle',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Retrieves the fighting style a player/ped is currently using.' ,
                arguments={
                    "thePed": """the ped whose current fighting style ID you wish to retrieve. """
                },
                result='returns the peds current fighting style as an integer id, false if it fails to retrieve a value.' ,
            ),
            url='getPedFightingStyle',
        ),
                field=FunctionOOPField(
                                name='fightingStyle',
                                types=[
                                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="getPedGravity",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='getGravity',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns the current gravity for the specified ped. The default gravity is 0.008.' ,
                arguments={
                    "thePed": """The ped whose gravity you want to check. """
                },
                result='returns a float indicating the peds gravity, or false if the ped is invalid. default value is 0.008.' ,
            ),
            url='getPedGravity',
        ),
                field=FunctionOOPField(
                                name='gravity',
                                types=[
                                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description="""Set the variable to nil to execute [[removePedFromVehicle]]""",
                base_function_name="getPedOccupiedVehicle",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='getOccupiedVehicle',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function gets the vehicle that the ped is currently in or is trying to enter, if any.' ,
                arguments={
                    "thePed": """: The ped whose vehicle youre looking up. """
                },
                result='returns the vehicle that the specified ped is in, or false if the ped is not in a vehicle or is an invalid ped.' ,
            ),
            url='getPedOccupiedVehicle',
        ),
                field=FunctionOOPField(
                                name='vehicle',
                                types=[
                                    FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description="""Set the variable to nil to execute [[removePedFromVehicle]]""",
                base_function_name="getPedOccupiedVehicle",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='getOccupiedVehicle',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function gets the vehicle that the ped is currently in or is trying to enter, if any.' ,
                arguments={
                    "thePed": """: The ped whose vehicle youre looking up. """
                },
                result='returns the vehicle that the specified ped is in, or false if the ped is not in a vehicle or is an invalid ped.' ,
            ),
            url='getPedOccupiedVehicle',
        ),
                field=FunctionOOPField(
                                name='vehicle',
                                types=[
                                    FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description="""Prior to 1.5, the variable was .occupiedVehicleSeat""",
                base_function_name="getPedOccupiedVehicleSeat",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='getOccupiedVehicleSeat',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function gets the seat that a specific ped is sitting in in a vehicle.' ,
                arguments={
                    "thePed": """: The ped whose vehicle seat youre looking up. """
                },
                result='* returns an integer containing the number of the seat that the ped is currently in:\n** 0: front-left\n** 1: front-right\n** 2: rear-left\n** 3: rear-right\nreturns false if the ped is on foot, or the ped doesnt exist.' ,
            ),
            url='getPedOccupiedVehicleSeat',
        ),
                field=FunctionOOPField(
                                name='vehicleSeat',
                                types=[
                                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description="""Prior to 1.5, the variable was .occupiedVehicleSeat""",
                base_function_name="getPedOccupiedVehicleSeat",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='getOccupiedVehicleSeat',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function gets the seat that a specific ped is sitting in in a vehicle.' ,
                arguments={
                    "thePed": """: The ped whose vehicle seat youre looking up. """
                },
                result='* returns an integer containing the number of the seat that the ped is currently in:\n** 0: front-left\n** 1: front-right\n** 2: rear-left\n** 3: rear-right\nreturns false if the ped is on foot, or the ped doesnt exist.' ,
            ),
            url='getPedOccupiedVehicleSeat',
        ),
                field=FunctionOOPField(
                                name='vehicleSeat',
                                types=[
                                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getPedOxygenLevel",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='getOxygenLevel',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns the current oxygen level of the specified ped.' ,
                arguments={
                    "thePed": """The ped whose oxygen level you want to check """
                },
                result='a float with the oxygen level, false if an invalid ped was given.' ,
            ),
            url='getPedOxygenLevel',
        ),
                field=FunctionOOPField(
                                name='oxygenLevel',
                                types=[
                                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="getPedStat",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='getStat',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='stat',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns the value of the specified statistic of a specific ped.' ,
                arguments={
                    "thePed": """: The ped whose stat you want to retrieve. """,
                    "stat": """: A whole number determining the stat ID. """
                },
                result='returns the value of the requested statistic.' ,
            ),
            url='getPedStat',
        ),
                field=None,
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getPedStat",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='getStat',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='stat',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns the value of the specified statistic of a specific ped.' ,
                arguments={
                    "thePed": """: The ped whose stat you want to retrieve. """,
                    "stat": """: A whole number determining the stat ID. """
                },
                result='returns the value of the requested statistic.' ,
            ),
            url='getPedStat',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="getPedTarget",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='getTarget',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function is used to get the element a ped is currently targeting.' ,
                arguments={
                    "thePed": """The ped whose target you want to retrieve. """
                },
                result='returns the element thats being targeted, or false if there isnt one.\nthis is only effective on physical gta elements, namely:\n* players\n* peds\n* vehicles\n* objects' ,
            ),
            url='getPedTarget',
        ),
                field=None,
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getPedTarget",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='getTarget',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function is used to get the element a ped is currently targeting.' ,
                arguments={
                    "thePed": """The ped whose target you want to retrieve. """
                },
                result='returns the element thats being targeted, or false if there isnt one.\nthis is only effective on physical gta elements, namely:\n* players\n* peds\n* vehicles\n* objects' ,
            ),
            url='getPedTarget',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getPedTargetEnd",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='getTargetEnd',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='targetingPed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function allows retrieval of the position where a peds target range ends, when he is aiming with a weapon.' ,
                arguments={
                    "targetingPed": """the ped who is targeting whose target end you wish to retrieve """
                },
                result='returns three floats, x,y,z, representing the position where the peds target ends according to his range, or false if it was unsuccessful.' ,
            ),
            url='getPedTargetEnd',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getPedTask",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='getTask',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='priority',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='taskType',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function is used to get any simple or complex task of a certain type for a ped.\nIt can provide feedback on all tasks relating to a ped. For example, while jumping, getPedSimplestTask will return TASK_SIMPLE_IN_AIR. If you wanted to know specifically if the player has jumped, you would use this function. If you did you will discover that while jumping Primary task 3 is TASK_COMPLEX_JUMP.' ,
                arguments={
                    "thePed": """: The ped whose task you want to retrieve. """,
                    "priority": """: A string determining which set of tasks you want to retrieve it from. This must be either primary or secondary. """,
                    "taskType": """: An integer value representing the task type (or slot) you want to get the task from. Types can be: """,
                    "PRIMARY TASKS": """ """,
                    "0": """TASK_SECONDARY_ATTACK """,
                    "1": """TASK_SECONDARY_DUCK """,
                    "2": """TASK_SECONDARY_SAY """,
                    "3": """TASK_SECONDARY_FACIAL_COMPLEX """,
                    "4": """TASK_SECONDARY_PARTIAL_ANIM """,
                    "SECONDARY TASKS": """ """,
                    "5": """TASK_SECONDARY_IK """
                },
                result='returns the name of the most complex task. see list of player tasks for valid strings. returns false if invalid arguments are specified or if there is no task of the type specified.\n<br>\nreturns between 1 and 4 strings. the first string contains the name of the most complex task, with simpler sub-tasks being named in the following strings. see list of player tasks for valid strings. returns false if invalid arguments are specified or if there is no task of the type specified.' ,
            ),
            url='getPedTask',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="getPedTotalAmmo",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='getTotalAmmo',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='weaponSlot',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='current',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns an integer that contains the total ammo in a specified peds weapon. See weapon|Weapon Info' ,
                arguments={
                    "thePed": """: The ped whose ammo you want to check. """,
                    "weaponSlot": """: an integer representing the weapon slot (set to the peds current slot if not given) """
                },
                result='returns an int containing the total amount of ammo for the specified peds weapon, or 0 if the ped specified is invalid.' ,
            ),
            url='getPedTotalAmmo',
        ),
                field=None,
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getPedTotalAmmo",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='getTotalAmmo',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='weaponSlot',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='current',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns an integer that contains the total ammo in a specified peds weapon. See weapon|Weapon Info' ,
                arguments={
                    "thePed": """: The ped whose ammo you want to check. """,
                    "weaponSlot": """: an integer representing the weapon slot (set to the peds current slot if not given) """
                },
                result='returns an int containing the total amount of ammo for the specified peds weapon, or 0 if the ped specified is invalid.' ,
            ),
            url='getPedTotalAmmo',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="getPedWalkingStyle",
                class_name='Ped|ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='getWalkingStyle',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='' ,
                arguments={
                    "thePed": """the ped whose walking style to retrieve. """
                },
                result='returns the walking style id if successful, false otherwise. the possible walking styles are as follows:' ,
            ),
            url='getPedWalkingStyle',
        ),
                field=FunctionOOPField(
                                name='walkingStyle',
                                types=[
                                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getPedWalkingStyle",
                class_name='Ped|ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='getWalkingStyle',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='' ,
                arguments={
                    "thePed": """the ped whose walking style to retrieve. """
                },
                result='returns the walking style id if successful, false otherwise. the possible walking styles are as follows:' ,
            ),
            url='getPedWalkingStyle',
        ),
                field=FunctionOOPField(
                                name='walkingStyle',
                                types=[
                                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="getPedWeapon",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='getWeapon',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='weaponSlot',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='current',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function tells you which weapon type is in a certain weapon|weapon slot of a ped.' ,
                arguments={
                    "thePed": """: the ped you want to get the weapon type from. """,
                    "weaponSlot": """: an integer representing the weapon|weapon slot (set to the peds current slot if not given). """
                },
                result='returns an int indicating the type of the weapon the ped has in the specified slot. if the slot is empty, it returns 0.\nit should be noted that if a ped runs out of ammo for a weapon, it will still return the id of that weapon in the slot (even if it appears as if the ped does not have a weapon at all), though getpedtotalammo will return 0.  therefore, getpedtotalammo should be used in conjunction with getpedweapon in order to check if a ped has a weapon.' ,
            ),
            url='getPedWeapon',
        ),
                field=None,
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getPedWeapon",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='getWeapon',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='weaponSlot',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='current',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function tells you which weapon type is in a certain weapon|weapon slot of a ped.' ,
                arguments={
                    "thePed": """: the ped you want to get the weapon type from. """,
                    "weaponSlot": """: an integer representing the weapon|weapon slot (set to the peds current slot if not given). """
                },
                result='returns an int indicating the type of the weapon the ped has in the specified slot. if the slot is empty, it returns 0.\nit should be noted that if a ped runs out of ammo for a weapon, it will still return the id of that weapon in the slot (even if it appears as if the ped does not have a weapon at all), though getpedtotalammo will return 0.  therefore, getpedtotalammo should be used in conjunction with getpedweapon in order to check if a ped has a weapon.' ,
            ),
            url='getPedWeapon',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="getPedWeaponSlot",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='getWeaponSlot',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function gets a peds selected weapon slot.' ,
                arguments={
                    "thePed": """the ped to get the current weapon slot of. """
                },
                result='returns the selected weapon slot id on success, false otherwise.' ,
            ),
            url='getPedWeaponSlot',
        ),
                field=FunctionOOPField(
                                name='weaponSlot',
                                types=[
                                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getPedWeaponSlot",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='getWeaponSlot',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function gets a peds selected weapon slot.' ,
                arguments={
                    "thePed": """the ped to get the current weapon slot of. """
                },
                result='returns the selected weapon slot id on success, false otherwise.' ,
            ),
            url='getPedWeaponSlot',
        ),
                field=FunctionOOPField(
                                name='weaponSlot',
                                types=[
                                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="isPedBleeding",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='isBleeding',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='' ,
                arguments={
                    "thePed": """the player or ped whose bleeding effect state you want to get. """
                },
                result='returns true if the player or ped is bleeding, false otherwise.' ,
            ),
            url='isPedBleeding',
        ),
                field=FunctionOOPField(
                                name='bleeding',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="isPedChoking",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='isChoking',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function checks if the specified ped is choking (coughing) or not. This happens as a result of weapons that produce smoke - smoke grenades, fire extinguisher and the spray can.' ,
                arguments={
                    "thePed": """: The ped you wish to check """
                },
                result='returns true if the ped is choking, false otherwise.' ,
            ),
            url='isPedChoking',
        ),
                field=FunctionOOPField(
                                name='choking',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="isPedChoking",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='isChoking',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function checks if the specified ped is choking (coughing) or not. This happens as a result of weapons that produce smoke - smoke grenades, fire extinguisher and the spray can.' ,
                arguments={
                    "thePed": """: The ped you wish to check """
                },
                result='returns true if the ped is choking, false otherwise.' ,
            ),
            url='isPedChoking',
        ),
                field=FunctionOOPField(
                                name='choking',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="isPedDead",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='isDead',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function checks if the specified ped is dead or not.' ,
                arguments={
                    "thePed": """: the ped you want to check up on. """
                },
                result='returns true if the ped is dead, false otherwise.' ,
            ),
            url='isPedDead',
        ),
                field=FunctionOOPField(
                                name='dead',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="isPedDead",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='isDead',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function checks if the specified ped is dead or not.' ,
                arguments={
                    "thePed": """: the ped you want to check up on. """
                },
                result='returns true if the ped is dead, false otherwise.' ,
            ),
            url='isPedDead',
        ),
                field=FunctionOOPField(
                                name='dead',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="isPedDoingGangDriveby",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='isDoingGangDriveby',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function checks if the ped is in the driveby state.' ,
                arguments={
                    "thePed": """The ped element whose state is to be checked. """
                },
                result='returns true if the driveby state is enabled, false otherwise.' ,
            ),
            url='isPedDoingGangDriveby',
        ),
                field=FunctionOOPField(
                                name='doingGangDriveby',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="isPedDoingGangDriveby",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='isDoingGangDriveby',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function checks if the ped is in the driveby state.' ,
                arguments={
                    "thePed": """The ped element whose state is to be checked. """
                },
                result='returns true if the driveby state is enabled, false otherwise.' ,
            ),
            url='isPedDoingGangDriveby',
        ),
                field=FunctionOOPField(
                                name='doingGangDriveby',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="isPedDucked",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='isDucked',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function checks if the specified ped is ducked (crouched) or not.' ,
                arguments={
                    "thePed": """: The ped to check. """
                },
                result='returns true if the ped is ducked, false otherwise.' ,
            ),
            url='isPedDucked',
        ),
                field=FunctionOOPField(
                                name='ducked',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="isPedDucked",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='isDucked',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function checks if the specified ped is ducked (crouched) or not.' ,
                arguments={
                    "thePed": """: The ped to check. """
                },
                result='returns true if the ped is ducked, false otherwise.' ,
            ),
            url='isPedDucked',
        ),
                field=FunctionOOPField(
                                name='ducked',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="isPedInVehicle",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='isInVehicle',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Checks whether or not a given ped is currently in a vehicle.' ,
                arguments={
                    "thePed": """the ped you want to check. """
                },
                result='returns true if the ped is in a vehicle, false if he is on foot or an invalid element was passed.' ,
            ),
            url='isPedInVehicle',
        ),
                field=FunctionOOPField(
                                name='inVehicle',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="isPedInVehicle",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='isInVehicle',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Checks whether or not a given ped is currently in a vehicle.' ,
                arguments={
                    "thePed": """the ped you want to check. """
                },
                result='returns true if the ped is in a vehicle, false if he is on foot or an invalid element was passed.' ,
            ),
            url='isPedInVehicle',
        ),
                field=FunctionOOPField(
                                name='inVehicle',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="isPedOnFire",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='isOnFire',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function checks if the specified ped is on fire or not.' ,
                arguments={
                    "thePed": """: The ped to check. """
                },
                result='returns true if the ped is on fire, false otherwise.' ,
            ),
            url='isPedOnFire',
        ),
                field=FunctionOOPField(
                                name='onFire',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="isPedOnFire",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='isOnFire',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function checks if the specified ped is on fire or not.' ,
                arguments={
                    "thePed": """: The ped to check. """
                },
                result='returns true if the ped is on fire, false otherwise.' ,
            ),
            url='isPedOnFire',
        ),
                field=FunctionOOPField(
                                name='onFire',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="isPedOnGround",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='isOnGround',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function is used to determine whether or not a ped is on the ground. This is for on-foot usage only.' ,
                arguments={
                    "thePed": """The ped you are checking. """
                },
                result='returns true if the ped is on foot and on the ground, false otherwise, even if he is in a car that stands still or on object outside world map.' ,
            ),
            url='isPedOnGround',
        ),
                field=FunctionOOPField(
                                name='onGround',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="isPedOnGround",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='isOnGround',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function is used to determine whether or not a ped is on the ground. This is for on-foot usage only.' ,
                arguments={
                    "thePed": """The ped you are checking. """
                },
                result='returns true if the ped is on foot and on the ground, false otherwise, even if he is in a car that stands still or on object outside world map.' ,
            ),
            url='isPedOnGround',
        ),
                field=FunctionOOPField(
                                name='onGround',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="isPedReloadingWeapon",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='isReloadingWeapon',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function is used to determine whether or not a ped is currently reloading their weapon. Useful to stop certain quick reload exploits.}}' ,
                arguments={
                    "thePed": """The ped you are checking. """
                },
                result='returns true if the ped is currently reloading a weapon, false otherwise.' ,
            ),
            url='isPedReloadingWeapon',
        ),
                field=FunctionOOPField(
                                name='reloadingWeapon',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="isPedWearingJetpack",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='isWearingJetpack',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='' ,
                arguments={
                    "thePed": """the ped you want to check """
                },
                result='returns true if the ped is carrying a jetpack, false if he is not or an invalid element was passed.' ,
            ),
            url='isPedWearingJetpack',
        ),
                field=FunctionOOPField(
                                name='jetpack',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="isPedWearingJetpack",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='isWearingJetpack',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='' ,
                arguments={
                    "thePed": """the ped you want to check """
                },
                result='returns true if the ped is carrying a jetpack, false if he is not or an invalid element was passed.' ,
            ),
            url='isPedWearingJetpack',
        ),
                field=FunctionOOPField(
                                name='jetpack',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="killPed",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='kill',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='theKiller',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=True,
                                ),
                                default_value='nil',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='weapon',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='255',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='bodyPart',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='255',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='stealth',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='false',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function kills the specified ped.\nFrom v1.5.3 onwards this function is now available client side. Only works on client side peds.' ,
                arguments={
                    "thePed": """The ped to kill """,
                    "theKiller": """The ped responsible for the kill """,
                    "weapon": """The ID of the weapon or Damage Types that should appear to have killed the ped (doesnt affect how they die) """,
                    "bodyPart": """The ID of the body part that should appear to have been hit by the weapon (doesnt affect how they die) """,
                    "stealth": """Boolean value, representing whether or not this a stealth kill """
                },
                result='returns true if the ped was killed, false if the ped specified could not be killed or is invalid.' ,
            ),
            url='killPed',
        ),
                field=None,
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="killPed",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='kill',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='theKiller',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=True,
                                ),
                                default_value='nil',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='weapon',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='255',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='bodyPart',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='255',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='stealth',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='false',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function kills the specified ped.\nFrom v1.5.3 onwards this function is now available client side. Only works on client side peds.' ,
                arguments={
                    "thePed": """The ped to kill """,
                    "theKiller": """The ped responsible for the kill """,
                    "weapon": """The ID of the weapon or Damage Types that should appear to have killed the ped (doesnt affect how they die) """,
                    "bodyPart": """The ID of the body part that should appear to have been hit by the weapon (doesnt affect how they die) """,
                    "stealth": """Boolean value, representing whether or not this a stealth kill """
                },
                result='returns true if the ped was killed, false if the ped specified could not be killed or is invalid.' ,
            ),
            url='killPed',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="reloadPedWeapon",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='reloadWeapon',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function makes a pedestrian reload their weapon.' ,
                arguments={
                    "thePed": """The ped who will reload their weapon. """
                },
                result='returns true if the pedestrian was made to reload, or false if invalid arguments were passed or that pedestrian has a weapon which cannot be reloaded.\nnote: this will fail but return true if\n1) the ped is crouched and moving\n2) the ped is using a weapon without clip ammo (or minigun/flamethrower/fire\nextinguisher)\n3) the ped is using his weapon (shooting/aiming)\n4) the ped moved while crouching recently\ndue to these circumstances causing problems with this function' ,
            ),
            url='reloadPedWeapon',
        ),
                field=None,
                is_static=False,
            )
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="removePedClothes",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='removeClothes',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='clothesType',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='clothesTexture',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='clothesModel',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function is used to remove the current clothes of a certain type on a ped. It will remove them if the clothesTexture and clothesModel arent specified, or if they match the current clothes on that slot.' ,
                arguments={
                    "thePed": """: The ped you want to remove clothes from. """,
                    "clothesType": """: the clothes slot/type to remove. See the CJ Clothes|clothes catalog. """,
                    "clothesTexture": """: (Server only) A string determining the clothes texture that will be removed. See the CJ Clothes|clothes catalog. """,
                    "clothesModel": """: (Server only) A string determining the clothes model that will be removed. See the CJ Clothes|clothes catalog. """
                },
                result='this function returns true if the clothes were successfully removed from the ped, false otherwise.' ,
            ),
            url='removePedClothes',
        ),
                field=None,
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="removePedClothes",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='removeClothes',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='clothesType',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='clothesTexture',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='clothesModel',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function is used to remove the current clothes of a certain type on a ped. It will remove them if the clothesTexture and clothesModel arent specified, or if they match the current clothes on that slot.' ,
                arguments={
                    "thePed": """: The ped you want to remove clothes from. """,
                    "clothesType": """: the clothes slot/type to remove. See the CJ Clothes|clothes catalog. """,
                    "clothesTexture": """: (Server only) A string determining the clothes texture that will be removed. See the CJ Clothes|clothes catalog. """,
                    "clothesModel": """: (Server only) A string determining the clothes model that will be removed. See the CJ Clothes|clothes catalog. """
                },
                result='this function returns true if the clothes were successfully removed from the ped, false otherwise.' ,
            ),
            url='removePedClothes',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description="""Set the variable to nil to execute this function""",
                base_function_name="removePedFromVehicle",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='removeFromVehicle',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function removes a ped from a vehicle immediately. This works for drivers and passengers. Note that this removes the ped from the vehicle and puts him in the exact position where the command was initiated.\nAvailable client side from 1.3.1 (It will only work with client side vehicles and peds)' ,
                arguments={
                    "thePed": """The ped you wish to remove from a vehicle """
                },
                result='returns true if the operation was successful, false if the specified ped is not valid or if it isnt in a vehicle.' ,
            ),
            url='removePedFromVehicle',
        ),
                field=FunctionOOPField(
                                name='vehicle',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description="""Set the variable to nil to execute this function""",
                base_function_name="removePedFromVehicle",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='removeFromVehicle',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function removes a ped from a vehicle immediately. This works for drivers and passengers. Note that this removes the ped from the vehicle and puts him in the exact position where the command was initiated.\nAvailable client side from 1.3.1 (It will only work with client side vehicles and peds)' ,
                arguments={
                    "thePed": """The ped you wish to remove from a vehicle """
                },
                result='returns true if the operation was successful, false if the specified ped is not valid or if it isnt in a vehicle.' ,
            ),
            url='removePedFromVehicle',
        ),
                field=FunctionOOPField(
                                name='vehicle',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="setPedAnimation",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='setAnimation',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='block',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=True,
                                ),
                                default_value='nil',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='anim',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=True,
                                ),
                                default_value='nil',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='time',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='-1',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='loop',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='true',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='updatePosition',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='true',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='interruptable',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='true',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='freezeLastFrame',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='true',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='blendTime',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='250',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='retainPedState',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='false',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Sets the current Animations|animation of a player or ped. Not specifying the type of animation will automatically cancel the current one.' ,
                arguments={
                    "thePed": """the player or ped you want to apply an Animations|animation to. """,
                    "block": """the Animations|animation blocks name. """,
                    "anim": """the name of the Animations|animation within the block. """,
                    "time": """how long the animation will run for in milliseconds. """,
                    "loop": """indicates whether or not the animation will loop. """,
                    "updatePosition": """will change the actual coordinates of the ped according to the animation. Use this for e.g. walking animations. """,
                    "interruptable": """if set to false other tasks wont be able to interupt the animation. Setting this to false also gives this function more power to override other animations that are running. For example, squatting after a jump can be terminated. """,
                    "freezeLastFrame": """if set to true after animation the last frame will be frozen, otherwise the animation will end and controls will return. """,
                    "blendTime": """how long the animation will mixed with the previous one in milliseconds. """,
                    "retainPedState": """will restore the task which was playing before calling this function. Useful for restoring the crouch task after animation ends. This may be extended in the future to support other states/tasks.
|16632}} """
                },
                result='returns true if succesful, false otherwise.' ,
            ),
            url='setPedAnimation',
        ),
                field=None,
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="setPedAnimation",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='setAnimation',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='block',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=True,
                                ),
                                default_value='nil',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='anim',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=True,
                                ),
                                default_value='nil',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='time',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='-1',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='loop',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='true',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='updatePosition',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='true',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='interruptable',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='true',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='freezeLastFrame',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='true',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='blendTime',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='250',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='retainPedState',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='false',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Sets the current Animations|animation of a player or ped. Not specifying the type of animation will automatically cancel the current one.' ,
                arguments={
                    "thePed": """the player or ped you want to apply an Animations|animation to. """,
                    "block": """the Animations|animation blocks name. """,
                    "anim": """the name of the Animations|animation within the block. """,
                    "time": """how long the animation will run for in milliseconds. """,
                    "loop": """indicates whether or not the animation will loop. """,
                    "updatePosition": """will change the actual coordinates of the ped according to the animation. Use this for e.g. walking animations. """,
                    "interruptable": """if set to false other tasks wont be able to interupt the animation. Setting this to false also gives this function more power to override other animations that are running. For example, squatting after a jump can be terminated. """,
                    "freezeLastFrame": """if set to true after animation the last frame will be frozen, otherwise the animation will end and controls will return. """,
                    "blendTime": """how long the animation will mixed with the previous one in milliseconds. """,
                    "retainPedState": """will restore the task which was playing before calling this function. Useful for restoring the crouch task after animation ends. This may be extended in the future to support other states/tasks.
|16632}} """
                },
                result='returns true if succesful, false otherwise.' ,
            ),
            url='setPedAnimation',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="setPedAnimationProgress",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='setAnimationProgress',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='anim',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='progress',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Sets the current animation progress of a player or ped.' ,
                arguments={
                    "thePed": """the player or ped you want to change animation progress. """,
                    "anim": """the animation name currently applied to ped, if not supplied, the animation will stop """,
                    "progress": """current animation progress you want to apply, value from 0.0 to 1.0, if not supplied will default to 0.0 """
                },
                result='returns true if successful, false otherwise.' ,
            ),
            url='setPedAnimationProgress',
        ),
                field=None,
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="setPedAnimationProgress",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='setAnimationProgress',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='anim',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='progress',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Sets the current animation progress of a player or ped.' ,
                arguments={
                    "thePed": """the player or ped you want to change animation progress. """,
                    "anim": """the animation name currently applied to ped, if not supplied, the animation will stop """,
                    "progress": """current animation progress you want to apply, value from 0.0 to 1.0, if not supplied will default to 0.0 """
                },
                result='returns true if successful, false otherwise.' ,
            ),
            url='setPedAnimationProgress',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="setPedAnimationSpeed",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='setAnimationSpeed',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='anim',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=True,
                                ),
                                default_value='""',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='speed',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value='1.0',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Sets the speed of a currently running animation for a particular player or ped.' ,
                arguments={
                    "thePed": """the player or ped you want to change animation speed of. """,
                    "anim": """the animation name it will affect. """,
                    "speed": """a float containing the speed between 0.0–1.0 you want to apply to the animation. This limitation may be adjusted in the future, so do not provide speeds outside this boundary. {{New feature/item|3.0158|1.5.7|20395|The limit is now 0.0 to 10.0.}} {{Warning|Setting speed higher than 1 can cause issues with some animations.}} """
                },
                result='returns true if successful, false otherwise.' ,
            ),
            url='setPedAnimationSpeed',
        ),
                field=None,
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="setPedAnimationSpeed",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='setAnimationSpeed',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='anim',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=True,
                                ),
                                default_value='""',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='speed',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value='1.0',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Sets the speed of a currently running animation for a particular player or ped.' ,
                arguments={
                    "thePed": """the player or ped you want to change animation speed of. """,
                    "anim": """the animation name it will affect. """,
                    "speed": """a float containing the speed between 0.0–1.0 you want to apply to the animation. This limitation may be adjusted in the future, so do not provide speeds outside this boundary. {{New feature/item|3.0158|1.5.7|20395|The limit is now 0.0 to 10.0.}} {{Warning|Setting speed higher than 1 can cause issues with some animations.}} """
                },
                result='returns true if successful, false otherwise.' ,
            ),
            url='setPedAnimationSpeed',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="setPedArmor",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='setArmor',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='armor',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function allows you to set the armor value of a ped.' ,
                arguments={
                    "thePed": """: the ped whose armor you want to modify. """,
                    "armor": """: the amount of armor you want to set on the ped. Valid values are from 0 to 100. """
                },
                result='returns true if the armor was changed succesfully. returns false if an invalid ped was specified, or the armor value specified is out of acceptable range.' ,
            ),
            url='setPedArmor',
        ),
                field=FunctionOOPField(
                                name='armor',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="setPedArmor",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='setArmor',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='armor',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function allows you to set the armor value of a ped.' ,
                arguments={
                    "thePed": """: the ped whose armor you want to modify. """,
                    "armor": """: the amount of armor you want to set on the ped. Valid values are from 0 to 100. """
                },
                result='returns true if the armor was changed succesfully. returns false if an invalid ped was specified, or the armor value specified is out of acceptable range.' ,
            ),
            url='setPedArmor',
        ),
                field=FunctionOOPField(
                                name='armor',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="setPedBleeding",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='setBleeding',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='bleeding',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='' ,
                arguments={
                    "thePed": """the player or ped whose bleeding effect you want to set of. """,
                    "bleeding": """boolean specifying whether the player or ped is bleeding or not. """
                },
                result='returns true if the bleeding state was successfully set, error is raised otherwise.' ,
            ),
            url='setPedBleeding',
        ),
                field=FunctionOOPField(
                                name='bleeding',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="setPedCameraRotation",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='setCameraRotation',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='cameraRotation',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function sets the camera rotation of a ped, e.g. where its camera will look at. Dont confuse this with getCameraMatrix, because that function is designed for fixed (scripted) camera moves.' ,
                arguments={
                    "thePed": """The ped whose camera rotation is to be changed. """,
                    "cameraRotation": """The new direction that the ped will walk if you set their forwards control state. If the ped is the local player, it will also change where his camera is looking at if it isnt fixed (i.e. camera target is the local player). """
                },
                result='returns true if the camera rotation was changed, false otherwise.' ,
            ),
            url='setPedCameraRotation',
        ),
                field=FunctionOOPField(
                                name='cameraRotation',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="setPedCanBeKnockedOffBike",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='setCanBeKnockedOffBike',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='canBeKnockedOffBike',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function controls if a ped can fall of his bike by accident - namely by banging into a wall.' ,
                arguments={
                    "thePed": """the ped whose knockoffstatus is being changed """,
                    "canBeKnockedOffBike": """true or false """
                },
                result='' ,
            ),
            url='setPedCanBeKnockedOffBike',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="setPedChoking",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='setChoking',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='choking',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function can be used to force the ped to do the choking (coughing) animation until he respawns or toggled off using this function. The animation can not be cancelled by a player its applied to, and he will not loose health.' ,
                arguments={
                    "thePed": """The ped whose choking status to toggle """,
                    "choking": """true to make the ped choke, false to no longer force his choking animation """
                },
                result='returns true if successful, false otherwise (e.g. player handle is invalid)' ,
            ),
            url='setPedChoking',
        ),
                field=FunctionOOPField(
                                name='choking',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="setPedControlState",
                class_name='Ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='setControlState',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='control',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='state',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function makes a ped or player press or release a certain control.' ,
                arguments={
                    "thePed": """the ped you want to press or release a control. """,
                    "control": """the name of the control of which to change the state. See control names for a list of valid names. """,
                    "state": """the new control state. true means pressed, false is released. """
                },
                result='returns true if successful, false if otherwise.' ,
            ),
            url='setPedControlState',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="setPedGravity",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='setGravity',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='gravity',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function sets the gravity level of a ped.' ,
                arguments={
                    "thePed": """: The ped whose gravity to change. """,
                    "level": """: The level of gravity (default is 0.008). """
                },
                result='returns true if the gravity was successfully set, false otherwise' ,
            ),
            url='setPedGravity',
        ),
                field=FunctionOOPField(
                                name='gravity',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="setPedHeadless",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='setHeadless',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='headState',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='With this function, you can set if a ped has a head or not.' ,
                arguments={
                    "thePed": """: The ped to check. """,
                    "headState": """: head state, use true if you want the ped be headless, use false to give back the head. """
                },
                result='returns true if successful, false otherwise' ,
            ),
            url='setPedHeadless',
        ),
                field=FunctionOOPField(
                                name='headless',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="setPedHeadless",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='setHeadless',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='headState',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='With this function, you can set if a ped has a head or not.' ,
                arguments={
                    "thePed": """: The ped to check. """,
                    "headState": """: head state, use true if you want the ped be headless, use false to give back the head. """
                },
                result='returns true if successful, false otherwise' ,
            ),
            url='setPedHeadless',
        ),
                field=FunctionOOPField(
                                name='headless',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="setPedOnFire",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='setOnFire',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='isOnFire',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function can be used to set a ped on fire or extinguish a fire on it.' ,
                arguments={
                    "thePed": """The ped that we want to set/unset """,
                    "isOnFire": """true to set the ped on fire, false to extinguish any fire on him """
                },
                result='returns true if successful, false otherwise' ,
            ),
            url='setPedOnFire',
        ),
                field=FunctionOOPField(
                                name='onFire',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="setPedOnFire",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='setOnFire',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='isOnFire',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function can be used to set a ped on fire or extinguish a fire on it.' ,
                arguments={
                    "thePed": """The ped that we want to set/unset """,
                    "isOnFire": """true to set the ped on fire, false to extinguish any fire on him """
                },
                result='returns true if successful, false otherwise' ,
            ),
            url='setPedOnFire',
        ),
                field=FunctionOOPField(
                                name='onFire',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="setPedOxygenLevel",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='setOxygenLevel',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='oxygen',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function allows you to set the oxygen level of a ped.' ,
                arguments={
                    "thePed": """: the ped whose oxygen level you want to modify. """,
                    "oxygen": """: the amount of oxygen you want to set on the ped. Native values are from 0 to 1000. Each of the stamina (22) and underwater stamina (225) Template:Stats|stat maximum adds a bonus of 1500. So the maximum oxygen level is 4000. """
                },
                result='returns true if the oxygen level was changed succesfully. returns false if an invalid ped and/or oxygen level was specified.' ,
            ),
            url='setPedOxygenLevel',
        ),
                field=FunctionOOPField(
                                name='oxygenLevel',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="setPedVoice",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='setVoice',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='voiceType',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='voiceName',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Changes the voice of a ped.' ,
                arguments={
                    "thePed": """the ped whose voice to change. """,
                    "voiceType": """the voice type. See ped voices for possible types. """,
                    "voiceName": """the voice name within the specified type. See ped voices for possible voices. """
                },
                result='returns true when the voice was successfully set, false otherwise.' ,
            ),
            url='setPedVoice',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="setPedWalkingStyle",
                class_name='Ped|ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='setWalkingStyle',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='style',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Sets the walking style of a ped. A walking style consists of a set of animations that are used for walking, running etc.' ,
                arguments={
                    "thePed": """the ped whose walking style to change. """,
                    "style": """the walking style to set.
The possible walking styles are: """
                },
                result='returns true if successful, false otherwise.' ,
            ),
            url='setPedWalkingStyle',
        ),
                field=FunctionOOPField(
                                name='walkingStyle',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="setPedWalkingStyle",
                class_name='Ped|ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='setWalkingStyle',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='style',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Sets the walking style of a ped. A walking style consists of a set of animations that are used for walking, running etc.' ,
                arguments={
                    "thePed": """the ped whose walking style to change. """,
                    "style": """the walking style to set.
The possible walking styles are: """
                },
                result='returns true if successful, false otherwise.' ,
            ),
            url='setPedWalkingStyle',
        ),
                field=FunctionOOPField(
                                name='walkingStyle',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="setPedWeaponSlot",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='setWeaponSlot',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='weaponSlot',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function changes the selected weapon slot of a ped.' ,
                arguments={
                    "thePed": """the ped whose weapon slot you want to set. In a clientside script, this cannot be used on remote players. """,
                    "weaponSlot": """the weapon slot to set. """
                },
                result='returns true if successful in setting the peds equipped weapon slot, false otherwise.' ,
            ),
            url='setPedWeaponSlot',
        ),
                field=FunctionOOPField(
                                name='weaponSlot',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="setPedWeaponSlot",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='setWeaponSlot',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='weaponSlot',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function changes the selected weapon slot of a ped.' ,
                arguments={
                    "thePed": """the ped whose weapon slot you want to set. In a clientside script, this cannot be used on remote players. """,
                    "weaponSlot": """the weapon slot to set. """
                },
                result='returns true if successful in setting the peds equipped weapon slot, false otherwise.' ,
            ),
            url='setPedWeaponSlot',
        ),
                field=FunctionOOPField(
                                name='weaponSlot',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="setPedWearingJetpack",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='setWearingJetpack',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='state',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function is used to give or take a jetpack from a ped, it wont work if the ped is in a vehicle.\nAs such, you should either expect it to fail sometimes, or repeatedly try to give a jetpack every second or so until isPedWearingJetpack returns true. Alternatively, you can force the ped into a safe position (e.g. standing on the ground) before giving the jetpack, or use a pickup to handle it.}}' ,
                arguments={
                    "thePed": """The ped you want to give a jetpack to. """,
                    "state": """A boolean representing whether to give or take the jetpack. """
                },
                result='returns true if a jetpack was successfully set for the ped, false if setting it failed.' ,
            ),
            url='setPedWearingJetpack',
        ),
                field=FunctionOOPField(
                                name='jetpack',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description="""Set the variable to nil to execute [[removePedFromVehicle]]""",
                base_function_name="warpPedIntoVehicle",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='warpIntoVehicle',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='seat',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function is used to warp or force a ped into a vehicle.  There are no animations involved when this happens.\nAvailable client side from 1.3.1 (It will only work with client side vehicles and peds)' ,
                arguments={
                    "thePed": """The ped which you wish to force inside the vehicle """,
                    "theVehicle": """The vehicle you wish to force the ped into """,
                    "seat": """An integer representing the seat ID. """,
                    "0": """Front-left """,
                    "1": """Front-right """,
                    "2": """Rear-left """,
                    "3": """Rear-right """
                },
                result='returns true if the operation is successful, false otherwise.' ,
            ),
            url='warpPedIntoVehicle',
        ),
                field=FunctionOOPField(
                                name='vehicle',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description="""Set the variable to nil to execute [[removePedFromVehicle]]""",
                base_function_name="warpPedIntoVehicle",
                class_name='ped',
                method=FunctionData(
            signature=FunctionSignature(
                name='warpIntoVehicle',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePed',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='seat',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function is used to warp or force a ped into a vehicle.  There are no animations involved when this happens.\nAvailable client side from 1.3.1 (It will only work with client side vehicles and peds)' ,
                arguments={
                    "thePed": """The ped which you wish to force inside the vehicle """,
                    "theVehicle": """The vehicle you wish to force the ped into """,
                    "seat": """An integer representing the seat ID. """,
                    "0": """Front-left """,
                    "1": """Front-right """,
                    "2": """Rear-left """,
                    "3": """Rear-right """
                },
                result='returns true if the operation is successful, false otherwise.' ,
            ),
            url='warpPedIntoVehicle',
        ),
                field=FunctionOOPField(
                                name='vehicle',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    )
]
