# Autogenerated file. ANY CHANGES WILL BE OVERWRITTEN
from to_python.core.types import FunctionType, \
    FunctionArgument, \
    FunctionArgumentValues, \
    FunctionReturnTypes, \
    FunctionSignature, \
    FunctionDoc, \
    FunctionOOP, \
    FunctionOOPField, \
    CompoundOOPData, \
    FunctionData, \
    CompoundFunctionData
    
DUMP_PARTIAL = [
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="dxCreateFont",
                class_name='DX_font|DxFont',
                method=None,
                field=None,
                is_static=True,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="dxCreateRenderTarget",
                class_name='Texture|DxRenderTarget',
                method=None,
                field=None,
                is_static=True,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="dxCreateScreenSource",
                class_name='Texture|DxScreenSource',
                method=None,
                field=None,
                is_static=True,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="dxCreateShader",
                class_name='Shader|DxShader',
                method=None,
                field=None,
                is_static=True,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="dxCreateTexture",
                class_name='Texture|DxTexture',
                method=None,
                field=None,
                is_static=True,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description="""This syntax requires you to ignore the font argument above""",
                base_function_name="dxGetFontHeight",
                class_name='Element/DX font|font',
                method=FunctionData(
            signature=FunctionSignature(
                name='getHeight',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='scale',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value='1',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='font',
                                argument_type=FunctionType(
                                    names=['mixed'],
                                    is_optional=True,
                                ),
                                default_value='"default"',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function retrieves the theoretical height of a certain piece of text, if it were to be drawn using dxDrawText.' ,
                arguments={
                    "scale": """The size of the text. """,
                    "font": """Either a custom DX font element or the name of a built-in dx font: """
                },
                result='returns an integer of the height of the text.' ,
            ),
            url='dxGetFontHeight',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="dxGetMaterialSize",
                class_name='material',
                method=FunctionData(
            signature=FunctionSignature(
                name='getSize',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='material',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This gets the dimensions of the supplied material element.' ,
                arguments={
                    "material": """The material element whose size is to be gotten """
                },
                result='returns two ints representing the width and height in pixels of the material, or false if an invalid parameter was passed to the function.\nif the material is a volume texture, this function will return three ints representing the width, height and depth.' ,
            ),
            url='dxGetMaterialSize',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description="""This syntax requires you to ignore the font argument above""",
                base_function_name="dxGetTextSize",
                class_name='Element/DX font|font',
                method=FunctionData(
            signature=FunctionSignature(
                name='getSize',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='text',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='width',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='scaleXY',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value='1.0',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='scaleY',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value='1.0',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='font',
                                argument_type=FunctionType(
                                    names=['mixed'],
                                    is_optional=True,
                                ),
                                default_value='"default"',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='wordBreak',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='false',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='colorCoded',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='false',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='NOTE: This function already takes the clients screen resolution into account.' ,
                arguments={
                    "text": """A string representing the text for which you wish to retrieve with width for. """,
                    "width": """The width of the text. Use with wordBreak = true. """,
                    "scaleX": """The scale of the text. Scale can also be inputted as a Vector2. """,
                    "scaleY": """The scale of the text. """,
                    "font": """Either a custom DX font element or the name of a built-in dx font: """,
                    "wordBreak": """If set to true, the text will wrap to a new line whenever it reaches the right side of the bounding box. If false, the text will always be completely on one line. """,
                    "colorCoded": """Should we exclude color codes from the width? False will include the hex in the length.
Returns two floats representing the width and height of the text in pixels. """
                },
                result='returns two floats representing the width and height of the text in pixels.' ,
            ),
            url='dxGetTextSize',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="dxGetTexturePixels",
                class_name='texture',
                method=FunctionData(
            signature=FunctionSignature(
                name='getPixels',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='surfaceIndex',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='texture',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='x',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='y',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='width',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='height',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function fetches the Texture_pixels|pixels from a texture element. It can be used with a standard texture, render target or screen source.\n*This function is slow and not something you want to be doing once a frame.\n*It is slower when reading pixels from a render target or screen source.\n*And is very slow indeed if the texture format is not  argb .' ,
                arguments={
                    "texture": """The texture element to get the pixels from """,
                    "surfaceIndex": """Desired slice to get if the texture is a volume texture, or desired face to get if the texture is a cube map. <nowiki>(Cube map faces: 0=+X 1=-X 2=+Y 3=-Y 4=+Z 5=-Z)</nowiki>
By default the pixels from the whole texture is returned. To get only a portion of the texture, define a rectangular area using all four of these optional arguments: """,
                    "x": """Rectangle left position """,
                    "y": """Rectangle top position """,
                    "width": """Rectangle width """,
                    "height": """Rectangle height """
                },
                result='returns a plain format pixels string if successful, false if invalid arguments were passed to the function.' ,
            ),
            url='dxGetTexturePixels',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description="""This syntax requires you to ignore the font argument above""",
                base_function_name="dxGetTextWidth",
                class_name='Element/DX font|font',
                method=FunctionData(
            signature=FunctionSignature(
                name='getTextWidth',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='text',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='scale',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value='1',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='font',
                                argument_type=FunctionType(
                                    names=['mixed'],
                                    is_optional=True,
                                ),
                                default_value='"default"',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='bColorCoded',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='false',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function retrieves the theoretical width (in pixels) of a certain piece of text, if it were to be drawn using dxDrawText.\nNOTE: This function already takes the clients screen resolution into account.' ,
                arguments={
                    "text": """A string representing the text for which you wish to retrieve with width for. """,
                    "scale": """The size of the text. """,
                    "font": """Either a custom DX font element or the name of a built-in dx font: """,
                    "bColorCoded": """Should we exclude color codes from the width? (false will include the hex in the length)
Returns the float of the width of the text (in pixels). """
                },
                result='returns the float of the width of the text (in pixels).' ,
            ),
            url='dxGetTextWidth',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="dxSetRenderTarget",
                class_name='texture|rendertarget',
                method=FunctionData(
            signature=FunctionSignature(
                name='setAsTarget',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='renderTarget',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='clear',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='false',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='' ,
                arguments={
                    "renderTarget": """The render target element whose pixels we want to draw on. """,
                    "clear": """If set to true, the render target will also be cleared. """
                },
                result='returns true if the render target was successfully changed, false otherwise.' ,
            ),
            url='dxSetRenderTarget',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="dxSetShaderTessellation",
                class_name='shader',
                method=FunctionData(
            signature=FunctionSignature(
                name='setTessellation',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theShader',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='tessellationX',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='tessellationY',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function sets the amount of geometric sub-division to use when drawing a shader element with dxDrawImage.\nUsing tessellation allows a shader to manipulate the shape of the rendered image at each sub-division boundary.' ,
                arguments={
                    "theShader": """The shader element whose tessellation is to be changed """,
                    "tessellationX": """The number of sub-division points along the X axis. Range is 1 to 500. """,
                    "tessellationY": """The number of sub-division points along the Y axis. Range is 1 to 500. """
                },
                result='returns true if the shader elements tessellation was successfully changed, false otherwise.' ,
            ),
            url='dxSetShaderTessellation',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="dxSetShaderTransform",
                class_name='shader',
                method=FunctionData(
            signature=FunctionSignature(
                name='setTransform',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theShader',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='rotationX',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='rotationY',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='rotationZ',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='rotationCenterOffsetX',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='rotationCenterOffsetY',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='rotationCenterOffsetZ',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='bRotationCenterOffsetOriginIsScreen',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='false',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='perspectiveCenterOffsetX',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='perspectiveCenterOffsetY',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='bPerspectiveCenterOffsetOriginIsScreen',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='false',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function applies a 3D transformation to a shader element when it is drawn with dxDrawImage.' ,
                arguments={
                    "theShader": """The shader element whose transformation is to be changed """,
                    "rotationX": """Rotation angle in degrees around the X axis (Left,right). This will make the shader rotate along its width. """,
                    "rotationY": """Rotation angle in degrees around the Y axis (Up,down). This will make the shader rotate along its height. """,
                    "rotationZ": """Rotation angle in degrees around the Z axis (In,out). This will make the shader rotate in a similar way to the rotation argument in dxDrawImage. """,
                    "rotationCenterOffsetX": """The center of rotation offset X position in screen relative units. """,
                    "rotationCenterOffsetY": """The center of rotation offset Y position in screen relative units. """,
                    "rotationCenterOffsetZ": """The center of rotation offset Z position in screen relative units. """,
                    "bRotationCenterOffsetOriginIsScreen": """Set to boolean|true if the center of rotation origin should be the center of the screen rather than the center of the image. """,
                    "perspectiveCenterOffsetX": """The center of perspective offset X position in screen relative units. """,
                    "perspectiveCenterOffsetY": """The center of perspective offset Y position in screen relative units. """,
                    "bPerspectiveCenterOffsetOriginIsScreen": """Set to boolean|true if the center of perspective origin should be the center of the screen rather than the center of the image.
To convert screen relative units into screen pixel coordinates, ''multiply'' by the screen size. Conversely, to convert screen pixel coordinates to screen relative units, '''''divide''''' by the screen size. """
                },
                result='returns true if the shader elements transform was successfully changed, false otherwise.' ,
            ),
            url='dxSetShaderTransform',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="dxSetShaderValue",
                class_name='shader',
                method=FunctionData(
            signature=FunctionSignature(
                name='setValue',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theShader',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='parameterName',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='value',
                                argument_type=FunctionType(
                                    names=['mixed'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This sets a named parameter for a shader element' ,
                arguments={
                    "theShader": """The shader element whose parameter is to be changed """,
                    "parameterName": """The name of parameter """,
                    "value": """The value to set, which can be a texture, a bool, a number or a list of numbers(max 16 floats(numbers)) """
                },
                result='returns true if the shader elements parameter was successfully changed, false otherwise.' ,
            ),
            url='dxSetShaderValue',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="dxSetTextureEdge",
                class_name='texture',
                method=FunctionData(
            signature=FunctionSignature(
                name='setEdge',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theTexture',
                                argument_type=FunctionType(
                                    names=['texture'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='textureEdge',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='border-color',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This functions allows you to change the edge handling after creating the texture.' ,
                arguments={
                    "theTexture": """The affected texture """,
                    "textureEdge": """The texture edge mode. Available modes are wrap, mirror, clamp, border, mirror-once """,
                    "border-color": """If textureEdge is set to border, you are able to define a border color here """
                },
                result='' ,
            ),
            url='dxSetTextureEdge',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="dxSetTexturePixels",
                class_name='texture',
                method=FunctionData(
            signature=FunctionSignature(
                name='setPixels',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='surfaceIndex',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='texture',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='pixels',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='x',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='y',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='width',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='height',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function sets the Texture_pixels|pixels of a texture element. It can be used with a standard texture, render target or screen source. Only plain format pixels please.\n* This function is slow and not something you want to be doing once a frame.\n* It is very slow when setting pixels to a render target or screen source.\n* And is very slow indeed if the texture format is not argb.' ,
                arguments={
                    "texture": """The texture element to set the pixels of """,
                    "pixels": """The plain format pixels to use """,
                    "surfaceIndex": """Desired slice to set if the texture is a volume texture, or desired face to set if the texture is a cube map. <nowiki>(Cube map faces: 0=+X 1=-X 2=+Y 3=-Y 4=+Z 5=-Z)</nowiki>
By default the pixels are set starting at the top left corner of the texture. To set a different region, define a rectangular area using all four of these optional arguments: """,
                    "x": """Rectangle left position """,
                    "y": """Rectangle top position """,
                    "width": """Rectangle width """,
                    "height": """Rectangle height """
                },
                result='returns a string if successful, false if invalid arguments were passed to the function.' ,
            ),
            url='dxSetTexturePixels',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="dxUpdateScreenSource",
                class_name='DxScreenSource',
                method=FunctionData(
            signature=FunctionSignature(
                name='update',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='screenSource',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='resampleNow',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='false',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function updates the contents of a screen source texture with the screen output from GTA' ,
                arguments={
                    "screenSource": """The screen source element whose pixels we want to fill with the screen capture """,
                    "resampleNow": """A bool to indicate if the screen should be captured immediately. The default is false which means the screen from the end of the previous frame is used (better for performance and consistency). Use true for layering fullscreen effects. """
                },
                result='returns true if the screen was successfully captured, false otherwise.' ,
            ),
            url='dxUpdateScreenSource',
        ),
                field=None,
                is_static=False,
            )
        ],
    )
]
