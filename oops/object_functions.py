# Autogenerated file. ANY CHANGES WILL BE OVERWRITTEN
from to_python.core.types import FunctionType, \
    FunctionArgument, \
    FunctionArgumentValues, \
    FunctionReturnTypes, \
    FunctionSignature, \
    FunctionDoc, \
    FunctionOOP, \
    FunctionOOPField, \
    CompoundOOPData, \
    FunctionData, \
    CompoundFunctionData
    
DUMP_PARTIAL = [
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="breakObject",
                class_name='object',
                method=FunctionData(
            signature=FunctionSignature(
                name='break',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theObject',
                                argument_type=FunctionType(
                                    names=['object'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function breaks a specific object.' ,
                arguments={
                    "theObject": """an object element """
                },
                result='* true if the object was successfully broken.\n* false if the object is not breakable, or a wrong object was given.' ,
            ),
            url='breakObject',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="createObject",
                class_name='Object',
                method=None,
                field=None,
                is_static=True,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="createObject",
                class_name='Object',
                method=None,
                field=None,
                is_static=True,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getObjectMass",
                class_name='object',
                method=FunctionData(
            signature=FunctionSignature(
                name='getMass',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theObject',
                                argument_type=FunctionType(
                                    names=['object'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns the mass of a specified object.' ,
                arguments={
                    "theObject": """the object whose mass you want to get. """
                },
                result='* a float representing the mass of the object.\n* false if invalid arguments were passed.\n* -1 if object was never streamed in.' ,
            ),
            url='getObjectMass',
        ),
                field=FunctionOOPField(
                                name='mass',
                                types=[
                                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getObjectProperty",
                class_name='object',
                method=FunctionData(
            signature=FunctionSignature(
                name='getProperty',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['mixed'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theObject',
                                argument_type=FunctionType(
                                    names=['object'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='property',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='' ,
                arguments={
                    "theObject": """: the object you wish to get a property of. """,
                    "property": """: the property you want to get the value of:
<div style="padding-left:20px">
* "all" - ''table'' with values of all properties below (OOP method: ''getProperties'')
</div> """
                },
                result='on success: table for all, 3 float|floats for center_of_mass or float for other properties\non failure: false' ,
            ),
            url='getObjectProperty',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="getObjectScale",
                class_name='Object',
                method=FunctionData(
            signature=FunctionSignature(
                name='getScale',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theObject',
                                argument_type=FunctionType(
                                    names=['object'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns the visible size of an object.' ,
                arguments={
                    "theObject": """: the object you wish to return the scale of. """
                },
                result='* three float values indicating the scale of the object on the x, y, and z axis if successful, false otherwise.' ,
            ),
            url='getObjectScale',
        ),
                field=FunctionOOPField(
                                name='scale',
                                types=[
                                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getObjectScale",
                class_name='Object',
                method=FunctionData(
            signature=FunctionSignature(
                name='getScale',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theObject',
                                argument_type=FunctionType(
                                    names=['object'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns the visible size of an object.' ,
                arguments={
                    "theObject": """: the object you wish to return the scale of. """
                },
                result='* three float values indicating the scale of the object on the x, y, and z axis if successful, false otherwise.' ,
            ),
            url='getObjectScale',
        ),
                field=FunctionOOPField(
                                name='scale',
                                types=[
                                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="isObjectBreakable",
                class_name='object',
                method=FunctionData(
            signature=FunctionSignature(
                name='isBreakable',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theObject',
                                argument_type=FunctionType(
                                    names=['object'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            ),
                FunctionArgument(
                                name='modelId',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function checks if an object / model ID is breakable.' ,
                arguments={
                    "theObject / modelId": """The object / model ID thats being checked. """
                },
                result='* true if the object is breakable.\n* false if the object is not breakable.' ,
            ),
            url='isObjectBreakable',
        ),
                field=FunctionOOPField(
                                name='breakable',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="isObjectMoving",
                class_name='object',
                method=FunctionData(
            signature=FunctionSignature(
                name='isMoving',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theObject',
                                argument_type=FunctionType(
                                    names=['object'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='' ,
                arguments={
                    "theObject": """The object """
                },
                result='* true if the object is moving.\n* false if the object is not moving.' ,
            ),
            url='isObjectMoving',
        ),
                field=FunctionOOPField(
                                name='moving',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="moveObject",
                class_name='object',
                method=FunctionData(
            signature=FunctionSignature(
                name='move',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theObject',
                                argument_type=FunctionType(
                                    names=['object'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='time',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='targetx',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='targety',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='targetz',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='moverx',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='movery',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='moverz',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='strEasingType',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='fEasingPeriod',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='fEasingAmplitude',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='fEasingOvershoot',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function will smoothly move an object from its current position to a specified rotation and position.' ,
                arguments={
                    "theObject": """the object that will be moved. """,
                    "time": """the time in milliseconds the object will arrive at the destination. """,
                    "targetx": """the X value of the target position """,
                    "targety": """the Y value of the target position """,
                    "targetz": """the Z value of the target position """,
                    "moverx": """the rotation along the X axis relative to its current rotation, which is its starting angle. """,
                    "movery": """the rotation along the Y axis relative to its current rotation, which is its starting angle. """,
                    "moverz": """the rotation along the Z axis relative to its current rotation, which is its starting angle. """,
                    "strEasingType": """the Easing|easing function to use for the interpolation (default is Linear) """,
                    "fEasingPeriod": """the period of the Easing|easing function (only some easing functions use this parameter) """,
                    "fEasingAmplitude": """the amplitude of the Easing|easing function (only some easing functions use this parameter) """,
                    "fEasingOvershoot": """the overshoot of the Easing|easing function (only some easing functions use this parameter) """
                },
                result='* true if the function moved the object succesfully.\n* false otherwise.' ,
            ),
            url='moveObject',
        ),
                field=None,
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="moveObject",
                class_name='object',
                method=FunctionData(
            signature=FunctionSignature(
                name='move',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theObject',
                                argument_type=FunctionType(
                                    names=['object'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='time',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='targetx',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='targety',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='targetz',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='moverx',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='movery',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='moverz',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='strEasingType',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='fEasingPeriod',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='fEasingAmplitude',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='fEasingOvershoot',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function will smoothly move an object from its current position to a specified rotation and position.' ,
                arguments={
                    "theObject": """the object that will be moved. """,
                    "time": """the time in milliseconds the object will arrive at the destination. """,
                    "targetx": """the X value of the target position """,
                    "targety": """the Y value of the target position """,
                    "targetz": """the Z value of the target position """,
                    "moverx": """the rotation along the X axis relative to its current rotation, which is its starting angle. """,
                    "movery": """the rotation along the Y axis relative to its current rotation, which is its starting angle. """,
                    "moverz": """the rotation along the Z axis relative to its current rotation, which is its starting angle. """,
                    "strEasingType": """the Easing|easing function to use for the interpolation (default is Linear) """,
                    "fEasingPeriod": """the period of the Easing|easing function (only some easing functions use this parameter) """,
                    "fEasingAmplitude": """the amplitude of the Easing|easing function (only some easing functions use this parameter) """,
                    "fEasingOvershoot": """the overshoot of the Easing|easing function (only some easing functions use this parameter) """
                },
                result='* true if the function moved the object succesfully.\n* false otherwise.' ,
            ),
            url='moveObject',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="respawnObject",
                class_name='object',
                method=FunctionData(
            signature=FunctionSignature(
                name='respawn',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theObject',
                                argument_type=FunctionType(
                                    names=['object'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function respawns a specific object.' ,
                arguments={
                    "theObject": """an object element """
                },
                result='* true if the object was sucessfully respawned.\n* false if the object is not breakable, or a wrong object was given.' ,
            ),
            url='respawnObject',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="setObjectBreakable",
                class_name='object',
                method=FunctionData(
            signature=FunctionSignature(
                name='setBreakable',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theObject',
                                argument_type=FunctionType(
                                    names=['object'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='breakable',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function sets an object to be breakable/unbreakable.' ,
                arguments={
                    "object": """the object thats being set. """,
                    "breakable": """a boolean whether the object is breakable (true) or unbreakable (false). """
                },
                result='* true if the object is now breakable.\n* false if it cant or if invalid arguments are passed.' ,
            ),
            url='setObjectBreakable',
        ),
                field=FunctionOOPField(
                                name='breakable',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="setObjectMass",
                class_name='object',
                method=FunctionData(
            signature=FunctionSignature(
                name='setMass',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theObject',
                                argument_type=FunctionType(
                                    names=['object'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='mass',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function sets the mass of a specified object. Changing the mass leads to a different movement behavior for especially dynamic objects.' ,
                arguments={
                    "theObject": """the object whose mass will be set. """,
                    "mass": """the new mass. """
                },
                result='* true if the new mass value has been.\n* false otherwise.' ,
            ),
            url='setObjectMass',
        ),
                field=FunctionOOPField(
                                name='mass',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="setObjectProperty",
                class_name='object',
                method=FunctionData(
            signature=FunctionSignature(
                name='setProperty',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theObject',
                                argument_type=FunctionType(
                                    names=['object'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='property',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='value',
                                argument_type=FunctionType(
                                    names=['var'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='' ,
                arguments={
                    "theObject": """: the object you wish to change a property of. """,
                    "property": """: the property you want to set the value of: """,
                    "value": """: the new value for the property. """
                },
                result='returns true if the property was set successfully, false otherwise.' ,
            ),
            url='setObjectProperty',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="setObjectScale",
                class_name='object',
                method=FunctionData(
            signature=FunctionSignature(
                name='setScale',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theObject',
                                argument_type=FunctionType(
                                    names=['object'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='scale',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='scaleY',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value='scale',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='scaleZ',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value='scale',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function changes the visible size of an object.' ,
                arguments={
                    "theObject": """: the object you wish to change the scale of. """,
                    "scale": """: a float containing the new scale. 1.0 is the standard scale, with 0.5 being half the size and 2.0 being twice the size. If the scaleY is set, this will be scaleX. """,
                    "scaleY": """: a float containing the new scale on the Y axis """,
                    "scaleZ": """: a float containing the new scale on the Z axis """
                },
                result='* true if the scale was set properly.\n* false otherwise.' ,
            ),
            url='setObjectScale',
        ),
                field=FunctionOOPField(
                                name='scale',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="setObjectScale",
                class_name='object',
                method=FunctionData(
            signature=FunctionSignature(
                name='setScale',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theObject',
                                argument_type=FunctionType(
                                    names=['object'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='scale',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='scaleY',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value='scale',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='scaleZ',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value='scale',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function changes the visible size of an object.' ,
                arguments={
                    "theObject": """: the object you wish to change the scale of. """,
                    "scale": """: a float containing the new scale. 1.0 is the standard scale, with 0.5 being half the size and 2.0 being twice the size. If the scaleY is set, this will be scaleX. """,
                    "scaleY": """: a float containing the new scale on the Y axis """,
                    "scaleZ": """: a float containing the new scale on the Z axis """
                },
                result='* true if the scale was set properly.\n* false otherwise.' ,
            ),
            url='setObjectScale',
        ),
                field=FunctionOOPField(
                                name='scale',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="stopObject",
                class_name='object',
                method=FunctionData(
            signature=FunctionSignature(
                name='stop',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theobject',
                                argument_type=FunctionType(
                                    names=['object'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This will allow you to stop an object that is currently moving.' ,
                arguments={
                    "theobject": """the object whose movement you wish to stop """
                },
                result='* true if successful.\n* false otherwise.' ,
            ),
            url='stopObject',
        ),
                field=None,
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="stopObject",
                class_name='object',
                method=FunctionData(
            signature=FunctionSignature(
                name='stop',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theobject',
                                argument_type=FunctionType(
                                    names=['object'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This will allow you to stop an object that is currently moving.' ,
                arguments={
                    "theobject": """the object whose movement you wish to stop """
                },
                result='* true if successful.\n* false otherwise.' ,
            ),
            url='stopObject',
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="toggleObjectRespawn",
                class_name='object',
                method=FunctionData(
            signature=FunctionSignature(
                name='toggleRespawn',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theObject',
                                argument_type=FunctionType(
                                    names=['object'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='respawn',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function is used to toggle if an object should respawn after it got destroyed' ,
                arguments={
                    "theObject": """: the object you want to toggle the respawn from """,
                    "respawn": """: a bool denoting whether we want to enable (true) or disable (false) respawning """
                },
                result='* true when the it was changed successfully.\n* false otherwise.' ,
            ),
            url='toggleObjectRespawn',
        ),
                field=None,
                is_static=False,
            )
        ],
    )
]
