# Autogenerated file. ANY CHANGES WILL BE OVERWRITTEN
from to_python.core.types import FunctionType, \
    FunctionArgument, \
    FunctionArgumentValues, \
    FunctionReturnTypes, \
    FunctionSignature, \
    FunctionDoc, \
    FunctionOOP, \
    FunctionOOPField, \
    CompoundOOPData, \
    FunctionData, \
    CompoundFunctionData
    
DUMP_PARTIAL = [
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="addVehicleSirens",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='addSirens',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='sirenCount',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='sirenType',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='flag360',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='false',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='checkLosFlag',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='true',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='useRandomiser',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='true',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='silentFlag',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='false',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function adds sirens to a vehicle.' ,
                arguments={
                    "theVehicle": """The vehicle to add sirens """,
                    "sirenCount": """The amount of siren points on the vehicle (8 maximum) """,
                    "sirenType": """An integer between 1 and 6 (1: invisible, 2: single, 3+: dual) """,
                    "flag360": """Visible from all directions (applies to single type only) """,
                    "checkLosFlag": """Check line of sight between camera and light so it wont draw if blocked """,
                    "useRandomiser": """Randomise the light order, false for sequential """,
                    "silentFlag": """If you want the siren to be silent set this to true """
                },
                result='returns true if sirens were successfully added to the vehicle, false otherwise.' ,
            )
        ),
                field=None,
                is_static=False,
            )
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="addVehicleUpgrade",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='addUpgrade',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='upgrade',
                                argument_type=FunctionType(
                                    names=['string', 'int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function adds an upgrade to a vehicle, e.g. nitrous, hydraulics.' ,
                arguments={
                    "theVehicle": """: The element representing the vehicle you wish to add the upgrade to. """,
                    "upgrade": """: The id of the upgrade you wish to add: 1000 to 1193 (see Vehicle Upgrades) or all to add all upgrades.
'''Note:''' setCameraTarget will behave strangely if you use hydraulics (upgrade id: 1087) server sided and when your camera target is the player inside the vehicle with hydraulics and if the player is not you. """
                },
                result='returns true if the upgrade was successfully added to the vehicle, otherwise false.' ,
            )
        ),
                field=None,
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="addVehicleUpgrade",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='addUpgrade',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='upgrade',
                                argument_type=FunctionType(
                                    names=['string', 'int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function adds an upgrade to a vehicle, e.g. nitrous, hydraulics.' ,
                arguments={
                    "theVehicle": """: The element representing the vehicle you wish to add the upgrade to. """,
                    "upgrade": """: The id of the upgrade you wish to add: 1000 to 1193 (see Vehicle Upgrades) or all to add all upgrades.
'''Note:''' setCameraTarget will behave strangely if you use hydraulics (upgrade id: 1087) server sided and when your camera target is the player inside the vehicle with hydraulics and if the player is not you. """
                },
                result='returns true if the upgrade was successfully added to the vehicle, otherwise false.' ,
            )
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="areVehicleLightsOn",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='areLightsOn',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='*This is different to getVehicleOverrideLights because this function will return true if the lights were turned on by natural causes.\n* Unless setVehicleOverrideLights is used, vehicles always automatically disable their lights at 06:25 and enable them at 20:26.}}' ,
                arguments={
                    "theVehicle": """: the vehicle you wish to retrieve the lights state of. """
                },
                result='returns true if the lights are on, false otherwise.' ,
            )
        ),
                field=FunctionOOPField(
                                name='lightsOn',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="attachTrailerToVehicle",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='attachTrailer',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='theTrailer',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function attaches a trailer type vehicle to a trailer-towing-type vehicle.' ,
                arguments={
                    "theVehicle": """: the vehicle you wish to attach a trailer to. """,
                    "theTrailer": """: the trailer you wish to be attached. """
                },
                result='returns true if the vehicles were successfully attached, false otherwise.' ,
            )
        ),
                field=None,
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="attachTrailerToVehicle",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='attachTrailer',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='theTrailer',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function attaches a trailer type vehicle to a trailer-towing-type vehicle.' ,
                arguments={
                    "theVehicle": """: the vehicle you wish to attach a trailer to. """,
                    "theTrailer": """: the trailer you wish to be attached. """
                },
                result='returns true if the vehicles were successfully attached, false otherwise.' ,
            )
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="blowVehicle",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='blow',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='vehicleToBlow',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='explode',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='true',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function will blow up a vehicle. This will cause an explosion and will kill the driver and any passengers inside it.' ,
                arguments={
                    "vehicleToBlow": """the vehicle that you wish to blow up. """,
                    "explode": """if this argument is true then the vehicle will explode, otherwise it will just be blown up silently. """
                },
                result='' ,
            )
        ),
                field=FunctionOOPField(
                                name='blown',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="blowVehicle",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='blow',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='vehicleToBlow',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function will blow up a vehicle. This will cause an explosion and will kill the driver and any passengers inside it.' ,
                arguments={
                    "vehicleToBlow": """the vehicle that you wish to blow up. """
                },
                result='' ,
            )
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="createVehicle",
                class_name='Vehicle',
                method=None,
                field=None,
                is_static=True,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="createVehicle",
                class_name='Vehicle',
                method=None,
                field=None,
                is_static=True,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="detachTrailerFromVehicle",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='detachTrailer',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='theTrailer',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=True,
                                ),
                                default_value='nil',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function detaches an already attached trailer from a vehicle.' ,
                arguments={
                    "theVehicle": """: The vehicle you wish to detach a trailer from. """,
                    "theTrailer": """: The trailer you wish to be detached. """
                },
                result='returns true if the vehicles were successfully detached, false otherwise.' ,
            )
        ),
                field=None,
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="detachTrailerFromVehicle",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='detachTrailer',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='theTrailer',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=True,
                                ),
                                default_value='nil',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function detaches an already attached trailer from a vehicle.' ,
                arguments={
                    "theVehicle": """: The vehicle you wish to detach a trailer from. """,
                    "theTrailer": """: The trailer you wish to be detached. """
                },
                result='returns true if the vehicles were successfully detached, false otherwise.' ,
            )
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="fixVehicle",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='fix',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function will set a vehicles health to full and fix its damage model. If you wish to only change the vehicles health, without affecting its damage model, use setElementHealth.' ,
                arguments={
                    "theVehicle": """the vehicle you wish to fix """
                },
                result='returns true if the vehicle was fixed, false if thevehicle is invalid.' ,
            )
        ),
                field=None,
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="fixVehicle",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='fix',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function will set a vehicles health to full and fix its damage model. If you wish to only change the vehicles health, without affecting its damage model, use setElementHealth.' ,
                arguments={
                    "theVehicle": """the vehicle you wish to fix """
                },
                result='returns true if the vehicle was fixed, false if thevehicle is invalid.' ,
            )
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getHeliBladeCollisionsEnabled",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='areHeliBladeCollisionsEnabled',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function gets the state of the helicopter blades collisions on the specified vehicle.' ,
                arguments={
                    "theVehicle": """The vehicle that will be checked. """
                },
                result='returns true if the collisions are enabled for specified vehicle, false if the collisions arent enabled for the specified vehicle, if the vehicle is not a helicopter or if invalid arguments are specified.' ,
            )
        ),
                field=FunctionOOPField(
                                name='heliBladeCollisionsEnabled',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getHelicopterRotorSpeed",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getHelicopterRotorSpeed',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='heli',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Retrieves the speed at which the rotor of a helicopter rotates.' ,
                arguments={
                    "heli": """the helicopter element to get the rotor speed of. """
                },
                result='returns the rotor speed if successful. this is 0 when the helicopter is parked, and about 0.2 when it is fully spun up. it can be negative if the rotor rotates counter-clockwise. returns false in case of failure (an invalid element or a vehicle element that is not a helicopter was passed).' ,
            )
        ),
                field=FunctionOOPField(
                                name='helicopterRotorSpeed',
                                types=[
                                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="getTrainDirection",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getDirection',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='train',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Gets the direction in which a train is driving (clockwise or counterclockwise).' ,
                arguments={
                    "train": """the train of which to get the driving direction. """
                },
                result='returns true if the train is driving clockwise on the train track, false if it is going counterclockwise or a failure occured.' ,
            )
        ),
                field=FunctionOOPField(
                                name='direction',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getTrainDirection",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getDirection',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='train',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Gets the direction in which a train is driving (clockwise or counterclockwise).' ,
                arguments={
                    "train": """the train of which to get the driving direction. """
                },
                result='returns true if the train is driving clockwise on the train track, false if it is going counterclockwise or a failure occured.' ,
            )
        ),
                field=FunctionOOPField(
                                name='direction',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="getTrainPosition",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getTrainPosition',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='train',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Gets the position the train is currently on the track' ,
                arguments={
                    "train": """the train to get the position of """
                },
                result='returns a float that represents how along the track it is, false if there is problem with train element.' ,
            )
        ),
                field=FunctionOOPField(
                                name='trainPosition',
                                types=[
                                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getTrainPosition",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getTrainPosition',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='train',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Gets the position the train is currently on the track' ,
                arguments={
                    "train": """the train to get the position of """
                },
                result='returns a float that represents how along the track it is, false if there is problem with train element.' ,
            )
        ),
                field=FunctionOOPField(
                                name='trainPosition',
                                types=[
                                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="getTrainSpeed",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getSpeed',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='train',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Gets the speed at which a train is traveling on the rails.' ,
                arguments={
                    "train": """the train of which to retrieve the speed. """
                },
                result='returns the trains speed if successful, false otherwise.' ,
            )
        ),
                field=FunctionOOPField(
                                name='trainSpeed',
                                types=[
                                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getTrainSpeed",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getSpeed',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='train',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Gets the speed at which a train is traveling on the rails.' ,
                arguments={
                    "train": """the train of which to retrieve the speed. """
                },
                result='returns the trains speed if successful, false otherwise.' ,
            )
        ),
                field=FunctionOOPField(
                                name='trainSpeed',
                                types=[
                                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="getTrainTrack",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getTrack',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='train',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Gets the track of a train' ,
                arguments={
                    "train": """the train of which to get the track. """
                },
                result='returns an integer (whole number) that represents the train track, false if there is problem with train element.' ,
            )
        ),
                field=FunctionOOPField(
                                name='track',
                                types=[
                                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getTrainTrack",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getTrack',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='train',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Gets the track of a train' ,
                arguments={
                    "train": """the train of which to get the track. """
                },
                result='returns an integer (whole number) that represents the train track, false if there is problem with train element.' ,
            )
        ),
                field=FunctionOOPField(
                                name='track',
                                types=[
                                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="getVehicleColor",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getColor',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='bRGB',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns the color of the specified vehicle. A vehicle can have up to four colors.' ,
                arguments={
                    "theVehicle": """The vehicle that you wish to get the color of. """,
                    "bRGB": """A boolean specifying whether to return RGB values. A setting of false will result in the function returning color ids instead. """
                },
                result='*returns 12 int|ints (if brgb is true) indicating the red, green and blue components of each of the 4 vehicle colors.\n*returns 4 int|ints (if brgb is false) indicating the color ids of each of the 4 vehicle colors.\n*returns false if the vehicle doesnt exist.\nvalid color ids if brgb is set to false:\n<br>' ,
            )
        ),
                field=None,
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getVehicleColor",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getColor',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='bRGB',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns the color of the specified vehicle. A vehicle can have up to four colors.' ,
                arguments={
                    "theVehicle": """The vehicle that you wish to get the color of. """,
                    "bRGB": """A boolean specifying whether to return RGB values. A setting of false will result in the function returning color ids instead. """
                },
                result='*returns 12 int|ints (if brgb is true) indicating the red, green and blue components of each of the 4 vehicle colors.\n*returns 4 int|ints (if brgb is false) indicating the color ids of each of the 4 vehicle colors.\n*returns false if the vehicle doesnt exist.\nvalid color ids if brgb is set to false:\n<br>' ,
            )
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="getVehicleCompatibleUpgrades",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getCompatibleUpgrades',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='slot',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns a table of all the compatible upgrades (or all for a specified slot, optionally) for a specified vehicle.' ,
                arguments={
                    "theVehicle": """the vehicle you wish to retrieve the list of compatible upgrades of. """,
                    "slot": """the upgrade slot number for which youre getting the list (from 0 to 16). Compatible upgrades for all slots are listed if this is not specified. """
                },
                result='returns a table with all the compatible upgrades, or false if invalid arguments are passed.' ,
            )
        ),
                field=FunctionOOPField(
                                name='compatibleUpgrades',
                                types=[
                                    FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getVehicleCompatibleUpgrades",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getCompatibleUpgrades',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='slot',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns a table of all the compatible upgrades (or all for a specified slot, optionally) for a specified vehicle.' ,
                arguments={
                    "theVehicle": """the vehicle you wish to retrieve the list of compatible upgrades of. """,
                    "slot": """the upgrade slot number for which youre getting the list (from 0 to 16). Compatible upgrades for all slots are listed if this is not specified. """
                },
                result='returns a table with all the compatible upgrades, or false if invalid arguments are passed.' ,
            )
        ),
                field=FunctionOOPField(
                                name='compatibleUpgrades',
                                types=[
                                    FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getVehicleComponentPosition",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getComponentPosition',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='theComponent',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='base',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=True,
                                ),
                                default_value='"root"',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function gets the component position of a vehicle. The vehicle must be streamed in.' ,
                arguments={
                    "theVehicle": """The vehicle you wish to get component position of. """,
                    "theComponent": """A Vehicle_Components|vehicle component (this is the frame name from the model file of the component you wish to modify) """,
                    "base": """A string representing what the returned position is relative to. It can be one of the following values: """,
                    "parent": """The position is relative to the parent component. """,
                    "root": """The position is relative to the root component. """,
                    "world": """The position is a world position. """
                },
                result='returns three floats indicating the position of the component, x, y and z respectively.' ,
            )
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getVehicleComponentRotation",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getComponentRotation',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='theComponent',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='base',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=True,
                                ),
                                default_value='"parent"',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function gets the component rotation of a vehicle.' ,
                arguments={
                    "theVehicle": """The vehicle you wish to get component rotation of. """,
                    "theComponent": """A Vehicle_Components|vehicle component (this is the frame name from the model file of the component you wish to modify) """,
                    "base": """A string representing what the returned rotation is relative to. It can be one of the following values: """,
                    "parent": """(default if not specified): The rotation is relative to the parent component. """,
                    "root": """: The rotation is relative to the root component. """,
                    "world": """: The rotation is a world rotation, relative to the worlds coordinates axes. """
                },
                result='returns three floats indicating the rotation of the component, x, y and z respectively.' ,
            )
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getVehicleComponents",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getComponents',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function gets a table of the components currently on a vehicle.' ,
                arguments={
                    "theVehicle": """The vehicle you wish to get the Vehicle_Components|components of. """
                },
                result='returns a table containing the name of the component as the key and visibility flag of that component as the value' ,
            )
        ),
                field=FunctionOOPField(
                                name='components',
                                types=[
                                    FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getVehicleComponentScale",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getComponentScale',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='theComponent',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='base',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=True,
                                ),
                                default_value='"root"',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function gets the component scale of a vehicle.}}' ,
                arguments={
                    "theVehicle": """The vehicle you wish to get component scale of. """,
                    "theComponent": """A Vehicle_Components|vehicle component (this is the frame name from the model file of the component you wish to modify) """,
                    "base": """A string representing what the returned scale is relative to. It can be one of the following values: """,
                    "parent": """The scale is relative to the parent component. """,
                    "root": """The scale  is relative to the root component. """,
                    "world": """The scale is a world scale. """
                },
                result='returns three floats indicating the scale of the component, x, y and z respectively.' ,
            )
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getVehicleComponentVisible",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getComponentVisible',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='theComponent',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function get component visibility for vehicle.' ,
                arguments={
                    "theVehicle": """The vehicle you wish to get component visibility of. """,
                    "theComponent": """A Vehicle_Components|vehicle component (this is the frame name from the model file of the component you wish to modify) """
                },
                result='returns a bool indicating the visible state of the component.' ,
            )
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="getVehicleController",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getController',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['player'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function is used to get the player in control of the specified vehicle which includes somebody who is trying to enter the drivers seat.' ,
                arguments={
                    "theVehicle": """the vehicle you want to get the controller of. """
                },
                result='returns a player object, if there isnt a driver, it will search the trailer chain for the front driver, false otherwise.' ,
            )
        ),
                field=FunctionOOPField(
                                name='controller',
                                types=[
                                    FunctionType(
                                    names=['player'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getVehicleController",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getController',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['player'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function is used to get the player in control of the specified vehicle which includes somebody who is trying to enter the drivers seat.' ,
                arguments={
                    "theVehicle": """the vehicle you want to get the controller of. """
                },
                result='returns a player object, if there isnt a driver, it will search the trailer chain for the front driver, false otherwise.' ,
            )
        ),
                field=FunctionOOPField(
                                name='controller',
                                types=[
                                    FunctionType(
                                    names=['player'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="getVehicleDoorOpenRatio",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getDoorOpenRatio',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='door',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function tells you how open a door is (the open ratio). Doors include boots/trunks and bonnets on vehicles that have them.' ,
                arguments={
                    "theVehicle": """The vehicle that you wish to get the door open ratio of. """,
                    "door": """A whole number, 0 (hood), 1 (trunk), 2 (front left), 3 (front right), 4 (rear left), 5 (rear right) """
                },
                result='returns a number between 0 and 1 that indicates how open the door is. 0 is closed, and 1 is fully open. returns false if invalid arguments are passed.' ,
            )
        ),
                field=None,
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getVehicleDoorOpenRatio",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getDoorOpenRatio',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='door',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function tells you how open a door is (the open ratio). Doors include boots/trunks and bonnets on vehicles that have them.' ,
                arguments={
                    "theVehicle": """The vehicle that you wish to get the door open ratio of. """,
                    "door": """A whole number, 0 (hood), 1 (trunk), 2 (front left), 3 (front right), 4 (rear left), 5 (rear right) """
                },
                result='returns a number between 0 and 1 that indicates how open the door is. 0 is closed, and 1 is fully open. returns false if invalid arguments are passed.' ,
            )
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="getVehicleDoorState",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getDoorState',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='door',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns the current state of the specifed door on the vehicle.' ,
                arguments={
                    "theVehicle": """the vehicle you want to get the door status of. """,
                    "door": """a whole number representing which door to get the status of. Valid values are: """,
                    "0": """Hood """,
                    "1": """Trunk """,
                    "2": """Front left """,
                    "3": """Front right """,
                    "4": """Rear left """,
                    "5": """Rear right """
                },
                result='if successful, one of the following integers will be returned:\n* 0: shut, intact (also returned if the door does not exist)\n* 1: ajar, intact\n* 2: shut, damaged\n* 3: ajar, damaged\n* 4: missing' ,
            )
        ),
                field=None,
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getVehicleDoorState",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getDoorState',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='door',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns the current state of the specifed door on the vehicle.' ,
                arguments={
                    "theVehicle": """the vehicle you want to get the door status of. """,
                    "door": """a whole number representing which door to get the status of. Valid values are: """,
                    "0": """Hood """,
                    "1": """Trunk """,
                    "2": """Front left """,
                    "3": """Front right """,
                    "4": """Rear left """,
                    "5": """Rear right """
                },
                result='if successful, one of the following integers will be returned:\n* 0: shut, intact (also returned if the door does not exist)\n* 1: ajar, intact\n* 2: shut, damaged\n* 3: ajar, damaged\n* 4: missing' ,
            )
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getVehicleDummyPosition",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getDummyPosition',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='dummy',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns the position of the dummy for the given vehicle.}}' ,
                arguments={
                    "theVehicle": """The vehicle you want to get the dummy positions from """,
                    "dummy": """The dummy whose position you want to get """
                },
                result='returns three floats indicating the position x, y and z of the vehicles dummy. it returns false otherwise.\nthis is a command to get the position of the players vehicle dummy position specified as an argument.\n<syntaxhighlight lang=lua>\nfunction getdummyposition(cmd, dummy)\nif (not dummy) then\nreturn false\nend\nlocal veh = getpedoccupiedvehicle(localplayer)\nif (not veh) then\noutputchatbox(you should be in a vehicle to use this command, 255, 25, 25)\nreturn false\nend\nlocal x, y, z = getvehicledummyposition(veh, dummy)\noutputchatbox(x: ..x.., y: ..y.., z: ..z, 0, 255, 0)\nend\naddcommandhandler(getdummy, getdummyposition)\n</syntaxhighlight>' ,
            )
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="getVehicleEngineState",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getEngineState',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='' ,
                arguments={
                    "theVehicle": """: the vehicle you wish to get the engine state of. """
                },
                result='returns true if the vehicles engine is started, false otherwise.' ,
            )
        ),
                field=FunctionOOPField(
                                name='engineState',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getVehicleEngineState",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getEngineState',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='' ,
                arguments={
                    "theVehicle": """: the vehicle you wish to get the engine state of. """
                },
                result='returns true if the vehicles engine is started, false otherwise.' ,
            )
        ),
                field=FunctionOOPField(
                                name='engineState',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="getVehicleHandling",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getHandling',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns a table of the current vehicle handling data.' ,
                arguments={
                    "theVehicle": """the vehicle you wish to get the handling data of. """
                },
                result='returns a table containing all the handling data, false otherwise. heres a list of valid table properties and what they return:' ,
            )
        ),
                field=FunctionOOPField(
                                name='handling',
                                types=[
                                    FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getVehicleHandling",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getHandling',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns a table of the current vehicle handling data.' ,
                arguments={
                    "theVehicle": """the vehicle you wish to get the handling data of. """
                },
                result='returns a table containing all the handling data, false otherwise. heres a list of valid table properties and what they return:' ,
            )
        ),
                field=FunctionOOPField(
                                name='handling',
                                types=[
                                    FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="getVehicleHeadLightColor",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getHeadLightColor',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function will get the headlight color of a vehicle.' ,
                arguments={
                    "theVehicle": """The vehicle that you wish to set the headlight color of. """
                },
                result='returns three integers for the red, green and blue of the headlight color for the specified vehicle, false if an invalid vehicle was specified.' ,
            )
        ),
                field=None,
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getVehicleHeadLightColor",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getHeadLightColor',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function will get the headlight color of a vehicle.' ,
                arguments={
                    "theVehicle": """The vehicle that you wish to set the headlight color of. """
                },
                result='returns three integers for the red, green and blue of the headlight color for the specified vehicle, false if an invalid vehicle was specified.' ,
            )
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="getVehicleLandingGearDown",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getLangingGearDown',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function is used to check whether a vehicles landing gear is down or not. Only planes can be used with this function.' ,
                arguments={
                    "theVehicle": """the vehicle of which you wish to check the landing gear state. """
                },
                result='returns true if landing gear is down, false if the landing gear is up.<br />\nreturns nil if the vehicle has no landing gear, or is invalid.' ,
            )
        ),
                field=FunctionOOPField(
                                name='landingGearDown',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getVehicleLandingGearDown",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getLangingGearDown',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function is used to check whether a vehicles landing gear is down or not. Only planes can be used with this function.' ,
                arguments={
                    "theVehicle": """the vehicle of which you wish to check the landing gear state. """
                },
                result='returns true if landing gear is down, false if the landing gear is up.<br />\nreturns nil if the vehicle has no landing gear, or is invalid.' ,
            )
        ),
                field=FunctionOOPField(
                                name='landingGearDown',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="getVehicleLightState",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getLightState',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='light',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns the current state of the specified light on the vehicle.' ,
                arguments={
                    "theVehicle": """the vehicle that you wish to know the light state of. """,
                    "light": """A whole number determining the individual light: """,
                    "0": """Front left """,
                    "1": """Front right """,
                    "2": """Rear right """,
                    "3": """Rear left """
                },
                result='returns 0 (working) or 1 (broken)' ,
            )
        ),
                field=None,
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getVehicleLightState",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getLightState',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='light',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns the current state of the specified light on the vehicle.' ,
                arguments={
                    "theVehicle": """the vehicle that you wish to know the light state of. """,
                    "light": """A whole number determining the individual light: """,
                    "0": """Front left """,
                    "1": """Front right """,
                    "2": """Rear right """,
                    "3": """Rear left """
                },
                result='returns 0 (working) or 1 (broken)' ,
            )
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="getVehicleMaxPassengers",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getMaxPassengers',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            ),
                FunctionArgument(
                                name='modelID',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns the maximum number of passengers that a specified vehicle can hold. Only passenger seats are counted, the driver seat is excluded.' ,
                arguments={
                    "theVehicle": """the vehicle that you wish to know the maximum capacity of.
OR """,
                    "modelID": """the model id that you wish to know the maximum capacity of. """
                },
                result='returns an int indicating the maximum number of passengers that can enter a vehicle.' ,
            )
        ),
                field=FunctionOOPField(
                                name='maxPassengers',
                                types=[
                                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getVehicleMaxPassengers",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getMaxPassengers',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            ),
                FunctionArgument(
                                name='modelID',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns the maximum number of passengers that a specified vehicle can hold. Only passenger seats are counted, the driver seat is excluded.' ,
                arguments={
                    "theVehicle": """the vehicle that you wish to know the maximum capacity of.
OR """,
                    "modelID": """the model id that you wish to know the maximum capacity of. """
                },
                result='returns an int indicating the maximum number of passengers that can enter a vehicle.' ,
            )
        ),
                field=FunctionOOPField(
                                name='maxPassengers',
                                types=[
                                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getVehicleModelDummyDefaultPosition",
                class_name='Vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getVehicleModelDummyDefaultPosition',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='modelID',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='dummy',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function gets the default position of the dummies contained in a vehicle model.' ,
                arguments={
                    "modelID": """: The model ID which you want to apply the change to """,
                    "dummy": """: The dummy whose position you want to get """
                },
                result='returns three floats indicating the default position x, y and z of the given dummy. it returns false otherwise.' ,
            )
        ),
                field=None,
                is_static=True,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getVehicleModelDummyPosition",
                class_name='Vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getVehicleModelDummyPosition',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='modelID',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='dummy',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function gets position of the dummies contained in a vehicle model.' ,
                arguments={
                    "modelID": """: The model ID which you want to apply the change to """,
                    "dummy": """: The dummy whose position you want to get """
                },
                result='returns three floats indicating the position x, y and z of given dummy. it returns false otherwise.' ,
            )
        ),
                field=None,
                is_static=True,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getVehicleModelExhaustFumesPosition",
                class_name='Vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getModelExhaustFumesPosition',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='modelID',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns the position of the exhaust fumes the vehicle model emits.' ,
                arguments={
                    "modelID": """: The vehicle model ID. """
                },
                result='returns the position of the exhaust fumes if everything went fine or false otherwise.' ,
            )
        ),
                field=None,
                is_static=True,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description="""This function is a static function underneath the Vehicle class.""",
                base_function_name="getVehicleModelFromName",
                class_name='Vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getModelFromName',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='name',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function retrieves the model ID of a vehicle as an integer value from its name.' ,
                arguments={
                    "name": """A string containing the name of the vehicle. """
                },
                result='returns an integer if the name exists, false otherwise.\nif you use this function on vehicles with shared names, such as police, it will return the earliest occurrence of that vehicles id.' ,
            )
        ),
                field=None,
                is_static=True,
            )
        ],
        client=[
            FunctionOOP(
                description="""This function is a static function underneath the Vehicle class.""",
                base_function_name="getVehicleModelFromName",
                class_name='Vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getModelFromName',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='name',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function retrieves the model ID of a vehicle as an integer value from its name.' ,
                arguments={
                    "name": """A string containing the name of the vehicle. """
                },
                result='returns an integer if the name exists, false otherwise.\nif you use this function on vehicles with shared names, such as police, it will return the earliest occurrence of that vehicles id.' ,
            )
        ),
                field=None,
                is_static=True,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getVehicleModelWheelSize",
                class_name='Vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getModelWheelSize',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float', 'table'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='vehicleModel',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='wheelGroup',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='' ,
                arguments={
                    "vehicleModel": """: The Vehicle IDs|vehicle model ID. """,
                    "wheelGroup": """: The group of wheels of the vehicle model to retrieve their size value. If not specified, it defaults to all_wheels. The following values are supported: """,
                    "front_axle": """: Represents the wheels in the front axle. """,
                    "rear_axle": """: Represents the wheels in the rear axle. """,
                    "all_wheels": """: Convenience group that returns all the wheel sizes in a table of the following format:
<syntaxhighlight lang="lua">{ front_axle = 0.8, rear_axle = 0.7 }</syntaxhighlight> """
                },
                result='returns a decimal number or a table, depending on the specified wheel group. if the specified vehicle model id or wheel group are not valid, an error is raised instead. the meaning of the wheel size values is documented in setvehiclemodelwheelsize.' ,
            )
        ),
                field=None,
                is_static=True,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="getVehicleName",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getName',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns a string containing the name of the vehicle' ,
                arguments={
                    "theVehicle": """the vehicle you want to get the name of. """
                },
                result='returns a string containing the requested vehicles name, or false if the vehicle passed to the function is invalid.' ,
            )
        ),
                field=FunctionOOPField(
                                name='name',
                                types=[
                                    FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getVehicleName",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getName',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns a string containing the name of the vehicle' ,
                arguments={
                    "theVehicle": """the vehicle you want to get the name of. """
                },
                result='returns a string containing the requested vehicles name, or false if the vehicle passed to the function is invalid.' ,
            )
        ),
                field=FunctionOOPField(
                                name='name',
                                types=[
                                    FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description="""This function is a static function underneath the Vehicle class.""",
                base_function_name="getVehicleNameFromModel",
                class_name='Vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getNameFromModel',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='model',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Gets the name of a vehicle by its model ID.' ,
                arguments={
                    "model": """This is the vehicle model ID. See vehicle IDs to see what values will return names. """
                },
                result='returns the name of the vehicle if the model id was valid, false otherwise.' ,
            )
        ),
                field=None,
                is_static=True,
            )
        ],
        client=[
            FunctionOOP(
                description="""This function is a static function underneath the Vehicle class.""",
                base_function_name="getVehicleNameFromModel",
                class_name='Vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getNameFromModel',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='model',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Gets the name of a vehicle by its model ID.' ,
                arguments={
                    "model": """This is the vehicle model ID. See vehicle IDs to see what values will return names. """
                },
                result='returns the name of the vehicle if the model id was valid, false otherwise.' ,
            )
        ),
                field=None,
                is_static=True,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="getVehicleOccupant",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getOccupant',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['player'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='seat',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function gets the player sitting/trying to enter the specified vehicle.' ,
                arguments={
                    "theVehicle": """the vehicle of which you wish to retrieve the driver or a passenger. """,
                    "seat": """the seat where the player is sitting (0 for driver, 1+ for passengers). """
                },
                result='returns the player sitting in the vehicle, or false if the seat is unoccupied or doesnt exist.' ,
            )
        ),
                field=None,
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getVehicleOccupant",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getOccupant',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['player'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='seat',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function gets the player sitting/trying to enter the specified vehicle.' ,
                arguments={
                    "theVehicle": """the vehicle of which you wish to retrieve the driver or a passenger. """,
                    "seat": """the seat where the player is sitting (0 for driver, 1+ for passengers). """
                },
                result='returns the player sitting in the vehicle, or false if the seat is unoccupied or doesnt exist.' ,
            )
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="getVehicleOccupants",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getOccupants',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function gets all peds sitting in the specified vehicle.' ,
                arguments={
                    "theVehicle": """the vehicle of which you wish to retrieve the occupants. """
                },
                result='returns a table with seat id as an index and the occupant as an element like this: tableseat = occupant\nreturns false if an invalid vehicle was passed or if the vehicle has no seats (like a trailer)\n<div style=font-weight: bold;background:blue;color:white;padding:2px; padding-left:8px;>counting players in a vehicle</div>\n<div style=border: 2px solid blue;padding: 5px;>dont use an ipairs loop with the table returned by this function. it will skip the driver, as ipairs starts at 1 and the driver seat is id 0. and if theres an empty seat, ipairs will stop looping. you should use a pairs loop instead.\n<syntaxhighlight lang=lua>\nlocal counter = 0\nfor seat, player in pairs(getvehicleoccupants(pseudovehicle)) do\ncounter = counter + 1\nend\noutputdebugstring(players in your vehicle: .. counter)\n</syntaxhighlight>\n</div>' ,
            )
        ),
                field=FunctionOOPField(
                                name='occupants',
                                types=[
                                    FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getVehicleOccupants",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getOccupants',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function gets all peds sitting in the specified vehicle.' ,
                arguments={
                    "theVehicle": """the vehicle of which you wish to retrieve the occupants. """
                },
                result='returns a table with seat id as an index and the occupant as an element like this: tableseat = occupant\nreturns false if an invalid vehicle was passed or if the vehicle has no seats (like a trailer)\n<div style=font-weight: bold;background:blue;color:white;padding:2px; padding-left:8px;>counting players in a vehicle</div>\n<div style=border: 2px solid blue;padding: 5px;>dont use an ipairs loop with the table returned by this function. it will skip the driver, as ipairs starts at 1 and the driver seat is id 0. and if theres an empty seat, ipairs will stop looping. you should use a pairs loop instead.\n<syntaxhighlight lang=lua>\nlocal counter = 0\nfor seat, player in pairs(getvehicleoccupants(pseudovehicle)) do\ncounter = counter + 1\nend\noutputdebugstring(players in your vehicle: .. counter)\n</syntaxhighlight>\n</div>' ,
            )
        ),
                field=FunctionOOPField(
                                name='occupants',
                                types=[
                                    FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="getVehicleOverrideLights",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getOverrideLights',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function is used to find out the current state of the override-lights setting of a vehicle.' ,
                arguments={
                    "theVehicle": """: the vehicle you wish to retrieve the override lights setting of. """
                },
                result='returns an integer value: 0 (no override), 1 (force off) or 2 (force on).' ,
            )
        ),
                field=FunctionOOPField(
                                name='overrideLights',
                                types=[
                                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getVehicleOverrideLights",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getOverrideLights',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function is used to find out the current state of the override-lights setting of a vehicle.' ,
                arguments={
                    "theVehicle": """: the vehicle you wish to retrieve the override lights setting of. """
                },
                result='returns an integer value: 0 (no override), 1 (force off) or 2 (force on).' ,
            )
        ),
                field=FunctionOOPField(
                                name='overrideLights',
                                types=[
                                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="getVehiclePaintjob",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getPaintjob',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function gets the current paintjob on the specified vehicle. <br />' ,
                arguments={
                    "theVehicle": """: the vehicle you wish to get the paintjob of. """
                },
                result='returns an integer representing the current paintjob on the vehicle. <br />\n* 0: the first paintjob\n* 1: the second paintjob\n* 2: the third paintjob\n* 3: default paintjob (no paintjob)' ,
            )
        ),
                field=FunctionOOPField(
                                name='paintjob',
                                types=[
                                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getVehiclePaintjob",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getPaintjob',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function gets the current paintjob on the specified vehicle. <br />' ,
                arguments={
                    "theVehicle": """: the vehicle you wish to get the paintjob of. """
                },
                result='returns an integer representing the current paintjob on the vehicle. <br />\n* 0: the first paintjob\n* 1: the second paintjob\n* 2: the third paintjob\n* 3: default paintjob (no paintjob)' ,
            )
        ),
                field=FunctionOOPField(
                                name='paintjob',
                                types=[
                                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="getVehiclePanelState",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getPanelState',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='panel',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns the current state of a specifed panel on the vehicle. A vehicle can have up to 7 panels.' ,
                arguments={
                    "theVehicle": """the vehicle that you wish to know the panel state of. """,
                    "panel": """an integer specifying the panel you want to know the state of. Not every vehicle has every panel. Possible values are: """,
                    "0": """Front-left panel """,
                    "1": """Front-right panel """,
                    "2": """Rear-left panel """,
                    "3": """Rear-right panel """,
                    "4": """Windscreen """,
                    "5": """Front bumper """,
                    "6": """Rear bumper """
                },
                result='returns an int indicating the state of the specified the panel. this is a value between 0 and 3, with 0 indicating the panel is undamaged and 3 indicating it is very damaged.' ,
            )
        ),
                field=None,
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getVehiclePanelState",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getPanelState',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='panel',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns the current state of a specifed panel on the vehicle. A vehicle can have up to 7 panels.' ,
                arguments={
                    "theVehicle": """the vehicle that you wish to know the panel state of. """,
                    "panel": """an integer specifying the panel you want to know the state of. Not every vehicle has every panel. Possible values are: """,
                    "0": """Front-left panel """,
                    "1": """Front-right panel """,
                    "2": """Rear-left panel """,
                    "3": """Rear-right panel """,
                    "4": """Windscreen """,
                    "5": """Front bumper """,
                    "6": """Rear bumper """
                },
                result='returns an int indicating the state of the specified the panel. this is a value between 0 and 3, with 0 indicating the panel is undamaged and 3 indicating it is very damaged.' ,
            )
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="getVehiclePlateText",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getPlateText',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function is used to retrieve the text on the number plate of a specified vehicle.' ,
                arguments={
                    "theVehicle": """the vehicle that you wish to retrieve the plate text from. """
                },
                result='returns a string that corresponds to the plate on the text, false if a bad argument was passed or if it is not a vehicle. every vehicle (including planes, boats, etc.) has a numberplate, even if its not visible.' ,
            )
        ),
                field=FunctionOOPField(
                                name='plateText',
                                types=[
                                    FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getVehiclePlateText",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getPlateText',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function is used to retrieve the text on the number plate of a specified vehicle.' ,
                arguments={
                    "theVehicle": """the vehicle that you wish to retrieve the plate text from. """
                },
                result='returns a string that corresponds to the plate on the text, false if a bad argument was passed or if it is not a vehicle. every vehicle (including planes, boats, etc.) has a numberplate, even if its not visible.' ,
            )
        ),
                field=FunctionOOPField(
                                name='plateText',
                                types=[
                                    FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="getVehicleRespawnPosition",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getRespawnPosition',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='' ,
                arguments={
                    "theVehicle": """The vehicle which youd like to retrieve the respawn coordinates of. """
                },
                result='returns three float|floats indicating the respawn coordinates of the vehicle, x, y and z respectively.' ,
            )
        ),
                field=FunctionOOPField(
                                name='respawnPosition',
                                types=[
                                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="getVehicleRespawnRotation",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getRespawnRotation',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='' ,
                arguments={
                    "theVehicle": """The vehicle which youd like to retrieve the respawn rotation of. """
                },
                result='returns three float|floats indicating the respawn rotation of the vehicle, x, y and z respectively.' ,
            )
        ),
                field=FunctionOOPField(
                                name='respawnRotation',
                                types=[
                                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="getVehicleSirenParams",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getSirenParams',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function get the parameters of a vehicles siren.' ,
                arguments={
                    "theVehicle": """The vehicle to get the siren parameters of """
                },
                result='returns a table with the siren count, siren type and a sub table for the four flags. false otherwise.\n<syntaxhighlight lang=lua>\nint   sirenparams.sirencount\nint   sirenparams.sirentype\ntable sirenparams.flags\nbool sirenparams.flags360\nbool sirenparams.flags.doloscheck\nbool sirenparams.flags.userandomiser\nbool sirenparams.flags.silent\n</syntaxhighlight>' ,
            )
        ),
                field=FunctionOOPField(
                                name='sirenParams',
                                types=[
                                    FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getVehicleSirenParams",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getSirenParams',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function get the parameters of a vehicles siren.' ,
                arguments={
                    "theVehicle": """The vehicle to get the siren parameters of """
                },
                result='returns a table with the siren count, siren type and a sub table for the four flags. false otherwise.\n<syntaxhighlight lang=lua>\nint   sirenparams.sirencount\nint   sirenparams.sirentype\ntable sirenparams.flags\nbool sirenparams.flags360\nbool sirenparams.flags.doloscheck\nbool sirenparams.flags.userandomiser\nbool sirenparams.flags.silent\n</syntaxhighlight>' ,
            )
        ),
                field=FunctionOOPField(
                                name='sirenParams',
                                types=[
                                    FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="getVehicleSirens",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getSirens',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function gets the properties of a vehicles sirens.' ,
                arguments={
                    "theVehicle": """The vehicle to get siren information of. """
                },
                result='if the vehicle is invalid, it returns false. otherwise, returns a table with sub tables containing the properties of each siren point in the following manner:\n<syntaxhighlight lang=lua>\nfloat   sirendatasirenpoint.x\nfloat   sirendatasirenpoint.y\nfloat   sirendatasirenpoint.z\nint     sirendatasirenpoint.red\nint     sirendatasirenpoint.green\nint     sirendatasirenpoint.blue\nint     sirendatasirenpoint.alpha\nint     sirendatasirenpoint.min_alpha\n</syntaxhighlight>' ,
            )
        ),
                field=FunctionOOPField(
                                name='sirens',
                                types=[
                                    FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getVehicleSirens",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getSirens',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function gets the properties of a vehicles sirens.' ,
                arguments={
                    "theVehicle": """The vehicle to get siren information of. """
                },
                result='if the vehicle is invalid, it returns false. otherwise, returns a table with sub tables containing the properties of each siren point in the following manner:\n<syntaxhighlight lang=lua>\nfloat   sirendatasirenpoint.x\nfloat   sirendatasirenpoint.y\nfloat   sirendatasirenpoint.z\nint     sirendatasirenpoint.red\nint     sirendatasirenpoint.green\nint     sirendatasirenpoint.blue\nint     sirendatasirenpoint.alpha\nint     sirendatasirenpoint.min_alpha\n</syntaxhighlight>' ,
            )
        ),
                field=FunctionOOPField(
                                name='sirens',
                                types=[
                                    FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="getVehicleSirensOn",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='areSirensOn',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns whether the sirens are turned on for the specified vehicle.' ,
                arguments={
                    "theVehicle": """The vehicle that will be checked. """
                },
                result='returns true if the sirens are turned on for the specified vehicle, false if the sirens are turned off for the specified vehicle, if the vehicle doesnt have sirens or if invalid arguments are specified.' ,
            )
        ),
                field=FunctionOOPField(
                                name='sirensOn',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getVehicleSirensOn",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='areSirensOn',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns whether the sirens are turned on for the specified vehicle.' ,
                arguments={
                    "theVehicle": """The vehicle that will be checked. """
                },
                result='returns true if the sirens are turned on for the specified vehicle, false if the sirens are turned off for the specified vehicle, if the vehicle doesnt have sirens or if invalid arguments are specified.' ,
            )
        ),
                field=FunctionOOPField(
                                name='sirensOn',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="getVehiclesOfType",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getAllOfType',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='model',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function scans through all the current vehicles and returns the ones matching the given model.' ,
                arguments={
                    "model": """: The model of vehicles you want. """
                },
                result='returns a table of existing vehicles matching the specified model.' ,
            )
        ),
                field=None,
                is_static=False,
            )
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="getVehicleTowedByVehicle",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getTowedByVehicle',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function is used to get the vehicle being towed by another.' ,
                arguments={
                    "theVehicle": """: The vehicle you wish to get the towed vehicle from. """
                },
                result='returns the vehicle that thevehicle is towing, false if it isnt towing a vehicle.' ,
            )
        ),
                field=FunctionOOPField(
                                name='towedByVehicle',
                                types=[
                                    FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getVehicleTowedByVehicle",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getTowedByVehicle',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function is used to get the vehicle being towed by another.' ,
                arguments={
                    "theVehicle": """: The vehicle you wish to get the towed vehicle from. """
                },
                result='returns the vehicle that thevehicle is towing, false if it isnt towing a vehicle.' ,
            )
        ),
                field=FunctionOOPField(
                                name='towedByVehicle',
                                types=[
                                    FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="getVehicleTowingVehicle",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getTowingVehicle',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function is used to get the vehicle that is towing another.' ,
                arguments={
                    "theVehicle": """: the vehicle being towed. """
                },
                result='* the vehicle that thevehicle is being towed by.\n* false if it isnt being towed.' ,
            )
        ),
                field=FunctionOOPField(
                                name='towingVehicle',
                                types=[
                                    FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getVehicleTowingVehicle",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getTowingVehicle',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function is used to get the vehicle that is towing another.' ,
                arguments={
                    "theVehicle": """: the vehicle being towed. """
                },
                result='* the vehicle that thevehicle is being towed by.\n* false if it isnt being towed.' ,
            )
        ),
                field=FunctionOOPField(
                                name='towingVehicle',
                                types=[
                                    FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="getVehicleTurretPosition",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getTurretPosition',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='turretVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function gets the position of a vehicles turret, if it has one. Vehicles with turrets include firetrucks and tanks.' ,
                arguments={
                    "turretVehicle": """: The vehicle whose turret position you want to retrieve. This should be a vehicle with a turret. """
                },
                result='returns two floats for the x (horizontal) and y (vertical) axis rotation respectively. these values are in radians. the function will return 0, 0 if the vehicle is not a vehicle with a turret.' ,
            )
        ),
                field=FunctionOOPField(
                                name='turretPosition',
                                types=[
                                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getVehicleTurretPosition",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getTurretPosition',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='turretVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function gets the position of a vehicles turret, if it has one. Vehicles with turrets include firetrucks and tanks.' ,
                arguments={
                    "turretVehicle": """: The vehicle whose turret position you want to retrieve. This should be a vehicle with a turret. """
                },
                result='returns two floats for the x (horizontal) and y (vertical) axis rotation respectively. these values are in radians. the function will return 0, 0 if the vehicle is not a vehicle with a turret.' ,
            )
        ),
                field=FunctionOOPField(
                                name='turretPosition',
                                types=[
                                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="getVehicleType",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getVehicleType',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function retrieves the type of a vehicle (such as if it is a car or a boat).' ,
                arguments={
                    "vehicle": """The vehicle element to get the type of.
'''OR''' """,
                    "modelID": """A vehicle model ID """
                },
                result='returns a string with vehicle type or false if an invalid modelid has been supplied, or an empty string if the vehicle is blocked internally (some trailers).\npossible strings returned:' ,
            )
        ),
                field=FunctionOOPField(
                                name='vehicleType',
                                types=[
                                    FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getVehicleType",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getVehicleType',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function retrieves the type of a vehicle (such as if it is a car or a boat).' ,
                arguments={
                    "vehicle": """The vehicle element to get the type of.
'''OR''' """,
                    "modelID": """A vehicle model ID """
                },
                result='returns a string with vehicle type or false if an invalid modelid has been supplied, or an empty string if the vehicle is blocked internally (some trailers).\npossible strings returned:' ,
            )
        ),
                field=FunctionOOPField(
                                name='vehicleType',
                                types=[
                                    FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="getVehicleUpgradeOnSlot",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getUpgradeOnSlot',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='slot',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns the current upgrade id on the specified vehicles upgrade slot\nAn upgrade slot is a certain type of upgrade (eg: exhaust, spoiler), there are 17 slots (0 to 16).' ,
                arguments={
                    "theVehicle": """: The vehicle whose upgrade you want to retrieve. """,
                    "slot": """: The slot id of the upgrade. (Upgrade list ordered by slot number) """
                },
                result='returns an integer with the upgrade on the slot if correct arguments were passed, false otherwise.' ,
            )
        ),
                field=None,
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getVehicleUpgradeOnSlot",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getUpgradeOnSlot',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='slot',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns the current upgrade id on the specified vehicles upgrade slot\nAn upgrade slot is a certain type of upgrade (eg: exhaust, spoiler), there are 17 slots (0 to 16).' ,
                arguments={
                    "theVehicle": """: The vehicle whose upgrade you want to retrieve. """,
                    "slot": """: The slot id of the upgrade. (Upgrade list ordered by slot number) """
                },
                result='returns an integer with the upgrade on the slot if correct arguments were passed, false otherwise.' ,
            )
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="getVehicleUpgrades",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getUpgrades',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns a table of all the upgrades on a specifed vehicle.' ,
                arguments={
                    "theVehicle": """The vehicle you wish to retrieve the upgrades of. """
                },
                result='returns a table of all the upgrades on each slot of a vehicle, which may be empty, or false if a valid vehicle is not passed.' ,
            )
        ),
                field=FunctionOOPField(
                                name='upgrades',
                                types=[
                                    FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getVehicleUpgrades",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getUpgrades',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns a table of all the upgrades on a specifed vehicle.' ,
                arguments={
                    "theVehicle": """The vehicle you wish to retrieve the upgrades of. """
                },
                result='returns a table of all the upgrades on each slot of a vehicle, which may be empty, or false if a valid vehicle is not passed.' ,
            )
        ),
                field=FunctionOOPField(
                                name='upgrades',
                                types=[
                                    FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="getVehicleVariant",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getVariant',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function gets the variant of a specified vehicle. In GTA SA some vehicles are different for example the labelling on trucks or the contents of a pick-up truck and the varying types of a motor bike. For the default GTA SA variant list see: Vehicle variants' ,
                arguments={
                    "theVehicle": """A handle to the vehicle that you want to get the variant of. """
                },
                result='on success:\n* int: an integer for the first vehicle variant see vehicle variants\n* int: an integer for the second vehicle variant see vehicle variants\non failure:\n* bool: false because the specified vehicle didnt exist' ,
            )
        ),
                field=None,
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getVehicleVariant",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getVariant',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function gets the variant of a specified vehicle. In GTA SA some vehicles are different for example the labelling on trucks or the contents of a pick-up truck and the varying types of a motor bike. For the default GTA SA variant list see: Vehicle variants' ,
                arguments={
                    "theVehicle": """A handle to the vehicle that you want to get the variant of. """
                },
                result='on success:\n* int: an integer for the first vehicle variant see vehicle variants\n* int: an integer for the second vehicle variant see vehicle variants\non failure:\n* bool: false because the specified vehicle didnt exist' ,
            )
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getVehicleWheelFrictionState",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getWheelFrictionState',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='wheel',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='' ,
                arguments={
                    "theVehicle": """The vehicle that you wish to get the wheel friction state. """,
                    "wheel": """The wheel you want to check. (0: front left, 1: rear left, 2: front right, 3: rear right) """
                },
                result='returns a int indicating the wheel friction state. this value can be:\n* 0: normal friction\n* 1: slip with acceleration (only for driving wheels)\n* 2: slip without acceleration\n* 3: locked wheel (on brake or handbrake).' ,
            )
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getVehicleWheelScale",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getWheelScale',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='' ,
                arguments={
                    "theVehicle": """: The vehicle to get its wheel scale of. """
                },
                result='returns the wheel scale of the specified vehicle as a decimal number, or an error if the vehicle is invalid. for more information about the returned number, see setvehiclewheelscale.' ,
            )
        ),
                field=FunctionOOPField(
                                name='wheelScale',
                                types=[
                                    FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="getVehicleWheelStates",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getWheelStates',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns the current states of all the wheels on the vehicle.\nNo vehicles have more than 4 wheels, if they appear to they will be duplicating other wheels.' ,
                arguments={
                    "theVehicle": """A handle to the vehicle that you wish to know the wheel states of. """
                },
                result='returns 4 ints indicating the states of the wheels (front left, rear left, front right, rear right). these values can be:\n* 0: inflated\n* 1: flat\n* 2: fallen off\n* 3: collisionless' ,
            )
        ),
                field=None,
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="getVehicleWheelStates",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='getWheelStates',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns the current states of all the wheels on the vehicle.\nNo vehicles have more than 4 wheels, if they appear to they will be duplicating other wheels.' ,
                arguments={
                    "theVehicle": """A handle to the vehicle that you wish to know the wheel states of. """
                },
                result='returns 4 ints indicating the states of the wheels (front left, rear left, front right, rear right). these values can be:\n* 0: inflated\n* 1: flat\n* 2: fallen off\n* 3: collisionless' ,
            )
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="isTrainChainEngine",
                class_name='Element/Vehicle|vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='isTrainChainEngine',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theTrain',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function checks if a Element/Vehicle|train is a chain engine (moves the rest of the chains carriages) or not.' ,
                arguments={
                    "theTrain": """a Element/Vehicle|train to check if its a chain engine or not. """
                },
                result='* true if a element/vehicle|train was passed to the function and if its a chain engine.\n* false otherwise.' ,
            )
        ),
                field=FunctionOOPField(
                                name='chainEngine',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="isTrainDerailable",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='isDerailable',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='vehicleToCheck',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function will check if a train or tram is derailable.' ,
                arguments={
                    "vehicleToCheck": """The vehicle you wish to check. """
                },
                result='returns true if the train is derailable, false otherwise.' ,
            )
        ),
                field=FunctionOOPField(
                                name='derailable',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="isTrainDerailable",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='isDerailable',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='vehicleToCheck',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function will check if a train or tram is derailable.' ,
                arguments={
                    "vehicleToCheck": """The vehicle you wish to check. """
                },
                result='returns true if the train is derailable, false otherwise.' ,
            )
        ),
                field=FunctionOOPField(
                                name='derailable',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="isTrainDerailed",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='isDerailed',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='vehicleToCheck',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function will check if a train or tram is derailed.' ,
                arguments={
                    "vehicleToCheck": """the vehicle that you wish to check is derailed. """
                },
                result='returns true if the train is derailed, false if the train is still on the rails' ,
            )
        ),
                field=FunctionOOPField(
                                name='derailed',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="isTrainDerailed",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='isDerailed',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='vehicleToCheck',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function will check if a train or tram is derailed.' ,
                arguments={
                    "vehicleToCheck": """the vehicle that you wish to check is derailed. """
                },
                result='returns true if the train is derailed, false if the train is still on the rails' ,
            )
        ),
                field=FunctionOOPField(
                                name='derailed',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="isVehicleBlown",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='isBlown',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function allows you to determine whether a vehicle is blown or still intact.' ,
                arguments={
                    "theVehicle": """The vehicle that you want to obtain the blown status of. """
                },
                result='returns true if the vehicle specified has blown up, false if it is still intact or the vehicle specified is invalid.' ,
            )
        ),
                field=FunctionOOPField(
                                name='blown',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="isVehicleBlown",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='isBlown',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function allows you to determine whether a vehicle is blown or still intact.' ,
                arguments={
                    "theVehicle": """The vehicle that you want to obtain the blown status of. """
                },
                result='returns true if the vehicle specified has blown up, false if it is still intact or the vehicle specified is invalid.' ,
            )
        ),
                field=FunctionOOPField(
                                name='blown',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="isVehicleDamageProof",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='isDamageProof',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function checks if a vehicle is damage proof (set with setVehicleDamageProof).' ,
                arguments={
                    "theVehicle": """the vehicle whose invincibility status we want to check. """
                },
                result='returns true if the vehicle is damage proof, false if it isnt or if invalid arguments were passed.' ,
            )
        ),
                field=FunctionOOPField(
                                name='damageProof',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="isVehicleDamageProof",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='isDamageProof',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function checks if a vehicle is damage proof (set with setVehicleDamageProof).' ,
                arguments={
                    "theVehicle": """the vehicle whose invincibility status we want to check. """
                },
                result='returns true if the vehicle is damage proof, false if it isnt or if invalid arguments were passed.' ,
            )
        ),
                field=FunctionOOPField(
                                name='damageProof',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="isVehicleLocked",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='isLocked',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This will tell you if a vehicle is locked.' ,
                arguments={
                    "theVehicle": """The vehicle that you want to obtain the locked status of. """
                },
                result='returns true if the vehicle specified is locked, false if is unlocked or the vehicle specified is invalid.' ,
            )
        ),
                field=FunctionOOPField(
                                name='locked',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="isVehicleLocked",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='isLocked',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This will tell you if a vehicle is locked.' ,
                arguments={
                    "theVehicle": """The vehicle that you want to obtain the locked status of. """
                },
                result='returns true if the vehicle specified is locked, false if is unlocked or the vehicle specified is invalid.' ,
            )
        ),
                field=FunctionOOPField(
                                name='locked',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="isVehicleOnGround",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='isOnGround',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Checks to see if a vehicle has contact with the ground.' ,
                arguments={
                    "theVehicle": """The vehicle you wish to check. """
                },
                result='returns true if vehicle is on the ground, false if it is not.' ,
            )
        ),
                field=FunctionOOPField(
                                name='onGround',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="isVehicleOnGround",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='isOnGround',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Checks to see if a vehicle has contact with the ground.' ,
                arguments={
                    "theVehicle": """The vehicle you wish to check. """
                },
                result='returns true if vehicle is on the ground, false if it is not.' ,
            )
        ),
                field=FunctionOOPField(
                                name='onGround',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="isVehicleTaxiLightOn",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='isTaxiLightOn',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='taxi',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function will get the taxi light state of a taxi (vehicle IDs 420 and 438)' ,
                arguments={
                    "taxi": """The vehicle element of the taxi that you wish to get the light state of. """
                },
                result='returns true if the light is on, false otherwise.' ,
            )
        ),
                field=FunctionOOPField(
                                name='taxiLightOn',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="isVehicleTaxiLightOn",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='isTaxiLightOn',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='taxi',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function will get the taxi light state of a taxi (vehicle IDs 420 and 438)' ,
                arguments={
                    "taxi": """The vehicle element of the taxi that you wish to get the light state of. """
                },
                result='returns true if the light is on, false otherwise.' ,
            )
        ),
                field=FunctionOOPField(
                                name='taxiLightOn',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="isVehicleWheelOnGround",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='isWheelOnGround',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='wheel',
                                argument_type=FunctionType(
                                    names=['string', 'int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns a boolean whether the vehicles wheel is on ground (true) or in air (false).' ,
                arguments={
                    "theVehicle": """The vehicle, which you want to check. """,
                    "wheel": """The wheel name or number, see list below:
** <code>"front_left"</code> or 0
** <code>"rear_left"</code> or 1
** <code>"front_right"</code> or 2
** <code>"rear_right"</code> or 3 """
                },
                result='returns true if the vehicle wheel is on ground/collided, false otherwise.' ,
            )
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="resetVehicleComponentPosition",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='resetComponentPosition',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='theComponent',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function reset to default component position for vehicle.' ,
                arguments={
                    "theVehicle": """The vehicle you wish to reset component position. """,
                    "theComponent": """A vehicle component (this is the frame name from the model file of the component you wish to modify) """
                },
                result='returns true if the position of the component was reset, false otherwise.' ,
            )
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="resetVehicleComponentRotation",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='resetComponentRotation',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='theComponent',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function reset to default component rotation for vehicle.' ,
                arguments={
                    "theVehicle": """The vehicle you wish to reset component rotation. """,
                    "theComponent": """A vehicle component (this is the frame name from the model file of the component you wish to modify) """
                },
                result='returns true if the rotation of the component was reset, false otherwise.' ,
            )
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="resetVehicleComponentScale",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='resetComponentScale',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='theComponent',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function reset to default component scale for vehicle.' ,
                arguments={
                    "theVehicle": """The vehicle you wish to reset component scale. """,
                    "theComponent": """A vehicle component (this is the frame name from the model file of the component you wish to modify) """
                },
                result='returns true if the scale of the component was reset, false otherwise.' ,
            )
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="resetVehicleDummyPositions",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='resetDummyPositions',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function resets the vehicle dependent dummy positions to the vehicles current model dummy positions.}}' ,
                arguments={
                    "theVehicle": """The vehicle to reset """
                },
                result='returns true for success, false otherwise.' ,
            )
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="respawnVehicle",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='respawn',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function respawns a vehicle according to its set respawn position, set by setVehicleRespawnPosition or the position and rotation it was created on. To spawn a vehicle to a specific location just once, spawnVehicle can be used.' ,
                arguments={
                    "theVehicle": """The vehicle you wish to respawn """
                },
                result='returns true if the vehicle respawned successfully, false if the passed argument does not exist or is not a vehicle.' ,
            )
        ),
                field=None,
                is_static=False,
            )
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="setHeliBladeCollisionsEnabled",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='setHeliBladeCollisionsEnabled',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='collisions',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function changes the state of the helicopter blades collisions on the specified vehicle.' ,
                arguments={
                    "theVehicle": """The helicopter that will have the blades collisions set. """,
                    "collisions": """The state of the helicopter blades collisions. """
                },
                result='returns true if the collisions are set for the specified vehicle, false if the collisions cant be set for the specified vehicle, if the vehicle is not a helicopter or if invalid arguments are specified.' ,
            )
        ),
                field=FunctionOOPField(
                                name='heliBladeCollisionsEnabled',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="setHelicopterRotorSpeed",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='setHelicopterRotorSpeed',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='heli',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='speed',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Sets the rotor speed of a helicopter.' ,
                arguments={
                    "heli": """the helicopter to adjust the rotor of. """,
                    "speed": """the new rotor speed. Usual values are 0 if the helicopter stands still, or 0.2 if the rotor is fully spun up. Higher values than normal will not affect the helicopters handling. Negative values are allowed and will make the rotor spin in the opposite direction (pushing the helicopter down). """
                },
                result='returns true if successful, false otherwise.' ,
            )
        ),
                field=FunctionOOPField(
                                name='helicopterRotorSpeed',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="setTrainDerailable",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='setDerailable',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='derailableVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='derailable',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function will set a train or tram as derailable. This is, if it can derail when it goes above the maximum speed.' ,
                arguments={
                    "derailableVehicle": """The vehicle that you wish to set derailable. """,
                    "derailable": """whether the train or tram is derailable. True as derailable, False as non-derailable. """
                },
                result='returns true if the state was successfully set, false otherwise.' ,
            )
        ),
                field=FunctionOOPField(
                                name='derailable',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="setTrainDerailable",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='setDerailable',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='derailableVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='derailable',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function will set a train or tram as derailable. This is, if it can derail when it goes above the maximum speed.' ,
                arguments={
                    "derailableVehicle": """The vehicle that you wish to set derailable. """,
                    "derailable": """whether the train or tram is derailable. True as derailable, False as non-derailable. """
                },
                result='returns true if the state was successfully set, false otherwise.' ,
            )
        ),
                field=FunctionOOPField(
                                name='derailable',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="setTrainDerailed",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='setDerailed',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='vehicleToDerail',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='derailed',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function will set a train or tram as derailed.' ,
                arguments={
                    "vehicleToDerail": """The vehicle that you wish to derail. """,
                    "derailed": """whether the train is derailed. """
                },
                result='returns true if the state was successfully set' ,
            )
        ),
                field=FunctionOOPField(
                                name='derailed',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="setTrainDerailed",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='setDerailed',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='vehicleToDerail',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='derailed',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function will set a train or tram as derailed.' ,
                arguments={
                    "vehicleToDerail": """The vehicle that you wish to derail. """,
                    "derailed": """whether the train is derailed. """
                },
                result='returns true if the state was successfully set' ,
            )
        ),
                field=FunctionOOPField(
                                name='derailed',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="setTrainDirection",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='setDirection',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='train',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='clockwise',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Sets the direction in which a train or tram drives over the rails (clockwise or counterclockwise).' ,
                arguments={
                    "train": """the train whose direction to change. """,
                    "clockwise": """if true, will make the train go clockwise. If false, makes it go counterclockwise. """
                },
                result='returns true if successful, false otherwise.' ,
            )
        ),
                field=FunctionOOPField(
                                name='direction',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="setTrainDirection",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='setDirection',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='train',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='clockwise',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Sets the direction in which a train or tram drives over the rails (clockwise or counterclockwise).' ,
                arguments={
                    "train": """the train whose direction to change. """,
                    "clockwise": """if true, will make the train go clockwise. If false, makes it go counterclockwise. """
                },
                result='returns true if successful, false otherwise.' ,
            )
        ),
                field=FunctionOOPField(
                                name='direction',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="setTrainPosition",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='setTrainPosition',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='train',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='position',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Sets the position the train is currently on the track' ,
                arguments={
                    "train": """the train of which to set the track """,
                    "position": """the position along the track (0 - 18107 a complete way round) """
                },
                result='returns true if the train position was set, false otherwise.' ,
            )
        ),
                field=FunctionOOPField(
                                name='trainPosition',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="setTrainPosition",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='setTrainPosition',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='train',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='position',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Sets the position the train is currently on the track' ,
                arguments={
                    "train": """the train of which to set the track """,
                    "position": """the position along the track (0 - 18107 a complete way round) """
                },
                result='returns true if the train position was set, false otherwise.' ,
            )
        ),
                field=FunctionOOPField(
                                name='trainPosition',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="setTrainSpeed",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='setSpeed',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='train',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='speed',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Sets the on-track speed of a train.' ,
                arguments={
                    "train": """the train whose speed to change. """,
                    "speed": """the new on-track speed of the train. A positive value will make it go clockwise, a negative value counter clockwise. """
                },
                result='returns true if successful, false otherwise.' ,
            )
        ),
                field=FunctionOOPField(
                                name='trainSpeed',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="setTrainSpeed",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='setSpeed',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='train',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='speed',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Sets the on-track speed of a train.' ,
                arguments={
                    "train": """the train whose speed to change. """,
                    "speed": """the new on-track speed of the train. A positive value will make it go clockwise, a negative value counter clockwise. """
                },
                result='returns true if successful, false otherwise.' ,
            )
        ),
                field=FunctionOOPField(
                                name='trainSpeed',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="setTrainTrack",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='setTrack',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='train',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='track',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Sets the track of a train' ,
                arguments={
                    "train": """the train of which to set the track """,
                    "track": """the track where you want to set the train. It can be 0, 1, 2 or 3. """
                },
                result='returns true if the track was set to the train, false otherwise.' ,
            )
        ),
                field=FunctionOOPField(
                                name='track',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="setTrainTrack",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='setTrack',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='train',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='track',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Sets the track of a train' ,
                arguments={
                    "train": """the train of which to set the track """,
                    "track": """the track where you want to set the train. It can be 0, 1, 2 or 3. """
                },
                result='returns true if the track was set to the train, false otherwise.' ,
            )
        ),
                field=FunctionOOPField(
                                name='track',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="setVehicleColor",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='setColor',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='veh',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='r1',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='g1',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='b1',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='r2',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='g2',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='b2',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='r3',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='g3',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='b3',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='r4',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='g4',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='b4',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function will set the color of a vehicle using either a RGB format, or the Vehicle Colors|standard San Andreas color IDs. Vehicles can have up to 4 colors, most of the vehicles have 2 colors only.\n<syntaxhighlight lang=lua>\nbool setVehicleColor(vehicle veh, int r1, int g1, int b1, int r2, int g2, int b2, int r3, int g3, int b3, int r4, int g4, int b4)\n</syntaxhighlight>\n<syntaxhighlight lang=lua>\nbool setVehicleColor(vehicle veh, int p1, int p2, int p3, int p4)\n</syntaxhighlight>\n*theVehicle: The vehicle that you wish to set the color of.\n* RGB format:\n** r1, g1, b1: Three integers indicating the red, green and blue components of the first (main) color for the vehicle\n* Palette format:\n** p1, p2, p3, p4: Exactly four integers indicating the Vehicle Colors|vehicle color IDs from the palette. <br> If a vehicle has fewer than four colours, you must still provide four colours, otherwise the RGB format will be used.\n*r2, g2, b2: Three integers indicating the red, green and blue components of the second color for the vehicle\n*r3, g3, b3: Three integers indicating the red, green and blue components of the third color for the vehicle\n*r4, g4, b4: Three integers indicating the red, green and blue components of the fourth color for the vehicle' ,
                arguments={
                    
                },
                result='returns true if vehicles color was set, false if an invalid vehicle or invalid colors were specified.' ,
            )
        ),
                field=None,
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="setVehicleColor",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='setColor',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='veh',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='r1',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='g1',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='b1',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='r2',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='g2',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='b2',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='r3',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='g3',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='b3',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='r4',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='g4',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='b4',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function will set the color of a vehicle using either a RGB format, or the Vehicle Colors|standard San Andreas color IDs. Vehicles can have up to 4 colors, most of the vehicles have 2 colors only.\n<syntaxhighlight lang=lua>\nbool setVehicleColor(vehicle veh, int r1, int g1, int b1, int r2, int g2, int b2, int r3, int g3, int b3, int r4, int g4, int b4)\n</syntaxhighlight>\n<syntaxhighlight lang=lua>\nbool setVehicleColor(vehicle veh, int p1, int p2, int p3, int p4)\n</syntaxhighlight>\n*theVehicle: The vehicle that you wish to set the color of.\n* RGB format:\n** r1, g1, b1: Three integers indicating the red, green and blue components of the first (main) color for the vehicle\n* Palette format:\n** p1, p2, p3, p4: Exactly four integers indicating the Vehicle Colors|vehicle color IDs from the palette. <br> If a vehicle has fewer than four colours, you must still provide four colours, otherwise the RGB format will be used.\n*r2, g2, b2: Three integers indicating the red, green and blue components of the second color for the vehicle\n*r3, g3, b3: Three integers indicating the red, green and blue components of the third color for the vehicle\n*r4, g4, b4: Three integers indicating the red, green and blue components of the fourth color for the vehicle' ,
                arguments={
                    
                },
                result='returns true if vehicles color was set, false if an invalid vehicle or invalid colors were specified.' ,
            )
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="setVehicleComponentPosition",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='setComponentPosition',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='theComponent',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='posX',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='posY',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='posZ',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='base',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=True,
                                ),
                                default_value='"root"',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function sets the component position of a vehicle.' ,
                arguments={
                    "theVehicle": """The vehicle you wish to set component position. """,
                    "theComponent": """A Vehicle_Components|vehicle component (this is the frame name from the model file of the component you wish to modify) """,
                    "posX": """The new x position of this component. """,
                    "posY": """The new y position of this component. """,
                    "posZ": """The new z position of this component. """,
                    "base": """: A string representing what the supplied position (posX, posY, posZ) is relative to. It can be one of the following values: """,
                    "parent": """: The position is relative to the parent component. """,
                    "root": """(default if not specified): The position is relative to the root component. """,
                    "world": """: The position is a world position, relative to the worlds center of coordinates. """
                },
                result='returns true if component position was set successfully, false otherwise.' ,
            )
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="setVehicleComponentRotation",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='setComponentRotation',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='theComponent',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='rotX',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='rotY',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='rotZ',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='base',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=True,
                                ),
                                default_value='"parent"',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function sets the component rotation of a vehicle.' ,
                arguments={
                    "theVehicle": """The vehicle you wish to set component rotation of. """,
                    "theComponent": """A Vehicle_Components|vehicle component (this is the frame name from the model file of the component you wish to modify) """,
                    "rotX": """The components rotation around the x axis in degrees. """,
                    "rotY": """The components rotation around the y axis in degrees. """,
                    "rotZ": """The components rotation around the z axis in degrees. """,
                    "base": """A string representing what the supplied rotation (rotX, rotY, rotZ) is relative to. It can be one of the following values: """,
                    "parent": """(default if not specified): The rotation is relative to the parent component. """,
                    "root": """: The rotation is relative to the root component. """,
                    "world": """: The rotation is a world rotation, relative to the worlds coordinates axes. """
                },
                result='returns true if the component rotation was set successfully, false otherwise.' ,
            )
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="setVehicleComponentScale",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='setComponentScale',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='theComponent',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='scaleX',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='scaleY',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='scaleZ',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='base',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=True,
                                ),
                                default_value='"root"',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function sets the component scale of a vehicle.' ,
                arguments={
                    "theVehicle": """The vehicle you wish to set component scale. """,
                    "theComponent": """A Vehicle_Components|vehicle component (this is the frame name from the model file of the component you wish to modify) """,
                    "scaleX": """The new x scale of this component. """,
                    "scaleY": """The new y scale of this component. """,
                    "scaleZ": """The new z scale of this component. """,
                    "base": """: A string representing what the supplied scale (scaleX, scaleY, scaleZ) is relative to. It can be one of the following values: """,
                    "parent": """: The scale is relative to the parent component. """,
                    "root": """(default if not specified): The scale is relative to the root component. """,
                    "world": """: The scale is a world scale, relative to the worlds center of coordinates. """
                },
                result='returns true if component scale was set successfully, false otherwise.' ,
            )
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="setVehicleComponentVisible",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='setComponentVisible',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='theComponent',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='visible',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function sets component visibility for vehicle.' ,
                arguments={
                    "theVehicle": """The vehicle you wish to set component visibility of. """,
                    "theComponent": """A Vehicle_Components|vehicle component (this is the components frame name (also called dummy) from the vehicle models DFF file of which you want to manipulate components) """,
                    "visible": """a bool which determines if the component should be visible """
                },
                result='returns a bool indicating if the visiblity was changed successfully.' ,
            )
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="setVehicleDamageProof",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='setDamageProof',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='damageProof',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This functions makes a vehicle damage proof, so it wont take damage from bullets, hits, explosions or fire. A damage proofs vehicle health can still be changed via script.' ,
                arguments={
                    "theVehicle": """The vehicle you wish to make damage proof. """,
                    "damageProof": """true is damage proof, false is damageable. """
                },
                result='returns true if the vehicle was set damage proof succesfully, false if the arguments are invalid or it failed.' ,
            )
        ),
                field=FunctionOOPField(
                                name='damageProof',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="setVehicleDamageProof",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='setDamageProof',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='damageProof',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This functions makes a vehicle damage proof, so it wont take damage from bullets, hits, explosions or fire. A damage proofs vehicle health can still be changed via script.' ,
                arguments={
                    "theVehicle": """The vehicle you wish to make damage proof. """,
                    "damageProof": """true is damage proof, false is damageable. """
                },
                result='returns true if the vehicle was set damage proof succesfully, false if the arguments are invalid or it failed.' ,
            )
        ),
                field=FunctionOOPField(
                                name='damageProof',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="setVehicleDoorOpenRatio",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='setDoorOpenRatio',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='door',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='ratio',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='time',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function sets how much a vehicles door is open. Doors include the boot/trunk and the bonnet of the vehicle.' ,
                arguments={
                    "theVehicle": """The vehicle that you wish to change the door open ratio of. """,
                    "door": """A whole number, 0 (hood), 1 (trunk), 2 (front left), 3 (front right), 4 (rear left), 5 (rear right) """,
                    "ratio": """The ratio value, ranging from 0 (fully closed) to 1 (fully open). """,
                    "time": """The number of milliseconds the door should take to reach the value you have specified. A value of 0 will change the door open ratio instantly. """
                },
                result='returns true if the door open ratio was successfully set, false if invalid arguments are passed.' ,
            )
        ),
                field=None,
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="setVehicleDoorOpenRatio",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='setDoorOpenRatio',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='door',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='ratio',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='time',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='0',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function sets how much a vehicles door is open. Doors include the boot/trunk and the bonnet of the vehicle.' ,
                arguments={
                    "theVehicle": """The vehicle that you wish to change the door open ratio of. """,
                    "door": """A whole number, 0 (hood), 1 (trunk), 2 (front left), 3 (front right), 4 (rear left), 5 (rear right) """,
                    "ratio": """The ratio value, ranging from 0 (fully closed) to 1 (fully open). """,
                    "time": """The number of milliseconds the door should take to reach the value you have specified. A value of 0 will change the door open ratio instantly. """
                },
                result='returns true if the door open ratio was successfully set, false if invalid arguments are passed.' ,
            )
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="setVehicleDoorState",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='setDoorState',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='door',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='state',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function sets the state of the specified door on a vehicle.' ,
                arguments={
                    "theVehicle": """The vehicle that you wish to change the door state of. """,
                    "door": """An integer representing which door to set the state of. Valid values are: """,
                    "0": """Shut, intact (aka Closed, undamaged) """,
                    "1": """Ajar, intact (aka Slightly open, undamaged) """,
                    "2": """Shut, damaged (aka Closed, damaged) """,
                    "3": """Ajar, damaged (aka Slightly open, damaged) """,
                    "4": """Missing """,
                    "5": """Rear right """,
                    "state": """An integer representing the state to set the door to. Valid values are: """,
                    "spawnFlyingComponent": """A boolean, if set to true, spawns flying doors etc. if you remove a component with <nowiki>state == 4</nowiki>. """
                },
                result='returns true if the door state was successfully set, false otherwise.' ,
            )
        ),
                field=None,
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="setVehicleDoorState",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='setDoorState',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='door',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='state',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function sets the state of the specified door on a vehicle.' ,
                arguments={
                    "theVehicle": """The vehicle that you wish to change the door state of. """,
                    "door": """An integer representing which door to set the state of. Valid values are: """,
                    "0": """Shut, intact (aka Closed, undamaged) """,
                    "1": """Ajar, intact (aka Slightly open, undamaged) """,
                    "2": """Shut, damaged (aka Closed, damaged) """,
                    "3": """Ajar, damaged (aka Slightly open, damaged) """,
                    "4": """Missing """,
                    "5": """Rear right """,
                    "state": """An integer representing the state to set the door to. Valid values are: """,
                    "spawnFlyingComponent": """A boolean, if set to true, spawns flying doors etc. if you remove a component with <nowiki>state == 4</nowiki>. """
                },
                result='returns true if the door state was successfully set, false otherwise.' ,
            )
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="setVehicleDoorsUndamageable",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='setDoorsUndamageable',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='state',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function makes a vehicles doors undamageable, so they wont fall off when theyre hit. Note that the vehicle has to be locked using setVehicleLocked for this setting to have any effect.' ,
                arguments={
                    "theVehicle": """The vehicle of which you wish to set the car door damageability. """,
                    "state": """A boolean denoting whether the vehicles doors are undamageable (true) or damageable (false). """
                },
                result='returns true if the damageability state was successfully changed, false if invalid arguments were passed.' ,
            )
        ),
                field=FunctionOOPField(
                                name='doorsUndamageable',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="setVehicleDoorsUndamageable",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='setDoorsUndamageable',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='state',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function makes a vehicles doors undamageable, so they wont fall off when theyre hit. Note that the vehicle has to be locked using setVehicleLocked for this setting to have any effect.' ,
                arguments={
                    "theVehicle": """The vehicle of which you wish to set the car door damageability. """,
                    "state": """A boolean denoting whether the vehicles doors are undamageable (true) or damageable (false). """
                },
                result='returns true if the damageability state was successfully changed, false if invalid arguments were passed.' ,
            )
        ),
                field=FunctionOOPField(
                                name='doorsUndamageable',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="setVehicleDummyPosition",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='setDummyPosition',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='dummy',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='x',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='y',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='z',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function sets the position of the dummy for the given vehicle.}}' ,
                arguments={
                    "theVehicle": """The vehicle you want to set the dummy position for """,
                    "dummy": """The dummy whose position you want to set """,
                    "x": """, y, z The new dummy position """
                },
                result='returns true for success, false otherwise.' ,
            )
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="setVehicleEngineState",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='setEngineState',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='engineState',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function turns a vehicles engine on or off. Note that the engine will always be turned on when someone enters the driver seat, unless you override that behaviour with scripts.' ,
                arguments={
                    "theVehicle": """: The vehicle you wish to change the engine state of. """,
                    "engineState": """: A boolean value representing whether the engine will be turned on (true) or off (false). """
                },
                result='returns true if the vehicles engine state was successfully changed, false otherwise.' ,
            )
        ),
                field=FunctionOOPField(
                                name='engineState',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="setVehicleEngineState",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='setEngineState',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='engineState',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function turns a vehicles engine on or off. Note that the engine will always be turned on when someone enters the driver seat, unless you override that behaviour with scripts.' ,
                arguments={
                    "theVehicle": """: The vehicle you wish to change the engine state of. """,
                    "engineState": """: A boolean value representing whether the engine will be turned on (true) or off (false). """
                },
                result='returns true if the vehicles engine state was successfully changed, false otherwise.' ,
            )
        ),
                field=FunctionOOPField(
                                name='engineState',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="setVehicleFuelTankExplodable",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='setFuelTankExplodable',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='explodable',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function changes the explodable state of a vehicles fuel tank, which toggles the ability to blow the vehicle up by shooting the tank. This function will have no effect on vehicles with tanks that cannot be shot in single player.' ,
                arguments={
                    "theVehicle": """: The vehicle you wish to change the fuel tank explodable state of. """,
                    "explodable": """: A boolean value representing whether or not the fuel tank will be explodable. """
                },
                result='returns true if the vehicles fuel tank explodable state was successfully changed, false otherwise.' ,
            )
        ),
                field=None,
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="setVehicleFuelTankExplodable",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='setFuelTankExplodable',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='explodable',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function changes the explodable state of a vehicles fuel tank, which toggles the ability to blow the vehicle up by shooting the tank. This function will have no effect on vehicles with tanks that cannot be shot in single player.' ,
                arguments={
                    "theVehicle": """: The vehicle you wish to change the fuel tank explodable state of. """,
                    "explodable": """: A boolean value representing whether or not the fuel tank will be explodable. """
                },
                result='returns true if the vehicles fuel tank explodable state was successfully changed, false otherwise.' ,
            )
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="setVehicleHeadLightColor",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='setHeadLightColor',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='red',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='green',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='blue',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function will set the headlight color of a vehicle. valid Red Green and Blue arguments range from 0-255' ,
                arguments={
                    "theVehicle": """The vehicle that you wish to set the headlight color of. """,
                    "red": """An integer indicating the amount of red for the vehicles headlights """,
                    "green": """An integer indicating the amount of green for the vehicles headlights """,
                    "blue": """An integer indicating the amount of blue for the vehicles headlights """
                },
                result='returns true if vehicles headlight color was set, false if an invalid vehicle or invalid color ranges were specified for red,green or blue.' ,
            )
        ),
                field=None,
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="setVehicleHeadLightColor",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='setHeadLightColor',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='red',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='green',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='blue',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function will set the headlight color of a vehicle. valid Red Green and Blue arguments range from 0-255' ,
                arguments={
                    "theVehicle": """The vehicle that you wish to set the headlight color of. """,
                    "red": """An integer indicating the amount of red for the vehicles headlights """,
                    "green": """An integer indicating the amount of green for the vehicles headlights """,
                    "blue": """An integer indicating the amount of blue for the vehicles headlights """
                },
                result='returns true if vehicles headlight color was set, false if an invalid vehicle or invalid color ranges were specified for red,green or blue.' ,
            )
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="setVehicleIdleRespawnDelay",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='setIdleRespawnDelay',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='timeDelay',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function sets the time delay (in milliseconds) the vehicle will remain at its position while empty.' ,
                arguments={
                    "theVehicle": """: The vehicle you wish to change the respawn delay of. """,
                    "timeDelay": """: The number of milliseconds the vehicle will be allowed to remain unused until it respawns. """
                },
                result='returns true if the vehicle was found and edited.' ,
            )
        ),
                field=FunctionOOPField(
                                name='idleRespawnDelay',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="setVehicleLightState",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='setLightState',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='light',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='state',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function sets the state of the light on the vehicle.' ,
                arguments={
                    "theVehicle": """A handle to the vehicle that you wish to change the light state of. """,
                    "light": """A whole number determining the individual light: """,
                    "0": """Front left """,
                    "1": """Front right """,
                    "2": """Rear right """,
                    "3": """Rear left """,
                    "state": """A whole number determining the new state of the light. 0 represents normal lights, and 1 represents broken lights.
Returns ''true'' if the light state was set successfully, ''false'' if invalid arguments were passed to the function. """
                },
                result='returns true if the light state was set successfully, false if invalid arguments were passed to the function.' ,
            )
        ),
                field=None,
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="setVehicleLightState",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='setLightState',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='light',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='state',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function sets the state of the light on the vehicle.' ,
                arguments={
                    "theVehicle": """A handle to the vehicle that you wish to change the light state of. """,
                    "light": """A whole number determining the individual light: """,
                    "0": """Front left """,
                    "1": """Front right """,
                    "2": """Rear right """,
                    "3": """Rear left """,
                    "state": """A whole number determining the new state of the light. 0 represents normal lights, and 1 represents broken lights.
Returns ''true'' if the light state was set successfully, ''false'' if invalid arguments were passed to the function. """
                },
                result='returns true if the light state was set successfully, false if invalid arguments were passed to the function.' ,
            )
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="setVehicleLocked",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='setLocked',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='locked',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function can be used to set the vehicles doors to be locked or unlocked.  Locking a vehicle restricts access to the vehicle.' ,
                arguments={
                    "theVehicle": """The vehicle which you wish to change the lock status of """,
                    "locked": """Boolean for the status you wish to set. Set true to lock, false to unlock """
                },
                result='returns true if the operation was successful, false otherwise.' ,
            )
        ),
                field=FunctionOOPField(
                                name='locked',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="setVehicleLocked",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='setLocked',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='locked',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function can be used to set the vehicles doors to be locked or unlocked.  Locking a vehicle restricts access to the vehicle.' ,
                arguments={
                    "theVehicle": """The vehicle which you wish to change the lock status of """,
                    "locked": """Boolean for the status you wish to set. Set true to lock, false to unlock """
                },
                result='returns true if the operation was successful, false otherwise.' ,
            )
        ),
                field=FunctionOOPField(
                                name='locked',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="setVehicleModelDummyPosition",
                class_name='Vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='setVehicleModelDummyPosition',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='modelID',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='dummy',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='x',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='y',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='z',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function sets the position of the dummies contained in a vehicle model. Use setVehicleComponentPosition to adjust the vehicle component positions.' ,
                arguments={
                    "modelID": """: The model ID which you want to apply the change to """,
                    "dummy": """: The dummy whose position you want to change """,
                    "posX": """, posY, posZ: The desired position """
                },
                result='returns true if everything went fine, false otherwise.' ,
            )
        ),
                field=None,
                is_static=True,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="setVehicleModelExhaustFumesPosition",
                class_name='Vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='setModelExhaustFumesPosition',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='modelID',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='posX',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='posY',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='posZ',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function sets the position of the exhaust fumes the vehicle model emits. Use setVehicleComponentPosition to adjust the exhaust position.' ,
                arguments={
                    "modelID": """: The model ID which you want to apply the change to """,
                    "posX": """, posY, posZ: The desired position """
                },
                result='returns true if everything went fine, false otherwise.' ,
            )
        ),
                field=None,
                is_static=True,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="setVehicleModelWheelSize",
                class_name='Vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='setModelWheelSize',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='vehicleModel',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='wheelGroup',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='wheelSize',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='' ,
                arguments={
                    "vehicleModel": """: The Vehicle IDs|vehicle model ID. """,
                    "wheelGroup": """: The group of wheels of the vehicle model that will have its size set by this function. The following values are supported: """,
                    "front_axle": """: Represents the wheels in the front axle. The default value for this group is read by GTA from the WheelScale_Front field of the vehicles.ide data file. """,
                    "rear_axle": """: Represents the wheels in the rear axle. The default value for this group is read by GTA from the WheelScale_Rear field of the vehicles.ide data file. """,
                    "all_wheels": """: Convenience group that contains the other wheel groups: front_axle and rear_axle. """,
                    "wheelSize": """: The wheel size value to set. Default GTA values for automobiles usually are around 0.7. It must be greater than 0. """
                },
                result='returns true if the size for the specified wheel group and vehicle model has been set successfully, or an error if some parameter is invalid.' ,
            )
        ),
                field=None,
                is_static=True,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="setVehicleOverrideLights",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='setOverrideLights',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='value',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function changes the light overriding setting on a vehicle.' ,
                arguments={
                    "theVehicle": """: The vehicle you wish to change the override lights setting of. """,
                    "value": """: A whole number representing the state of the lights: """,
                    "0": """: No override, lights are set to default. """,
                    "1": """: Lights are forced off. """,
                    "2": """: Lights are forced on. """
                },
                result='returns true if the vehicles lights setting was changed. otherwise false.' ,
            )
        ),
                field=FunctionOOPField(
                                name='overrideLights',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="setVehicleOverrideLights",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='setOverrideLights',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='value',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function changes the light overriding setting on a vehicle.' ,
                arguments={
                    "theVehicle": """: The vehicle you wish to change the override lights setting of. """,
                    "value": """: A whole number representing the state of the lights: """,
                    "0": """: No override, lights are set to default. """,
                    "1": """: Lights are forced off. """,
                    "2": """: Lights are forced on. """
                },
                result='returns true if the vehicles lights setting was changed. otherwise false.' ,
            )
        ),
                field=FunctionOOPField(
                                name='overrideLights',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="setVehiclePanelState",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='setPanelState',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='panelID',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='state',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function allows you to change the state of one of the six panels vehicles can have. When executed on the server-side resources, the damage will be synched for all players, whereas the change is only client-side if the function is used in a client resource.' ,
                arguments={
                    "theVehicle": """The vehicle you would like to modify the panel of. """,
                    "panelID": """An ID specifying the part of the vehicle. Possible values are: """,
                    "Cars": """ """,
                    "0": """Engine Smoke (left engine for a Nevada or a Beagle) """,
                    "1": """Engine Smoke (right engine for a Nevada or a Beagle) """,
                    "2": """Rudder """,
                    "3": """Elevators """,
                    "4": """Ailerons """,
                    "5": """Unknown """,
                    "6": """Unknown
''NOTE:'' Settings are not applicable for all vehicles of these types, for instance panel 0 effects a Dodo, but does nothing to a hydra. """,
                    "Planes": """ """,
                    "state": """How damaged the part is on the scale of 0 to 3, with 0 being undamaged and 3 being very damaged. How this is manifested depends on the panel and the vehicle. """
                },
                result='returns true if the panel state has been updated, false otherwise' ,
            )
        ),
                field=None,
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="setVehiclePanelState",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='setPanelState',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='panelID',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='state',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function allows you to change the state of one of the six panels vehicles can have. When executed on the server-side resources, the damage will be synched for all players, whereas the change is only client-side if the function is used in a client resource.' ,
                arguments={
                    "theVehicle": """The vehicle you would like to modify the panel of. """,
                    "panelID": """An ID specifying the part of the vehicle. Possible values are: """,
                    "Cars": """ """,
                    "0": """Engine Smoke (left engine for a Nevada or a Beagle) """,
                    "1": """Engine Smoke (right engine for a Nevada or a Beagle) """,
                    "2": """Rudder """,
                    "3": """Elevators """,
                    "4": """Ailerons """,
                    "5": """Unknown """,
                    "6": """Unknown
''NOTE:'' Settings are not applicable for all vehicles of these types, for instance panel 0 effects a Dodo, but does nothing to a hydra. """,
                    "Planes": """ """,
                    "state": """How damaged the part is on the scale of 0 to 3, with 0 being undamaged and 3 being very damaged. How this is manifested depends on the panel and the vehicle. """
                },
                result='returns true if the panel state has been updated, false otherwise' ,
            )
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="setVehiclePlateText",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='setPlateText',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='numberplate',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function can be used to set the numberplate text of a car.\nIt now also changes the numberplate text of any vehicle that has visual numberplates.' ,
                arguments={
                    "theVehicle": """the vehicle whose numberplate you want to change. """,
                    "numberplate": """a string that will go on the number plate of the car (max 8 characters). """
                },
                result='returns true if the numberplate was changed successfully, or false if invalid arguments were passed' ,
            )
        ),
                field=FunctionOOPField(
                                name='plateText',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="setVehiclePlateText",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='setPlateText',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='numberplate',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function can be used to set the numberplate text of a car.\nIt now also changes the numberplate text of any vehicle that has visual numberplates.' ,
                arguments={
                    "theVehicle": """the vehicle whose numberplate you want to change. """,
                    "numberplate": """a string that will go on the number plate of the car (max 8 characters). """
                },
                result='returns true if the numberplate was changed successfully, or false if invalid arguments were passed' ,
            )
        ),
                field=FunctionOOPField(
                                name='plateText',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="setVehicleRespawnDelay",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='setRespawnDelay',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='timeDelay',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function sets the time delay (in milliseconds) the vehicle will remain wrecked before respawning.' ,
                arguments={
                    "theVehicle": """: The vehicle you wish to change the respawn delay of. """,
                    "timeDelay": """: The amount of milliseconds to delay. """
                },
                result='returns true if the vehicle was found and edited.' ,
            )
        ),
                field=FunctionOOPField(
                                name='respawnDelay',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="setVehicleRespawnPosition",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='setRespawnPosition',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='x',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='y',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='z',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='rx',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='ry',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='rz',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function sets the position (and rotation) the vehicle will respawn to.' ,
                arguments={
                    "theVehicle": """: The vehicle you wish to change the respawn position of. """,
                    "x": """: A floating point number representing the X coordinate on the map. """,
                    "y": """: A floating point number representing the Y coordinate on the map. """,
                    "z": """: A floating point number representing the Z coordinate on the map. """,
                    "rx": """: A floating point number representing the rotation about the X axis in Degrees. """,
                    "ry": """: A floating point number representing the rotation about the Y axis in Degrees. """,
                    "rz": """: A floating point number representing the rotation about the Z axis in Degrees. """
                },
                result='returns true if the vehicle was found and edited, false otherwise.' ,
            )
        ),
                field=FunctionOOPField(
                                name='respawnPosition',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="setVehicleRespawnRotation",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='setRespawnRotation',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='rx',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='ry',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='rz',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function sets the rotation the vehicle will respawn to.' ,
                arguments={
                    "theVehicle": """: The vehicle you wish to change the respawn position of. """,
                    "rx": """: A float representing the rotation about the X axis in degrees. """,
                    "ry": """: A float representing the rotation about the Y axis in degrees. """,
                    "rz": """: A float representing the rotation about the Z axis in degrees. """
                },
                result='returns true if the vehicle respawn rotation was set successfully, false otherwise.' ,
            )
        ),
                field=FunctionOOPField(
                                name='respawnRotation',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="setVehicleSirens",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='setSirens',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='sirenPoint',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='posX',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='posY',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='posZ',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='red',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='green',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='blue',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='alpha',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value='255',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='minAlpha',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value='0.0',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function changes the properties of a vehicles siren point.' ,
                arguments={
                    "theVehicle": """The vehicle to modify """,
                    "sirenPoint": """The siren point to modify """,
                    "posX": """The x position of this siren point from the center of the vehicle """,
                    "posY": """The y position of this siren point from the center of the vehicle """,
                    "posZ": """The z position of this siren point from the center of the vehicle """,
                    "red": """The amount of red from 0 to 255 """,
                    "green": """The amount of green from 0 to 255 """,
                    "blue": """The amount of blue from 0 to 255 """,
                    "alpha": """The alpha of the siren from 0 to 255 """,
                    "minAlpha": """The minimum alpha of the light during day time """
                },
                result='returns true if the siren point was successfully changed on the vehicle, false otherwise.' ,
            )
        ),
                field=None,
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="setVehicleSirens",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='setSirens',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='sirenPoint',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='posX',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='posY',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='posZ',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='red',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='green',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='blue',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='alpha',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value='255',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='minAlpha',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value='0.0',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function changes the properties of a vehicles siren point.' ,
                arguments={
                    "theVehicle": """The vehicle to modify """,
                    "sirenPoint": """The siren point to modify """,
                    "posX": """The x position of this siren point from the center of the vehicle """,
                    "posY": """The y position of this siren point from the center of the vehicle """,
                    "posZ": """The z position of this siren point from the center of the vehicle """,
                    "red": """The amount of red from 0 to 255 """,
                    "green": """The amount of green from 0 to 255 """,
                    "blue": """The amount of blue from 0 to 255 """,
                    "alpha": """The alpha of the siren from 0 to 255 """,
                    "minAlpha": """The minimum alpha of the light during day time """
                },
                result='returns true if the siren point was successfully changed on the vehicle, false otherwise.' ,
            )
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="setVehicleSirensOn",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='setSirensOn',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='sirensOn',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function changes the state of the sirens on the specified vehicle.' ,
                arguments={
                    "theVehicle": """The vehicle that will have the sirens set """,
                    "sirensOn": """The state to set the sirens to """
                },
                result='returns true if the sirens are set for the specified vehicle, false if the sirens cant be set for the specified vehicle, if the vehicle doesnt have sirens or if invalid arguments are specified.' ,
            )
        ),
                field=FunctionOOPField(
                                name='sirensOn',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="setVehicleSirensOn",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='setSirensOn',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='sirensOn',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function changes the state of the sirens on the specified vehicle.' ,
                arguments={
                    "theVehicle": """The vehicle that will have the sirens set """,
                    "sirensOn": """The state to set the sirens to """
                },
                result='returns true if the sirens are set for the specified vehicle, false if the sirens cant be set for the specified vehicle, if the vehicle doesnt have sirens or if invalid arguments are specified.' ,
            )
        ),
                field=FunctionOOPField(
                                name='sirensOn',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="setVehicleTaxiLightOn",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='setTaxiLightOn',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='taxi',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='LightState',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function will set the taxi light on in a taxi (vehicle IDs 420 and 438)' ,
                arguments={
                    "taxi": """The vehicle element of the taxi that you wish to turn the light on. """,
                    "LightState": """whether the light is on. True for on, False for off. """
                },
                result='returns true if the state was successfully set, false otherwise.' ,
            )
        ),
                field=FunctionOOPField(
                                name='taxiLightOn',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="setVehicleTaxiLightOn",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='setTaxiLightOn',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='taxi',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='LightState',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function will set the taxi light on in a taxi (vehicle IDs 420 and 438)' ,
                arguments={
                    "taxi": """The vehicle element of the taxi that you wish to turn the light on. """,
                    "LightState": """whether the light is on. True for on, False for off. """
                },
                result='returns true if the state was successfully set, false otherwise.' ,
            )
        ),
                field=FunctionOOPField(
                                name='taxiLightOn',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="setVehicleTurretPosition",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='setTurretPosition',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='turretVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='positionX',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='positionY',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function sets the position of a vehicles turret, if it has one. This can be used to influence the turrets rotation, so it doesnt follow the camera. Vehicles with turrets include firetrucks and tanks.' ,
                arguments={
                    "turretVehicle": """: The vehicle whose turret position you want to retrieve. This should be a vehicle with a turret. """,
                    "positionX": """: The horizontal position of the turret. In radians """,
                    "positionY": """: The vertical position of the turret. In radians """
                },
                result='returns a true if a valid vehicle element and valid positions were passed, false otherwise.' ,
            )
        ),
                field=FunctionOOPField(
                                name='turretPosition',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="setVehicleTurretPosition",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='setTurretPosition',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='turretVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='positionX',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='positionY',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function sets the position of a vehicles turret, if it has one. This can be used to influence the turrets rotation, so it doesnt follow the camera. Vehicles with turrets include firetrucks and tanks.' ,
                arguments={
                    "turretVehicle": """: The vehicle whose turret position you want to retrieve. This should be a vehicle with a turret. """,
                    "positionX": """: The horizontal position of the turret. In radians """,
                    "positionY": """: The vertical position of the turret. In radians """
                },
                result='returns a true if a valid vehicle element and valid positions were passed, false otherwise.' ,
            )
        ),
                field=FunctionOOPField(
                                name='turretPosition',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="setVehicleVariant",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='setVariant',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='variant1',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='variant2',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function sets the variant of a specified vehicle. In GTA SA some vehicles are different for example the labelling on trucks or the contents of a pick-up truck and the varying types of a motor bike. For the default GTA SA variant list see: Vehicle variants' ,
                arguments={
                    "theVehicle": """A handle to the vehicle that you want to get the variant of. """,
                    "variant1": """: An integer for the first variant see Vehicle variants """,
                    "variant2": """: An integer for the second variant see Vehicle variants """
                },
                result='on success:\n* bool: returns true as the vehicle variants were successfully set.\non failure:\n* bool: false because the specified vehicle didnt exist or specified variants were invalid.' ,
            )
        ),
                field=None,
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="setVehicleVariant",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='setVariant',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='variant1',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='variant2',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function sets the variant of a specified vehicle. In GTA SA some vehicles are different for example the labelling on trucks or the contents of a pick-up truck and the varying types of a motor bike. For the default GTA SA variant list see: Vehicle variants' ,
                arguments={
                    "theVehicle": """A handle to the vehicle that you want to get the variant of. """,
                    "variant1": """: An integer for the first variant see Vehicle variants """,
                    "variant2": """: An integer for the second variant see Vehicle variants """
                },
                result='on success:\n* bool: returns true as the vehicle variants were successfully set.\non failure:\n* bool: false because the specified vehicle didnt exist or specified variants were invalid.' ,
            )
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="setVehicleWheelScale",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='setWheelScale',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='wheelScale',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='' ,
                arguments={
                    "theVehicle": """: The vehicle whose wheel scale you wish to modify. """,
                    "wheelScale": """: The wheel scale value to set. """
                },
                result='returns true if the wheel scale has been set successfully, or an error if some parameter is invalid.' ,
            )
        ),
                field=FunctionOOPField(
                                name='wheelScale',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="setVehicleWheelStates",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='setWheelStates',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='frontLeft',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='rearLeft',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='-1',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='frontRight',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='-1',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='rearRight',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='-1',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function sets the state of wheels on the vehicle.\nInternally, no vehicles have more than 4 wheels. If they appear to, they will be duplicating other wheels.' ,
                arguments={
                    "theVehicle": """A handle to the vehicle that you wish to change the wheel states of. """,
                    "frontLeft": """A whole number representing the wheel state (-1 for no change) """,
                    "rearLeft": """A whole number representing the wheel state (-1 for no change) """,
                    "frontRight": """A whole number representing the wheel state (-1 for no change) """,
                    "rearRight": """A whole number representing the wheel state (-1 for no change) """
                },
                result='returns a boolean value true or false that tells you if it was successful or not.' ,
            )
        ),
                field=None,
                is_static=False,
            )
        ],
        client=[
            FunctionOOP(
                description=None,
                base_function_name="setVehicleWheelStates",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='setWheelStates',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='frontLeft',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='rearLeft',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='-1',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='frontRight',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='-1',
                            )
                        ],
                        [
                            FunctionArgument(
                                name='rearRight',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=True,
                                ),
                                default_value='-1',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function sets the state of wheels on the vehicle.\nInternally, no vehicles have more than 4 wheels. If they appear to, they will be duplicating other wheels.' ,
                arguments={
                    "theVehicle": """A handle to the vehicle that you wish to change the wheel states of. """,
                    "frontLeft": """A whole number representing the wheel state (-1 for no change) """,
                    "rearLeft": """A whole number representing the wheel state (-1 for no change) """,
                    "frontRight": """A whole number representing the wheel state (-1 for no change) """,
                    "rearRight": """A whole number representing the wheel state (-1 for no change) """
                },
                result='returns a boolean value true or false that tells you if it was successful or not.' ,
            )
        ),
                field=None,
                is_static=False,
            )
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="spawnVehicle",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='spawn',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='x',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='y',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='z',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='rx',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='ry',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='rz',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='Spawns a vehicle at any given position and rotation' ,
                arguments={
                    "theVehicle": """The vehicle you wish to spawn """,
                    "x": """The x position you wish to spawn the vehicle at """,
                    "y": """The x position you wish to spawn the vehicle at """,
                    "z": """The x position you wish to spawn the vehicle at """,
                    "rx": """The x rotation you wish to spawn the vehicle at """,
                    "ry": """The y rotation you wish to spawn the vehicle at """,
                    "rz": """The z rotation you wish to spawn the vehicle at """
                },
                result='returns true if the vehicle spawned successfully, false if the passed argument does not exist or is not a vehicle.' ,
            )
        ),
                field=None,
                is_static=False,
            )
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="toggleVehicleRespawn",
                class_name='vehicle',
                method=FunctionData(
            signature=FunctionSignature(
                name='toggleRespawn',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='Respawn',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function toggles whether or not the vehicle will be respawned after blown or idle.' ,
                arguments={
                    "theVehicle": """: The vehicle you wish to toggle the respawning of. """,
                    "Respawn": """: A boolean determining if the vehicle will respawn or not. """
                },
                result='returns true if the vehicle was found and edited.' ,
            )
        ),
                field=None,
                is_static=False,
            )
        ],
        client=[
            
        ],
    )
]
