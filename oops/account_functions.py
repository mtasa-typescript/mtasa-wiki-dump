# Autogenerated file. ANY CHANGES WILL BE OVERWRITTEN
from to_python.core.types import FunctionType, \
    FunctionArgument, \
    FunctionArgumentValues, \
    FunctionReturnTypes, \
    FunctionSignature, \
    FunctionDoc, \
    FunctionOOP, \
    FunctionOOPField, \
    CompoundOOPData, \
    FunctionData, \
    CompoundFunctionData

DUMP_PARTIAL = [
    CompoundOOPData(
        server=[
            FunctionOOP(
                description="""This function is a static function underneath the Account class.""",
                base_function_name="addAccount",
                class_name='Account',
                method=FunctionData(
            signature=FunctionSignature(
                name='add',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['account'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='name',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='pass',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='allowCaseVariations',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='false',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function adds an account to the list of registered accounts of the current server.' ,
                arguments={
                    "name": """The name of the account you wish to make, this normally is the players name. """,
                    "pass": """The password to set for this account for future logins. """,
                    "allowCaseVariations": """Whether the username is case sensitive (if this is set to true, usernames Bob and bob will refer to different accounts) """
                },
                result='returns an account or false if the account already exists or an error occured.' ,
            ),
            url='addAccount',
        ),
                field=None,
                is_static=True,
            )
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="copyAccountData",
                class_name='account',
                method=FunctionData(
            signature=FunctionSignature(
                name='copyDataTo',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theAccount',
                                argument_type=FunctionType(
                                    names=['account'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='fromAccount',
                                argument_type=FunctionType(
                                    names=['account'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function copies all of the data from one account to another.' ,
                arguments={
                    "theAccount": """The account you wish to copy the data to. """,
                    "fromAccount": """The account you wish to copy the data from. """
                },
                result='returns a true if the accounts were valid, false otherwise.' ,
            ),
            url='copyAccountData',
        ),
                field=None,
                is_static=False,
            )
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="getAccount",
                class_name='Account',
                method=None,
                field=None,
                is_static=True,
            )
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="getAccountData",
                class_name='account',
                method=FunctionData(
            signature=FunctionSignature(
                name='getData',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theAccount',
                                argument_type=FunctionType(
                                    names=['account'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='key',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function retrieves a string that has been stored using setAccountData. Data stored as account data is persistent across users sessions and maps, unless they are logged into a guest account.' ,
                arguments={
                    "theAccount": """The account you wish to retrieve the data from. """,
                    "key": """The key under which the data is stored """
                },
                result='returns a string containing the stored data or false if no data was stored under that key.' ,
            ),
            url='getAccountData',
        ),
                field=None,
                is_static=False,
            )
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="getAccountID",
                class_name='account',
                method=FunctionData(
            signature=FunctionSignature(
                name='getID',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theAccount',
                                argument_type=FunctionType(
                                    names=['account'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function retrieves the ID of an account.' ,
                arguments={
                    "theAccount": """The account you wish to get the ID of. """
                },
                result='returns a int containing the accounts id, false if the account does not exist or an invalid argument was passed to the function.' ,
            ),
            url='getAccountID',
        ),
                field=FunctionOOPField(
                                name='id',
                                types=[
                                    FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="getAccountIP",
                class_name='account',
                method=FunctionData(
            signature=FunctionSignature(
                name='getIP',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theAccount',
                                argument_type=FunctionType(
                                    names=['account'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function retrieves the IP address of an account.' ,
                arguments={
                    "theAccount": """The account you wish to get the IP of. """
                },
                result='returns a string containing the accounts ip, false if the account does not exist or an invalid argument was passed to the function.' ,
            ),
            url='getAccountIP',
        ),
                field=FunctionOOPField(
                                name='ip',
                                types=[
                                    FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="getAccountName",
                class_name='account',
                method=FunctionData(
            signature=FunctionSignature(
                name='getName',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theAccount',
                                argument_type=FunctionType(
                                    names=['account'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function retrieves the name of an account.' ,
                arguments={
                    "theAccount": """The account you wish to get the name of. """
                },
                result='returns a string containing the accounts name, false if the account does not exist or an invalid argument was passed to the function.' ,
            ),
            url='getAccountName',
        ),
                field=FunctionOOPField(
                                name='name',
                                types=[
                                    FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="getAccountPlayer",
                class_name='account',
                method=FunctionData(
            signature=FunctionSignature(
                name='getPlayer',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['player'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theAccount',
                                argument_type=FunctionType(
                                    names=['account'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns the player element that is currently using a specified account, i.e. is logged into it. Only one player can use an account at a time.' ,
                arguments={
                    "theAccount": """The account you wish to get the player of. """
                },
                result='returns a player element if the account is currently in use, false otherwise.' ,
            ),
            url='getAccountPlayer',
        ),
                field=FunctionOOPField(
                                name='player',
                                types=[
                                    FunctionType(
                                    names=['player'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description="""This function is a static function underneath the Account class.""",
                base_function_name="getAccounts",
                class_name='Account',
                method=FunctionData(
            signature=FunctionSignature(
                name='getAll',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns a table over all the accounts that exist in the server internal.db file. (Note: accounts.xml is no longer used after version 1.0.4)' ,
                arguments={
                    
                },
                result='a table over the accounts that exist in the server internal.db file. this table might be empty.' ,
            ),
            url='getAccounts',
        ),
                field=None,
                is_static=True,
            )
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description="""This function is a static function underneath the Account class.""",
                base_function_name="getAccountsByData",
                class_name='Account',
                method=FunctionData(
            signature=FunctionSignature(
                name='getAllByData',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='dataName',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='value',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns a table containing all accounts with specified dataName and value (set with setAccountData).' ,
                arguments={
                    "dataName": """The name of the data """,
                    "value": """The value the dataName should have """
                },
                result='returns table containing the accounts associated with specified value at dataname. returns false if invalid arguments were specified.' ,
            ),
            url='getAccountsByData',
        ),
                field=None,
                is_static=True,
            )
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description="""This function is a static function underneath the Account class.""",
                base_function_name="getAccountsByIP",
                class_name='Account',
                method=FunctionData(
            signature=FunctionSignature(
                name='getAllByIP',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='ip',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='' ,
                arguments={
                    "ip": """The IP to get accounts from. """
                },
                result='returns table containing the accounts associated with specified ip-address. returns false if invalid arguments were specified.' ,
            ),
            url='getAccountsByIP',
        ),
                field=None,
                is_static=True,
            )
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description="""This function is a static function underneath the Account class.""",
                base_function_name="getAccountsBySerial",
                class_name='Account',
                method=FunctionData(
            signature=FunctionSignature(
                name='getAllBySerial',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='serial',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns a table containing all accounts that were logged onto from specified serial. If the serial is empty string, it will return all accounts that were never logged onto.' ,
                arguments={
                    "serial": """The serial to get accounts from """
                },
                result='returns table containing the accounts associated with specified serial. returns false if invalid arguments were specified.' ,
            ),
            url='getAccountsBySerial',
        ),
                field=None,
                is_static=True,
            )
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="getAccountSerial",
                class_name='account',
                method=FunctionData(
            signature=FunctionSignature(
                name='getSerial',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theAccount',
                                argument_type=FunctionType(
                                    names=['account'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns the last serial that logged onto the specified account.' ,
                arguments={
                    "theAccount": """The account to get serial from """
                },
                result='returns string containing the serial, the string is empty if the account was never used. returns false if invalid arguments were specified.' ,
            ),
            url='getAccountSerial',
        ),
                field=FunctionOOPField(
                                name='serial',
                                types=[
                                    FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="getAllAccountData",
                class_name='account',
                method=FunctionData(
            signature=FunctionSignature(
                name='getAllData',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theAccount',
                                argument_type=FunctionType(
                                    names=['account'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns a table containing all the user data for the account provided' ,
                arguments={
                    "theAccount": """The account you wish to retrieve all data from. """
                },
                result='a table containing all the user data. this table might be empty.' ,
            ),
            url='getAllAccountData',
        ),
                field=FunctionOOPField(
                                name='data',
                                types=[
                                    FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description="""Static method [[Account]].getFromPlayer() can also be used""",
                base_function_name="getPlayerAccount",
                class_name='player',
                method=FunctionData(
            signature=FunctionSignature(
                name='getAccount',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['account'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePlayer',
                                argument_type=FunctionType(
                                    names=['player'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function returns the specified players account object.' ,
                arguments={
                    "thePlayer": """The player element you want to get the account of. """
                },
                result='returns the players account object, or false if the player passed to the function is invalid.' ,
            ),
            url='getPlayerAccount',
        ),
                field=FunctionOOPField(
                                name='account',
                                types=[
                                    FunctionType(
                                    names=['account'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="isGuestAccount",
                class_name='account',
                method=FunctionData(
            signature=FunctionSignature(
                name='isGuest',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theAccount',
                                argument_type=FunctionType(
                                    names=['account'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function checks to see if an account is a guest account. A guest account is an account automatically created for a user when they join the server and deleted when they quit or login to another account. Data stored in a guest account is not stored after the player has left the server. As a consequence, this function will check if a player is logged in or not.' ,
                arguments={
                    "theAccount": """The account you want to check to see if it is a guest account. """
                },
                result='returns true if the account is a guest account, false otherwise.' ,
            ),
            url='isGuestAccount',
        ),
                field=FunctionOOPField(
                                name='guest',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="logIn",
                class_name='player',
                method=FunctionData(
            signature=FunctionSignature(
                name='logIn',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePlayer',
                                argument_type=FunctionType(
                                    names=['player'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='theAccount',
                                argument_type=FunctionType(
                                    names=['account'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='thePassword',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This functions logs the given player in to the given account. You need to provide the password needed to log into that account.' ,
                arguments={
                    "thePlayer": """The player to log into an account """,
                    "theAccount": """The account to log the player into """,
                    "thePassword": """The password needed to sign into this account """
                },
                result='returns true if the player was successfully logged into the given account. returns false or nil if the log in failed for some reason, ie. the player was already logged in to some account (use logout first), if the account was already in use or if it failed for some other reason.' ,
            ),
            url='logIn',
        ),
                field=None,
                is_static=False,
            )
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="logOut",
                class_name='player',
                method=FunctionData(
            signature=FunctionSignature(
                name='logOut',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePlayer',
                                argument_type=FunctionType(
                                    names=['player'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function logs the given player out of his current account.' ,
                arguments={
                    "thePlayer": """The player to log out of his current account """
                },
                result='returns true if the player was successfully logged out, false or nil if it failed for some reason, ie. the player was never logged in.' ,
            ),
            url='logOut',
        ),
                field=None,
                is_static=False,
            )
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="removeAccount",
                class_name='account',
                method=FunctionData(
            signature=FunctionSignature(
                name='remove',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theAccount',
                                argument_type=FunctionType(
                                    names=['account'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function is used to delete existing player accounts.' ,
                arguments={
                    "theAccount": """The account you wish to remove """
                },
                result='returns true if account was successfully removed, false if the account does not exist.' ,
            ),
            url='removeAccount',
        ),
                field=None,
                is_static=False,
            )
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="setAccountData",
                class_name='account',
                method=FunctionData(
            signature=FunctionSignature(
                name='setData',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theAccount',
                                argument_type=FunctionType(
                                    names=['account'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='key',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='value',
                                argument_type=FunctionType(
                                    names=['var'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function sets a string to be stored in an account. This can then be retrieved using getAccountData. Data stored as account data is persistent across users sessions and maps, unless they are logged into a guest account. Even if logged into a guest account, account data can be useful as a way to store a reference to your own account system, though its persistence is equivalent to that of using setElementData on the players element.' ,
                arguments={
                    "theAccount": """The account you wish to retrieve the data from. """,
                    "key": """The key under which you wish to store the data """,
                    "value": """The value you wish to store. Set to false to remove the data. NOTE: you cannot store tables as values, but you can use toJSON strings. """
                },
                result='returns a true if the account data was set, false if an invalid argument was specified.' ,
            ),
            url='setAccountData',
        ),
                field=None,
                is_static=False,
            )
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="setAccountName",
                class_name='account',
                method=FunctionData(
            signature=FunctionSignature(
                name='setName',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theAccount',
                                argument_type=FunctionType(
                                    names=['account'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='name',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='allowCaseVariations',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=True,
                                ),
                                default_value='false',
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function sets the name of an account.' ,
                arguments={
                    "theAccount": """The account you wish to change the name. """,
                    "name": """The new name. """,
                    "allowCaseVariations": """Whether the username is case sensitive (if this is set to true, usernames Bob and bob will refer to different accounts) """
                },
                result='returns a true if the account name was set, false if an invalid argument was specified.' ,
            ),
            url='setAccountName',
        ),
                field=FunctionOOPField(
                                name='name',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            
        ],
    ),
    CompoundOOPData(
        server=[
            FunctionOOP(
                description=None,
                base_function_name="setAccountPassword",
                class_name='account',
                method=FunctionData(
            signature=FunctionSignature(
                name='setPassword',
                return_types=FunctionReturnTypes(
                    return_types=[
                        FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                    ],
                    variable_length=False,
                ),
                arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theAccount',
                                argument_type=FunctionType(
                                    names=['account'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='password',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
                generic_types=[
                    
                ],
            ),
            docs=FunctionDoc(
                description='This function sets the password of the specified account.' ,
                arguments={
                    "theAccount": """the account whose password you want to set """,
                    "password": """the password """
                },
                result='returns true if the password was set correctly, false otherwise.' ,
            ),
            url='setAccountPassword',
        ),
                field=FunctionOOPField(
                                name='password',
                                types=[
                                    FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                )
                                ],
                            ),
                is_static=False,
            )
        ],
        client=[
            
        ],
    )
]
