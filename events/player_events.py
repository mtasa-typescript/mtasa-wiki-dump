# Autogenerated file. ANY CHANGES WILL BE OVERWRITTEN
from to_python.core.types import FunctionType, \
    FunctionArgument, \
    FunctionArgumentValues, \
    FunctionReturnTypes, \
    FunctionSignature, \
    FunctionDoc, \
    EventData, \
    CompoundEventData

DUMP_PARTIAL = [
    CompoundEventData(
        server=[
            
        ],
        client=[
            EventData(
            name='onClientPlayerChangeNick',
            docs=FunctionDoc(
                description='This event is triggered when a player changes his nickname.' ,
                arguments={
                    "oldNick": """the nickname the player had before. """,
                    "newNick": """the new nickname of the player. """
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='oldNick',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='newNick',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )
        ],
    ),
    CompoundEventData(
        server=[
            
        ],
        client=[
            EventData(
            name='onClientPlayerChoke',
            docs=FunctionDoc(
                description='This event is fired when the local player chokes due to the effect of a weapon such as tear gas grenades, fire extinguishers and spray cans.' ,
                arguments={
                    "weapon": """an int representing the ID of the weapon which caused the choking. """
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='weaponID',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )
        ],
    ),
    CompoundEventData(
        server=[
            
        ],
        client=[
            EventData(
            name='onClientPlayerDamage',
            docs=FunctionDoc(
                description='This event is triggered whenever a player is damaged.' ,
                arguments={
                    "attacker": """: A player element representing the attacker or vehicle element (when being run over or falling off a bike). """,
                    "damage_causing": """: An int representing the cause of damage, either a Weapons|attacker weapon, or some other Damage Types|types of damage. """,
                    "bodypart": """: An integer representing the bodypart the player was damaged. """,
                    "loss": """: A float representing the percentage of health the player lost. """
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='attacker',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='damage_causing',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='bodypart',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='loss',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=True,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )
        ],
    ),
    CompoundEventData(
        server=[
            
        ],
        client=[
            EventData(
            name='onClientPlayerHeliKilled',
            docs=FunctionDoc(
                description='This event is fired when a player is killed due to the effect of a helicopter blades.' ,
                arguments={
                    "killer": """the vehicle (heli) responsible for causing the death. """
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='killer',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )
        ],
    ),
    CompoundEventData(
        server=[
            
        ],
        client=[
            EventData(
            name='onClientPlayerHitByWaterCannon',
            docs=FunctionDoc(
                description='This event is fired when a player is hit by a water cannon.' ,
                arguments={
                    "playerHit": """the player which got shot by the water cannon """
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='playerHit',
                                argument_type=FunctionType(
                                    names=['player'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )
        ],
    ),
    CompoundEventData(
        server=[
            
        ],
        client=[
            EventData(
            name='onClientPlayerJoin',
            docs=FunctionDoc(
                description='This event is triggered when a player joins a server. It is triggered for all players except the local player, as the local player joins the server before their client-side resources are started. It would also be possible for two players to join within a few seconds of each other and for the two players scripts may not receive onClientPlayerJoin events as their scripts wouldnt have started yet.\nThis event is not cancellable.' ,
                arguments={
                    
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        
                    ],
                    variable_length=False,
                ),
        )
        ],
    ),
    CompoundEventData(
        server=[
            
        ],
        client=[
            EventData(
            name='onClientPlayerPickupHit',
            docs=FunctionDoc(
                description='This event triggers whenever a player hits a pickup locally.' ,
                arguments={
                    "thePickup": """the pickup that was hit. """,
                    "matchingDimension": """true if thePickup is in the same dimension as the player, false otherwise. """
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePickup',
                                argument_type=FunctionType(
                                    names=['pickup'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='matchingDimension',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )
        ],
    ),
    CompoundEventData(
        server=[
            
        ],
        client=[
            EventData(
            name='onClientPlayerPickupLeave',
            docs=FunctionDoc(
                description='This event triggers whenever a player leaves pickup locally.' ,
                arguments={
                    "thePickup": """the pickup that was left. """,
                    "matchingDimension": """true if thePickup is in the same dimension as the player, false otherwise. """
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePickup',
                                argument_type=FunctionType(
                                    names=['pickup'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='matchingDimension',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )
        ],
    ),
    CompoundEventData(
        server=[
            
        ],
        client=[
            EventData(
            name='onClientPlayerQuit',
            docs=FunctionDoc(
                description='This event is triggered when a remote player quits the game or leaves the server. It will not get triggered on the source players client. (Use onClientResourceStop to save client side data when the local player quits.)' ,
                arguments={
                    "reason": """: A string representing the reason why the player quit.
** "Unknown"
** "Quit"
** "Kicked"
** "Banned"
** "Bad Connection"
** "Timed out" """
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='reason',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )
        ],
    ),
    CompoundEventData(
        server=[
            
        ],
        client=[
            EventData(
            name='onClientPlayerRadioSwitch',
            docs=FunctionDoc(
                description='This event is triggered whenever the local players radio station is changed' ,
                arguments={
                    "stationID": """: An integer representing the station the player switched to.
Station ID's: """
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='stationID',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )
        ],
    ),
    CompoundEventData(
        server=[
            
        ],
        client=[
            EventData(
            name='onClientPlayerSpawn',
            docs=FunctionDoc(
                description='This event is triggered when any player, including a remote player, spawns.' ,
                arguments={
                    "hisTeam": """: A team element representing the team the player spawned on. """
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='hisTeam',
                                argument_type=FunctionType(
                                    names=['team'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )
        ],
    ),
    CompoundEventData(
        server=[
            
        ],
        client=[
            EventData(
            name='onClientPlayerStealthKill',
            docs=FunctionDoc(
                description='This event is triggered when the local player stealth kills another player.' ,
                arguments={
                    "targetPlayer": """: The player or ped that is being stealth killed. """
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='targetPlayer',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )
        ],
    ),
    CompoundEventData(
        server=[
            
        ],
        client=[
            EventData(
            name='onClientPlayerStuntFinish',
            docs=FunctionDoc(
                description='This event is triggered whenever the local player finishes a vehicle stunt.' ,
                arguments={
                    "stuntType": """: the type of stunt the player just performed. Valid types are: """,
                    "stuntTime": """: the number of miliseconds the stunt lasted. """,
                    "stuntDistance": """: the distance traveled while doing the stunt. """
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='stuntType',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='stuntTime',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='stuntDistance',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )
        ],
    ),
    CompoundEventData(
        server=[
            
        ],
        client=[
            EventData(
            name='onClientPlayerStuntStart',
            docs=FunctionDoc(
                description='This event is triggered whenever the local player starts doing a vehicle stunt.' ,
                arguments={
                    "stuntType": """: the type of stunt the player is starting to perform. Valid types are: """
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='stuntType',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )
        ],
    ),
    CompoundEventData(
        server=[
            
        ],
        client=[
            EventData(
            name='onClientPlayerTarget',
            docs=FunctionDoc(
                description='This event is triggered whenever the local player targets an element.' ,
                arguments={
                    "target": """The element the player targetted. """
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='target',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )
        ],
    ),
    CompoundEventData(
        server=[
            
        ],
        client=[
            EventData(
            name='onClientPlayerVehicleEnter',
            docs=FunctionDoc(
                description='This event is fired when a player has entered a vehicle.' ,
                arguments={
                    "theVehicle": """the vehicle that the player entered """,
                    "seat": """the seat that the player now is on. Drivers seat = 0, higher numbers are passenger seats. """
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='seat',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )
        ],
    ),
    CompoundEventData(
        server=[
            
        ],
        client=[
            EventData(
            name='onClientPlayerVehicleExit',
            docs=FunctionDoc(
                description='This event is triggered when a player or ped has exited a vehicle.' ,
                arguments={
                    "theVehicle": """the vehicle that the player exited. """,
                    "seat": """the number of the seat that the player was sitting on. """
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='seat',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )
        ],
    ),
    CompoundEventData(
        server=[
            
        ],
        client=[
            EventData(
            name='onClientPlayerVoicePause',
            docs=FunctionDoc(
                description='This event is triggered when a players voice sound is paused using setSoundPaused.' ,
                arguments={
                    "reason": """: the reason for the pause, this can be only paused. """
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='reason',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )
        ],
    ),
    CompoundEventData(
        server=[
            
        ],
        client=[
            EventData(
            name='onClientPlayerVoiceResumed',
            docs=FunctionDoc(
                description='This event is triggered when a players voice sound is resumed using setSoundPaused.' ,
                arguments={
                    "reason": """: the reason for the pause, this can be only resumed. """
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='reason',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )
        ],
    ),
    CompoundEventData(
        server=[
            
        ],
        client=[
            EventData(
            name='onClientPlayerVoiceStart',
            docs=FunctionDoc(
                description='<div style=border: 1px dotted blue; background: #00CC66;padding:4px;margin-bottom:2px;>Note:  This event should only be used as a low-level function for advanced users.  For typical Voice scripting, please see the Resource:Voice|Voice Resource</div>\nThis event is triggered when a player starts talking through voice chat.' ,
                arguments={
                    
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        
                    ],
                    variable_length=False,
                ),
        )
        ],
    ),
    CompoundEventData(
        server=[
            
        ],
        client=[
            EventData(
            name='onClientPlayerVoiceStop',
            docs=FunctionDoc(
                description='This event is triggered when a player stops talking through voice chat.' ,
                arguments={
                    
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        
                    ],
                    variable_length=False,
                ),
        )
        ],
    ),
    CompoundEventData(
        server=[
            
        ],
        client=[
            EventData(
            name='onClientPlayerWasted',
            docs=FunctionDoc(
                description='This event is triggered whenever a player, including those remote, dies.' ,
                arguments={
                    "killer": """: A player element representing the killer. """,
                    "weapon": """: An int|integer representing the Weapons|killer weapon or the Damage Types|damage types. """,
                    "bodypart": """: An int|integer representing the bodypart the player was damaged. """,
                    "stealth": """: A boolean representing whether or not this was a stealth kill. """
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='killer',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='weapon',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='bodypart',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='stealth',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )
        ],
    ),
    CompoundEventData(
        server=[
            
        ],
        client=[
            EventData(
            name='onClientPlayerWeaponFire',
            docs=FunctionDoc(
                description='This event is called when a player fires a weapon.  This does not trigger for projectiles, melee weapons, or camera.' ,
                arguments={
                    "weapon": """:  an int representing weapons|weapon used for firing a shot. """,
                    "ammo": """: an int amount of ammo left for this weapon type. """,
                    "ammoInClip": """: an int amount of ammo left for this weapon type in clip. """,
                    "hitX": """, hitY, hitZ: float world coordinates representing a hit point. """,
                    "hitElement": """: an element which was hit by a shot. """,
                    "startX": """, startY, startZ: float world coordinates representing the start of the bullet. Note: This is not the gun muzzle. """
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='weapon',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='ammo',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='ammoInClip',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='hitX',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='hitY',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='hitZ',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='hitElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='startX',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='startY',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='startZ',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )
        ],
    ),
    CompoundEventData(
        server=[
            
        ],
        client=[
            EventData(
            name='onClientPlayerWeaponSwitch',
            docs=FunctionDoc(
                description='This event is triggered whenever the local players equipped weapon|weapon slot changes. This means giveWeapon and takeWeapon will trigger this event if the equipped slot is forced to change.' ,
                arguments={
                    "previousWeaponSlot": """: An integer representing the previous weapon|weapon slot the player had before he switched. """,
                    "currentWeaponSlot": """: An integer representing the new weapon|weapon slot the player has after he switched. """
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='previousWeaponSlot',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='currentWeaponSlot',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )
        ],
    ),
    CompoundEventData(
        server=[
            EventData(
            name='onPlayerACInfo',
            docs=FunctionDoc(
                description='This event is triggered when a player trips anti-cheat detections. It can be used to script a white/blacklist of custom d3d9.dll files, or a white/blacklist of players with certain anti-cheat codes. The relevant anti-cheat code has to be disabled (or not enabled) in the server Mtaserver.conf#disableac|mtaserver.conf to be of use here.' ,
                arguments={
                    "detectedACList": """: A table of Anti-cheat_guide|anti-cheat codes the player has triggered. """,
                    "d3d9Size": """: A number representing the file size of any custom d3d9.dll the player may have installed. """,
                    "d3d9MD5": """: A string containing the MD5 of any custom d3d9.dll the player may have installed. """,
                    "d3d9SHA256": """: A string containing the SHA256 of any custom d3d9.dll the player may have installed. """
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='detectedACList',
                                argument_type=FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='d3d9Size',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='d3d9MD5',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='d3d9SHA256',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )
        ],
        client=[
            
        ],
    ),
    CompoundEventData(
        server=[
            EventData(
            name='onPlayerBan',
            docs=FunctionDoc(
                description='This event is triggered when a player added a ban (like onBan).' ,
                arguments={
                    "banPointer": """: the ban pointer which was added. """,
                    "responsibleElement": """: the player who added the ban. """
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='banPointer',
                                argument_type=FunctionType(
                                    names=['ban'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='responsibleElement',
                                argument_type=FunctionType(
                                    names=['player'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )
        ],
        client=[
            
        ],
    ),
    CompoundEventData(
        server=[
            EventData(
            name='onPlayerChangeNick',
            docs=FunctionDoc(
                description='This event is triggered when a player changes his nickname.' ,
                arguments={
                    "oldNick": """the nickname the player had before. """,
                    "newNick": """the new nickname of the player. """,
                    "changedByUser": """a boolean representing whether the name was changed using setPlayerName or by the user.
|9765}} """
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='oldNick',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='newNick',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='changedByUser',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )
        ],
        client=[
            
        ],
    ),
    CompoundEventData(
        server=[
            EventData(
            name='onPlayerChat',
            docs=FunctionDoc(
                description='This event is triggered when a player chats inside the chatbox.' ,
                arguments={
                    "message": """: a string representing the message typed into the chat. """,
                    "messageType": """: an int value representing the message type: """
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='message',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='messageType',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )
        ],
        client=[
            
        ],
    ),
    CompoundEventData(
        server=[
            EventData(
            name='onPlayerClick',
            docs=FunctionDoc(
                description='This event is triggered when a player clicks using the mouse cursor.' ,
                arguments={
                    "mouseButton": """: a string representing the mouse button that was pressed. Value can be left, middle or right. """,
                    "buttonState": """: a string representing the button state. Value can be up or down. """,
                    "clickedElement": """: the element the player clicked on. This value is nil if none. """,
                    "worldPosX": """: the X position in the world the player clicked on. """,
                    "worldPosY": """: the Y position in the world the player clicked on. """,
                    "worldPosZ": """: the Z position in the world the player clicked on. """,
                    "screenPosX": """: the X position on the screen the player clicked on. """,
                    "screenPosY": """: the Y position on the screen the player clicked on. """
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='mouseButton',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='buttonState',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='clickedElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='worldPosX',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='worldPosY',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='worldPosZ',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='screenPosX',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='screenPosY',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )
        ],
        client=[
            
        ],
    ),
    CompoundEventData(
        server=[
            EventData(
            name='onPlayerCommand',
            docs=FunctionDoc(
                description='This event is triggered when a player issues a command.' ,
                arguments={
                    
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='command',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )
        ],
        client=[
            
        ],
    ),
    CompoundEventData(
        server=[
            EventData(
            name='onPlayerConnect',
            docs=FunctionDoc(
                description='This event is triggered when a player attempts to connect to the server.\nbordercolorhex = CC3333 |\nbgcolorhex = FF8888 |\nmessage = WARNING:\n* You should never, under any circumstances, modify the player returned by getPlayerFromName before onPlayerJoin to avoid desynchronization (e.g. setPlayerName).\n* If you want to set custom disconnect text, cancelEvent should be called at the end of the onPlayerConnect event, otherwise the client will be displayed the default text if any other event, native or custom, is triggered before cancelling.' ,
                arguments={
                    "playerNick": """: The players current nickname. """,
                    "playerIP": """: The players current IP. """,
                    "playerUsername": """: The players community username. """,
                    "playerSerial": """: The players serial number. """,
                    "playerVersionNumber": """: The players MTA version in pure numerical form, e.g. 256 for 1.0, 257 for 1.0.1, etc. """,
                    "playerVersionString": """: The players MTA version in sortable string form. Same as the return value from getPlayerVersion. """
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='playerNick',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='playerIP',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='playerUsername',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='playerSerial',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='playerVersionNumber',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='playerVersionString',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )
        ],
        client=[
            
        ],
    ),
    CompoundEventData(
        server=[
            EventData(
            name='onPlayerContact',
            docs=FunctionDoc(
                description='This event is triggered when a player stands on a different element than before.' ,
                arguments={
                    "previousElement": """: the element player was standing on before. nil if none. """,
                    "currentElement": """: the new element that the player is standing on now. nil if none. """
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='previousElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='currentElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )
        ],
        client=[
            
        ],
    ),
    CompoundEventData(
        server=[
            EventData(
            name='onPlayerDamage',
            docs=FunctionDoc(
                description='This event is triggered when a player is damaged, in any way.\n*This event is not triggered when attacked by a team member if friendly fire is enabled.\n*Canceling this event has no effect. Cancel the client-side event onClientPlayerDamage instead.\n*onPlayerDamage doesnt trigger if the damage kills the player, onPlayerWasted is called instead.' ,
                arguments={
                    "attacker": """: a player element representing the player who was the attacker.  If there was no attacker this returns false. """,
                    "damage_causing": """: an int representing the cause of damage, either a Weapons|attacker weapon, or some other Damage Types|types of damage. """,
                    "bodypart": """: an int representing the bodypart ID the player was hit on when he got damaged. """,
                    "loss": """: a float representing the percentage of health the player lost. """
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='attacker',
                                argument_type=FunctionType(
                                    names=['player'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='damage_causing',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='bodypart',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='loss',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )
        ],
        client=[
            
        ],
    ),
    CompoundEventData(
        server=[
            EventData(
            name='onPlayerJoin',
            docs=FunctionDoc(
                description='This event is triggered when a player joins the server. This event is not cancellable.' ,
                arguments={
                    
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        
                    ],
                    variable_length=False,
                ),
        )
        ],
        client=[
            
        ],
    ),
    CompoundEventData(
        server=[
            EventData(
            name='onPlayerLogin',
            docs=FunctionDoc(
                description='This event is triggered when a player logs into their account in-game.' ,
                arguments={
                    "thePreviousAccount": """: the account the player was logged into before. """,
                    "theCurrentAccount": """: the account the player logged into just now. """
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePreviousAccount',
                                argument_type=FunctionType(
                                    names=['account'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='theCurrentAccount',
                                argument_type=FunctionType(
                                    names=['account'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )
        ],
        client=[
            
        ],
    ),
    CompoundEventData(
        server=[
            EventData(
            name='onPlayerLogout',
            docs=FunctionDoc(
                description='This event is triggered when a user logs out of their account in-game.' ,
                arguments={
                    "thePreviousAccount": """: the account the client was logged in as. """,
                    "theCurrentAccount": """: the account the client is a part of now (usually a guest account). """
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePreviousAccount',
                                argument_type=FunctionType(
                                    names=['account'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='theCurrentAccount',
                                argument_type=FunctionType(
                                    names=['account'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )
        ],
        client=[
            
        ],
    ),
    CompoundEventData(
        server=[
            EventData(
            name='onPlayerMarkerHit',
            docs=FunctionDoc(
                description='This event is triggered when a player hits a marker.' ,
                arguments={
                    "markerHit": """: the marker the player hit. """,
                    "matchingDimension": """: a boolean representing whether the player and the hit marker are in the same dimension. """
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='markerHit',
                                argument_type=FunctionType(
                                    names=['marker'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='matchingDimension',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )
        ],
        client=[
            
        ],
    ),
    CompoundEventData(
        server=[
            EventData(
            name='onPlayerMarkerLeave',
            docs=FunctionDoc(
                description='This event is triggered when a player leaves the area of a marker.' ,
                arguments={
                    "markerLeft": """: the marker the player left. """,
                    "matchingDimension": """: a boolean representing whether the player and the left marker are in the same dimension. """
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='markerLeft',
                                argument_type=FunctionType(
                                    names=['marker'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='matchingDimension',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )
        ],
        client=[
            
        ],
    ),
    CompoundEventData(
        server=[
            EventData(
            name='onPlayerModInfo',
            docs=FunctionDoc(
                description='This event is triggered when a player has modified certain files.' ,
                arguments={
                    "filename": """: a string with the filename of the modified file. """,
                    "itemlist": """: a table with the details of each modification within the file. Possible keys for each sub-table are: """,
                    "id": """: GTA model or texture id. """,
                    "name": """: GTA name. """,
                    "sizeX, sizeY, sizeZ": """: the modified model size (if the item is a DFF). """,
                    "originalSizeX, originalSizeY, originalSizeZ": """: the unmodified model size (if the item is a DFF). """,
                    "length": """: length in bytes of the item. """,
                    "md5": """: md5 of the item bytes. """,
                    "sha256": """: sha256 of the item bytes. """,
                    "paddedLength": """: length in bytes of the item padded to 2048 byte boundary. """,
                    "paddedMd5": """: md5 of the item bytes padded to 2048 byte boundary. """,
                    "paddedSha256": """: sha256 of the item bytes padded to 2048 byte boundary. """
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='filename',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='itemlist',
                                argument_type=FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )
        ],
        client=[
            
        ],
    ),
    CompoundEventData(
        server=[
            EventData(
            name='onPlayerMute',
            docs=FunctionDoc(
                description='This event is triggered when a player has been muted by setPlayerMuted.' ,
                arguments={
                    
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        
                    ],
                    variable_length=False,
                ),
        )
        ],
        client=[
            
        ],
    ),
    CompoundEventData(
        server=[
            EventData(
            name='onPlayerNetworkStatus',
            docs=FunctionDoc(
                description='This event is triggered when a players network connection to the server is interrupted. See onClientPlayerNetworkStatus for detecting server to player interruptions.' ,
                arguments={
                    "status": """: an int which is 0 if the interruption has begun, or 1 if the interruption is ending. """,
                    "ticks": """: an int representing the ticks since the interruption started. """
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='status',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='ticks',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )
        ],
        client=[
            
        ],
    ),
    CompoundEventData(
        server=[
            EventData(
            name='onPlayerPickupHit',
            docs=FunctionDoc(
                description='This event is triggered when a player hits a pickup.' ,
                arguments={
                    "pickupHit": """: the pickup the player hit. """
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='pickupHit',
                                argument_type=FunctionType(
                                    names=['pickup'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )
        ],
        client=[
            
        ],
    ),
    CompoundEventData(
        server=[
            EventData(
            name='onPlayerPickupLeave',
            docs=FunctionDoc(
                description='This event is triggered when a player leaves a pickup.' ,
                arguments={
                    "pickupLeft": """: the pickup the player left. """
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='pickupLeft',
                                argument_type=FunctionType(
                                    names=['pickup'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )
        ],
        client=[
            
        ],
    ),
    CompoundEventData(
        server=[
            EventData(
            name='onPlayerPickupUse',
            docs=FunctionDoc(
                description='This event is triggered when a player is standing on a pickup while not being in a vehicle.' ,
                arguments={
                    "thePickupToUse": """: the pickup the player is standing on and is about to pick up. """
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='thePickupToUse',
                                argument_type=FunctionType(
                                    names=['pickup'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )
        ],
        client=[
            
        ],
    ),
    CompoundEventData(
        server=[
            EventData(
            name='onPlayerPrivateMessage',
            docs=FunctionDoc(
                description='This event is triggered when a player sends a private message with msg command.' ,
                arguments={
                    "message": """: a string representing the private message to be sent. """,
                    "recipient": """: the player to whom the message is being sent. """
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='message',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='recipient',
                                argument_type=FunctionType(
                                    names=['player'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )
        ],
        client=[
            
        ],
    ),
    CompoundEventData(
        server=[
            EventData(
            name='onPlayerQuit',
            docs=FunctionDoc(
                description='This event is triggered when a player disconnects from the server.' ,
                arguments={
                    "quitType": """: How the player left. Possible values: """,
                    "Unknown": """ """,
                    "Quit": """ """,
                    "Kicked": """ """,
                    "Banned": """ """,
                    "Bad Connection": """ """,
                    "Timed out": """ """,
                    "reason": """: If the player was kicked or banned, the reason given goes here. If the player was not kicked or banned, this will be false. """,
                    "responsibleElement": """: The element that was responsible for kicking or banning the player. This is commonly another player, but can also be the console element. """
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='quitType',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='reason',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='responsibleElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )
        ],
        client=[
            
        ],
    ),
    CompoundEventData(
        server=[
            EventData(
            name='onPlayerScreenShot',
            docs=FunctionDoc(
                description='This event is triggered when the screen capture requested by takePlayerScreenShot has completed.' ,
                arguments={
                    "theResource": """: the resource which called takePlayerScreenShot. """,
                    "status": """: a string containing the status of the event which can be one of three values: """,
                    "ok": """- the image capture was successful and imageData will contain a JPEG image. """,
                    "disabled": """- the image capture failed because the player has disabled screen uploads. """,
                    "minimized": """- the image capture failed because the player has minimized the screen (i.e. alt-tabbed). """,
                    "imageData": """: a string which contains the JPEG image data. This can be saved with the Server_Scripting_Functions#File_functions|file functions, or sent to players with triggerClientEvent or even uploaded to a web site. """,
                    "timestamp": """: an int representing the server tick count when the capture was taken. """,
                    "tag": """: a string passed to takePlayerScreenShot. """
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theResource',
                                argument_type=FunctionType(
                                    names=['resource'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='status',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='imageData',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='timestamp',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='tag',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )
        ],
        client=[
            
        ],
    ),
    CompoundEventData(
        server=[
            EventData(
            name='onPlayerSpawn',
            docs=FunctionDoc(
                description='This event is called when a player spawns.' ,
                arguments={
                    "posX": """: the X position the player spawned at. """,
                    "posY": """: the Y position the player spawned at. """,
                    "posZ": """: the Z position the player spawned at. """,
                    "spawnRotation": """: the rotation the player spawned with. """,
                    "theTeam": """: the team the player spawned with. """,
                    "theSkin": """: the Character_Skins|skin/model the player spawned with. """,
                    "theInterior": """: the interior the player spawned in. """,
                    "theDimension": """: the dimension the player spawned in. """
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='posX',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='posY',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='posZ',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='spawnRotation',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='theTeam',
                                argument_type=FunctionType(
                                    names=['team'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='theSkin',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='theInterior',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='theDimension',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )
        ],
        client=[
            
        ],
    ),
    CompoundEventData(
        server=[
            EventData(
            name='onPlayerStealthKill',
            docs=FunctionDoc(
                description='This event is triggered when a player stealth kills another player.' ,
                arguments={
                    "targetPlayer": """: the player or ped that is being stealth killed. """
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='targetPlayer',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )
        ],
        client=[
            
        ],
    ),
    CompoundEventData(
        server=[
            EventData(
            name='onPlayerTarget',
            docs=FunctionDoc(
                description='This event is triggered when a player targets an element with his crosshair while aiming, or simply facing it while standing close. Its triggered again when the player no longer targets anything.' ,
                arguments={
                    "targettedElement": """: the element the player is targetting. false if no element is being targetted anymore. """
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='targettedElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )
        ],
        client=[
            
        ],
    ),
    CompoundEventData(
        server=[
            EventData(
            name='onPlayerUnmute',
            docs=FunctionDoc(
                description='This event is triggered when a player has been unmuted by setPlayerMuted.' ,
                arguments={
                    
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        
                    ],
                    variable_length=False,
                ),
        )
        ],
        client=[
            
        ],
    ),
    CompoundEventData(
        server=[
            EventData(
            name='onPlayerVehicleEnter',
            docs=FunctionDoc(
                description='This event is triggered when a player enters a vehicle.' ,
                arguments={
                    "theVehicle": """: a vehicle element representing the vehicle that was entered. """,
                    "seat": """: an int representing the seat in which the player is entering. """,
                    "jacked": """: a player or ped element representing who has been jacked. """
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='seat',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='jacked',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )
        ],
        client=[
            
        ],
    ),
    CompoundEventData(
        server=[
            EventData(
            name='onPlayerVehicleExit',
            docs=FunctionDoc(
                description='This event is triggered when a player leaves a vehicle, for whatever reason.' ,
                arguments={
                    "theVehicle": """: a vehicle element representing the vehicle in which the player exited from. """,
                    "seat": """: an int representing the seat in which the player was before exiting. """,
                    "jacker": """: a player or ped element representing who jacked the driver. """,
                    "forcedByScript": """a boolean representing whether the exit was forced using removePedFromVehicle or by the player. """
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theVehicle',
                                argument_type=FunctionType(
                                    names=['vehicle'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='seat',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='jacker',
                                argument_type=FunctionType(
                                    names=['ped'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='forcedByScript',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )
        ],
        client=[
            
        ],
    ),
    CompoundEventData(
        server=[
            EventData(
            name='onPlayerVoiceStart',
            docs=FunctionDoc(
                description='<div style=border: 1px dotted blue; background: #00CC66;padding:4px;margin-bottom:2px;>Note:  This event should only be used as a low-level function for advanced users.  For typical Voice scripting, please see the Resource:Voice|Voice Resource</div>\nThis event is triggered when a player starts talking through voice chat.' ,
                arguments={
                    
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        
                    ],
                    variable_length=False,
                ),
        )
        ],
        client=[
            
        ],
    ),
    CompoundEventData(
        server=[
            EventData(
            name='onPlayerVoiceStop',
            docs=FunctionDoc(
                description='This event is triggered when a player stops talking through voice chat.' ,
                arguments={
                    
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        
                    ],
                    variable_length=False,
                ),
        )
        ],
        client=[
            
        ],
    ),
    CompoundEventData(
        server=[
            EventData(
            name='onPlayerWasted',
            docs=FunctionDoc(
                description='This event is triggered when a player is killed or dies.' ,
                arguments={
                    "totalAmmo": """: an int representing the total ammo the victim had when they died. """,
                    "killer": """: an element representing the player, vehicle or object who was the killer. Deaths resulting from fall damage provide the vehicle or object landed on as the killer. If there was no killer this is false. """,
                    "killerWeapon": """: an int representing the Weapons|killer weapon or the Damage Types|damage type. """,
                    "bodypart": """: an int representing the bodypart ID the victim was hit on when they died. """,
                    "stealth": """: a boolean value representing whether or not this was a stealth kill. """
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='totalAmmo',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='killer',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='killerWeapon',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='bodypart',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='stealth',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )
        ],
        client=[
            
        ],
    ),
    CompoundEventData(
        server=[
            EventData(
            name='onPlayerWeaponFire',
            docs=FunctionDoc(
                description='This event is called when a player fires a weapon.  This does not trigger for projectiles, melee weapons, or camera.' ,
                arguments={
                    "weapon": """:  an int representing weapons|weapon used for making a shot. """,
                    "endX": """, endY, endZ: float world coordinates representing an end point. """,
                    "hitElement": """: an element which was hit by a shot. Currently this can be only another player. Note: hitElement could be incorrect and should not be relied upon. """,
                    "startX": """, startY, startZ: float world coordinates representing the start of the bullet. Note: This is not the gun muzzle. """
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='weapon',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='endX',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='endY',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='endZ',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='hitElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='startX',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='startY',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='startZ',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )
        ],
        client=[
            
        ],
    ),
    CompoundEventData(
        server=[
            EventData(
            name='onPlayerWeaponSwitch',
            docs=FunctionDoc(
                description='This event is triggered whenever a players equipped weapon slot changes. This means giveWeapon and takeWeapon will trigger this function if the equipped slot is forced to change.' ,
                arguments={
                    "previousWeaponID": """: An int|integer representing the weapons|weapon that was switched from. """,
                    "currentWeaponID": """: An int|integer representing the weapons|weapon that was switched to. """
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='previousWeaponID',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='currentWeaponID',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )
        ],
        client=[
            
        ],
    )
]
