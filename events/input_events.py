# Autogenerated file. ANY CHANGES WILL BE OVERWRITTEN
from to_python.core.types import FunctionType, \
    FunctionArgument, \
    FunctionArgumentValues, \
    FunctionReturnTypes, \
    FunctionSignature, \
    FunctionDoc, \
    EventData, \
    CompoundEventData
    
DUMP_PARTIAL = [
    CompoundEventData(
        server=[
            
        ],
        client=[
            EventData(
            name='onClientCharacter',
            docs=FunctionDoc(
                description='This event triggers whenever the user presses an alphanumeric character on their keyboard. This also includes special characters, ie.  / # %   { }.' ,
                arguments={
                    "character": """: a string representing the pressed character. """
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='character',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )
        ],
    ),
    CompoundEventData(
        server=[
            
        ],
        client=[
            EventData(
            name='onClientClick',
            docs=FunctionDoc(
                description='This event triggers whenever the user clicks his mouse.  This is linked to the GTA world, as oppose to GUI for which onClientGUIClick is to be used.  This event allows detection of click positions of the 3D world.' ,
                arguments={
                    "button": """:  This refers the button used to click on the mouse, can be left, right, or middle. """,
                    "state": """: This can be used to tell if the user released or pressed the mouse button, where up is passed if the button is released, and down is passed if the button is pushed. """,
                    "absoluteX": """: This refers to the 2D x coordinate the user clicked on his screen, and is an absolute position in pixels. """,
                    "absoluteY": """: This refers to the 2D y coordinate the user clicked on his screen, and is an absolute position in pixels. """,
                    "worldX": """: This represents the 3D x coordinate the player clicked on the screen, and is relative to the GTA world. """,
                    "worldY": """: This represents the 3D y coordinate the player clicked on the screen, and is relative to the GTA world. """,
                    "worldZ": """: This represents the 3D z coordinate the player clicked on the screen, and is relative to the GTA world. """,
                    "clickedWorld": """: This represents any physical entity elements that were clicked. If the player clicked on no MTA element, its set to false. """
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='button',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='state',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='absoluteX',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='absoluteY',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='worldX',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='worldY',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='worldZ',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='clickedWorld',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )
        ],
    ),
    CompoundEventData(
        server=[
            
        ],
        client=[
            EventData(
            name='onClientCursorMove',
            docs=FunctionDoc(
                description='This event is called by the root element whenever the cursor is moved over the screen, by the player. It returns information about the world coordinates as well as the screen coordinates of where the player moved the cursor.\nThe difference between this event and onClientMouseMove, is that the latter is actually called by GUI elements. This is to prevent double calling of onClientCursorMove, as onClientCursorMove is always called.' ,
                arguments={
                    "cursorX": """the relative X coordinate of the mouse cursor. 0 = left side of the screen, 1 = right side. """,
                    "cursorY": """the relative Y coordinate of the mouse cursor. 0 = top of the screen, 1 = bottom. """,
                    "absoluteX": """the X coordinate of the mouse cursor, in pixels, measured from the left side of the screen. """,
                    "absoluteY": """the Y coordinate of the mouse cursor, in pixels, measured from the top of the screen. """,
                    "worldX, worldY, worldZ": """the 3D in-game world coordinates that the cursor is pointing at. """
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='cursorX',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='cursorY',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='absoluteX',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='absoluteY',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='worldX',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='worldY',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='worldZ',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )
        ],
    ),
    CompoundEventData(
        server=[
            
        ],
        client=[
            EventData(
            name='onClientDoubleClick',
            docs=FunctionDoc(
                description='This event triggers whenever the user double-clicks his mouse.  This is linked to the GTA world, as appose to GUI for which onClientGUIDoubleClick is to be used.  This event allows detection of click positions of the 3D world.' ,
                arguments={
                    "button": """:  This refers the button used to click on the mouse, can be left, right, or middle. """,
                    "absoluteX": """: This refers to the 2D x coordinate the user clicked on his screen, and is an absolute position in pixels. """,
                    "absoluteY": """: This refers to the 2D y coordinate the user clicked on his screen, and is an absolute position in pixels. """,
                    "worldX": """: This represents the 3D x coordinate the player clicked on the screen, and is relative to the GTA world. """,
                    "worldY": """: This represents the 3D y coordinate the player clicked on the screen, and is relative to the GTA world. """,
                    "worldZ": """: This represents the 3D z coordinate the player clicked on the screen, and is relative to the GTA world. """,
                    "clickedWorld": """: This represents any physical entity elements that were clicked. If the player clicked on no MTA element, its set to false. """
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='button',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='absoluteX',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='absoluteY',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='worldX',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='worldY',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='worldZ',
                                argument_type=FunctionType(
                                    names=['float'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='clickedWorld',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )
        ],
    ),
    CompoundEventData(
        server=[
            
        ],
        client=[
            EventData(
            name='onClientGUIAccepted',
            docs=FunctionDoc(
                description='This event is triggered when enter is pressed on an editbox.' ,
                arguments={
                    "editBox": """: the Element/GUI/Edit_field|editbox which had focus. """
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='editBox',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )
        ],
    ),
    CompoundEventData(
        server=[
            
        ],
        client=[
            EventData(
            name='onClientGUIBlur',
            docs=FunctionDoc(
                description='This event is triggered each time a GUI element looses input focus (mainly useful for windows, editboxes and memos but triggered for all GUI elements nevertheless).' ,
                arguments={
                    
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        
                    ],
                    variable_length=False,
                ),
        )
        ],
    ),
    CompoundEventData(
        server=[
            
        ],
        client=[
            EventData(
            name='onClientGUIChanged',
            docs=FunctionDoc(
                description='This event is fired when a Element/GUI/Memo|memo or an Element/GUI/Edit_field|editbox has changed (either by the user or by guiSetText).' ,
                arguments={
                    "theElement": """: The GUI element which was changed. """
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )
        ],
    ),
    CompoundEventData(
        server=[
            
        ],
        client=[
            EventData(
            name='onClientGUIClick',
            docs=FunctionDoc(
                description='This event happens when any gui-element clicked.' ,
                arguments={
                    "button": """the name of the button which will be clicked, it can be left, right, middle. """,
                    "state": """the state of the mouse button, will be down if the mouse button was pushed, or up if it was released. Please note currently only the up state is supported. """,
                    "absoluteX": """the X position of the mouse cursor, in pixels, measured from the left side of the screen. """,
                    "absoluteY": """the Y position of the mouse cursor, in pixels, measured from the top of the screen. """
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='button',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='state',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='absoluteX',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='absoluteY',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )
        ],
    ),
    CompoundEventData(
        server=[
            
        ],
        client=[
            EventData(
            name='onClientGUIComboBoxAccepted',
            docs=FunctionDoc(
                description='This event is called when a Element/GUI/Combobox|combobox gets accepted.' ,
                arguments={
                    "theElement": """the Element/GUI/Combobox|combobox that got accepted. """
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )
        ],
    ),
    CompoundEventData(
        server=[
            
        ],
        client=[
            EventData(
            name='onClientGUIDoubleClick',
            docs=FunctionDoc(
                description='This event is fired when the user double clicks a GUI element. Doesnt work with buttons.' ,
                arguments={
                    "button": """the name of the mouse button that the GUI element was double clicked with. """,
                    "state": """the state of the mouse button. Can be down or up. """,
                    "absoluteX": """the X position of the mouse cursor, in pixels, measured from the left side of the screen. """,
                    "absoluteY": """the Y position of the mouse cursor, in pixels, measured from the top of the screen. """
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='button',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='state',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='absoluteX',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='absoluteY',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )
        ],
    ),
    CompoundEventData(
        server=[
            
        ],
        client=[
            EventData(
            name='onClientGUIFocus',
            docs=FunctionDoc(
                description='This event is triggered each time a GUI element gains input focus (mainly useful for windows, editboxes and memos but triggered for all GUI elements nevertheless).' ,
                arguments={
                    
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        
                    ],
                    variable_length=False,
                ),
        )
        ],
    ),
    CompoundEventData(
        server=[
            
        ],
        client=[
            EventData(
            name='onClientGUIMouseDown',
            docs=FunctionDoc(
                description='This event is fired when the user clicks certain mouse button on a GUI element.' ,
                arguments={
                    "button": """the name of the mouse button that the GUI element was clicked with, can be left, right, or middle. """,
                    "absoluteX": """the X position of the mouse cursor, in pixels, measured from the left side of the screen. """,
                    "absoluteY": """the Y position of the mouse cursor, in pixels, measured from the top of the screen. """
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='button',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='absoluteX',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='absoluteY',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )
        ],
    ),
    CompoundEventData(
        server=[
            
        ],
        client=[
            EventData(
            name='onClientGUIMouseUp',
            docs=FunctionDoc(
                description='This event is fired when the user releases his mouse button when on top of a GUI element.' ,
                arguments={
                    "button": """the name of the mouse button that was released on a GUI element, can be left, right, or middle. """,
                    "absoluteX": """the X position of the mouse cursor, in pixels, measured from the left side of the screen. """,
                    "absoluteY": """the Y position of the mouse cursor, in pixels, measured from the top of the screen. """
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='button',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='absoluteX',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='absoluteY',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )
        ],
    ),
    CompoundEventData(
        server=[
            
        ],
        client=[
            EventData(
            name='onClientGUIMove',
            docs=FunctionDoc(
                description='This event is triggered each time the user moves a GUI element.' ,
                arguments={
                    
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        
                    ],
                    variable_length=False,
                ),
        )
        ],
    ),
    CompoundEventData(
        server=[
            
        ],
        client=[
            EventData(
            name='onClientGUIScroll',
            docs=FunctionDoc(
                description='This event is fired when a GUI scrollbar is scrolled.' ,
                arguments={
                    "scrolled": """:  the Element/GUI/Scrollbar|scrollbar element that was scrolled. """
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='scrolled',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )
        ],
    ),
    CompoundEventData(
        server=[
            
        ],
        client=[
            EventData(
            name='onClientGUISize',
            docs=FunctionDoc(
                description='This event is triggered when the local client resizes a GUI element.' ,
                arguments={
                    
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        
                    ],
                    variable_length=False,
                ),
        )
        ],
    ),
    CompoundEventData(
        server=[
            
        ],
        client=[
            EventData(
            name='onClientGUITabSwitched',
            docs=FunctionDoc(
                description='This event is triggered each time the user switch from GUI tab.\nWhen adding the event handler on the tab panel, propagate must be true.' ,
                arguments={
                    "theElement": """: the Element/GUI/Tab|tab which was selected. """
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='theElement',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )
        ],
    ),
    CompoundEventData(
        server=[
            
        ],
        client=[
            EventData(
            name='onClientKey',
            docs=FunctionDoc(
                description='This event triggers whenever the user presses a button on their keyboard or mouse.\nThis event can also be used to see if the client scrolls their mouse wheel.' ,
                arguments={
                    "button": """:  This refers the button pressed. See key names for a list of keys. """,
                    "pressOrRelease": """: This refers to whether they were pressing or releasing the key, true when pressing, false when releasing. """
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='button',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='pressOrRelease',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )
        ],
    ),
    CompoundEventData(
        server=[
            
        ],
        client=[
            EventData(
            name='onClientMouseEnter',
            docs=FunctionDoc(
                description='This event is fired when the user moves the mouse over a GUI element.' ,
                arguments={
                    "absoluteX": """:  the X position of the mouse cursor, in pixels, measured from the left side of the screen. """,
                    "absoluteY": """:  the Y position of the mouse cursor, in pixels, measured from the top of the screen. """,
                    "leftGUI": """: the gui element that was switched from, or nil if it doesnt exist. """
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='absoluteX',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='absoluteY',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='leftGUI',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )
        ],
    ),
    CompoundEventData(
        server=[
            
        ],
        client=[
            EventData(
            name='onClientMouseLeave',
            docs=FunctionDoc(
                description='This event is fired when the user moves the mouse away from a GUI element.' ,
                arguments={
                    "absoluteX": """:  the X position of the mouse cursor, in pixels, measured from the left side of the screen. """,
                    "absoluteY": """:  the Y position of the mouse cursor, in pixels, measured from the top of the screen. """,
                    "enteredGUI": """: is the GUI element that was switched from, or nil if it doesnt exist. """
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='absoluteX',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='absoluteY',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='enteredGUI',
                                argument_type=FunctionType(
                                    names=['element'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )
        ],
    ),
    CompoundEventData(
        server=[
            
        ],
        client=[
            EventData(
            name='onClientMouseMove',
            docs=FunctionDoc(
                description='This event is triggered each time the user moves the mouse on top of a GUI element.' ,
                arguments={
                    "absoluteX": """:  the X position of the mouse cursor, in pixels, measured from the left side of the screen. """,
                    "absoluteY": """:  the Y position of the mouse cursor, in pixels, measured from the top of the screen. """
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='absoluteX',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='absoluteY',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )
        ],
    ),
    CompoundEventData(
        server=[
            
        ],
        client=[
            EventData(
            name='onClientMouseWheel',
            docs=FunctionDoc(
                description='This event is triggered each time the user scrolls his mouse scroll on top of a GUI element.' ,
                arguments={
                    "upOrDown": """: An int|integer representing whether the scroll was scrolled up or down. This can be either 1 (mouse was scrolled up) or -1 (mouse was scrolled down). """
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='upOrDown',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )
        ],
    ),
    CompoundEventData(
        server=[
            
        ],
        client=[
            EventData(
            name='onClientPaste',
            docs=FunctionDoc(
                description='This event triggers when user paste whatever (CTRL + V). This event isnt triggered if menu or console is visible or if any browser is focused, or if cursor is invisible.' ,
                arguments={
                    "clipboardText": """: a string representing the pasted value from clipboard. """
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='clipboardText',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )
        ],
    )
]
