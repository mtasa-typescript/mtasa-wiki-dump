# Autogenerated file. ANY CHANGES WILL BE OVERWRITTEN
from to_python.core.types import FunctionType, \
    FunctionArgument, \
    FunctionArgumentValues, \
    FunctionReturnTypes, \
    FunctionSignature, \
    FunctionDoc, \
    EventData, \
    CompoundEventData

DUMP_PARTIAL = [
    CompoundEventData(
        server=[
            
        ],
        client=[
            EventData(
            name='onClientBrowserCreated',
            docs=FunctionDoc(
                description='This event is triggered when the CEF browser instance has been created. If you want to load a specific website right after creating the browser (using createBrowser or guiCreateBrowser), this event will be the convenient place.' ,
                arguments={
                    
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        
                    ],
                    variable_length=False,
                ),
        )
        ],
    ),
    CompoundEventData(
        server=[
            
        ],
        client=[
            EventData(
            name='onClientBrowserCursorChange',
            docs=FunctionDoc(
                description='This event is triggered when the cursor changes within a browser window.' ,
                arguments={
                    "cursorId": """The new cursor ID. See #Cursor IDs|Cursor IDs. """
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='cursorId',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )
        ],
    ),
    CompoundEventData(
        server=[
            
        ],
        client=[
            EventData(
            name='onClientBrowserDocumentReady',
            docs=FunctionDoc(
                description='This event is executed after the web page has been loaded successfully.' ,
                arguments={
                    "url": """the url of the web page loaded. """
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='url',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )
        ],
    ),
    CompoundEventData(
        server=[
            
        ],
        client=[
            EventData(
            name='onClientBrowserInputFocusChanged',
            docs=FunctionDoc(
                description='This event is triggered when the input focus inside a browser has changed.' ,
                arguments={
                    "gainedFocus": """: true if an input field has been focused, false if it has lost focus. """
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='gainedFocus',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )
        ],
    ),
    CompoundEventData(
        server=[
            
        ],
        client=[
            EventData(
            name='onClientBrowserLoadingFailed',
            docs=FunctionDoc(
                description='The event is triggered when the browser can not load the page.' ,
                arguments={
                    "url": """the requested URL. """,
                    "errorCode": """see #Error_codes|error codes below. """,
                    "errorDescription": """a short description. """
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='url',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='errorCode',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='errorDescription',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )
        ],
    ),
    CompoundEventData(
        server=[
            
        ],
        client=[
            EventData(
            name='onClientBrowserLoadingStart',
            docs=FunctionDoc(
                description='The event is triggered when a Browser|webbrowser starts loading a page.' ,
                arguments={
                    "URL": """string containing the URL that will be loaded.
* {{New feature/item|3.0160|1.6|7888|'''isMainFrame:''' a [[boolean]] representing whether the entire page (main frame) was loaded or an ''<iframe>'' inside the page was loaded. """,
                    "true": """: If the URL is loaded in the main frame. """,
                    "false": """: If the URL is loaded in a <iframe>.}} """
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='URL',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='isMain',
                                argument_type=FunctionType(
                                    names=['boolean'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )
        ],
    ),
    CompoundEventData(
        server=[
            
        ],
        client=[
            EventData(
            name='onClientBrowserNavigate',
            docs=FunctionDoc(
                description='The event is executed when the browser loads a new page. Do not use loadBrowserURL in the attached function.' ,
                arguments={
                    "targetURL": """the page the browser loaded. """,
                    "isBlocked": """if the browser was created with isLocal set to true, and the browser tried to load a remote page, this would be set to true (and vice-versa). """,
                    "isMainFrame": """a boolean representing whether the entire page (main frame) was loaded or an <iframe> inside the page was loaded.
|7888}} """
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='targetURL',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='isBlocked',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='isMainFrame',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )
        ],
    ),
    CompoundEventData(
        server=[
            
        ],
        client=[
            EventData(
            name='onClientBrowserPopup',
            docs=FunctionDoc(
                description='TODO' ,
                arguments={
                    "targetURL": """ """,
                    "openerURL": """ """,
                    "isPopup": """ """
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='targetURL',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='openerURL',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='isPopup',
                                argument_type=FunctionType(
                                    names=['bool'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )
        ],
    ),
    CompoundEventData(
        server=[
            
        ],
        client=[
            EventData(
            name='onClientBrowserResourceBlocked',
            docs=FunctionDoc(
                description='This event is executed when a resource (images, sounds etc.) has been blocked.' ,
                arguments={
                    "url": """: the blocked URL. """,
                    "domain": """: the blocked domain (part of the URL). """,
                    "reason": """: the reason why the resource was blocked. Possibles values: """,
                    "0": """: not allowed yet """,
                    "1": """: blacklisted """,
                    "2": """: blocked protocol scheme """
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='url',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='domain',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='reason',
                                argument_type=FunctionType(
                                    names=['int'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )
        ],
    ),
    CompoundEventData(
        server=[
            
        ],
        client=[
            EventData(
            name='onClientBrowserTooltip',
            docs=FunctionDoc(
                description='The event is triggered when the user hovers a tooltip.' ,
                arguments={
                    "text": """string containing the tooltip text. Empty string if user is not longer hovering. """
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='text',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )
        ],
    ),
    CompoundEventData(
        server=[
            
        ],
        client=[
            EventData(
            name='onClientBrowserWhitelistChange',
            docs=FunctionDoc(
                description='The event is triggered when the whitelist has changed. Note that this event is only triggered if the request window was confirmed by accepting.' ,
                arguments={
                    "changedDomains": """a table of changed domains. """
                },
                result='' ,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='changedDomains',
                                argument_type=FunctionType(
                                    names=['table'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )
        ],
    )
]
