# Autogenerated file. ANY CHANGES WILL BE OVERWRITTEN
from to_python.core.types import FunctionType, \
    FunctionArgument, \
    FunctionArgumentValues, \
    FunctionReturnTypes, \
    FunctionSignature, \
    FunctionDoc, \
    EventData, \
    CompoundEventData
    
DUMP_PARTIAL = [
    CompoundEventData(server=[], client=[EventData(
            name='onClientResourceFileDownload',
            docs=FunctionDoc(
                description=""" """,
                arguments={
                    "fileResource": """resource the file belongs to """,
                    "fileName": """relative resource file path """,
                    "fileSize": """size of the file in bytes """,
                    "state": """possible values: <code>queued</code> or <code>finished</code> or <code>failed</code> """
                },
                result=""" """,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='fileResource',
                                argument_type=FunctionType(
                                    names=['resource'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='fileName',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='fileSize',
                                argument_type=FunctionType(
                                    names=['number'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='state',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )]),
    CompoundEventData(server=[], client=[EventData(
            name='onClientResourceStart',
            docs=FunctionDoc(
                description="""This event is triggered when a resource is started.  Please note that this is not triggered the same time as the serverside event onResourceStart is.  The event is triggered when any clientside resources are started.  This means it is triggered when a clientside script is initiated after a download, which includes downloading after join. So:
* If a resource is running before a player joins, the onClientResourceStart event will be triggered after they join and have downloaded that resource.
* If a resource is started after a player has joined, the player will be made to download the required files, and then the onClientResourceStart event will be triggered. """,
                arguments={
                    "startedResource": """: the resource that was started. """
                },
                result=""" """,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='startedResource',
                                argument_type=FunctionType(
                                    names=['resource'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )]),
    CompoundEventData(server=[], client=[EventData(
            name='onClientResourceStop',
            docs=FunctionDoc(
                description="""This event is triggered when a resource is being stopped. """,
                arguments={
                    "stoppedResource": """: the resource that is about to get stopped. """
                },
                result=""" """,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='stoppedResource',
                                argument_type=FunctionType(
                                    names=['resource'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )]),
    CompoundEventData(server=[EventData(
            name='onResourceLoadStateChange',
            docs=FunctionDoc(
                description=""" """,
                arguments={
                    "changedResource": """: the resource that was either loaded, reloaded or is unloading. """,
                    "oldState": """: the state the resource was in before it changed. """,
                    "newState": """: the state the resource has changed to. """
                },
                result=""" """,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='changedResource',
                                argument_type=FunctionType(
                                    names=['resource'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='oldState',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='newState',
                                argument_type=FunctionType(
                                    names=['string'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )], client=[]),
    CompoundEventData(server=[EventData(
            name='onResourcePreStart',
            docs=FunctionDoc(
                description="""Analogous to onResourceStart, but triggered before script files are initialised. """,
                arguments={
                    "startingResource": """: the resource that is starting. """
                },
                result=""" """,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='startingResource',
                                argument_type=FunctionType(
                                    names=['resource'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )], client=[]),
    CompoundEventData(server=[EventData(
            name='onResourceStart',
            docs=FunctionDoc(
                description="""This event is triggered when a resource is started.
Important: If you attach this event to the root element it will called when any resource starts, not just the resource your script is running inside. As such, most of the time you will want to check that the resource passed to this event matches your resource (compare with the value returned by getThisResource before doing anything. Alternatively you can attach the event to resourceRoot. """,
                arguments={
                    "startedResource": """: the resource that was started. """
                },
                result=""" """,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='startedResource',
                                argument_type=FunctionType(
                                    names=['resource'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )], client=[]),
    CompoundEventData(server=[EventData(
            name='onResourceStop',
            docs=FunctionDoc(
                description="""This event is triggered when the resource is stopped. This can occur for a number of reasons:
* The stop console command was used
* The restart console command was used
* The resource was modified (the resource will automatically restart)
* Another resource stopped it using stopResource.
Note: If you wish to just detect a single resource being stopped, you should attach handlers for this event to the resources root element. You can access this using getResourceRootElement. """,
                arguments={
                    "stoppedResource": """: the resource that is being stopped. """,
                    "wasDeleted": """: a boolean representing whether the resource folder was deleted, moved or renamed. """
                },
                result=""" """,
            ),
            arguments=FunctionArgumentValues(
                    arguments=[
                        [
                            FunctionArgument(
                                name='stoppedResource',
                                argument_type=FunctionType(
                                    names=['resource'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ],
                        [
                            FunctionArgument(
                                name='wasDeleted',
                                argument_type=FunctionType(
                                    names=['boolean'],
                                    is_optional=False,
                                ),
                                default_value=None,
                            )
                        ]
                    ],
                    variable_length=False,
                ),
        )], client=[])
]
