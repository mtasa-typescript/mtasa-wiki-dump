from src.fetch.function import CompoundFunctionData, FunctionData, FunctionArgument, ListType, FunctionUrl, \
 FunctionType, FunctionDoc, FunctionOOP

DATA = [
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='playSoundFrontEnd', return_types=['bool'], arguments=[FunctionArgument(name='thePlayer', argument_type='player', default_value=None, optional=False), FunctionArgument(name='sound', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function plays a frontend sound for the specified player.', arguments={'thePlayer': 'the player you want the sound to play for.', 'sound': 'a whole int specifying the sound id to play. Valid values are:\n{{Sounds}}'}, result="Returns ''true'' if the sound was successfully played, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/PlaySoundFrontEnd', name='playSoundFrontEnd', category='Audio functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='playSoundFrontEnd', return_types=['bool'], arguments=[FunctionArgument(name='sound', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function plays a frontend sound for the specified player.', arguments={'sound': 'a whole int specifying the sound id to play. Valid values are:\n{{Sounds}}'}, result="Returns ''true'' if the sound was successfully played, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/PlaySoundFrontEnd', name='playSoundFrontEnd', category='Audio functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='createBlip', return_types=['blip'], arguments=[FunctionArgument(name='x', argument_type='float', default_value=None, optional=False), FunctionArgument(name='y', argument_type='float', default_value=None, optional=False), FunctionArgument(name='z', argument_type='float', default_value=None, optional=False), FunctionArgument(name='icon', argument_type='int', default_value='0', optional=True), FunctionArgument(name='size', argument_type='int', default_value='2', optional=True), FunctionArgument(name='r', argument_type='int', default_value='255', optional=True), FunctionArgument(name='g', argument_type='int', default_value='0', optional=True), FunctionArgument(name='b', argument_type='int', default_value='0', optional=True), FunctionArgument(name='a', argument_type='int', default_value='255', optional=True), FunctionArgument(name='ordering', argument_type='int', default_value='0', optional=True), FunctionArgument(name='visibleDistance', argument_type='float', default_value='16383.0', optional=True), FunctionArgument(name='visibleTo', argument_type='element', default_value='getRootElement(', optional=True)]), docs=FunctionDoc(description="This function creates a [[blip]] [[element]], which is displayed as an icon on the client's radar.", arguments={}, result="Returns an [[element]] of the [[blip]] if it was created successfully, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/CreateBlip', name='createBlip', category='Blip functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='createBlip', return_types=['blip'], arguments=[FunctionArgument(name='x', argument_type='float', default_value=None, optional=False), FunctionArgument(name='y', argument_type='float', default_value=None, optional=False), FunctionArgument(name='z', argument_type='float', default_value=None, optional=False), FunctionArgument(name='icon', argument_type='int', default_value='0', optional=True), FunctionArgument(name='size', argument_type='int', default_value='2', optional=True), FunctionArgument(name='r', argument_type='int', default_value='255', optional=True), FunctionArgument(name='g', argument_type='int', default_value='0', optional=True), FunctionArgument(name='b', argument_type='int', default_value='0', optional=True), FunctionArgument(name='a', argument_type='int', default_value='255', optional=True), FunctionArgument(name='ordering', argument_type='int', default_value='0', optional=True), FunctionArgument(name='visibleDistance', argument_type='float', default_value='16383.0', optional=True)]), docs=FunctionDoc(description="This function creates a [[blip]] [[element]], which is displayed as an icon on the client's radar.", arguments={}, result="Returns an [[element]] of the [[blip]] if it was created successfully, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/CreateBlip', name='createBlip', category='Blip functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='createBlipAttachedTo', return_types=['blip'], arguments=[FunctionArgument(name='elementToAttachTo', argument_type='element', default_value=None, optional=False), FunctionArgument(name='icon', argument_type='int', default_value='0', optional=True), FunctionArgument(name='size', argument_type='int', default_value='2', optional=True), FunctionArgument(name='r', argument_type='int', default_value='255', optional=True), FunctionArgument(name='g', argument_type='int', default_value='0', optional=True), FunctionArgument(name='b', argument_type='int', default_value='0', optional=True), FunctionArgument(name='a', argument_type='int', default_value='255', optional=True), FunctionArgument(name='ordering', argument_type='int', default_value='0', optional=True), FunctionArgument(name='visibleDistance', argument_type='float', default_value='16383.0', optional=True), FunctionArgument(name='visibleTo', argument_type='element', default_value='getRootElement(', optional=True)]), docs=FunctionDoc(description="This function creates a [[blip]] that is attached to an [[element]]. This blip is displayed as an icon on the client's radar and will 'follow' the element that it is attached to around.", arguments={}, result="Returns a [[blip]] if the blip was created succesfully, or ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/CreateBlipAttachedTo', name='createBlipAttachedTo', category='Blip functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='createBlipAttachedTo', return_types=['blip'], arguments=[FunctionArgument(name='elementToAttachTo', argument_type='element', default_value=None, optional=False), FunctionArgument(name='icon', argument_type='int', default_value='0', optional=True), FunctionArgument(name='size', argument_type='int', default_value='2', optional=True), FunctionArgument(name='r', argument_type='int', default_value='255', optional=True), FunctionArgument(name='g', argument_type='int', default_value='0', optional=True), FunctionArgument(name='b', argument_type='int', default_value='0', optional=True), FunctionArgument(name='a', argument_type='int', default_value='255', optional=True), FunctionArgument(name='ordering', argument_type='int', default_value='0', optional=True), FunctionArgument(name='visibleDistance', argument_type='float', default_value='16383.0', optional=True)]), docs=FunctionDoc(description="This function creates a [[blip]] that is attached to an [[element]]. This blip is displayed as an icon on the client's radar and will 'follow' the element that it is attached to around.", arguments={}, result="Returns a [[blip]] if the blip was created succesfully, or ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/CreateBlipAttachedTo', name='createBlipAttachedTo', category='Blip functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getBlipColor', return_types=['int', 'int', 'int', 'int'], arguments=[FunctionArgument(name='theBlip', argument_type='blip', default_value=None, optional=False)]), docs=FunctionDoc(description='This function will tell you what color a blip is. This color is only applicable to the default blip icon ([[Image:Blipid0s.png|12px]], [[Image:Blipid0u.png|12px]] or [[Image:Blipid0d.png|12px]]). All other icons will ignore this.', arguments={'theBlip': 'The blip whose color you wish to get.'}, result="Returns four integers in RGBA format, with a maximum value of 255 for each. The values are, in order, ''red'', ''green'', ''blue'', and ''alpha''.  Alpha decides the transparancy where 255 is opaque and 0 is fully transparent. ''false'' is returned if the blip is invalid."), oop=FunctionOOP(class_name='blip', method_name='getColor', field=None), url=FunctionUrl(url='/wiki/GetBlipColor', name='getBlipColor', category='Blip functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getBlipColor', return_types=['int', 'int', 'int', 'int'], arguments=[FunctionArgument(name='theBlip', argument_type='blip', default_value=None, optional=False)]), docs=FunctionDoc(description='This function will tell you what color a blip is. This color is only applicable to the default blip icon ([[Image:Blipid0s.png|12px]], [[Image:Blipid0u.png|12px]] or [[Image:Blipid0d.png|12px]]). All other icons will ignore this.', arguments={'theBlip': 'The blip whose color you wish to get.'}, result="Returns four integers in RGBA format, with a maximum value of 255 for each. The values are, in order, ''red'', ''green'', ''blue'', and ''alpha''.  Alpha decides the transparancy where 255 is opaque and 0 is fully transparent. ''false'' is returned if the blip is invalid."), oop=FunctionOOP(class_name='blip', method_name='getColor', field=None), url=FunctionUrl(url='/wiki/GetBlipColor', name='getBlipColor', category='Blip functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getBlipIcon', return_types=['int'], arguments=[FunctionArgument(name='theBlip', argument_type='blip', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns the icon a [[blip]] currently has.', arguments={'theBlip': ': the blip were getting the icon number of.'}, result='Returns an [[int]] indicating which icon the blip has. Valid values are listed on the [[Radar Blips]] page.'), oop=FunctionOOP(class_name='blip', method_name='getIcon', field='icon'), url=FunctionUrl(url='/wiki/GetBlipIcon', name='getBlipIcon', category='Blip functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getBlipIcon', return_types=['int'], arguments=[FunctionArgument(name='theBlip', argument_type='blip', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns the icon a [[blip]] currently has.', arguments={'theBlip': ': the blip were getting the icon number of.'}, result='Returns an [[int]] indicating which icon the blip has. Valid values are listed on the [[Radar Blips]] page.'), oop=FunctionOOP(class_name='blip', method_name='getIcon', field='icon'), url=FunctionUrl(url='/wiki/GetBlipIcon', name='getBlipIcon', category='Blip functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getBlipOrdering', return_types=['int'], arguments=[FunctionArgument(name='theBlip', argument_type='blip', default_value=None, optional=False)]), docs=FunctionDoc(description='This function gets the Z ordering value of a blip. The Z ordering determines if a blip appears on top of or below other blips. Blips with a higher Z ordering value appear on top of blips with a lower value. The default value for all blips is 0.', arguments={'theBlip': 'the blip to retrieve the Z ordering value of.'}, result="Returns the Z ordering value of the blip if successful, ''false'' otherwise."), oop=FunctionOOP(class_name='blip', method_name='getOrdering', field='ordering'), url=FunctionUrl(url='/wiki/GetBlipOrdering', name='getBlipOrdering', category='Blip functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getBlipOrdering', return_types=['int'], arguments=[FunctionArgument(name='theBlip', argument_type='blip', default_value=None, optional=False)]), docs=FunctionDoc(description='This function gets the Z ordering value of a blip. The Z ordering determines if a blip appears on top of or below other blips. Blips with a higher Z ordering value appear on top of blips with a lower value. The default value for all blips is 0.', arguments={'theBlip': 'the blip to retrieve the Z ordering value of.'}, result="Returns the Z ordering value of the blip if successful, ''false'' otherwise."), oop=FunctionOOP(class_name='blip', method_name='getOrdering', field='ordering'), url=FunctionUrl(url='/wiki/GetBlipOrdering', name='getBlipOrdering', category='Blip functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getBlipSize', return_types=['int'], arguments=[FunctionArgument(name='theBlip', argument_type='blip', default_value=None, optional=False)]), docs=FunctionDoc(description='This function gets the size of a blip..', arguments={'theBlip': 'The blip you wish to get the size of.'}, result='Returns an [[int]] indicating the size of the blip. The default value is 2. The maximum value is 25.'), oop=FunctionOOP(class_name='blip', method_name='getSize', field='size'), url=FunctionUrl(url='/wiki/GetBlipSize', name='getBlipSize', category='Blip functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getBlipSize', return_types=['int'], arguments=[FunctionArgument(name='theBlip', argument_type='blip', default_value=None, optional=False)]), docs=FunctionDoc(description='This function gets the size of a blip..', arguments={'theBlip': 'The blip you wish to get the size of.'}, result='Returns an [[int]] indicating the size of the blip. The default value is 2. The maximum value is 25.'), oop=FunctionOOP(class_name='blip', method_name='getSize', field='size'), url=FunctionUrl(url='/wiki/GetBlipSize', name='getBlipSize', category='Blip functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getBlipVisibleDistance', return_types=['float'], arguments=[FunctionArgument(name='theBlip', argument_type='blip', default_value=None, optional=False)]), docs=FunctionDoc(description='This function will tell you what visible distance a blip has. ', arguments={'theBlip': 'The blip whose visible distance you wish to get.'}, result='Returns one float with the blips visible distance, false if the blip is invalid.'), oop=FunctionOOP(class_name='blip', method_name='getVisibleDistance', field='visibleDistance'), url=FunctionUrl(url='/wiki/GetBlipVisibleDistance', name='getBlipVisibleDistance', category='Blip functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getBlipVisibleDistance', return_types=['float'], arguments=[FunctionArgument(name='theBlip', argument_type='blip', default_value=None, optional=False)]), docs=FunctionDoc(description='This function will tell you what visible distance a blip has. ', arguments={'theBlip': 'The blip whose visible distance you wish to get.'}, result='Returns one float with the blips visible distance, false if the blip is invalid.'), oop=FunctionOOP(class_name='blip', method_name='getVisibleDistance', field='visibleDistance'), url=FunctionUrl(url='/wiki/GetBlipVisibleDistance', name='getBlipVisibleDistance', category='Blip functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setBlipColor', return_types=['bool'], arguments=[FunctionArgument(name='theBlip', argument_type='blip', default_value=None, optional=False), FunctionArgument(name='red', argument_type='int', default_value=None, optional=False), FunctionArgument(name='green', argument_type='int', default_value=None, optional=False), FunctionArgument(name='blue', argument_type='int', default_value=None, optional=False), FunctionArgument(name='alpha', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function will let you change the color of a blip. This color is only applicable to the default blip icon ([[Image:Blipid0s.png|12px]], [[Image:Blipid0u.png|12px]] or [[Image:Blipid0d.png|12px]]). All other icons will ignore this.', arguments={'theBlip': 'The blip whos color you wish to set.', 'red': 'The amount of red in the blips color (0 - 255).', 'green': 'The amount of green in the blips color (0 - 255).', 'blue': 'The amount of blue in the blips color (0 - 255).', 'alpha': 'The amount of alpha in the blips color (0 - 255).  Alpha decides transparancy where 255 is opaque and 0 is transparent.'}, result="Returns ''true'' if the blip's color was set successfully. Returns ''false'' if the blip passed to the function is invalid, or any of the colors are out of the valid range."), oop=FunctionOOP(class_name='blip', method_name='setColor', field=None), url=FunctionUrl(url='/wiki/SetBlipColor', name='setBlipColor', category='Blip functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setBlipColor', return_types=['bool'], arguments=[FunctionArgument(name='theBlip', argument_type='blip', default_value=None, optional=False), FunctionArgument(name='red', argument_type='int', default_value=None, optional=False), FunctionArgument(name='green', argument_type='int', default_value=None, optional=False), FunctionArgument(name='blue', argument_type='int', default_value=None, optional=False), FunctionArgument(name='alpha', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function will let you change the color of a blip. This color is only applicable to the default blip icon ([[Image:Blipid0s.png|12px]], [[Image:Blipid0u.png|12px]] or [[Image:Blipid0d.png|12px]]). All other icons will ignore this.', arguments={'theBlip': 'The blip whos color you wish to set.', 'red': 'The amount of red in the blips color (0 - 255).', 'green': 'The amount of green in the blips color (0 - 255).', 'blue': 'The amount of blue in the blips color (0 - 255).', 'alpha': 'The amount of alpha in the blips color (0 - 255).  Alpha decides transparancy where 255 is opaque and 0 is transparent.'}, result="Returns ''true'' if the blip's color was set successfully. Returns ''false'' if the blip passed to the function is invalid, or any of the colors are out of the valid range."), oop=FunctionOOP(class_name='blip', method_name='setColor', field=None), url=FunctionUrl(url='/wiki/SetBlipColor', name='setBlipColor', category='Blip functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setBlipIcon', return_types=['bool'], arguments=[FunctionArgument(name='theBlip', argument_type='blip', default_value=None, optional=False), FunctionArgument(name='icon', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function sets the icon for an existing blip element.', arguments={'theBlip': 'The blip you wish to set the icon of.', 'icon': 'A number indicating the icon you wish to change it do. Valid values are listed on the Radar Blips page.'}, result="Returns ''true'' if the icon was successfully set, ''false'' if the element passed was not a valid blip or the icon value was not a valid icon number."), oop=FunctionOOP(class_name='blip', method_name='setIcon', field='icon'), url=FunctionUrl(url='/wiki/SetBlipIcon', name='setBlipIcon', category='Blip functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setBlipIcon', return_types=['bool'], arguments=[FunctionArgument(name='theBlip', argument_type='blip', default_value=None, optional=False), FunctionArgument(name='icon', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function sets the icon for an existing blip element.', arguments={'theBlip': 'The blip you wish to set the icon of.', 'icon': 'A number indicating the icon you wish to change it do. Valid values are listed on the Radar Blips page.'}, result="Returns ''true'' if the icon was successfully set, ''false'' if the element passed was not a valid blip or the icon value was not a valid icon number."), oop=FunctionOOP(class_name='blip', method_name='setIcon', field='icon'), url=FunctionUrl(url='/wiki/SetBlipIcon', name='setBlipIcon', category='Blip functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setBlipOrdering', return_types=['bool'], arguments=[FunctionArgument(name='theBlip', argument_type='blip', default_value=None, optional=False), FunctionArgument(name='ordering', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function sets the Z ordering of a blip. It allows you to make a blip appear on top of or below other blips.', arguments={'theBlip': 'the blip whose Z ordering to change.', 'ordering': 'the new Z ordering value. Blips with higher values will appear on top of blips with lower values. Possible range: -32767 to 32767. Default: 0.'}, result="Returns ''true'' if the blip ordering was changed successfully, ''false'' otherwise."), oop=FunctionOOP(class_name='blip', method_name='setOrdering', field='ordering'), url=FunctionUrl(url='/wiki/SetBlipOrdering', name='setBlipOrdering', category='Blip functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setBlipOrdering', return_types=['bool'], arguments=[FunctionArgument(name='theBlip', argument_type='blip', default_value=None, optional=False), FunctionArgument(name='ordering', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function sets the Z ordering of a blip. It allows you to make a blip appear on top of or below other blips.', arguments={'theBlip': 'the blip whose Z ordering to change.', 'ordering': 'the new Z ordering value. Blips with higher values will appear on top of blips with lower values. Possible range: -32767 to 32767. Default: 0.'}, result="Returns ''true'' if the blip ordering was changed successfully, ''false'' otherwise."), oop=FunctionOOP(class_name='blip', method_name='setOrdering', field='ordering'), url=FunctionUrl(url='/wiki/SetBlipOrdering', name='setBlipOrdering', category='Blip functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setBlipSize', return_types=['bool'], arguments=[FunctionArgument(name='theBlip', argument_type='blip', default_value=None, optional=False), FunctionArgument(name='iconSize', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description="This function sets the size of a blip's icon.", arguments={'theBlip': 'The blip you wish to get the size of.', 'iconSize': 'The size you wish the icon to be. 2 is the default value. 25 is the maximum value. Value gets clamped between 0 and 25.'}, result="Returns an ''true'' if the blip's size was set successfully. Returns ''false'' if the [[element]] passed was not a [[blip]] or if the icon size passed was invalid."), oop=FunctionOOP(class_name='blip', method_name='setSize', field='size'), url=FunctionUrl(url='/wiki/SetBlipSize', name='setBlipSize', category='Blip functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setBlipSize', return_types=['bool'], arguments=[FunctionArgument(name='theBlip', argument_type='blip', default_value=None, optional=False), FunctionArgument(name='iconSize', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description="This function sets the size of a blip's icon.", arguments={'theBlip': 'The blip you wish to get the size of.', 'iconSize': 'The size you wish the icon to be. 2 is the default value. 25 is the maximum value. Value gets clamped between 0 and 25.'}, result="Returns an ''true'' if the blip's size was set successfully. Returns ''false'' if the [[element]] passed was not a [[blip]] or if the icon size passed was invalid."), oop=FunctionOOP(class_name='blip', method_name='setSize', field='size'), url=FunctionUrl(url='/wiki/SetBlipSize', name='setBlipSize', category='Blip functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setBlipVisibleDistance', return_types=['bool'], arguments=[FunctionArgument(name='theBlip', argument_type='blip', default_value=None, optional=False), FunctionArgument(name='theDistance', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='This function will set the visible distance of a blip.', arguments={'theBlip': 'The blip whose visible distance you wish to get.', 'theDistance': 'The distance you want the blip to be visible for. Value gets clamped between 0 and 65535.'}, result='Returns true if successful, false otherwise.'), oop=FunctionOOP(class_name='blip', method_name='setVisibleDistance', field='visibleDistance'), url=FunctionUrl(url='/wiki/SetBlipVisibleDistance', name='setBlipVisibleDistance', category='Blip functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setBlipVisibleDistance', return_types=['bool'], arguments=[FunctionArgument(name='theBlip', argument_type='blip', default_value=None, optional=False), FunctionArgument(name='theDistance', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='This function will set the visible distance of a blip.', arguments={'theBlip': 'The blip whose visible distance you wish to get.', 'theDistance': 'The distance you want the blip to be visible for. Value gets clamped between 0 and 65535.'}, result='Returns true if successful, false otherwise.'), oop=FunctionOOP(class_name='blip', method_name='setVisibleDistance', field='visibleDistance'), url=FunctionUrl(url='/wiki/SetBlipVisibleDistance', name='setBlipVisibleDistance', category='Blip functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='fadeCamera', return_types=['bool'], arguments=[FunctionArgument(name='thePlayer', argument_type='player', default_value=None, optional=False), FunctionArgument(name='fadeIn', argument_type='bool', default_value=None, optional=False), FunctionArgument(name='timeToFade', argument_type='float', default_value='1.0', optional=False), FunctionArgument(name='red', argument_type='int', default_value='0', optional=False), FunctionArgument(name='green', argument_type='int', default_value='0', optional=False), FunctionArgument(name='blue', argument_type='int', default_value='0', optional=False)]), docs=FunctionDoc(description="This function will fade a player's camera to a color or back to normal over a specified time period. This will also affect the sound volume for the player (50% faded = 50% volume, full fade = no sound). For clientside scripts you can perform 2 fade ins or fade outs in a row, but for serverside scripts you must use one then the other.", arguments={'thePlayer': 'The player whose camera you wish to fade.', 'fadeIn': 'Should the camera be faded in or out? Pass true to fade the camera in, false to fade it out to a color.', 'timeToFade': 'The number of seconds it should take to fade.', 'red': 'The amount of red in the color that the camera fades out to (0 - 255). Not required for fading in.', 'green': 'The amount of green in the color that the camera fades out to (0 - 255). Not required for fading in.', 'blue': 'The amount of blue in the color that the camera fades out to (0 - 255). Not required for fading in.'}, result="Returns ''true'' if the camera was faded successfully, ''false'' if invalid arguments were passed to the function."), oop=None, url=FunctionUrl(url='/wiki/FadeCamera', name='fadeCamera', category='Camera functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='fadeCamera', return_types=['bool'], arguments=[FunctionArgument(name='fadeIn', argument_type='bool', default_value=None, optional=False), FunctionArgument(name='timeToFade', argument_type='float', default_value='1.0', optional=False), FunctionArgument(name='red', argument_type='int', default_value='0', optional=False), FunctionArgument(name='green', argument_type='int', default_value='0', optional=False), FunctionArgument(name='blue', argument_type='int', default_value='0', optional=False)]), docs=FunctionDoc(description="This function will fade a player's camera to a color or back to normal over a specified time period. This will also affect the sound volume for the player (50% faded = 50% volume, full fade = no sound). For clientside scripts you can perform 2 fade ins or fade outs in a row, but for serverside scripts you must use one then the other.", arguments={'fadeIn': 'Should the camera be faded in our out? Pass true to fade the camera in, false to fade it out to a color.', 'timeToFade': 'The number of seconds it should take to fade.', 'red': 'The amount of red in the color that the camera fades out to (0 - 255). Not required for fading in.', 'green': 'The amount of green in the color that the camera fades out to (0 - 255). Not required for fading in.', 'blue': 'The amount of blue in the color that the camera fades out to (0 - 255). Not required for fading in.'}, result="Returns ''true'' if the camera was faded successfully, ''false'' if invalid arguments were passed to the function."), oop=None, url=FunctionUrl(url='/wiki/FadeCamera', name='fadeCamera', category='Camera functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getCameraInterior', return_types=['int'], arguments=[FunctionArgument(name='thePlayer', argument_type='player', default_value=None, optional=False)]), docs=FunctionDoc(description='Returns the interior of the local camera (independent of the interior of the local player).', arguments={'thePlayer': ': The player whose camera interior you want to get.'}, result="Returns an ''integer'' indicating the camera's interior, ''false'' if the argument is invalid."), oop=FunctionOOP(class_name='player', method_name='getCameraInterior', field='cameraInterior'), url=FunctionUrl(url='/wiki/GetCameraInterior', name='getCameraInterior', category='Camera functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getCameraInterior', return_types=['int'], arguments=[]), docs=FunctionDoc(description='Returns the interior of the local camera (independent of the interior of the local player).', arguments={}, result="Returns an ''integer'' indicating the camera's interior, ''false'' if the argument is invalid."), oop=None, url=FunctionUrl(url='/wiki/GetCameraInterior', name='getCameraInterior', category='Camera functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getCameraMatrix', return_types=['float', 'float', 'float', 'float', 'float', 'float', 'float', 'float'], arguments=[FunctionArgument(name='thePlayer', argument_type='player', default_value=None, optional=False)]), docs=FunctionDoc(description='This function gets the position of the camera and the position of the point it is facing.', arguments={'thePlayer': 'The player whose camera matrix is to be returned.'}, result="This function returns 8 [[float|floats]] if the argument is valid (when applicable); the first three indicate the position of the camera, the next three indicate the position of the point it's facing, and the last two are the roll and field of view. Returns ''false'' if the argument is invalid."), oop=FunctionOOP(class_name='player', method_name='getCameraMatrix', field='cameraMatrix'), url=FunctionUrl(url='/wiki/GetCameraMatrix', name='getCameraMatrix', category='Camera functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getCameraMatrix', return_types=['float', 'float', 'float', 'float', 'float', 'float', 'float', 'float'], arguments=[]), docs=FunctionDoc(description='This function gets the position of the camera and the position of the point it is facing.', arguments={}, result="This function returns 8 [[float|floats]] if the argument is valid (when applicable); the first three indicate the position of the camera, the next three indicate the position of the point it's facing, and the last two are the roll and field of view. Returns ''false'' if the argument is invalid."), oop=FunctionOOP(class_name='Camera', method_name='getMatrix', field='matrix'), url=FunctionUrl(url='/wiki/GetCameraMatrix', name='getCameraMatrix', category='Camera functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getCameraTarget', return_types=['element'], arguments=[FunctionArgument(name='thePlayer', argument_type='player', default_value=None, optional=False)]), docs=FunctionDoc(description="This function returns an [[element]] that corresponds to the current target of the specified player's camera (i.e. what it is following). ", arguments={'thePlayer': 'The player whose camera you wish to receive the target of.'}, result="* Returns an [[element]] of the target if the function was successful, or ''false'' if bad arguments were specified\n{{New feature|3|1.0|\n* Returns ''false'' if the camera is in Fixed mode and has no target.\n}}"), oop=FunctionOOP(class_name='player', method_name='getCameraTarget', field='cameraTarget'), url=FunctionUrl(url='/wiki/GetCameraTarget', name='getCameraTarget', category='Camera functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getCameraTarget', return_types=['element'], arguments=[]), docs=FunctionDoc(description="This function returns an [[element]] that corresponds to the current target of the specified player's camera (i.e. what it is following). ", arguments={}, result="* Returns an [[element]] of the target if the function was successful, or ''false'' if bad arguments were specified\n{{New feature|3|1.0|\n* Returns ''false'' if the camera is in Fixed mode and has no target.\n}}"), oop=None, url=FunctionUrl(url='/wiki/GetCameraTarget', name='getCameraTarget', category='Camera functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setCameraInterior', return_types=['bool'], arguments=[FunctionArgument(name='thePlayer', argument_type='player', default_value=None, optional=False), FunctionArgument(name='interior', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='Sets the interior of the local camera. Only the interior of the camera is changed, the local player stays in the interior he was in.', arguments={'thePlayer': 'the player whose camera interior will be set.', 'interior': 'the interior to place the camera in.'}, result="Returns ''true'' if the camera's interior was changed successfully, ''false'' otherwise."), oop=FunctionOOP(class_name='player', method_name='setCameraInterior', field='cameraInterior'), url=FunctionUrl(url='/wiki/SetCameraInterior', name='setCameraInterior', category='Camera functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setCameraInterior', return_types=['bool'], arguments=[FunctionArgument(name='interior', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='Sets the interior of the local camera. Only the interior of the camera is changed, the local player stays in the interior he was in.', arguments={'interior': 'the interior to place the camera in.'}, result="Returns ''true'' if the camera's interior was changed successfully, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/SetCameraInterior', name='setCameraInterior', category='Camera functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setCameraMatrix', return_types=['bool'], arguments=[FunctionArgument(name='thePlayer', argument_type='player', default_value=None, optional=False), FunctionArgument(name='positionX', argument_type='float', default_value=None, optional=False), FunctionArgument(name='positionY', argument_type='float', default_value=None, optional=False), FunctionArgument(name='positionZ', argument_type='float', default_value=None, optional=False), FunctionArgument(name='lookAtX', argument_type='float', default_value=None, optional=True), FunctionArgument(name='lookAtY', argument_type='float', default_value=None, optional=True), FunctionArgument(name='lookAtZ', argument_type='float', default_value=None, optional=True), FunctionArgument(name='roll', argument_type='float', default_value='0', optional=True), FunctionArgument(name='fov', argument_type='float', default_value='70', optional=True)]), docs=FunctionDoc(description='This function sets the camera\'s position and direction. The first three arguments are the point at which the camera lies, the last three are the point the camera faces (or the point it "looks at").', arguments={'thePlayer': 'The player whose camera is to be changed.', 'positionX': 'The x coordinate of the cameras position.', 'positionY': 'The y coordinate of the cameras position.', 'positionZ': 'The z coordinate of the cameras position.', '{{New feature/item|3.0141|1.4.1|7005|Instead of six coordinates, or two vectors, a Matrix can be supplied.}}': '', 'lookAtX': 'The x coordinate of the point the camera faces.', 'lookAtY': 'The y coordinate of the point the camera faces.', 'lookAtZ': 'The z coordinate of the point the camera faces.', 'roll': 'The camera roll angle, -180 to 180. A value of 0 means the camera sits straight, positive values will turn it counter-clockwise and negative values will turn it clockwise. -180 or 180 means the camera is upside down.', 'fov': 'the field of view angle, 0.01 to 180. The higher this value is, the more you will be able to see what is to your sides.'}, result="Returns ''true'' if the arguments are valid, ''false'' otherwise."), oop=FunctionOOP(class_name='player', method_name='setCameraMatrix', field='cameraMatrix'), url=FunctionUrl(url='/wiki/SetCameraMatrix', name='setCameraMatrix', category='Camera functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setCameraMatrix', return_types=['bool'], arguments=[FunctionArgument(name='positionX', argument_type='float', default_value=None, optional=False), FunctionArgument(name='positionY', argument_type='float', default_value=None, optional=False), FunctionArgument(name='positionZ', argument_type='float', default_value=None, optional=False), FunctionArgument(name='lookAtX', argument_type='float', default_value=None, optional=True), FunctionArgument(name='lookAtY', argument_type='float', default_value=None, optional=True), FunctionArgument(name='lookAtZ', argument_type='float', default_value=None, optional=True), FunctionArgument(name='roll', argument_type='float', default_value='0', optional=True), FunctionArgument(name='fov', argument_type='float', default_value='70', optional=True)]), docs=FunctionDoc(description='This function sets the camera\'s position and direction. The first three arguments are the point at which the camera lies, the last three are the point the camera faces (or the point it "looks at").', arguments={'positionX': 'The x coordinate of the cameras position.', 'positionY': 'The y coordinate of the cameras position.', 'positionZ': 'The z coordinate of the cameras position.', '{{New feature/item|3.0141|1.4.1|7005|Instead of six coordinates, or two vectors, a Matrix can be supplied.}}': '', 'lookAtX': 'The x coordinate of the point the camera faces.', 'lookAtY': 'The y coordinate of the point the camera faces.', 'lookAtZ': 'The z coordinate of the point the camera faces.', 'roll': 'The camera roll angle, -180 to 180. A value of 0 means the camera sits straight, positive values will turn it counter-clockwise and negative values will turn it clockwise. -180 or 180 means the camera is upside down.', 'fov': 'the field of view angle, 0.01 to 180. The higher this value is, the more you will be able to see what is to your sides.'}, result="Returns ''true'' if the arguments are valid, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/SetCameraMatrix', name='setCameraMatrix', category='Camera functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setCameraTarget', return_types=['bool'], arguments=[FunctionArgument(name='thePlayer', argument_type='player', default_value=None, optional=False), FunctionArgument(name='target', argument_type='player', default_value='nil', optional=True)]), docs=FunctionDoc(description="This function allows you to set a player's camera to follow other elements instead. Currently supported element type is:\n*[[Player]]s", arguments={'thePlayer': 'The player whose camera you wish to modify.', 'target': 'The player who you want the camera to follow. If none is specified, the camera will target the player.'}, result="Returns ''true'' if the function was successful, ''false'' otherwise."), oop=FunctionOOP(class_name='player', method_name='setCameraTarget', field='cameraTarget'), url=FunctionUrl(url='/wiki/SetCameraTarget', name='setCameraTarget', category='Camera functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setCameraTarget', return_types=['bool'], arguments=[FunctionArgument(name='target', argument_type='player', default_value=None, optional=False)]), docs=FunctionDoc(description="This function allows you to set a player's camera to follow other elements instead. Currently supported element type is:\n*[[Player]]s", arguments={'target': 'The player who you want the local camera to follow.'}, result="Returns ''true'' if the function was successful, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/SetCameraTarget', name='setCameraTarget', category='Camera functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='addPedClothes', return_types=['bool'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False), FunctionArgument(name='clothesTexture', argument_type='string', default_value=None, optional=False), FunctionArgument(name='clothesModel', argument_type='string', default_value=None, optional=False), FunctionArgument(name='clothesType', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is used to set the current clothes on a [[ped]]. ', arguments={'thePed': ': The ped whose clothes you want to change.', 'clothesTexture': ': A string determining the clothes texture that will be added. See the CJ Clothes|clothes catalog.', 'clothesModel': ': A string determining the clothes model that will be added. See the CJ Clothes|clothes catalog.', 'clothesType': ': A integer representing the clothes slot/type the clothes should be added to. See the CJ Clothes|clothes catalog.'}, result="This function returns ''true'' if the clothes were successfully added to the ped, ''false'' otherwise."), oop=FunctionOOP(class_name='ped', method_name='addClothes', field=None), url=FunctionUrl(url='/wiki/AddPedClothes', name='addPedClothes', category='Clothes and body functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='addPedClothes', return_types=['bool'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False), FunctionArgument(name='clothesTexture', argument_type='string', default_value=None, optional=False), FunctionArgument(name='clothesModel', argument_type='string', default_value=None, optional=False), FunctionArgument(name='clothesType', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is used to set the current clothes on a [[ped]]. ', arguments={'thePed': ': The ped whose clothes you want to change.', 'clothesTexture': ': A string determining the clothes texture that will be added. See the CJ Clothes|clothes catalog.', 'clothesModel': ': A string determining the clothes model that will be added. See the CJ Clothes|clothes catalog.', 'clothesType': ': A integer representing the clothes slot/type the clothes should be added to. See the CJ Clothes|clothes catalog.'}, result="This function returns ''true'' if the clothes were successfully added to the ped, ''false'' otherwise."), oop=FunctionOOP(class_name='ped', method_name='addClothes', field=None), url=FunctionUrl(url='/wiki/AddPedClothes', name='addPedClothes', category='Clothes and body functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getBodyPartName', return_types=['string'], arguments=[FunctionArgument(name='bodyPartID', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is used to get the name of a body part on a player.', arguments={'bodyPartID': ': An integer representing the body part ID you wish to retrieve the name of.\n{{BodyParts}}'}, result="This function returns a string containing the body part name if the ID is valid, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/GetBodyPartName', name='getBodyPartName', category='Clothes and body functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getBodyPartName', return_types=['string'], arguments=[FunctionArgument(name='bodyPartID', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is used to get the name of a body part on a player.', arguments={'bodyPartID': ': An integer representing the body part ID you wish to retrieve the name of.\n{{BodyParts}}'}, result="This function returns a string containing the body part name if the ID is valid, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/GetBodyPartName', name='getBodyPartName', category='Clothes and body functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getClothesByTypeIndex', return_types=['string', 'string'], arguments=[FunctionArgument(name='clothesType', argument_type='int', default_value=None, optional=False), FunctionArgument(name='clothesIndex', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is used to get the texture and model of clothes by the clothes type and index.\n(Scans through the list of clothes for the specific type).', arguments={'clothesType': ': An integer representing the clothes slot/type to scan through.\n{{Clothes Textures}}', 'clothesIndex': ': An integer representing the index (0 based) set of clothes in the list you wish to retrieve. Each type has a different number of valid indexes.'}, result="This function returns 2 strings, a texture and model respectively, ''false'' if invalid arguments were passed to the function."), oop=None, url=FunctionUrl(url='/wiki/GetClothesByTypeIndex', name='getClothesByTypeIndex', category='Clothes and body functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getClothesByTypeIndex', return_types=['string', 'string'], arguments=[FunctionArgument(name='clothesType', argument_type='int', default_value=None, optional=False), FunctionArgument(name='clothesIndex', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is used to get the texture and model of clothes by the clothes type and index.\n(Scans through the list of clothes for the specific type).', arguments={'clothesType': ': An integer representing the clothes slot/type to scan through.\n{{Clothes Textures}}', 'clothesIndex': ': An integer representing the index (0 based) set of clothes in the list you wish to retrieve. Each type has a different number of valid indexes.'}, result="This function returns 2 strings, a texture and model respectively, ''false'' if invalid arguments were passed to the function."), oop=None, url=FunctionUrl(url='/wiki/GetClothesByTypeIndex', name='getClothesByTypeIndex', category='Clothes and body functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getClothesTypeName', return_types=['string'], arguments=[FunctionArgument(name='clothesType', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is used to get the name of a certain clothes type.', arguments={'clothesType': ': An integer determining the type of clothes you want to get the clothes of.\n{{Clothes Textures}}'}, result="This function returns a string (the name of the clothes type) if found, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/GetClothesTypeName', name='getClothesTypeName', category='Clothes and body functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getClothesTypeName', return_types=['string'], arguments=[FunctionArgument(name='clothesType', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is used to get the name of a certain clothes type.', arguments={'clothesType': ': An integer determining the type of clothes you want to get the clothes of.\n{{Clothes Textures}}'}, result="This function returns a string (the name of the clothes type) if found, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/GetClothesTypeName', name='getClothesTypeName', category='Clothes and body functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getPedClothes', return_types=['string,', 'string'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False), FunctionArgument(name='clothesType', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is used to get the current clothes texture and model of a certain type on a [[ped]].', arguments={'thePed': 'The ped whose clothes you want to retrieve.', 'clothesType': 'The type/slot of clothing you want to get.\n{{Clothes Textures}}'}, result="This function returns 2 [[string|strings]], the clothes texture and model. The first return value will be ''false'' if this player's clothes type is empty or an invalid player was specified."), oop=FunctionOOP(class_name='ped', method_name='getClothes', field=None), url=FunctionUrl(url='/wiki/GetPedClothes', name='getPedClothes', category='Clothes and body functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getPedClothes', return_types=['string,', 'string'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False), FunctionArgument(name='clothesType', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is used to get the current clothes texture and model of a certain type on a [[ped]].', arguments={'thePed': 'The ped whose clothes you want to retrieve.', 'clothesType': 'The type/slot of clothing you want to get.\n{{Clothes Textures}}'}, result="This function returns 2 [[string|strings]], the clothes texture and model. The first return value will be ''false'' if this player's clothes type is empty or an invalid player was specified."), oop=FunctionOOP(class_name='ped', method_name='getClothes', field=None), url=FunctionUrl(url='/wiki/GetPedClothes', name='getPedClothes', category='Clothes and body functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getTypeIndexFromClothes', return_types=['int', 'int'], arguments=[FunctionArgument(name='clothesTexture', argument_type='string', default_value=None, optional=False), FunctionArgument(name='clothesModel', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is used to get the clothes type and index from the texture and model.\n(Scans through the list of clothes for the specific type).', arguments={'clothesTexture': ': A string determining the clothes texture that you wish to retrieve the type and index from. See the CJ Clothes|clothes catalog.', 'clothesModel': ': A string determining the corresponding clothes model that you wish to retrieve the type and index from. See the CJ Clothes|clothes catalog.'}, result="This function returns two integers, type and index respectively, ''false'' if invalid arguments were passed to the function."), oop=None, url=FunctionUrl(url='/wiki/GetTypeIndexFromClothes', name='getTypeIndexFromClothes', category='Clothes and body functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getTypeIndexFromClothes', return_types=['int', 'int'], arguments=[FunctionArgument(name='clothesTexture', argument_type='string', default_value=None, optional=False), FunctionArgument(name='clothesModel', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is used to get the clothes type and index from the texture and model.\n(Scans through the list of clothes for the specific type).', arguments={'clothesTexture': ': A string determining the clothes texture that you wish to retrieve the type and index from. See the CJ Clothes|clothes catalog.', 'clothesModel': ': A string determining the corresponding clothes model that you wish to retrieve the type and index from. See the CJ Clothes|clothes catalog.'}, result="This function returns two integers, type and index respectively, ''false'' if invalid arguments were passed to the function."), oop=None, url=FunctionUrl(url='/wiki/GetTypeIndexFromClothes', name='getTypeIndexFromClothes', category='Clothes and body functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='removePedClothes', return_types=['bool'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False), FunctionArgument(name='clothesType', argument_type='int', default_value=None, optional=False), FunctionArgument(name='clothesTexture', argument_type='string', default_value=None, optional=False), FunctionArgument(name='clothesModel', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description="This function is used to remove the current clothes of a certain type on a [[ped]]. It will remove them if the clothesTexture and clothesModel aren't specified, or if they match the current clothes on that slot.", arguments={'thePed': ': The ped you want to remove clothes from.', 'clothesType': ': the clothes slot/type to remove. See the CJ Clothes|clothes catalog.', 'clothesTexture': ': (Server only) A string determining the clothes texture that will be removed. See the CJ Clothes|clothes catalog.', 'clothesModel': ': (Server only) A string determining the clothes model that will be removed. See the CJ Clothes|clothes catalog.'}, result="This function returns ''true'' if the clothes were successfully removed from the ped, ''false'' otherwise."), oop=FunctionOOP(class_name='ped', method_name="removeClothes}}\n\n===Required Arguments===\n*'''thePed''': The [[ped]] you want to remove clothes from.\n*'''clothesType''': the clothes slot/type to remove. See the [[CJ Clothes", field="clothes catalog]].\n\n===Optional Arguments===\n*'''clothesTexture''': (Server only) A string determining the clothes texture that will be removed. See the [[CJ Clothes"), url=FunctionUrl(url='/wiki/RemovePedClothes', name='removePedClothes', category='Clothes and body functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='removePedClothes', return_types=['bool'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False), FunctionArgument(name='clothesType', argument_type='int', default_value=None, optional=False), FunctionArgument(name='clothesTexture', argument_type='string', default_value=None, optional=False), FunctionArgument(name='clothesModel', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description="This function is used to remove the current clothes of a certain type on a [[ped]]. It will remove them if the clothesTexture and clothesModel aren't specified, or if they match the current clothes on that slot.", arguments={'thePed': ': The ped you want to remove clothes from.', 'clothesType': ': the clothes slot/type to remove. See the CJ Clothes|clothes catalog.', 'clothesTexture': ': (Server only) A string determining the clothes texture that will be removed. See the CJ Clothes|clothes catalog.', 'clothesModel': ': (Server only) A string determining the clothes model that will be removed. See the CJ Clothes|clothes catalog.'}, result="This function returns ''true'' if the clothes were successfully removed from the ped, ''false'' otherwise."), oop=FunctionOOP(class_name='ped', method_name="removeClothes}}\n\n===Required Arguments===\n*'''thePed''': The [[ped]] you want to remove clothes from.\n*'''clothesType''': the clothes slot/type to remove. See the [[CJ Clothes", field="clothes catalog]].\n\n===Optional Arguments===\n*'''clothesTexture''': (Server only) A string determining the clothes texture that will be removed. See the [[CJ Clothes"), url=FunctionUrl(url='/wiki/RemovePedClothes', name='removePedClothes', category='Clothes and body functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='addColPolygonPoint', return_types=['bool'], arguments=[FunctionArgument(name='shape', argument_type='colshape', default_value=None, optional=False), FunctionArgument(name='fX', argument_type='float', default_value=None, optional=False), FunctionArgument(name='fY', argument_type='float', default_value=None, optional=False), FunctionArgument(name='index', argument_type='int', default_value='0', optional=True)]), docs=FunctionDoc(description='', arguments={'shape': 'The colshape polygon you wish add a point to.', 'fX': 'The X position of the new bound point.', 'fY': 'The Y position of the new bound point.\n{{OptionalArg}}', 'index': 'The index where the new point will be inserted in the polygon. The points are indexed in order, with 1 being the first bound point. Passing 0 will insert the point as the last one in the polygon.'}, result="Returns ''true'' if the polygon was changed, ''false'' if invalid arguments were passed."), oop=FunctionOOP(class_name='colshape', method_name='addPoint', field=None), url=FunctionUrl(url='/wiki/AddColPolygonPoint', name='addColPolygonPoint', category='Collision shape functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='addColPolygonPoint', return_types=['bool'], arguments=[FunctionArgument(name='shape', argument_type='colshape', default_value=None, optional=False), FunctionArgument(name='fX', argument_type='float', default_value=None, optional=False), FunctionArgument(name='fY', argument_type='float', default_value=None, optional=False), FunctionArgument(name='index', argument_type='int', default_value='0', optional=True)]), docs=FunctionDoc(description='', arguments={'shape': 'The colshape polygon you wish add a point to.', 'fX': 'The X position of the new bound point.', 'fY': 'The Y position of the new bound point.\n{{OptionalArg}}', 'index': 'The index where the new point will be inserted in the polygon. The points are indexed in order, with 1 being the first bound point. Passing 0 will insert the point as the last one in the polygon.'}, result="Returns ''true'' if the polygon was changed, ''false'' if invalid arguments were passed."), oop=FunctionOOP(class_name='colshape', method_name='addPoint', field=None), url=FunctionUrl(url='/wiki/AddColPolygonPoint', name='addColPolygonPoint', category='Collision shape functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='createColCircle', return_types=['colshape'], arguments=[FunctionArgument(name='fX', argument_type='float', default_value=None, optional=False), FunctionArgument(name='fY', argument_type='float', default_value=None, optional=False), FunctionArgument(name='radius', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description="This function creates a collision circle. This is a shape that has a position and a radius and infinite height that you can use to detect a player's presence. Events will be triggered when a player enters or leaves it.", arguments={'fX': 'The collision circles center points X axis position', 'fY': 'The collision circles center points Y axis position', 'radius': 'The radius of the collision circle. Can not be smaller than 0.1'}, result="Returns a [[colshape]] element if successful, ''false'' if invalid arguments were passed to the function."), oop=None, url=FunctionUrl(url='/wiki/CreateColCircle', name='createColCircle', category='Collision shape functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='createColCircle', return_types=['colshape'], arguments=[FunctionArgument(name='fX', argument_type='float', default_value=None, optional=False), FunctionArgument(name='fY', argument_type='float', default_value=None, optional=False), FunctionArgument(name='radius', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description="This function creates a collision circle. This is a shape that has a position and a radius and infinite height that you can use to detect a player's presence. Events will be triggered when a player enters or leaves it.", arguments={'fX': 'The collision circles center points X axis position', 'fY': 'The collision circles center points Y axis position', 'radius': 'The radius of the collision circle. Can not be smaller than 0.1'}, result="Returns a [[colshape]] element if successful, ''false'' if invalid arguments were passed to the function."), oop=None, url=FunctionUrl(url='/wiki/CreateColCircle', name='createColCircle', category='Collision shape functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='createColCuboid', return_types=['colshape'], arguments=[FunctionArgument(name='fX', argument_type='float', default_value=None, optional=False), FunctionArgument(name='fY', argument_type='float', default_value=None, optional=False), FunctionArgument(name='fZ', argument_type='float', default_value=None, optional=False), FunctionArgument(name='fWidth', argument_type='float', default_value=None, optional=False), FunctionArgument(name='fDepth', argument_type='float', default_value=None, optional=False), FunctionArgument(name='fHeight', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='This function creates a collision cuboid. This is a shape that has a position, width, depth and height. See [http://en.wikipedia.org/wiki/Cuboid Wikipedia] for a definition of a cuboid. The XYZ of the col starts at the southwest bottom corner of the shape.', arguments={'fX': 'The X position of the collision cuboids western side', 'fY': 'The Y position of the collision cuboids southern side', 'fZ': 'The Z position of the collision cuboids lowest side', 'fWidth': 'The collision cuboids width', 'fDepth': 'The collision cuboids depth', 'fHeight': 'The collision cuboids height'}, result="Returns a [[colshape]] element if successful, ''false'' if invalid arguments were passed to the function."), oop=None, url=FunctionUrl(url='/wiki/CreateColCuboid', name='createColCuboid', category='Collision shape functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='createColCuboid', return_types=['colshape'], arguments=[FunctionArgument(name='fX', argument_type='float', default_value=None, optional=False), FunctionArgument(name='fY', argument_type='float', default_value=None, optional=False), FunctionArgument(name='fZ', argument_type='float', default_value=None, optional=False), FunctionArgument(name='fWidth', argument_type='float', default_value=None, optional=False), FunctionArgument(name='fDepth', argument_type='float', default_value=None, optional=False), FunctionArgument(name='fHeight', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='This function creates a collision cuboid. This is a shape that has a position, width, depth and height. See [http://en.wikipedia.org/wiki/Cuboid Wikipedia] for a definition of a cuboid. The XYZ of the col starts at the southwest bottom corner of the shape.', arguments={'fX': 'The X position of the collision cuboids western side', 'fY': 'The Y position of the collision cuboids southern side', 'fZ': 'The Z position of the collision cuboids lowest side', 'fWidth': 'The collision cuboids width', 'fDepth': 'The collision cuboids depth', 'fHeight': 'The collision cuboids height'}, result="Returns a [[colshape]] element if successful, ''false'' if invalid arguments were passed to the function."), oop=None, url=FunctionUrl(url='/wiki/CreateColCuboid', name='createColCuboid', category='Collision shape functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='createColPolygon', return_types=['colshape'], arguments=[FunctionArgument(name='fCenterX', argument_type='float', default_value=None, optional=False), FunctionArgument(name='fCenterY', argument_type='float', default_value=None, optional=False), FunctionArgument(name='fX1', argument_type='float', default_value=None, optional=False), FunctionArgument(name='fY1', argument_type='float', default_value=None, optional=False), FunctionArgument(name='fX2', argument_type='float', default_value=None, optional=False), FunctionArgument(name='fY2', argument_type='float', default_value=None, optional=False), FunctionArgument(name='fX3', argument_type='float', default_value=None, optional=False), FunctionArgument(name='fY3', argument_type='float', default_value=None, optional=False), FunctionArgument(name='...args', argument_type='any[]', default_value=None, optional=True)]), docs=FunctionDoc(description="This function creates a collision polygon. See [http://en.wikipedia.org/wiki/Polygon Wikipedia] for a definition of a polygon. The first set of X Y of this shape is not part of the colshape bounds, so can set anywhere in the game world, however for performance, place it as close to the centre of the polygon as you can. It should be noted this shape is '''2D'''. There should be at least 3 bound points set. ", arguments={'fCenterX': 'The X position of the collision polygons position - the position that will be returned from getElementPosition.', 'fCenterY': 'The Y position of the collision polygons position - the position that will be returned from getElementPosition.', 'fX1': 'The 1st X position of the collision polygons bound point', 'fY1': 'The 1st Y position of the collision polygons bound point', 'fX2': 'The 2nd X position of the collision polygons bound point', 'fY2': 'The 2nd Y position of the collision polygons bound point', 'fX3': 'The 3rd X position of the collision polygons bound point', 'fY3': 'The 3rd Y position of the collision polygons bound point', '... ': 'From the 3rd position you can have as many points as you require to create the colshape.'}, result="Returns a [[colshape]] element if successful, ''false'' if invalid arguments were passed to the function."), oop=None, url=FunctionUrl(url='/wiki/CreateColPolygon', name='createColPolygon', category='Collision shape functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='createColPolygon', return_types=['colshape'], arguments=[FunctionArgument(name='fCenterX', argument_type='float', default_value=None, optional=False), FunctionArgument(name='fCenterY', argument_type='float', default_value=None, optional=False), FunctionArgument(name='fX1', argument_type='float', default_value=None, optional=False), FunctionArgument(name='fY1', argument_type='float', default_value=None, optional=False), FunctionArgument(name='fX2', argument_type='float', default_value=None, optional=False), FunctionArgument(name='fY2', argument_type='float', default_value=None, optional=False), FunctionArgument(name='fX3', argument_type='float', default_value=None, optional=False), FunctionArgument(name='fY3', argument_type='float', default_value=None, optional=False), FunctionArgument(name='...args', argument_type='any[]', default_value=None, optional=True)]), docs=FunctionDoc(description="This function creates a collision polygon. See [http://en.wikipedia.org/wiki/Polygon Wikipedia] for a definition of a polygon. The first set of X Y of this shape is not part of the colshape bounds, so can set anywhere in the game world, however for performance, place it as close to the centre of the polygon as you can. It should be noted this shape is '''2D'''. There should be at least 3 bound points set. ", arguments={'fCenterX': 'The X position of the collision polygons position - the position that will be returned from getElementPosition.', 'fCenterY': 'The Y position of the collision polygons position - the position that will be returned from getElementPosition.', 'fX1': 'The 1st X position of the collision polygons bound point', 'fY1': 'The 1st Y position of the collision polygons bound point', 'fX2': 'The 2nd X position of the collision polygons bound point', 'fY2': 'The 2nd Y position of the collision polygons bound point', 'fX3': 'The 3rd X position of the collision polygons bound point', 'fY3': 'The 3rd Y position of the collision polygons bound point', '... ': 'From the 3rd position you can have as many points as you require to create the colshape.'}, result="Returns a [[colshape]] element if successful, ''false'' if invalid arguments were passed to the function."), oop=None, url=FunctionUrl(url='/wiki/CreateColPolygon', name='createColPolygon', category='Collision shape functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='createColRectangle', return_types=['colshape'], arguments=[FunctionArgument(name='fX', argument_type='float', default_value=None, optional=False), FunctionArgument(name='fY', argument_type='float', default_value=None, optional=False), FunctionArgument(name='fWidth', argument_type='float', default_value=None, optional=False), FunctionArgument(name='fHeight', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='This function creates a collision rectangle. This is a shape that has a position and a width and a depth. See [http://en.wikipedia.org/wiki/Rectangle Rectangle] for a definition of a rectangle. XY marks on the south west corner of the colshape.', arguments={'fX': 'The X position of the collision rectangles west side', 'fY': 'The Y position of the collision rectangles south side', 'fWidth': 'The collision rectangles width', 'fHeight': 'The collision rectangles height'}, result="Returns a [[colshape]] element if successful, ''false'' if invalid arguments were passed to the function."), oop=None, url=FunctionUrl(url='/wiki/CreateColRectangle', name='createColRectangle', category='Collision shape functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='createColRectangle', return_types=['colshape'], arguments=[FunctionArgument(name='fX', argument_type='float', default_value=None, optional=False), FunctionArgument(name='fY', argument_type='float', default_value=None, optional=False), FunctionArgument(name='fWidth', argument_type='float', default_value=None, optional=False), FunctionArgument(name='fHeight', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='This function creates a collision rectangle. This is a shape that has a position and a width and a depth. See [http://en.wikipedia.org/wiki/Rectangle Rectangle] for a definition of a rectangle. XY marks on the south west corner of the colshape.', arguments={'fX': 'The X position of the collision rectangles west side', 'fY': 'The Y position of the collision rectangles south side', 'fWidth': 'The collision rectangles width', 'fHeight': 'The collision rectangles height'}, result="Returns a [[colshape]] element if successful, ''false'' if invalid arguments were passed to the function."), oop=None, url=FunctionUrl(url='/wiki/CreateColRectangle', name='createColRectangle', category='Collision shape functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='createColSphere', return_types=['colshape'], arguments=[FunctionArgument(name='fX', argument_type='float', default_value=None, optional=False), FunctionArgument(name='fY', argument_type='float', default_value=None, optional=False), FunctionArgument(name='fZ', argument_type='float', default_value=None, optional=False), FunctionArgument(name='fRadius', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='This function creates a collision sphere. This is a shape that has a position and a radius. See [http://en.wikipedia.org/wiki/Sphere Wikipedia] for a definition of a sphere.', arguments={'fX': 'The collision spheres center points X axis position', 'fY': 'The collision spheres center points Y axis position', 'fZ': 'The collision spheres center points Z axis position', 'fRadius': 'The collision spheres radius'}, result="Returns a [[colshape]] element if successful, ''false'' if invalid arguments were passed to the function."), oop=None, url=FunctionUrl(url='/wiki/CreateColSphere', name='createColSphere', category='Collision shape functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='createColSphere', return_types=['colshape'], arguments=[FunctionArgument(name='fX', argument_type='float', default_value=None, optional=False), FunctionArgument(name='fY', argument_type='float', default_value=None, optional=False), FunctionArgument(name='fZ', argument_type='float', default_value=None, optional=False), FunctionArgument(name='fRadius', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='This function creates a collision sphere. This is a shape that has a position and a radius. See [http://en.wikipedia.org/wiki/Sphere Wikipedia] for a definition of a sphere.', arguments={'fX': 'The collision spheres center points X axis position', 'fY': 'The collision spheres center points Y axis position', 'fZ': 'The collision spheres center points Z axis position', 'fRadius': 'The collision spheres radius'}, result="Returns a [[colshape]] element if successful, ''false'' if invalid arguments were passed to the function."), oop=None, url=FunctionUrl(url='/wiki/CreateColSphere', name='createColSphere', category='Collision shape functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='createColTube', return_types=['colshape'], arguments=[FunctionArgument(name='fX', argument_type='float', default_value=None, optional=False), FunctionArgument(name='fY', argument_type='float', default_value=None, optional=False), FunctionArgument(name='fZ', argument_type='float', default_value=None, optional=False), FunctionArgument(name='fRadius', argument_type='float', default_value=None, optional=False), FunctionArgument(name='fHeight', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='This function creates a collision tube. This is a shape that has a position and a 2D (X/Y) radius and a height. See [http://en.wikipedia.org/wiki/Cylinder_(geometry) Cylinder] for a definition of a tube. A tube is similar to a colcircle, except that it has a limited height, this means you can limit the distance above the position defined by (fX, fY, fZ) that the collision is detected.', arguments={'fX': 'The position of the base of the tubes center on the X axis', 'fY': 'The position of the base of the tubes center on the Y axis', 'fZ': 'The position of the base of the tubes center on the Z axis', 'fRadius': 'The collision tubes radius', 'fHeight': 'The collision tubes height'}, result="Returns a [[colshape]] element if successful, ''false'' if invalid arguments were passed to the function."), oop=None, url=FunctionUrl(url='/wiki/CreateColTube', name='createColTube', category='Collision shape functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='createColTube', return_types=['colshape'], arguments=[FunctionArgument(name='fX', argument_type='float', default_value=None, optional=False), FunctionArgument(name='fY', argument_type='float', default_value=None, optional=False), FunctionArgument(name='fZ', argument_type='float', default_value=None, optional=False), FunctionArgument(name='fRadius', argument_type='float', default_value=None, optional=False), FunctionArgument(name='fHeight', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='This function creates a collision tube. This is a shape that has a position and a 2D (X/Y) radius and a height. See [http://en.wikipedia.org/wiki/Cylinder_(geometry) Cylinder] for a definition of a tube. A tube is similar to a colcircle, except that it has a limited height, this means you can limit the distance above the position defined by (fX, fY, fZ) that the collision is detected.', arguments={'fX': 'The position of the base of the tubes center on the X axis', 'fY': 'The position of the base of the tubes center on the Y axis', 'fZ': 'The position of the base of the tubes center on the Z axis', 'fRadius': 'The collision tubes radius', 'fHeight': 'The collision tubes height'}, result="Returns a [[colshape]] element if successful, ''false'' if invalid arguments were passed to the function."), oop=None, url=FunctionUrl(url='/wiki/CreateColTube', name='createColTube', category='Collision shape functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getColPolygonHeight', return_types=['float,', 'float'], arguments=[FunctionArgument(name='shape', argument_type='colshape', default_value=None, optional=False)]), docs=FunctionDoc(description='By default, a colshape polygon is infinitely tall.}}', arguments={'shape': 'The colshape polygon'}, result="Returns two [[float]]s, indicating the floor and ceiling of the colshape height, ''false'' if invalid arguments were passed."), oop=FunctionOOP(class_name='colshape', method_name='getHeight', field="}}\n\n===Required Arguments=== \n*'''shape:''' The [[colshape]] polygon\n\n===Returns===\nReturns two [[float]]s, indicating the floor and ceiling of the colshape height, ''false'' if invalid arguments were passed.\n\n"), url=FunctionUrl(url='/wiki/GetColPolygonHeight', name='getColPolygonHeight', category='Collision shape functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getColPolygonHeight', return_types=['float,', 'float'], arguments=[FunctionArgument(name='shape', argument_type='colshape', default_value=None, optional=False)]), docs=FunctionDoc(description='By default, a colshape polygon is infinitely tall.}}', arguments={'shape': 'The colshape polygon'}, result="Returns two [[float]]s, indicating the floor and ceiling of the colshape height, ''false'' if invalid arguments were passed."), oop=FunctionOOP(class_name='colshape', method_name='getHeight', field="}}\n\n===Required Arguments=== \n*'''shape:''' The [[colshape]] polygon\n\n===Returns===\nReturns two [[float]]s, indicating the floor and ceiling of the colshape height, ''false'' if invalid arguments were passed.\n\n"), url=FunctionUrl(url='/wiki/GetColPolygonHeight', name='getColPolygonHeight', category='Collision shape functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getColPolygonPoints', return_types=['table'], arguments=[FunctionArgument(name='shape', argument_type='colshape', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'shape': 'The colshape polygon you wish to get the points of.'}, result="Returns a [[table]] of coordinates, each coordinate being a [[table]] containing the x and y position of a bound point, ''false'' if invalid arguments were passed."), oop=None, url=FunctionUrl(url='/wiki/GetColPolygonPoints', name='getColPolygonPoints', category='Collision shape functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getColPolygonPoints', return_types=['table'], arguments=[FunctionArgument(name='shape', argument_type='colshape', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'shape': 'The colshape polygon you wish to get the points of.'}, result="Returns a [[table]] of coordinates, each coordinate being a [[table]] containing the x and y position of a bound point, ''false'' if invalid arguments were passed."), oop=None, url=FunctionUrl(url='/wiki/GetColPolygonPoints', name='getColPolygonPoints', category='Collision shape functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getColPolygonPointPosition', return_types=['float,', 'float'], arguments=[FunctionArgument(name='shape', argument_type='colshape', default_value=None, optional=False), FunctionArgument(name='index', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'shape': 'The colshape polygon you wish to change.', 'index': 'The index of the point you wish to retrieve. The points are indexed in order, with 1 being the first bound point.'}, result="Returns two [[float]]s, x and y, indicating the position of the point, ''false'' if invalid arguments were passed."), oop=FunctionOOP(class_name='colshape', method_name='getPointPosition', field=None), url=FunctionUrl(url='/wiki/GetColPolygonPointPosition', name='getColPolygonPointPosition', category='Collision shape functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getColPolygonPointPosition', return_types=['float,', 'float'], arguments=[FunctionArgument(name='shape', argument_type='colshape', default_value=None, optional=False), FunctionArgument(name='index', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'shape': 'The colshape polygon you wish to change.', 'index': 'The index of the point you wish to retrieve. The points are indexed in order, with 1 being the first bound point.'}, result="Returns two [[float]]s, x and y, indicating the position of the point, ''false'' if invalid arguments were passed."), oop=FunctionOOP(class_name='colshape', method_name='getPointPosition', field=None), url=FunctionUrl(url='/wiki/GetColPolygonPointPosition', name='getColPolygonPointPosition', category='Collision shape functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getColShapeType', return_types=['int'], arguments=[FunctionArgument(name='shape', argument_type='colshape', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'shape': 'The colshape you wish to get the type of.'}, result="Returns ''false'' if invalid arguments were passed, or an [[int]]eger of the type of the colshape, which include:\n*'''0:''' circle\n*'''1:''' cuboid\n*'''2:''' sphere\n*'''3:''' rectangle\n*'''4:''' polygon\n*'''5:''' tube"), oop=FunctionOOP(class_name='colshape', method_name='getShapeType', field='shapeType'), url=FunctionUrl(url='/wiki/GetColShapeType', name='getColShapeType', category='Collision shape functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getColShapeType', return_types=['int'], arguments=[FunctionArgument(name='shape', argument_type='colshape', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'shape': 'The colshape you wish to get the type of.'}, result="Returns ''false'' if invalid arguments were passed, or an [[int]]eger of the type of the colshape, which include:\n*'''0:''' circle\n*'''1:''' cuboid\n*'''2:''' sphere\n*'''3:''' rectangle\n*'''4:''' polygon\n*'''5:''' tube"), oop=FunctionOOP(class_name='colshape', method_name='getShapeType', field='shapeType'), url=FunctionUrl(url='/wiki/GetColShapeType', name='getColShapeType', category='Collision shape functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getColShapeRadius', return_types=['float'], arguments=[FunctionArgument(name='shape', argument_type='colshape', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'shape': 'The colshape you wish to get the radius of.'}, result="Returns a [[float]] containing the radius of the colshape, ''false'' if an invalid colshape was passed."), oop=FunctionOOP(class_name='colshape', method_name='getRadius', field=None), url=FunctionUrl(url='/wiki/GetColShapeRadius', name='getColShapeRadius', category='Collision shape functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getColShapeRadius', return_types=['float'], arguments=[FunctionArgument(name='shape', argument_type='colshape', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'shape': 'The colshape you wish to get the radius of.'}, result="Returns a [[float]] containing the radius of the colshape, ''false'' if an invalid colshape was passed."), oop=FunctionOOP(class_name='colshape', method_name='getRadius', field=None), url=FunctionUrl(url='/wiki/GetColShapeRadius', name='getColShapeRadius', category='Collision shape functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getColShapeSize', return_types=['float,', 'float,', 'float'], arguments=[FunctionArgument(name='shape', argument_type='colshape', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'shape': 'The colshape you wish to get the size of.'}, result="Returns up to 3 [[float]]s depending on the colshape type (see below), ''false'' if invalid arguments were passed.\n*''cuboid:'' width, depth, height.\n*''rectangle:'' width, height.\n*''tube:'' height."), oop=FunctionOOP(class_name='colshape', method_name='getSize', field=None), url=FunctionUrl(url='/wiki/GetColShapeSize', name='getColShapeSize', category='Collision shape functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getColShapeSize', return_types=['float,', 'float,', 'float'], arguments=[FunctionArgument(name='shape', argument_type='colshape', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'shape': 'The colshape you wish to get the size of.'}, result="Returns up to 3 [[float]]s depending on the colshape type (see below), ''false'' if invalid arguments were passed.\n*''cuboid:'' width, depth, height.\n*''rectangle:'' width, height.\n*''tube:'' height."), oop=FunctionOOP(class_name='colshape', method_name='getSize', field=None), url=FunctionUrl(url='/wiki/GetColShapeSize', name='getColShapeSize', category='Collision shape functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getElementColShape', return_types=['colshape'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='Some elements have an associated colshape, for example [[Marker]] and [[Pickup]]. This function is used to get the associated colshape.', arguments={'theElement': 'The element you want to get the colshape of'}, result="Returns ''colshape'' of the element, ''false'' if not or an invalid argument was passed to the function."), oop=FunctionOOP(class_name='element', method_name='getColShape', field='colShape'), url=FunctionUrl(url='/wiki/GetElementColShape', name='getElementColShape', category='Collision shape functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getElementColShape', return_types=['colshape'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='Some elements have an associated colshape, for example [[Marker]] and [[Pickup]]. This function is used to get the associated colshape.', arguments={'theElement': 'The element you want to get the colshape of'}, result="Returns ''colshape'' of the element, ''false'' if not or an invalid argument was passed to the function."), oop=FunctionOOP(class_name='element', method_name='getColShape', field='colShape'), url=FunctionUrl(url='/wiki/GetElementColShape', name='getElementColShape', category='Collision shape functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getElementsWithinColShape', return_types=['table'], arguments=[FunctionArgument(name='theShape', argument_type='colshape', default_value=None, optional=False), FunctionArgument(name='elemType', argument_type='string', default_value='nil', optional=True)]), docs=FunctionDoc(description="This function is used to retrieve a list of all elements in a colshape, of the specified type.\n* For legacy reasons, a colshape created on the client does not collide with elements already existing at that location until they first move\n* This function doesn't verify whether elements are in the same dimension and interior, additional checks could be implemented manually if they are needed\n}}", arguments={'theShape': 'The colshape you want to get the elements from.', 'elemType': 'The type of element you want a list of. This can be any element type, the common ones being:', '"player"': 'A player connected to the server', '"ped"': 'A ped', '"vehicle"': 'A vehicle', '"object"': 'An object', '"pickup"': 'A pickup', '"marker"': 'A marker', '"spawnpoint"': 'A spawnpoint', '"remoteclient"': 'A remote client connected to the server', '"console"': 'The server Console-->'}, result="Returns a [[table]] containing all the elements inside the colshape, of the specified type. Returns an empty [[table]] if there are no elements inside. Returns ''false'' if the colshape is invalid."), oop=FunctionOOP(class_name='colshape', method_name='getElementsWithin', field='elementsWithin'), url=FunctionUrl(url='/wiki/GetElementsWithinColShape', name='getElementsWithinColShape', category='Collision shape functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getElementsWithinColShape', return_types=['table'], arguments=[FunctionArgument(name='theShape', argument_type='colshape', default_value=None, optional=False), FunctionArgument(name='elemType', argument_type='string', default_value='nil', optional=True)]), docs=FunctionDoc(description="This function is used to retrieve a list of all elements in a colshape, of the specified type.\n* For legacy reasons, a colshape created on the client does not collide with elements already existing at that location until they first move\n* This function doesn't verify whether elements are in the same dimension and interior, additional checks could be implemented manually if they are needed\n}}", arguments={'theShape': 'The colshape you want to get the elements from.', 'elemType': 'The type of element you want a list of. This can be any element type, the common ones being:', '"player"': 'A player connected to the server', '"ped"': 'A ped', '"vehicle"': 'A vehicle', '"object"': 'An object', '"pickup"': 'A pickup', '"marker"': 'A marker', '"spawnpoint"': 'A spawnpoint', '"remoteclient"': 'A remote client connected to the server', '"console"': 'The server Console-->'}, result="Returns a [[table]] containing all the elements inside the colshape, of the specified type. Returns an empty [[table]] if there are no elements inside. Returns ''false'' if the colshape is invalid."), oop=FunctionOOP(class_name='colshape', method_name='getElementsWithin', field='elementsWithin'), url=FunctionUrl(url='/wiki/GetElementsWithinColShape', name='getElementsWithinColShape', category='Collision shape functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='isElementWithinColShape', return_types=['bool'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False), FunctionArgument(name='theShape', argument_type='colshape', default_value=None, optional=False)]), docs=FunctionDoc(description="This function is used to determine if an element is within a collision shape. Please note that for legacy reasons, a colshape created on the client does not collide with elements already existing at that location until they first move. Please also note that before 1.0.3, this did not function correctly when moving a colshape.\nPlease note that this function doesn't verify whether element is in the same dimension and interior, additional checks could be implemented manually if they are needed.", arguments={'theElement': 'The element youre checking.', 'theShape': 'The colshape youre checking'}, result="Returns ''true'' if the element is within the colshape, ''false'' otherwise"), oop=None, url=FunctionUrl(url='/wiki/IsElementWithinColShape', name='isElementWithinColShape', category='Collision shape functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='isElementWithinColShape', return_types=['bool'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False), FunctionArgument(name='theShape', argument_type='colshape', default_value=None, optional=False)]), docs=FunctionDoc(description="This function is used to determine if an element is within a collision shape. Please note that for legacy reasons, a colshape created on the client does not collide with elements already existing at that location until they first move. Please also note that before 1.0.3, this did not function correctly when moving a colshape.\nPlease note that this function doesn't verify whether element is in the same dimension and interior, additional checks could be implemented manually if they are needed.", arguments={'theElement': 'The element youre checking.', 'theShape': 'The colshape youre checking'}, result="Returns ''true'' if the element is within the colshape, ''false'' otherwise"), oop=None, url=FunctionUrl(url='/wiki/IsElementWithinColShape', name='isElementWithinColShape', category='Collision shape functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='isInsideColShape', return_types=['bool'], arguments=[FunctionArgument(name='theShape', argument_type='colshape', default_value=None, optional=False), FunctionArgument(name='posX', argument_type='float', default_value=None, optional=False), FunctionArgument(name='posY', argument_type='float', default_value=None, optional=False), FunctionArgument(name='posZ', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'theShape': 'The colshape youre checking the position against.', 'posX': 'The X coordinate of the position youre checking.', 'posY': 'The Y coordinate of the position youre checking.', 'posZ': 'The Z coordinate of the position youre checking.'}, result="Returns ''true'' if the position is inside the colshape, ''false'' if it isn't or if any parameters are invalid."), oop=None, url=FunctionUrl(url='/wiki/IsInsideColShape', name='isInsideColShape', category='Collision shape functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='isInsideColShape', return_types=['bool'], arguments=[FunctionArgument(name='theShape', argument_type='colshape', default_value=None, optional=False), FunctionArgument(name='posX', argument_type='float', default_value=None, optional=False), FunctionArgument(name='posY', argument_type='float', default_value=None, optional=False), FunctionArgument(name='posZ', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'theShape': 'The colshape youre checking the position against.', 'posX': 'The X coordinate of the position youre checking.', 'posY': 'The Y coordinate of the position youre checking.', 'posZ': 'The Z coordinate of the position youre checking.'}, result="Returns ''true'' if the position is inside the colshape, ''false'' if it isn't or if any parameters are invalid."), oop=None, url=FunctionUrl(url='/wiki/IsInsideColShape', name='isInsideColShape', category='Collision shape functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='removeColPolygonPoint', return_types=['bool'], arguments=[FunctionArgument(name='shape', argument_type='colshape', default_value=None, optional=False), FunctionArgument(name='index', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'shape': 'The colshape polygon you wish to remove a point from.', 'index': 'The index of the point you wish to remove. The points are indexed in order, with 1 being the first bound point. You cant remove the last 3 points.'}, result="Returns ''true'' if the polygon was changed, ''false'' if invalid arguments were passed."), oop=FunctionOOP(class_name='colshape', method_name='removePoint', field=None), url=FunctionUrl(url='/wiki/RemoveColPolygonPoint', name='removeColPolygonPoint', category='Collision shape functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='removeColPolygonPoint', return_types=['bool'], arguments=[FunctionArgument(name='shape', argument_type='colshape', default_value=None, optional=False), FunctionArgument(name='index', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'shape': 'The colshape polygon you wish to remove a point from.', 'index': 'The index of the point you wish to remove. The points are indexed in order, with 1 being the first bound point. You cant remove the last 3 points.'}, result="Returns ''true'' if the polygon was changed, ''false'' if invalid arguments were passed."), oop=FunctionOOP(class_name='colshape', method_name='removePoint', field=None), url=FunctionUrl(url='/wiki/RemoveColPolygonPoint', name='removeColPolygonPoint', category='Collision shape functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setColPolygonHeight', return_types=['bool'], arguments=[FunctionArgument(name='shape', argument_type='colshape', default_value=None, optional=False), FunctionArgument(name='floor', argument_type='float', default_value=None, optional=False), FunctionArgument(name='ceil', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='By default, a colshape polygon is infinitely tall.}}', arguments={'shape': 'The colshape polygon', 'floor': 'The polygon floor (lowest Z coordinate). Parse false to reset this value to 0.', 'ceil': 'The polygon ceiling (highest Z coordinate). Parse false to reset this value to infinitely tall.'}, result="Returns ''true'' if the polygon was changed, ''false'' if invalid arguments were passed."), oop=FunctionOOP(class_name='colshape', method_name='setHeight', field="}}\n\n===Required Arguments=== \n*'''shape:''' The [[colshape]] polygon\n*'''floor:''' The polygon floor (lowest Z coordinate). Parse ''false'' to reset this value to 0.\n*'''ceil:''' The polygon ceiling (highest Z coordinate). Parse ''false'' to reset this value to infinitely tall.\n\n===Returns===\nReturns ''true'' if the polygon was changed, ''false'' if invalid arguments were passed.\n\n"), url=FunctionUrl(url='/wiki/SetColPolygonHeight', name='setColPolygonHeight', category='Collision shape functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setColPolygonHeight', return_types=['bool'], arguments=[FunctionArgument(name='shape', argument_type='colshape', default_value=None, optional=False), FunctionArgument(name='floor', argument_type='float', default_value=None, optional=False), FunctionArgument(name='ceil', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='By default, a colshape polygon is infinitely tall.}}', arguments={'shape': 'The colshape polygon', 'floor': 'The polygon floor (lowest Z coordinate). Parse false to reset this value to 0.', 'ceil': 'The polygon ceiling (highest Z coordinate). Parse false to reset this value to infinitely tall.'}, result="Returns ''true'' if the polygon was changed, ''false'' if invalid arguments were passed."), oop=FunctionOOP(class_name='colshape', method_name='setHeight', field="}}\n\n===Required Arguments=== \n*'''shape:''' The [[colshape]] polygon\n*'''floor:''' The polygon floor (lowest Z coordinate). Parse ''false'' to reset this value to 0.\n*'''ceil:''' The polygon ceiling (highest Z coordinate). Parse ''false'' to reset this value to infinitely tall.\n\n===Returns===\nReturns ''true'' if the polygon was changed, ''false'' if invalid arguments were passed.\n\n"), url=FunctionUrl(url='/wiki/SetColPolygonHeight', name='setColPolygonHeight', category='Collision shape functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setColPolygonPointPosition', return_types=['bool'], arguments=[FunctionArgument(name='shape', argument_type='colshape', default_value=None, optional=False), FunctionArgument(name='index', argument_type='int', default_value=None, optional=False), FunctionArgument(name='fX', argument_type='float', default_value=None, optional=False), FunctionArgument(name='fY', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'shape': 'The colshape polygon you wish to change.', 'index': 'The index of the point you wish to change. The points are indexed in order, with 1 being the first bound point.', 'fX': 'The new X position of the bound point.', 'fY': 'The new Y position of the bound point.'}, result="Returns ''true'' if the polygon was changed, ''false'' if invalid arguments were passed."), oop=FunctionOOP(class_name='colshape', method_name='setPointPosition', field=None), url=FunctionUrl(url='/wiki/SetColPolygonPointPosition', name='setColPolygonPointPosition', category='Collision shape functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setColPolygonPointPosition', return_types=['bool'], arguments=[FunctionArgument(name='shape', argument_type='colshape', default_value=None, optional=False), FunctionArgument(name='index', argument_type='int', default_value=None, optional=False), FunctionArgument(name='fX', argument_type='float', default_value=None, optional=False), FunctionArgument(name='fY', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'shape': 'The colshape polygon you wish to change.', 'index': 'The index of the point you wish to change. The points are indexed in order, with 1 being the first bound point.', 'fX': 'The new X position of the bound point.', 'fY': 'The new Y position of the bound point.'}, result="Returns ''true'' if the polygon was changed, ''false'' if invalid arguments were passed."), oop=FunctionOOP(class_name='colshape', method_name='setPointPosition', field=None), url=FunctionUrl(url='/wiki/SetColPolygonPointPosition', name='setColPolygonPointPosition', category='Collision shape functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setColShapeRadius', return_types=['bool'], arguments=[FunctionArgument(name='shape', argument_type='colshape', default_value=None, optional=False), FunctionArgument(name='radius', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'shape': 'The colshape you wish to change the radius of.', 'radius': 'The radius you want to set.'}, result="Returns ''true'' if the radius was changed, or ''false'' if invalid arguments were passed."), oop=FunctionOOP(class_name='colshape', method_name='setRadius', field=None), url=FunctionUrl(url='/wiki/SetColShapeRadius', name='setColShapeRadius', category='Collision shape functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setColShapeRadius', return_types=['bool'], arguments=[FunctionArgument(name='shape', argument_type='colshape', default_value=None, optional=False), FunctionArgument(name='radius', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'shape': 'The colshape you wish to change the radius of.', 'radius': 'The radius you want to set.'}, result="Returns ''true'' if the radius was changed, or ''false'' if invalid arguments were passed."), oop=FunctionOOP(class_name='colshape', method_name='setRadius', field=None), url=FunctionUrl(url='/wiki/SetColShapeRadius', name='setColShapeRadius', category='Collision shape functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setColShapeSize', return_types=['bool'], arguments=[FunctionArgument(name='shape', argument_type='colshape', default_value=None, optional=False), FunctionArgument(name='width', argument_type='float', default_value=None, optional=False), FunctionArgument(name='depth', argument_type='float', default_value=None, optional=False), FunctionArgument(name='height', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'shape': 'The colshape you wish to change the size of.', 'width': 'The collision cuboids width.', 'depth': 'The collision cuboids depth.', 'height': 'The collision cuboids height.'}, result="Returns ''true'' if the size was changed, ''false'' if invalid arguments were passed."), oop=FunctionOOP(class_name='colshape', method_name='setSize', field=None), url=FunctionUrl(url='/wiki/SetColShapeSize', name='setColShapeSize', category='Collision shape functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setColShapeSize', return_types=['bool'], arguments=[FunctionArgument(name='shape', argument_type='colshape', default_value=None, optional=False), FunctionArgument(name='width', argument_type='float', default_value=None, optional=False), FunctionArgument(name='depth', argument_type='float', default_value=None, optional=False), FunctionArgument(name='height', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'shape': 'The colshape you wish to change the size of.', 'width': 'The collision cuboids width.', 'depth': 'The collision cuboids depth.', 'height': 'The collision cuboids height.'}, result="Returns ''true'' if the size was changed, ''false'' if invalid arguments were passed."), oop=FunctionOOP(class_name='colshape', method_name='setSize', field=None), url=FunctionUrl(url='/wiki/SetColShapeSize', name='setColShapeSize', category='Collision shape functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='isCursorShowing', return_types=['bool'], arguments=[FunctionArgument(name='thePlayer', argument_type='player', default_value=None, optional=False)]), docs=FunctionDoc(description="This function is used to determine whether or not a player's cursor is showing.", arguments={'thePlayer': 'The player you want to get cursor state of.'}, result="Returns ''true'' if the player's cursor is showing, ''false'' if it isn't or if invalid parameters were passed."), oop=None, url=FunctionUrl(url='/wiki/IsCursorShowing', name='isCursorShowing', category='Cursor functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='isCursorShowing', return_types=['bool'], arguments=[]), docs=FunctionDoc(description="This function is used to determine whether or not a player's cursor is showing.", arguments={}, result="Returns ''true'' if the player's cursor is showing, ''false'' if it isn't."), oop=None, url=FunctionUrl(url='/wiki/IsCursorShowing', name='isCursorShowing', category='Cursor functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='showCursor', return_types=['bool'], arguments=[FunctionArgument(name='thePlayer', argument_type='player', default_value=None, optional=False), FunctionArgument(name='show', argument_type='bool', default_value=None, optional=False), FunctionArgument(name='toggleControls', argument_type='bool', default_value='true', optional=False)]), docs=FunctionDoc(description="This function is used to show or hide a [[player]]'s cursor.", arguments={'thePlayer': 'The player you want to show or hide the cursor of.', 'show': 'A boolean value determining whether to show (true) or hide (false) the cursor.\n{{OptionalArg}} ', 'toggleControls': 'A boolean value determining whether to disable controls whilst the cursor is showing.  true implies controls are disabled, false implies controls remain enabled.'}, result="Returns ''true'' if the player's cursor was shown or hidden successfully, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/ShowCursor', name='showCursor', category='Cursor functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='showCursor', return_types=['bool'], arguments=[FunctionArgument(name='show', argument_type='bool', default_value=None, optional=False), FunctionArgument(name='toggleControls', argument_type='bool', default_value='true', optional=False)]), docs=FunctionDoc(description="This function is used to show or hide a [[player]]'s cursor.", arguments={'show': 'A boolean value determining whether to show (true) or hide (false) the cursor.\n{{OptionalArg}} ', 'toggleControls': 'A boolean value determining whether to disable controls whilst the cursor is showing.  true implies controls are disabled, false implies controls remain enabled.'}, result="Returns ''true'' if the player's cursor was shown or hidden successfully, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/ShowCursor', name='showCursor', category='Cursor functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='attachElements', return_types=['bool'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False), FunctionArgument(name='theAttachToElement', argument_type='element', default_value=None, optional=False), FunctionArgument(name='xPosOffset', argument_type='float', default_value='0', optional=False), FunctionArgument(name='yPosOffset', argument_type='float', default_value='0', optional=False), FunctionArgument(name='zPosOffset', argument_type='float', default_value='0', optional=False), FunctionArgument(name='xRotOffset', argument_type='float', default_value='0', optional=False), FunctionArgument(name='yRotOffset', argument_type='float', default_value='0', optional=False), FunctionArgument(name='zRotOffset', argument_type='float', default_value='0', optional=False)]), docs=FunctionDoc(description="This function attaches one element to another, so that the first one follows the second whenever it moves. \nIf an attempt is made to attach two elements that are already attached the opposite way (eg theElement becomes theAttachToElement and vice versa), the 1st attachment order is automatically detached in favor of the 2nd attachment order. For example, if carA was attached to carB, now carB is attached to carA. Also, an element cannot be attached to two separate elements at one time. For example, two cars can be attached to one single car, but one single car cannot be attached to two separate cars. If you attempt to do this, the existing attachment will automatically be dropped in favor of the new attachment. For example, if carA is asked to attached to carB then carC, it is only attached to carC.\nThis is not compatible with all elements.  The following elements are compatible:\n* [[Ped]]s\n* [[Player]]s\n* [[Blip]]s\n* [[Vehicle]]s\n* [[Object]]s\n* [[Marker]]s\n* [[Pickup]]s\n* [[Sound]]s\n* [[Colshape]]s\n* [[createWeapon|Weapons]]\n* [[Camera]]s\n*The offset coodinates reflect the object space, not the world space. This means that you cannot calculate the exact offsets between two objects by pre-positioning them in the map editor as a reference. Please see [[attachElementsOffsets]] for more details.\n*Due to a limitation in GTA, unexpected attach rotations may occur if all rotation offsets are non-zero. (i.e. Try to ensure at least one of 'xRotOffset', 'yRotOffset' or 'zRotOffset' is zero).}}", arguments={'theElement': 'The element to be attached.', 'theAttachToElement': 'The element to attach the first to.\n{{OptionalArg}} ', 'xPosOffset': 'The x offset, if you want the elements to be a certain distance from one another (default 0).', 'yPosOffset': 'The y offset (default 0).', 'zPosOffset': 'The z offset (default 0).', 'xRotOffset': 'The x rotation offset (default 0).', 'yRotOffset': 'The y rotation offset (default 0).', 'zRotOffset': 'The z rotation offset (default 0).'}, result="Returns ''true'' if the attaching process was successful, ''false'' otherwise."), oop=FunctionOOP(class_name='element', method_name='attach', field=None), url=FunctionUrl(url='/wiki/AttachElements', name='attachElements', category='Element functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='attachElements', return_types=['bool'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False), FunctionArgument(name='theAttachToElement', argument_type='element', default_value=None, optional=False), FunctionArgument(name='xPosOffset', argument_type='float', default_value='0', optional=False), FunctionArgument(name='yPosOffset', argument_type='float', default_value='0', optional=False), FunctionArgument(name='zPosOffset', argument_type='float', default_value='0', optional=False), FunctionArgument(name='xRotOffset', argument_type='float', default_value='0', optional=False), FunctionArgument(name='yRotOffset', argument_type='float', default_value='0', optional=False), FunctionArgument(name='zRotOffset', argument_type='float', default_value='0', optional=False)]), docs=FunctionDoc(description="This function attaches one element to another, so that the first one follows the second whenever it moves. \nIf an attempt is made to attach two elements that are already attached the opposite way (eg theElement becomes theAttachToElement and vice versa), the 1st attachment order is automatically detached in favor of the 2nd attachment order. For example, if carA was attached to carB, now carB is attached to carA. Also, an element cannot be attached to two separate elements at one time. For example, two cars can be attached to one single car, but one single car cannot be attached to two separate cars. If you attempt to do this, the existing attachment will automatically be dropped in favor of the new attachment. For example, if carA is asked to attached to carB then carC, it is only attached to carC.\nThis is not compatible with all elements.  The following elements are compatible:\n* [[Ped]]s\n* [[Player]]s\n* [[Blip]]s\n* [[Vehicle]]s\n* [[Object]]s\n* [[Marker]]s\n* [[Pickup]]s\n* [[Sound]]s\n* [[Colshape]]s\n* [[createWeapon|Weapons]]\n* [[Camera]]s\n*The offset coodinates reflect the object space, not the world space. This means that you cannot calculate the exact offsets between two objects by pre-positioning them in the map editor as a reference. Please see [[attachElementsOffsets]] for more details.\n*Due to a limitation in GTA, unexpected attach rotations may occur if all rotation offsets are non-zero. (i.e. Try to ensure at least one of 'xRotOffset', 'yRotOffset' or 'zRotOffset' is zero).}}", arguments={'theElement': 'The element to be attached.', 'theAttachToElement': 'The element to attach the first to.\n{{OptionalArg}} ', 'xPosOffset': 'The x offset, if you want the elements to be a certain distance from one another (default 0).', 'yPosOffset': 'The y offset (default 0).', 'zPosOffset': 'The z offset (default 0).', 'xRotOffset': 'The x rotation offset (default 0).', 'yRotOffset': 'The y rotation offset (default 0).', 'zRotOffset': 'The z rotation offset (default 0).'}, result="Returns ''true'' if the attaching process was successful, ''false'' otherwise."), oop=FunctionOOP(class_name='element', method_name='attach', field=None), url=FunctionUrl(url='/wiki/AttachElements', name='attachElements', category='Element functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='createElement', return_types=['element'], arguments=[FunctionArgument(name='elementType', argument_type='string', default_value=None, optional=False), FunctionArgument(name='elementID', argument_type='string', default_value='nil', optional=False)]), docs=FunctionDoc(description="This function is used to create a new dummy element in the [[element tree]] which do not necessarily represent an entity within the San Andreas world. A common use for this function is for creating custom elements, such as a Flag or a Base.\nElements created using this function are placed in the element tree with their parent as the 'dynamic' map element.", arguments={'elementType': 'The type of element being created.', 'elementID': 'The ID of the element being created.'}, result="Returns the element if it was successfully created. Returns ''false'' if the arguments are wrong."), oop=None, url=FunctionUrl(url='/wiki/CreateElement', name='createElement', category='Element functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='createElement', return_types=['element'], arguments=[FunctionArgument(name='elementType', argument_type='string', default_value=None, optional=False), FunctionArgument(name='elementID', argument_type='string', default_value='nil', optional=False)]), docs=FunctionDoc(description="This function is used to create a new dummy element in the [[element tree]] which do not necessarily represent an entity within the San Andreas world. A common use for this function is for creating custom elements, such as a Flag or a Base.\nElements created using this function are placed in the element tree with their parent as the 'dynamic' map element.", arguments={'elementType': 'The type of element being created.', 'elementID': 'The ID of the element being created.'}, result="Returns the element if it was successfully created. Returns ''false'' if the arguments are wrong."), oop=None, url=FunctionUrl(url='/wiki/CreateElement', name='createElement', category='Element functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='destroyElement', return_types=['bool'], arguments=[FunctionArgument(name='elementToDestroy', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='This function destroys an [[element]] and all elements within it in the hierarchy (its children, the children of those children etc). [[player|Player]] elements cannot be destroyed using this function. A player can only be removed from the hierarchy when they quit or are kicked. The root element also cannot be destroyed, however, passing the root as an argument will wipe all elements from the server, except for the players and clients, which will become direct descendants of the root node, and other elements that cannot be destroyed, such as resource root elements.\nPlayers are not the only elements that cannot be deleted. This list also includes remote clients and console elements.', arguments={'elementToDestroy': 'The element you wish to destroy.'}, result="Returns ''true'' if the element was destroyed successfully, ''false'' if either the element passed to it was invalid or it could not be destroyed for some other reason (for example, clientside destroyElement can't destroy serverside elements)."), oop=FunctionOOP(class_name='element', method_name='destroy', field=None), url=FunctionUrl(url='/wiki/DestroyElement', name='destroyElement', category='Element functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='destroyElement', return_types=['bool'], arguments=[FunctionArgument(name='elementToDestroy', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='This function destroys an [[element]] and all elements within it in the hierarchy (its children, the children of those children etc). [[player|Player]] elements cannot be destroyed using this function. A player can only be removed from the hierarchy when they quit or are kicked. The root element also cannot be destroyed, however, passing the root as an argument will wipe all elements from the server, except for the players and clients, which will become direct descendants of the root node, and other elements that cannot be destroyed, such as resource root elements.\nPlayers are not the only elements that cannot be deleted. This list also includes remote clients and console elements.', arguments={'elementToDestroy': 'The element you wish to destroy.'}, result="Returns ''true'' if the element was destroyed successfully, ''false'' if either the element passed to it was invalid or it could not be destroyed for some other reason (for example, clientside destroyElement can't destroy serverside elements)."), oop=FunctionOOP(class_name='element', method_name='destroy', field=None), url=FunctionUrl(url='/wiki/DestroyElement', name='destroyElement', category='Element functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='detachElements', return_types=['bool'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False), FunctionArgument(name='theAttachToElement', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='This function detaches attached elements from one another.', arguments={'theElement': 'The element to be detached (the child)\n{{OptionalArg}} ', 'theAttachToElement': 'The element you wish to detach from, will detach from the attached element if this isnt specified.'}, result="Returns ''true'' if the detaching was successful, ''false'' otherwise."), oop=FunctionOOP(class_name='element', method_name='detach', field=None), url=FunctionUrl(url='/wiki/DetachElements', name='detachElements', category='Element functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='detachElements', return_types=['bool'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False), FunctionArgument(name='theAttachToElement', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='This function detaches attached elements from one another.', arguments={'theElement': 'The element to be detached (the child)\n{{OptionalArg}} ', 'theAttachToElement': 'The element you wish to detach from, will detach from the attached element if this isnt specified.'}, result="Returns ''true'' if the detaching was successful, ''false'' otherwise."), oop=FunctionOOP(class_name='element', method_name='detach', field=None), url=FunctionUrl(url='/wiki/DetachElements', name='detachElements', category='Element functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getAttachedElements', return_types=['table'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns a table of all the elements attached to the specified element', arguments={'theElement': ': The element which you require the information from.'}, result='Returns a table of all the elements attached to the specified element.'), oop=FunctionOOP(class_name='element', method_name='getAttachedElements', field=None), url=FunctionUrl(url='/wiki/GetAttachedElements', name='getAttachedElements', category='Element functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getAttachedElements', return_types=['table'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns a table of all the elements attached to the specified element', arguments={'theElement': ': The element which you require the information from.'}, result='Returns a table of all the elements attached to the specified element.'), oop=FunctionOOP(class_name='element', method_name='getAttachedElements', field=None), url=FunctionUrl(url='/wiki/GetAttachedElements', name='getAttachedElements', category='Element functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getElementAlpha', return_types=['int'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns the alpha (transparency) value for the specified [[element]]. This can be a [[player]], [[ped]], [[object]], [[vehicle]] or [[Element/Weapon|weapon]].', arguments={'theElement': 'The element whose alpha you want to retrieve.'}, result="Returns an integer (0-255; 0 = transparent) indicating the element's alpha, or ''false'' if invalid arguments were passed."), oop=FunctionOOP(class_name='element', method_name='getAlpha', field='alpha'), url=FunctionUrl(url='/wiki/GetElementAlpha', name='getElementAlpha', category='Element functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getElementAlpha', return_types=['int'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns the alpha (transparency) value for the specified [[element]]. This can be a [[player]], [[ped]], [[object]], [[vehicle]] or [[Element/Weapon|weapon]].', arguments={'theElement': 'The element whose alpha you want to retrieve.'}, result="Returns an integer (0-255; 0 = transparent) indicating the element's alpha, or ''false'' if invalid arguments were passed."), oop=FunctionOOP(class_name='element', method_name='getAlpha', field='alpha'), url=FunctionUrl(url='/wiki/GetElementAlpha', name='getElementAlpha', category='Element functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getElementAttachedOffsets', return_types=['float,', 'float,', 'float,', 'float,', 'float,', 'float'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns the offsets of an element that has been attached to another element using [[attachElements]].', arguments={'theElement': 'The attached element.'}, result="Returns 6 [[float|floats]], of which the first 3 indicate the position offset (x, y, z), and the last 3 indicate the rotation offset (x, y, z), if successful. ''false'' otherwise."), oop=FunctionOOP(class_name='element', method_name='getAttachedOffsets', field=None), url=FunctionUrl(url='/wiki/GetElementAttachedOffsets', name='getElementAttachedOffsets', category='Element functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getElementAttachedOffsets', return_types=['float,', 'float,', 'float,', 'float,', 'float,', 'float'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns the offsets of an element that has been attached to another element using [[attachElements]].', arguments={'theElement': 'The attached element.'}, result="Returns 6 [[float|floats]], of which the first 3 indicate the position offset (x, y, z), and the last 3 indicate the rotation offset (x, y, z), if successful. ''false'' otherwise."), oop=FunctionOOP(class_name='element', method_name='getAttachedOffsets', field=None), url=FunctionUrl(url='/wiki/GetElementAttachedOffsets', name='getElementAttachedOffsets', category='Element functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getElementAttachedTo', return_types=['element'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='This function determines the element that the specified element is attached to.', arguments={'theElement': 'The element you require the information for.'}, result="Returns the element that the chosen element is attached to, or ''false'' if the element isn't attached to another element."), oop=FunctionOOP(class_name='element', method_name='getAttachedTo', field=None), url=FunctionUrl(url='/wiki/GetElementAttachedTo', name='getElementAttachedTo', category='Element functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getElementAttachedTo', return_types=['element'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='This function determines the element that the specified element is attached to.', arguments={'theElement': 'The element you require the information for.'}, result="Returns the element that the chosen element is attached to, or ''false'' if the element isn't attached to another element."), oop=FunctionOOP(class_name='element', method_name='getAttachedTo', field=None), url=FunctionUrl(url='/wiki/GetElementAttachedTo', name='getElementAttachedTo', category='Element functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getElementByID', return_types=['element'], arguments=[FunctionArgument(name='id', argument_type='string', default_value=None, optional=False), FunctionArgument(name='index', argument_type='int', default_value='0', optional=True)]), docs=FunctionDoc(description='This function returns an element from the specified ID. If more than one element with the same ID exists, only the first one in the order it appears in the XML tree will be returned by this function.', arguments={'id': 'The ID of the element as it appears in the XML file or as set by setElementID.\n{{optionalArg}}', 'index': 'If there are two or more elements of the same ID it will return the element with the specified index starting at 0.'}, result="Returns the [[element]] with the given ID, or ''false'' if no such element exists."), oop=FunctionOOP(class_name='Element', method_name='getByID', field=None), url=FunctionUrl(url='/wiki/GetElementByID', name='getElementByID', category='Element functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getElementByID', return_types=['element'], arguments=[FunctionArgument(name='id', argument_type='string', default_value=None, optional=False), FunctionArgument(name='index', argument_type='int', default_value='0', optional=True)]), docs=FunctionDoc(description='This function returns an element from the specified ID. If more than one element with the same ID exists, only the first one in the order it appears in the XML tree will be returned by this function.', arguments={'id': 'The ID of the element as it appears in the XML file or as set by setElementID.\n{{optionalArg}}', 'index': 'If there are two or more elements of the same ID it will return the element with the specified index starting at 0.'}, result="Returns the [[element]] with the given ID, or ''false'' if no such element exists."), oop=FunctionOOP(class_name='Element', method_name='getByID', field=None), url=FunctionUrl(url='/wiki/GetElementByID', name='getElementByID', category='Element functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getElementChild', return_types=['element'], arguments=[FunctionArgument(name='parent', argument_type='element', default_value=None, optional=False), FunctionArgument(name='index', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns one of the child elements of a given parent element. The child element is selected by its index (0 for the first child, 1 for the second and so on).', arguments={'parent': 'the element above the one to be returned in the hierarchy.', 'index': 'the elements index (0 for the first element, 1 for the second, etc).'}, result="Returns the requested element if it exists, or ''false'' if it doesn't."), oop=FunctionOOP(class_name='element', method_name='getChild', field=None), url=FunctionUrl(url='/wiki/GetElementChild', name='getElementChild', category='Element functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getElementChild', return_types=['element'], arguments=[FunctionArgument(name='parent', argument_type='element', default_value=None, optional=False), FunctionArgument(name='index', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns one of the child elements of a given parent element. The child element is selected by its index (0 for the first child, 1 for the second and so on).', arguments={'parent': 'the element above the one to be returned in the hierarchy.', 'index': 'the elements index (0 for the first element, 1 for the second, etc).'}, result="Returns the requested element if it exists, or ''false'' if it doesn't."), oop=FunctionOOP(class_name='element', method_name='getChild', field=None), url=FunctionUrl(url='/wiki/GetElementChild', name='getElementChild', category='Element functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getElementChildren', return_types=['table'], arguments=[FunctionArgument(name='parent', argument_type='element', default_value=None, optional=False), FunctionArgument(name='theType', argument_type='string', default_value='nil', optional=True)]), docs=FunctionDoc(description='This function is used to retrieve a list of the child elements of a given parent element. Note that it will only return direct children and not elements that are further down the [[element tree]].', arguments={'parent': 'Supply this argument with the parent of the children you want returned.', 'theType': 'The type of element you want a list of. This is the same as the tag name in the .map file, so this can be used with a custom element type if desired. Built in types are:', '"player"': 'A player connected to the server', '"ped"': 'A ped', '"water"': 'A water polygon', '"sound"': 'A playing sound', '"vehicle"': 'A vehicle', '"object"': 'An object', '"pickup"': 'A pickup', '"marker"': 'A marker', '"colshape"': 'A collision shape', '"blip"': 'A blip', '"radararea"': 'A radar area', '"team"': 'A team', '"spawnpoint"': 'A spawnpoint', '"remoteclient"': 'A remote client connected to the server', '"console"': 'The server Console'}, result="This function returns a ''table'' that contains a list of elements that the parent has. If the element has no children, it will return an empy ''table''. It will return ''false'' if the parent element does not exist."), oop=FunctionOOP(class_name='element', method_name='getChildren', field=None), url=FunctionUrl(url='/wiki/GetElementChildren', name='getElementChildren', category='Element functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getElementChildren', return_types=['table'], arguments=[FunctionArgument(name='parent', argument_type='element', default_value=None, optional=False), FunctionArgument(name='theType', argument_type='string', default_value='nil', optional=True)]), docs=FunctionDoc(description='This function is used to retrieve a list of the child elements of a given parent element. Note that it will only return direct children and not elements that are further down the [[element tree]].', arguments={'parent': 'Supply this argument with the parent of the children you want returned.', 'theType': 'The type of element you want a list of. This is the same as the tag name in the .map file, so this can be used with a custom element type if desired. Built in types are:', '"player"': 'A player connected to the server', '"ped"': 'A ped', '"water"': 'A water polygon', '"sound"': 'A playing sound', '"vehicle"': 'A vehicle', '"object"': 'An object', '"pickup"': 'A pickup', '"marker"': 'A marker', '"colshape"': 'A collision shape', '"blip"': 'A blip', '"radararea"': 'A radar area', '"team"': 'A team', '"spawnpoint"': 'A spawnpoint', '"remoteclient"': 'A remote client connected to the server', '"console"': 'The server Console'}, result="This function returns a ''table'' that contains a list of elements that the parent has. If the element has no children, it will return an empy ''table''. It will return ''false'' if the parent element does not exist."), oop=FunctionOOP(class_name='element', method_name='getChildren', field=None), url=FunctionUrl(url='/wiki/GetElementChildren', name='getElementChildren', category='Element functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getElementChildrenCount', return_types=['int'], arguments=[FunctionArgument(name='parent', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns the number of children an element has. Note that only the direct children are counted and not elements that are further down the [[element tree]].', arguments={'parent': 'the parent element'}, result="Returns an ''int'' with the number of child elements, or ''false'' if the parent element does not exist."), oop=FunctionOOP(class_name='element', method_name='getChildrenCount', field=None), url=FunctionUrl(url='/wiki/GetElementChildrenCount', name='getElementChildrenCount', category='Element functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getElementChildrenCount', return_types=['int'], arguments=[FunctionArgument(name='parent', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns the number of children an element has. Note that only the direct children are counted and not elements that are further down the [[element tree]].', arguments={'parent': 'the parent element'}, result="Returns an ''int'' with the number of child elements, or ''false'' if the parent element does not exist."), oop=FunctionOOP(class_name='element', method_name='getChildrenCount', field=None), url=FunctionUrl(url='/wiki/GetElementChildrenCount', name='getElementChildrenCount', category='Element functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getElementColShape', return_types=['colshape'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='Some elements have an associated colshape, for example [[Marker]] and [[Pickup]]. This function is used to get the associated colshape.', arguments={'theElement': 'The element you want to get the colshape of'}, result="Returns ''colshape'' of the element, ''false'' if not or an invalid argument was passed to the function."), oop=FunctionOOP(class_name='element', method_name='getColShape', field='colShape'), url=FunctionUrl(url='/wiki/GetElementColShape', name='getElementColShape', category='Element functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getElementColShape', return_types=['colshape'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='Some elements have an associated colshape, for example [[Marker]] and [[Pickup]]. This function is used to get the associated colshape.', arguments={'theElement': 'The element you want to get the colshape of'}, result="Returns ''colshape'' of the element, ''false'' if not or an invalid argument was passed to the function."), oop=FunctionOOP(class_name='element', method_name='getColShape', field='colShape'), url=FunctionUrl(url='/wiki/GetElementColShape', name='getElementColShape', category='Element functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getElementCollisionsEnabled', return_types=['bool'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='This function indicates if a specific element is set to have collisions disabled. An element without collisions does not interact with the physical environment and remains static.', arguments={'theElement': 'The element for which you want to check whether collisions are enabled'}, result="Returns ''true'' if the collisions are enabled, ''false'' otherwise."), oop=FunctionOOP(class_name='element', method_name='getCollisionsEnabled', field='collisions'), url=FunctionUrl(url='/wiki/GetElementCollisionsEnabled', name='getElementCollisionsEnabled', category='Element functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getElementCollisionsEnabled', return_types=['bool'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='This function indicates if a specific element is set to have collisions disabled. An element without collisions does not interact with the physical environment and remains static.', arguments={'theElement': 'The element for which you want to check whether collisions are enabled'}, result="Returns ''true'' if the collisions are enabled, ''false'' otherwise."), oop=FunctionOOP(class_name='element', method_name='getCollisionsEnabled', field='collisions'), url=FunctionUrl(url='/wiki/GetElementCollisionsEnabled', name='getElementCollisionsEnabled', category='Element functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getElementData', return_types=['var'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False), FunctionArgument(name='key', argument_type='string', default_value=None, optional=False), FunctionArgument(name='inherit', argument_type='bool', default_value='true', optional=True)]), docs=FunctionDoc(description='This function retrieves [[element data]] attached to an element under a certain key.', arguments={'theElement': 'This is the element with data you want to retrieve.', 'key': 'The name of the element data entry you want to retrieve. (Maximum 31 characters.)', 'inherit': '- toggles whether or not the function should go up the hierarchy to find the requested key in case the specified element doesnt have it.'}, result="This function returns a ''variable'' containing the requested element data, or ''false'' if the element or the element data does not exist. When getting data corresponding to a XML attribute, this is always a ''string''."), oop=FunctionOOP(class_name='element', method_name='getData', field=None), url=FunctionUrl(url='/wiki/GetElementData', name='getElementData', category='Element functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getElementData', return_types=['var'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False), FunctionArgument(name='key', argument_type='string', default_value=None, optional=False), FunctionArgument(name='inherit', argument_type='bool', default_value='true', optional=True)]), docs=FunctionDoc(description='This function retrieves [[element data]] attached to an element under a certain key.', arguments={'theElement': 'This is the element with data you want to retrieve.', 'key': 'The name of the element data entry you want to retrieve. (Maximum 31 characters.)', 'inherit': '- toggles whether or not the function should go up the hierarchy to find the requested key in case the specified element doesnt have it.'}, result="This function returns a ''variable'' containing the requested element data, or ''false'' if the element or the element data does not exist. When getting data corresponding to a XML attribute, this is always a ''string''."), oop=FunctionOOP(class_name='element', method_name='getData', field=None), url=FunctionUrl(url='/wiki/GetElementData', name='getElementData', category='Element functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getElementDimension', return_types=['int'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='This function allows you to retrieve the dimension of any element. The dimension determines what/who the element is visible to.', arguments={'theElement': 'The element in which youd like to retrieve the dimension of.'}, result="Returns an integer for the dimension if '''theElement''' is valid, ''false'' otherwise."), oop=FunctionOOP(class_name='element', method_name='getDimension', field='dimension'), url=FunctionUrl(url='/wiki/GetElementDimension', name='getElementDimension', category='Element functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getElementDimension', return_types=['int'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='This function allows you to retrieve the dimension of any element. The dimension determines what/who the element is visible to.', arguments={'theElement': 'The element in which youd like to retrieve the dimension of.'}, result="Returns an integer for the dimension if '''theElement''' is valid, ''false'' otherwise."), oop=FunctionOOP(class_name='element', method_name='getDimension', field='dimension'), url=FunctionUrl(url='/wiki/GetElementDimension', name='getElementDimension', category='Element functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getElementHealth', return_types=['float'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns the current health for the specified [[element]]. This can be a [[player]], a [[ped]], a [[vehicle]], or an [[object]].', arguments={'theElement': 'The player or vehicle whose health you want to check.'}, result="Returns a float indicating the element's health, or ''false'' if invalid arguments were passed."), oop=FunctionOOP(class_name='element', method_name='getHealth', field='health'), url=FunctionUrl(url='/wiki/GetElementHealth', name='getElementHealth', category='Element functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getElementHealth', return_types=['float'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns the current health for the specified [[element]]. This can be a [[player]], a [[ped]], a [[vehicle]], or an [[object]].', arguments={'theElement': 'The player or vehicle whose health you want to check.'}, result="Returns a float indicating the element's health, or ''false'' if invalid arguments were passed."), oop=FunctionOOP(class_name='element', method_name='getHealth', field='health'), url=FunctionUrl(url='/wiki/GetElementHealth', name='getElementHealth', category='Element functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getElementID', return_types=['string'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='This function gets the ID of an element. This is the "id" attribute of the element and is a string, NOT a number like a model ID, weapons ID or similar.', arguments={'theElement': 'the element from which to retrieve the ID.'}, result="This returns a ''string'' containing the element ID. It will return an empty ''string'' if it has no ID. It will return ''false'' if the element is invalid."), oop=FunctionOOP(class_name='element', method_name='getID', field='id'), url=FunctionUrl(url='/wiki/GetElementID', name='getElementID', category='Element functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getElementID', return_types=['string'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='This function gets the ID of an element. This is the "id" attribute of the element and is a string, NOT a number like a model ID, weapons ID or similar.', arguments={'theElement': 'the element from which to retrieve the ID.'}, result="This returns a ''string'' containing the element ID. It will return an empty ''string'' if it has no ID. It will return ''false'' if the element is invalid."), oop=FunctionOOP(class_name='element', method_name='getID', field='id'), url=FunctionUrl(url='/wiki/GetElementID', name='getElementID', category='Element functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getElementInterior', return_types=['int'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='This function allows you to retrieve the interior of any element. An interior is the current loaded place, 0 being outside.', arguments={'theElement': 'The element of which youd like to retrieve the interior'}, result="Returns an [[int]] for the interior if '''theElement''' is valid, ''false'' otherwise."), oop=FunctionOOP(class_name='element', method_name='getInterior', field='interior'), url=FunctionUrl(url='/wiki/GetElementInterior', name='getElementInterior', category='Element functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getElementInterior', return_types=['int'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='This function allows you to retrieve the interior of any element. An interior is the current loaded place, 0 being outside.', arguments={'theElement': 'The element of which youd like to retrieve the interior'}, result="Returns an [[int]] for the interior if '''theElement''' is valid, ''false'' otherwise."), oop=FunctionOOP(class_name='element', method_name='getInterior', field='interior'), url=FunctionUrl(url='/wiki/GetElementInterior', name='getElementInterior', category='Element functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getElementModel', return_types=['int'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='Returns the model ID of a given element. This can be a player/ped skin, a pickup model, an object model or a vehicle model.', arguments={'theElement': 'the element to retrieve the model ID of.'}, result="Returns the model ID if successful, ''false'' otherwise.\n* For players/peds: A GTASA player model (skin) ID. See [[Character Skins]].\n* For vehicles: The [[Vehicle IDs|vehicle ID]] of the vehicle.\n* For objects: An [[int]] specifying the model id."), oop=FunctionOOP(class_name='element', method_name='getModel', field='model'), url=FunctionUrl(url='/wiki/GetElementModel', name='getElementModel', category='Element functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getElementModel', return_types=['int'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='Returns the model ID of a given element. This can be a player/ped skin, a pickup model, an object model or a vehicle model.', arguments={'theElement': 'the element to retrieve the model ID of.'}, result="Returns the model ID if successful, ''false'' otherwise.\n* For players/peds: A GTASA player model (skin) ID. See [[Character Skins]].\n* For vehicles: The [[Vehicle IDs|vehicle ID]] of the vehicle.\n* For objects: An [[int]] specifying the model id."), oop=FunctionOOP(class_name='element', method_name='getModel', field='model'), url=FunctionUrl(url='/wiki/GetElementModel', name='getElementModel', category='Element functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getElementParent', return_types=['element'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description="This function is used to determine the parent of an ''element''.", arguments={'theElement': 'The child of the parent element you want returned.'}, result="This returns the parent as an ''element''. It returns ''false'' if ''theElement'' is invalid, or is the root node."), oop=FunctionOOP(class_name='element', method_name='getParent', field='parent'), url=FunctionUrl(url='/wiki/GetElementParent', name='getElementParent', category='Element functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getElementParent', return_types=['element'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description="This function is used to determine the parent of an ''element''.", arguments={'theElement': 'The child of the parent element you want returned.'}, result="This returns the parent as an ''element''. It returns ''false'' if ''theElement'' is invalid, or is the root node."), oop=FunctionOOP(class_name='element', method_name='getParent', field='parent'), url=FunctionUrl(url='/wiki/GetElementParent', name='getElementParent', category='Element functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getElementPosition', return_types=['float,', 'float,', 'float'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='The getElementPosition function allows you to retrieve the position coordinates of an element.  This can be any real world element, including:\n* [[Element/Player|Players]]\n* [[Element/Vehicle|Vehicles]]\n* [[Element/Object|Objects]]\n* [[Element/Pickup|Pickups]]\n* [[Element/Marker|Markers]]\n* [[Element/Collision shape|Collision shapes]]\n* [[Element/Blip|Blips]]\n* [[Element/Radar area|Radar areas]]', arguments={'theElement': 'The element which youd like to retrieve the location of'}, result="Returns three ''float''s indicating the position of the element, ''x'', ''y'' and ''z'' respectively."), oop=FunctionOOP(class_name='element', method_name='getPosition', field='position'), url=FunctionUrl(url='/wiki/GetElementPosition', name='getElementPosition', category='Element functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getElementPosition', return_types=['float,', 'float,', 'float'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='The getElementPosition function allows you to retrieve the position coordinates of an element.  This can be any real world element, including:\n* [[Element/Player|Players]]\n* [[Element/Vehicle|Vehicles]]\n* [[Element/Object|Objects]]\n* [[Element/Pickup|Pickups]]\n* [[Element/Marker|Markers]]\n* [[Element/Collision shape|Collision shapes]]\n* [[Element/Blip|Blips]]\n* [[Element/Radar area|Radar areas]]', arguments={'theElement': 'The element which youd like to retrieve the location of'}, result="Returns three ''float''s indicating the position of the element, ''x'', ''y'' and ''z'' respectively."), oop=FunctionOOP(class_name='element', method_name='getPosition', field='position'), url=FunctionUrl(url='/wiki/GetElementPosition', name='getElementPosition', category='Element functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getElementRotation', return_types=['float,', 'float,', 'float'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False), FunctionArgument(name='rotOrder', argument_type='string', default_value='"default"', optional=True)]), docs=FunctionDoc(description='Retrieve the rotation of elements.', arguments={'theElement': 'The element whose rotation will be retrieved', 'rotOrder': 'A string representing the rotation order desired when returning the http://en.wikipedia.org/wiki/Euler_angles euler angles. If omitted, default value is default. Allowed values are:', '"default"': 'default MTA behavior prior to 1.1, where rotation order depends on element type', '"ZXY"': 'rotation about the Z axis (up), then about the resulting X axis (right) and finally about the resulting Y axis (front). This is the default rotation order for object|objects', '"ZYX"': 'rotation about the Z axis (up), then about the resulting Y axis (front), and finally about the resulting X axis (right). This is the default rotation order for vehicle|vehicles\nThe default rotation order for peds/players is Z-Y-X (clientside) and -Z-Y-X (serverside) but those rotation orders (set using \'\'"default"\'\' on peds) can not be used manually on other element types since they only exist due to historical and backward compatibility reasons.\nSpecifying a rotation order other than \'\'"default"\'\' allows the same angles to later be uniformly used on several elements without having to consider their type.'}, result="* ''rx, ry, rz'': 3 ''float''s representing the Euler rotation angles on the axis X, Y and Z (with the rotation order depending on the ''rotOrder'' argument) if ''element'' exists and is a valid element, ''false'' if it's invalid."), oop=FunctionOOP(class_name='element', method_name='getRotation', field='rotation'), url=FunctionUrl(url='/wiki/GetElementRotation', name='getElementRotation', category='Element functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getElementRotation', return_types=['float,', 'float,', 'float'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False), FunctionArgument(name='rotOrder', argument_type='string', default_value='"default"', optional=True)]), docs=FunctionDoc(description='Retrieve the rotation of elements.', arguments={'theElement': 'The element whose rotation will be retrieved', 'rotOrder': 'A string representing the rotation order desired when returning the http://en.wikipedia.org/wiki/Euler_angles euler angles. If omitted, default value is default. Allowed values are:', '"default"': 'default MTA behavior prior to 1.1, where rotation order depends on element type', '"ZXY"': 'rotation about the Z axis (up), then about the resulting X axis (right) and finally about the resulting Y axis (front). This is the default rotation order for object|objects', '"ZYX"': 'rotation about the Z axis (up), then about the resulting Y axis (front), and finally about the resulting X axis (right). This is the default rotation order for vehicle|vehicles\nThe default rotation order for peds/players is Z-Y-X (clientside) and -Z-Y-X (serverside) but those rotation orders (set using \'\'"default"\'\' on peds) can not be used manually on other element types since they only exist due to historical and backward compatibility reasons.\nSpecifying a rotation order other than \'\'"default"\'\' allows the same angles to later be uniformly used on several elements without having to consider their type.'}, result="* ''rx, ry, rz'': 3 ''float''s representing the Euler rotation angles on the axis X, Y and Z (with the rotation order depending on the ''rotOrder'' argument) if ''element'' exists and is a valid element, ''false'' if it's invalid."), oop=FunctionOOP(class_name='element', method_name='getRotation', field='rotation'), url=FunctionUrl(url='/wiki/GetElementRotation', name='getElementRotation', category='Element functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getElementType', return_types=['string'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is used to retrieve the type of an element.', arguments={'theElement': 'The element you wish to get the type of.'}, result="Returns a ''string'' containing the element type, ''false'' if invalid arguments were passed."), oop=FunctionOOP(class_name='element', method_name='getType', field='type'), url=FunctionUrl(url='/wiki/GetElementType', name='getElementType', category='Element functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getElementType', return_types=['string'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is used to retrieve the type of an element.', arguments={'theElement': 'The element you wish to get the type of.'}, result="Returns a ''string'' containing the element type, ''false'' if invalid arguments were passed."), oop=FunctionOOP(class_name='element', method_name='getType', field='type'), url=FunctionUrl(url='/wiki/GetElementType', name='getElementType', category='Element functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getElementVelocity', return_types=['float', 'float', 'float'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns three floats containing the velocity (movement speeds) along the X, Y, and Z axis respectively. This means that velocity values can be positive and negative for each axis. ', arguments={'theElement': ': The element you wish to retrieve the velocity of.'}, result="If succesful, returns three ''float''s that represent the element's current velocity along the ''x'', ''y'', and ''z'' axis respectively. This function can fail if the element is a player in a car. Use the vehicle element in this case. It will also fail if the element specified does not have a velocity, or does not exist. In case of failure, the first return value will be ''false''.\nThe returned values are expressed in GTA units per 1/50th of a second[http://forum.mtasa.com/viewtopic.php?f=91&t=31225]. A GTA Unit is equal to one metre[http://gta.wikia.com/Unit#GTA3.2C_GTAVC_.26_GTASA]."), oop=FunctionOOP(class_name='element', method_name='getVelocity', field='velocity'), url=FunctionUrl(url='/wiki/GetElementVelocity', name='getElementVelocity', category='Element functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getElementVelocity', return_types=['float', 'float', 'float'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns three floats containing the velocity (movement speeds) along the X, Y, and Z axis respectively. This means that velocity values can be positive and negative for each axis. ', arguments={'theElement': ': The element you wish to retrieve the velocity of.'}, result="If succesful, returns three ''float''s that represent the element's current velocity along the ''x'', ''y'', and ''z'' axis respectively. This function can fail if the element is a player in a car. Use the vehicle element in this case. It will also fail if the element specified does not have a velocity, or does not exist. In case of failure, the first return value will be ''false''.\nThe returned values are expressed in GTA units per 1/50th of a second[http://forum.mtasa.com/viewtopic.php?f=91&t=31225]. A GTA Unit is equal to one metre[http://gta.wikia.com/Unit#GTA3.2C_GTAVC_.26_GTASA]."), oop=FunctionOOP(class_name='element', method_name='getVelocity', field='velocity'), url=FunctionUrl(url='/wiki/GetElementVelocity', name='getElementVelocity', category='Element functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getElementsByType', return_types=['table'], arguments=[FunctionArgument(name='theType', argument_type='string', default_value=None, optional=False), FunctionArgument(name='startat', argument_type='element', default_value='getRootElement(', optional=False)]), docs=FunctionDoc(description='This function is used to retrieve a list of all elements of the specified type. This can be useful, as it disregards \'\'where\'\' in the element tree it is. It can be used with either the built in types (listed below) or with any custom type used in a .map file. For example, if there is an element of type "flag" (e.g. <flag />) in the .map file, the using "flag" as the type argument would find it.', arguments={}, result="Returns a ''table'' containing all the elements of the specified type. Returns an empty ''table'' if there are no elements of the specified type. Returns ''false'' if the string specified is invalid (or not a string)."), oop=None, url=FunctionUrl(url='/wiki/GetElementsByType', name='getElementsByType', category='Element functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getElementsByType', return_types=['table'], arguments=[FunctionArgument(name='theType', argument_type='string', default_value=None, optional=False), FunctionArgument(name='startat', argument_type='element', default_value='getRootElement(', optional=False), FunctionArgument(name='streamedIn', argument_type='bool', default_value='false', optional=False)]), docs=FunctionDoc(description='This function is used to retrieve a list of all elements of the specified type. This can be useful, as it disregards \'\'where\'\' in the element tree it is. It can be used with either the built in types (listed below) or with any custom type used in a .map file. For example, if there is an element of type "flag" (e.g. <flag />) in the .map file, the using "flag" as the type argument would find it.', arguments={}, result="Returns a ''table'' containing all the elements of the specified type. Returns an empty ''table'' if there are no elements of the specified type. Returns ''false'' if the string specified is invalid (or not a string)."), oop=None, url=FunctionUrl(url='/wiki/GetElementsByType', name='getElementsByType', category='Element functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getElementsWithinColShape', return_types=['table'], arguments=[FunctionArgument(name='theShape', argument_type='colshape', default_value=None, optional=False), FunctionArgument(name='elemType', argument_type='string', default_value='nil', optional=True)]), docs=FunctionDoc(description="This function is used to retrieve a list of all elements in a colshape, of the specified type.\n* For legacy reasons, a colshape created on the client does not collide with elements already existing at that location until they first move\n* This function doesn't verify whether elements are in the same dimension and interior, additional checks could be implemented manually if they are needed\n}}", arguments={'theShape': 'The colshape you want to get the elements from.', 'elemType': 'The type of element you want a list of. This can be any element type, the common ones being:', '"player"': 'A player connected to the server', '"ped"': 'A ped', '"vehicle"': 'A vehicle', '"object"': 'An object', '"pickup"': 'A pickup', '"marker"': 'A marker', '"spawnpoint"': 'A spawnpoint', '"remoteclient"': 'A remote client connected to the server', '"console"': 'The server Console-->'}, result="Returns a [[table]] containing all the elements inside the colshape, of the specified type. Returns an empty [[table]] if there are no elements inside. Returns ''false'' if the colshape is invalid."), oop=FunctionOOP(class_name='colshape', method_name='getElementsWithin', field='elementsWithin'), url=FunctionUrl(url='/wiki/GetElementsWithinColShape', name='getElementsWithinColShape', category='Element functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getElementsWithinColShape', return_types=['table'], arguments=[FunctionArgument(name='theShape', argument_type='colshape', default_value=None, optional=False), FunctionArgument(name='elemType', argument_type='string', default_value='nil', optional=True)]), docs=FunctionDoc(description="This function is used to retrieve a list of all elements in a colshape, of the specified type.\n* For legacy reasons, a colshape created on the client does not collide with elements already existing at that location until they first move\n* This function doesn't verify whether elements are in the same dimension and interior, additional checks could be implemented manually if they are needed\n}}", arguments={'theShape': 'The colshape you want to get the elements from.', 'elemType': 'The type of element you want a list of. This can be any element type, the common ones being:', '"player"': 'A player connected to the server', '"ped"': 'A ped', '"vehicle"': 'A vehicle', '"object"': 'An object', '"pickup"': 'A pickup', '"marker"': 'A marker', '"spawnpoint"': 'A spawnpoint', '"remoteclient"': 'A remote client connected to the server', '"console"': 'The server Console-->'}, result="Returns a [[table]] containing all the elements inside the colshape, of the specified type. Returns an empty [[table]] if there are no elements inside. Returns ''false'' if the colshape is invalid."), oop=FunctionOOP(class_name='colshape', method_name='getElementsWithin', field='elementsWithin'), url=FunctionUrl(url='/wiki/GetElementsWithinColShape', name='getElementsWithinColShape', category='Element functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getElementsWithinRange', return_types=['table'], arguments=[FunctionArgument(name='x', argument_type='float', default_value=None, optional=False), FunctionArgument(name='y', argument_type='float', default_value=None, optional=False), FunctionArgument(name='z', argument_type='float', default_value=None, optional=False), FunctionArgument(name='range', argument_type='float', default_value=None, optional=False), FunctionArgument(name='elemType', argument_type='string', default_value='""', optional=True)]), docs=FunctionDoc(description="* This function checks if elements are in a box, not in a sphere.\n* Z argument isn't in use currently, but make your scripts like it is for future compatibility reasons.\n* This function doesn't work with elements which is created by createElement.}}", arguments={'x': 'the x coordinate at which to retrieve elements', 'y': 'the y coordinate at which to retrieve elements', 'z': 'the z coordinate at which to retrieve elements', 'range': 'the range at the coordinates in which to retrieve elements', 'elemType': 'The type of element you want a list of. This can be any element type, such as:', '"player"': 'A player connected to the server', '"ped"': 'A ped', '"vehicle"': 'A vehicle', '"object"': 'An object', '"pickup"': 'A pickup', '"marker"': 'A marker', 'interior': 'The interior you want to limit the search to. If not specified, it can return elements in any interior.', 'dimension': 'The dimension you want to limit the search to. If not specified, it can return elements in any dimension.\n}}'}, result="Returns a [[table]] containing all the elements of the specified type within range. Returns an empty [[table]] if there are no elements within range. Returns ''false'' if the arguments are invalid."), oop=FunctionOOP(class_name='Element', method_name='getWithinRange}}\n===Required Arguments===\n*\'\'\'x:\'\'\' the x coordinate at which to retrieve elements\n*\'\'\'y:\'\'\' the y coordinate at which to retrieve elements\n*\'\'\'z:\'\'\' the z coordinate at which to retrieve elements\n*\'\'\'range:\'\'\' the range at the coordinates in which to retrieve elements\n\n===Optional Arguments===\n*\'\'\'elemType:\'\'\' The type of element you want a list of. This can be any element type, such as:\n**\'\'\'"player":\'\'\' A player connected to the server\n**\'\'\'"ped":\'\'\' A ped\n**\'\'\'"vehicle":\'\'\' A vehicle\n**\'\'\'"object":\'\'\' An object\n**\'\'\'"pickup":\'\'\' A pickup\n**\'\'\'"marker":\'\'\' A marker\n\n{{New feature/item', field='3.0160'), url=FunctionUrl(url='/wiki/GetElementsWithinRange', name='getElementsWithinRange', category='Element functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getElementsWithinRange', return_types=['table'], arguments=[FunctionArgument(name='x', argument_type='float', default_value=None, optional=False), FunctionArgument(name='y', argument_type='float', default_value=None, optional=False), FunctionArgument(name='z', argument_type='float', default_value=None, optional=False), FunctionArgument(name='range', argument_type='float', default_value=None, optional=False), FunctionArgument(name='elemType', argument_type='string', default_value='""', optional=True)]), docs=FunctionDoc(description="* This function checks if elements are in a box, not in a sphere.\n* Z argument isn't in use currently, but make your scripts like it is for future compatibility reasons.\n* This function doesn't work with elements which is created by createElement.}}", arguments={'x': 'the x coordinate at which to retrieve elements', 'y': 'the y coordinate at which to retrieve elements', 'z': 'the z coordinate at which to retrieve elements', 'range': 'the range at the coordinates in which to retrieve elements', 'elemType': 'The type of element you want a list of. This can be any element type, such as:', '"player"': 'A player connected to the server', '"ped"': 'A ped', '"vehicle"': 'A vehicle', '"object"': 'An object', '"pickup"': 'A pickup', '"marker"': 'A marker', 'interior': 'The interior you want to limit the search to. If not specified, it can return elements in any interior.', 'dimension': 'The dimension you want to limit the search to. If not specified, it can return elements in any dimension.\n}}'}, result="Returns a [[table]] containing all the elements of the specified type within range. Returns an empty [[table]] if there are no elements within range. Returns ''false'' if the arguments are invalid."), oop=FunctionOOP(class_name='Element', method_name='getWithinRange}}\n===Required Arguments===\n*\'\'\'x:\'\'\' the x coordinate at which to retrieve elements\n*\'\'\'y:\'\'\' the y coordinate at which to retrieve elements\n*\'\'\'z:\'\'\' the z coordinate at which to retrieve elements\n*\'\'\'range:\'\'\' the range at the coordinates in which to retrieve elements\n\n===Optional Arguments===\n*\'\'\'elemType:\'\'\' The type of element you want a list of. This can be any element type, such as:\n**\'\'\'"player":\'\'\' A player connected to the server\n**\'\'\'"ped":\'\'\' A ped\n**\'\'\'"vehicle":\'\'\' A vehicle\n**\'\'\'"object":\'\'\' An object\n**\'\'\'"pickup":\'\'\' A pickup\n**\'\'\'"marker":\'\'\' A marker\n\n{{New feature/item', field='3.0160'), url=FunctionUrl(url='/wiki/GetElementsWithinRange', name='getElementsWithinRange', category='Element functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getLowLODElement', return_types=['element'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='This function return the low LOD element that an element is associated with.', arguments={'theElement': 'The element whose low LOD version we want to get.'}, result="Returns a low LOD element if successful, ''false'' otherwise."), oop=FunctionOOP(class_name='element', method_name='getLowLOD', field='lowLOD'), url=FunctionUrl(url='/wiki/GetLowLODElement', name='getLowLODElement', category='Element functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getLowLODElement', return_types=['element'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='This function return the low LOD element that an element is associated with.', arguments={'theElement': 'The element whose low LOD version we want to get.'}, result="Returns a low LOD element if successful, ''false'' otherwise."), oop=FunctionOOP(class_name='element', method_name='getLowLOD', field='lowLOD'), url=FunctionUrl(url='/wiki/GetLowLODElement', name='getLowLODElement', category='Element functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getRootElement', return_types=['element'], arguments=[]), docs=FunctionDoc(description="This function returns the root node of the [[element tree]], called ''root''. This node contains every other element: all resource root elements, players and remote clients. It is never destroyed and cannot be destroyed using [[destroyElement]].\nIt is often used to attach handler functions to events triggered for any element, or also to make a scripting function affect all elements.", arguments={}, result='Returns the root [[element]].'), oop=None, url=FunctionUrl(url='/wiki/GetRootElement', name='getRootElement', category='Element functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getRootElement', return_types=['element'], arguments=[]), docs=FunctionDoc(description="This function returns the root node of the [[element tree]], called ''root''. This node contains every other element: all resource root elements, players and remote clients. It is never destroyed and cannot be destroyed using [[destroyElement]].\nIt is often used to attach handler functions to events triggered for any element, or also to make a scripting function affect all elements.", arguments={}, result='Returns the root [[element]].'), oop=None, url=FunctionUrl(url='/wiki/GetRootElement', name='getRootElement', category='Element functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='isElement', return_types=['bool'], arguments=[FunctionArgument(name='theValue', argument_type='var', default_value=None, optional=False)]), docs=FunctionDoc(description='This function checks if a value is an [[element]] or not.', arguments={'theValue': ': The value that we want to check.'}, result="Returns ''true'' if the passed value is an element, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/IsElement', name='isElement', category='Element functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='isElement', return_types=['bool'], arguments=[FunctionArgument(name='theValue', argument_type='var', default_value=None, optional=False)]), docs=FunctionDoc(description='This function checks if a value is an [[element]] or not.', arguments={'theValue': ': The value that we want to check.'}, result="Returns ''true'' if the passed value is an element, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/IsElement', name='isElement', category='Element functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='isElementAttached', return_types=['bool'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description="<!-- Describe in plain english what this function does. Don't go into details, just give an overview -->\nThis functions checks whether or not an element is attached to another element.", arguments={'theElement': 'The element to check for attachment.'}, result="<!-- Make this descriptive. Explain what cases will return false. If you're unsure, add a tag to it so we can check -->\nReturns ''true'' if the specified element is attached to another element, ''false'' if it is not attached or ''nil'' if an improper argument was passed."), oop=FunctionOOP(class_name='element', method_name='isAttached', field='attached'), url=FunctionUrl(url='/wiki/IsElementAttached', name='isElementAttached', category='Element functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='isElementAttached', return_types=['bool'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description="<!-- Describe in plain english what this function does. Don't go into details, just give an overview -->\nThis functions checks whether or not an element is attached to another element.", arguments={'theElement': 'The element to check for attachment.'}, result="<!-- Make this descriptive. Explain what cases will return false. If you're unsure, add a tag to it so we can check -->\nReturns ''true'' if the specified element is attached to another element, ''false'' if it is not attached or ''nil'' if an improper argument was passed."), oop=FunctionOOP(class_name='element', method_name='isAttached', field='attached'), url=FunctionUrl(url='/wiki/IsElementAttached', name='isElementAttached', category='Element functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='isElementDoubleSided', return_types=['bool'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='This function checks whether an element is double-sided as set by [[setElementDoubleSided]] or not.', arguments={'theElement': 'The element in which youd like to check the double-sidedness of.'}, result="Returns ''true'' if the '''theElement''' is double-sided, ''false'' otherwise."), oop=FunctionOOP(class_name='element', method_name='isDoubleSided', field='doubleSided'), url=FunctionUrl(url='/wiki/IsElementDoubleSided', name='isElementDoubleSided', category='Element functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='isElementDoubleSided', return_types=['bool'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='This function checks whether an element is double-sided as set by [[setElementDoubleSided]] or not.', arguments={'theElement': 'The element in which youd like to check the double-sidedness of.'}, result="Returns ''true'' if the '''theElement''' is double-sided, ''false'' otherwise."), oop=FunctionOOP(class_name='element', method_name='isDoubleSided', field='doubleSided'), url=FunctionUrl(url='/wiki/IsElementDoubleSided', name='isElementDoubleSided', category='Element functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='isElementFrozen', return_types=['bool'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='This function checks if element has been frozen.', arguments={'theElement': 'the element whose freeze status we want to check.'}, result="*Returns ''true'' if the element is frozen, ''false'' if it isn't or if invalid arguments were passed."), oop=FunctionOOP(class_name='element', method_name='isFrozen', field='frozen'), url=FunctionUrl(url='/wiki/IsElementFrozen', name='isElementFrozen', category='Element functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='isElementFrozen', return_types=['bool'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='This function checks if element has been frozen.', arguments={'theElement': 'the element whose freeze status we want to check.'}, result="*Returns ''true'' if the element is frozen, ''false'' if it isn't or if invalid arguments were passed."), oop=FunctionOOP(class_name='element', method_name='isFrozen', field='frozen'), url=FunctionUrl(url='/wiki/IsElementFrozen', name='isElementFrozen', category='Element functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='isElementInWater', return_types=['bool'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='This function checks whether an [[element]] is submerged in water.', arguments={'theElement': ': The element to check.'}, result="Returns ''true'' if the passed element is in water, ''false'' if it isn't, or if the element is invalid."), oop=FunctionOOP(class_name='element', method_name='isInWater', field="inWater}}\n\n===Required Arguments===\n* '''theElement''': The element to check.\n\n===Returns===\nReturns ''true'' if the passed element is in water, ''false'' if it isn't, or if the element is invalid.\n\n"), url=FunctionUrl(url='/wiki/IsElementInWater', name='isElementInWater', category='Element functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='isElementInWater', return_types=['bool'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='This function checks whether an [[element]] is submerged in water.', arguments={'theElement': ': The element to check.'}, result="Returns ''true'' if the passed element is in water, ''false'' if it isn't, or if the element is invalid."), oop=FunctionOOP(class_name='element', method_name='isInWater', field="inWater}}\n\n===Required Arguments===\n* '''theElement''': The element to check.\n\n===Returns===\nReturns ''true'' if the passed element is in water, ''false'' if it isn't, or if the element is invalid.\n\n"), url=FunctionUrl(url='/wiki/IsElementInWater', name='isElementInWater', category='Element functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='isElementLowLOD', return_types=['bool'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='This function reveals if an element is low LOD.', arguments={'theElement': 'The element whose low LOD status we want to get.'}, result="Returns ''true'' if the element is low LOD, ''false'' otherwise."), oop=FunctionOOP(class_name='element', method_name='isLowLOD', field=None), url=FunctionUrl(url='/wiki/IsElementLowLOD', name='isElementLowLOD', category='Element functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='isElementLowLOD', return_types=['bool'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='This function reveals if an element is low LOD.', arguments={'theElement': 'The element whose low LOD status we want to get.'}, result="Returns ''true'' if the element is low LOD, ''false'' otherwise."), oop=FunctionOOP(class_name='element', method_name='isLowLOD', field=None), url=FunctionUrl(url='/wiki/IsElementLowLOD', name='isElementLowLOD', category='Element functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='isElementWithinColShape', return_types=['bool'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False), FunctionArgument(name='theShape', argument_type='colshape', default_value=None, optional=False)]), docs=FunctionDoc(description="This function is used to determine if an element is within a collision shape. Please note that for legacy reasons, a colshape created on the client does not collide with elements already existing at that location until they first move. Please also note that before 1.0.3, this did not function correctly when moving a colshape.\nPlease note that this function doesn't verify whether element is in the same dimension and interior, additional checks could be implemented manually if they are needed.", arguments={'theElement': 'The element youre checking.', 'theShape': 'The colshape youre checking'}, result="Returns ''true'' if the element is within the colshape, ''false'' otherwise"), oop=None, url=FunctionUrl(url='/wiki/IsElementWithinColShape', name='isElementWithinColShape', category='Element functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='isElementWithinColShape', return_types=['bool'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False), FunctionArgument(name='theShape', argument_type='colshape', default_value=None, optional=False)]), docs=FunctionDoc(description="This function is used to determine if an element is within a collision shape. Please note that for legacy reasons, a colshape created on the client does not collide with elements already existing at that location until they first move. Please also note that before 1.0.3, this did not function correctly when moving a colshape.\nPlease note that this function doesn't verify whether element is in the same dimension and interior, additional checks could be implemented manually if they are needed.", arguments={'theElement': 'The element youre checking.', 'theShape': 'The colshape youre checking'}, result="Returns ''true'' if the element is within the colshape, ''false'' otherwise"), oop=None, url=FunctionUrl(url='/wiki/IsElementWithinColShape', name='isElementWithinColShape', category='Element functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setElementAlpha', return_types=['bool'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False), FunctionArgument(name='alpha', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='[[file:SetElementAlpha.png|400px|thumb|right|Player ped alpha demonstration. Shown alpha levels are 255, 100 and 0 (left to right).]]\nThis function sets the alpha (transparency) value for the specified [[element]]. This can be a [[player]], [[ped]], [[object]], [[vehicle]] or [[Element/Weapon|weapon]].', arguments={'theElement': 'The element whose alpha you want to set.', 'alpha': 'The alpha value to set. Values are 0-255, where 255 is fully opaque and 0 is fully transparent.', 'Note': 'Objects are fully transparent at 140.'}, result="Returns ''true'' or ''false'' if invalid arguments were passed."), oop=FunctionOOP(class_name='element', method_name='setAlpha', field='alpha'), url=FunctionUrl(url='/wiki/SetElementAlpha', name='setElementAlpha', category='Element functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setElementAlpha', return_types=['bool'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False), FunctionArgument(name='alpha', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='[[file:SetElementAlpha.png|400px|thumb|right|Player ped alpha demonstration. Shown alpha levels are 255, 100 and 0 (left to right).]]\nThis function sets the alpha (transparency) value for the specified [[element]]. This can be a [[player]], [[ped]], [[object]], [[vehicle]] or [[Element/Weapon|weapon]].', arguments={'theElement': 'The element whose alpha you want to set.', 'alpha': 'The alpha value to set. Values are 0-255, where 255 is fully opaque and 0 is fully transparent.', 'Note': 'Objects are fully transparent at 140.'}, result="Returns ''true'' or ''false'' if invalid arguments were passed."), oop=FunctionOOP(class_name='element', method_name='setAlpha', field='alpha'), url=FunctionUrl(url='/wiki/SetElementAlpha', name='setElementAlpha', category='Element functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setElementAngularVelocity', return_types=['bool'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False), FunctionArgument(name='rx', argument_type='float', default_value=None, optional=False), FunctionArgument(name='ry', argument_type='float', default_value=None, optional=False), FunctionArgument(name='rz', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'theElement': 'The element to apply the spin to. Can be either a player, ped, object, vehicle or a Element/Weapon|custom weapon.', 'rx': 'velocity around the X axis', 'ry': 'velocity around the Y axis', 'rz': 'velocity around the Z axis'}, result="Returns ''true'' if it was succesful, ''false'' otherwise."), oop=FunctionOOP(class_name='element', method_name='setAngularVelocity', field='angularVelocity'), url=FunctionUrl(url='/wiki/SetElementAngularVelocity', name='setElementAngularVelocity', category='Element functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setElementAngularVelocity', return_types=['bool'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False), FunctionArgument(name='rx', argument_type='float', default_value=None, optional=False), FunctionArgument(name='ry', argument_type='float', default_value=None, optional=False), FunctionArgument(name='rz', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'theElement': 'The element to apply the spin to. Can be either a player, ped, object, vehicle or a Element/Weapon|custom weapon.', 'rx': 'velocity around the X axis', 'ry': 'velocity around the Y axis', 'rz': 'velocity around the Z axis'}, result="Returns ''true'' if it was succesful, ''false'' otherwise."), oop=FunctionOOP(class_name='element', method_name='setAngularVelocity', field='angularVelocity'), url=FunctionUrl(url='/wiki/SetElementAngularVelocity', name='setElementAngularVelocity', category='Element functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getElementAngularVelocity', return_types=['float,', 'float,', 'float'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'theElement': 'The element to retrieve the angular velocity from. Can be either a player, ped, object, vehicle or a Element/Weapon|custom weapon. Server side supports only vehicles currently.'}, result='Returns three floats describing the x, y and z rotation'), oop=FunctionOOP(class_name='element', method_name='getAngularVelocity', field='angularVelocity'), url=FunctionUrl(url='/wiki/GetElementAngularVelocity', name='getElementAngularVelocity', category='Element functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getElementAngularVelocity', return_types=['float,', 'float,', 'float'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'theElement': 'The element to retrieve the angular velocity from. Can be either a player, ped, object, vehicle or a Element/Weapon|custom weapon. Server side supports only vehicles currently.'}, result='Returns three floats describing the x, y and z rotation'), oop=FunctionOOP(class_name='element', method_name='getAngularVelocity', field='angularVelocity'), url=FunctionUrl(url='/wiki/GetElementAngularVelocity', name='getElementAngularVelocity', category='Element functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setElementAttachedOffsets', return_types=['bool'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False), FunctionArgument(name='xPosOffset', argument_type='float', default_value=None, optional=False), FunctionArgument(name='yPosOffset', argument_type='float', default_value=None, optional=False), FunctionArgument(name='zPosOffset', argument_type='float', default_value=None, optional=False), FunctionArgument(name='xRotOffset', argument_type='float', default_value=None, optional=False), FunctionArgument(name='yRotOffset', argument_type='float', default_value=None, optional=False), FunctionArgument(name='zRotOffset', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='This function updates the offsets of an element that has been attached to another element using [[attachElements]].', arguments={'theElement': 'The attached element.\n{{OptionalArg}} ', 'xPosOffset': 'The x offset, if you want the elements to be a certain distance from one another (default 0).', 'yPosOffset': 'The y offset (default 0).', 'zPosOffset': 'The z offset (default 0).', 'xRotOffset': 'The x rotation offset (default 0).', 'yRotOffset': 'The y rotation offset (default 0).', 'zRotOffset': 'The z rotation offset (default 0).'}, result="Returns ''true'' if the attaching process was successful, ''false'' otherwise."), oop=FunctionOOP(class_name='element', method_name='setAttachedOffsets', field=None), url=FunctionUrl(url='/wiki/SetElementAttachedOffsets', name='setElementAttachedOffsets', category='Element functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setElementAttachedOffsets', return_types=['bool'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False), FunctionArgument(name='xPosOffset', argument_type='float', default_value=None, optional=False), FunctionArgument(name='yPosOffset', argument_type='float', default_value=None, optional=False), FunctionArgument(name='zPosOffset', argument_type='float', default_value=None, optional=False), FunctionArgument(name='xRotOffset', argument_type='float', default_value=None, optional=False), FunctionArgument(name='yRotOffset', argument_type='float', default_value=None, optional=False), FunctionArgument(name='zRotOffset', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='This function updates the offsets of an element that has been attached to another element using [[attachElements]].', arguments={'theElement': 'The attached element.\n{{OptionalArg}} ', 'xPosOffset': 'The x offset, if you want the elements to be a certain distance from one another (default 0).', 'yPosOffset': 'The y offset (default 0).', 'zPosOffset': 'The z offset (default 0).', 'xRotOffset': 'The x rotation offset (default 0).', 'yRotOffset': 'The y rotation offset (default 0).', 'zRotOffset': 'The z rotation offset (default 0).'}, result="Returns ''true'' if the attaching process was successful, ''false'' otherwise."), oop=FunctionOOP(class_name='element', method_name='setAttachedOffsets', field=None), url=FunctionUrl(url='/wiki/SetElementAttachedOffsets', name='setElementAttachedOffsets', category='Element functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setElementCollisionsEnabled', return_types=['bool'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False), FunctionArgument(name='enabled', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description="This function can disable or enable an element's collisions. An element without collisions does not interact with the physical environment and remains static.", arguments={'theElement': 'The element you wish to set the collisions of', 'enabled': 'A boolean to indicate whether collisions are enabled (true) or disabled (false)'}, result="Returns ''true'' if the collisions were set succesfully, ''false'' otherwise."), oop=FunctionOOP(class_name='element', method_name='setCollisionsEnabled', field='collisions'), url=FunctionUrl(url='/wiki/SetElementCollisionsEnabled', name='setElementCollisionsEnabled', category='Element functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setElementCollisionsEnabled', return_types=['bool'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False), FunctionArgument(name='enabled', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description="This function can disable or enable an element's collisions. An element without collisions does not interact with the physical environment and remains static.", arguments={'theElement': 'The element you wish to set the collisions of', 'enabled': 'A boolean to indicate whether collisions are enabled (true) or disabled (false)'}, result="Returns ''true'' if the collisions were set succesfully, ''false'' otherwise."), oop=FunctionOOP(class_name='element', method_name='setCollisionsEnabled', field='collisions'), url=FunctionUrl(url='/wiki/SetElementCollisionsEnabled', name='setElementCollisionsEnabled', category='Element functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setElementData', return_types=['bool'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False), FunctionArgument(name='key', argument_type='string', default_value=None, optional=False), FunctionArgument(name='value', argument_type='var', default_value=None, optional=False), FunctionArgument(name='syncMode', argument_type='var', default_value='"broadcast"', optional=True)]), docs=FunctionDoc(description="This function stores [[element data]] under a certain key, attached to an element. Element data set using this is then synced with all clients and the server. The data can contain server created elements, but you should avoid passing data that is not able to be synced such as xmlnodes, acls, aclgroups etc.\nAs element data is synced to all clients, it can generate a lot of network traffic and be heavy on performance. Events are much more efficient for sending data from a client to the server only, or from the server to a specific client. <br/>\nUsage of element data should be disencouraged where your goal can be achieved with events like above, and [[table|tables]] for storing and retrieving data.\nNote this mode only works when setting element data serverside. Setting data clientside still sends the update to all clients if 'synchronize' is set to true.\n}}", arguments={'theElement': 'The element you wish to attach the data to.', 'key': 'The key you wish to store the data under. (Maximum 31 characters.)', 'value': 'The value you wish to store. See element data for a list of acceptable datatypes.', 'syncMode': 'Synchronisation mode.', '"broadcast"': '- Synchronise to all clients (default behavior). You can also parse true for this option.', '"local"': '- Dont synchronise. You can also parse false for this option.', '"subscribe"': '- Only synchronise to specific clients. See addElementDataSubscriber and removeElementDataSubscriber.'}, result="Returns ''true'' if the data was set succesfully, ''false'' otherwise.\n{{New items|5.0157|1.5.7-9.20477|"), oop=FunctionOOP(class_name='element', method_name='setData', field=None), url=FunctionUrl(url='/wiki/SetElementData', name='setElementData', category='Element functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setElementData', return_types=['bool'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False), FunctionArgument(name='key', argument_type='string', default_value=None, optional=False), FunctionArgument(name='value', argument_type='var', default_value=None, optional=False), FunctionArgument(name='synchronize', argument_type='bool', default_value='true', optional=True)]), docs=FunctionDoc(description="This function stores [[element data]] under a certain key, attached to an element. Element data set using this is then synced with all clients and the server. The data can contain server created elements, but you should avoid passing data that is not able to be synced such as xmlnodes, acls, aclgroups etc.\nAs element data is synced to all clients, it can generate a lot of network traffic and be heavy on performance. Events are much more efficient for sending data from a client to the server only, or from the server to a specific client. <br/>\nUsage of element data should be disencouraged where your goal can be achieved with events like above, and [[table|tables]] for storing and retrieving data.\nNote this mode only works when setting element data serverside. Setting data clientside still sends the update to all clients if 'synchronize' is set to true.\n}}", arguments={'theElement': 'The element you wish to attach the data to.', 'key': 'The key you wish to store the data under. (Maximum 31 characters.)', 'value': 'The value you wish to store. See element data for a list of acceptable datatypes.', 'synchronize': 'Determines whether or not the data will be synchronized with the server.'}, result="Returns ''true'' if the data was set succesfully, ''false'' otherwise.\n{{New items|5.0157|1.5.7-9.20477|"), oop=FunctionOOP(class_name='element', method_name='setData', field=None), url=FunctionUrl(url='/wiki/SetElementData', name='setElementData', category='Element functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setElementDimension', return_types=['bool'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False), FunctionArgument(name='dimension', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function allows you to set the [[dimension]] of any element. The dimension determines what/who the element is visible to.', arguments={'theElement': 'The element in which youd like to set the dimension of.', 'dimension': 'An integer representing the dimension ID. {{New feature/item|3.0154|1.5.3|11199|You can also use -1 to make the element visible in all dimensions (only valid to objects).}} Valid values are 0 to 65535.'}, result="Returns ''true'' if '''theElement''' and '''dimension''' are valid, ''false'' otherwise.\nAlso returns false if '''theElement''' is a player and it's not alive."), oop=FunctionOOP(class_name='element', method_name='setDimension', field='dimension'), url=FunctionUrl(url='/wiki/SetElementDimension', name='setElementDimension', category='Element functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setElementDimension', return_types=['bool'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False), FunctionArgument(name='dimension', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function allows you to set the [[dimension]] of any element. The dimension determines what/who the element is visible to.', arguments={'theElement': 'The element in which youd like to set the dimension of.', 'dimension': 'An integer representing the dimension ID. {{New feature/item|3.0154|1.5.3|11199|You can also use -1 to make the element visible in all dimensions (only valid to objects).}} Valid values are 0 to 65535.'}, result="Returns ''true'' if '''theElement''' and '''dimension''' are valid, ''false'' otherwise.\nAlso returns false if '''theElement''' is a player and it's not alive."), oop=FunctionOOP(class_name='element', method_name='setDimension', field='dimension'), url=FunctionUrl(url='/wiki/SetElementDimension', name='setElementDimension', category='Element functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setElementDoubleSided', return_types=['bool'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False), FunctionArgument(name='enable', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description="This function allows you to set the double-sidedness of an element's model. When an element's model is double-sided, it's back facing triangles become visible.\nPossible uses of double-sidedness are: Elimination of invisible walls, using buildings as enclosures, using inverted landmasses as large pits or to make cave networks. It can also remove the need to add extra triangles to custom models when trying to make them appear solid from all directions.", arguments={'theElement': 'The element in which youd like to set the double-sidedness of.', 'enable ': 'Set to true/false to enable/disable double-sidedness.'}, result="Returns ''true'' if '''theElement''' is valid, ''false'' otherwise."), oop=FunctionOOP(class_name='element', method_name='setDoubleSided', field='doubleSided'), url=FunctionUrl(url='/wiki/SetElementDoubleSided', name='setElementDoubleSided', category='Element functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setElementDoubleSided', return_types=['bool'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False), FunctionArgument(name='enable', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description="This function allows you to set the double-sidedness of an element's model. When an element's model is double-sided, it's back facing triangles become visible.\nPossible uses of double-sidedness are: Elimination of invisible walls, using buildings as enclosures, using inverted landmasses as large pits or to make cave networks. It can also remove the need to add extra triangles to custom models when trying to make them appear solid from all directions.", arguments={'theElement': 'The element in which youd like to set the double-sidedness of.', 'enable ': 'Set to true/false to enable/disable double-sidedness.'}, result="Returns ''true'' if '''theElement''' is valid, ''false'' otherwise."), oop=FunctionOOP(class_name='element', method_name='setDoubleSided', field='doubleSided'), url=FunctionUrl(url='/wiki/SetElementDoubleSided', name='setElementDoubleSided', category='Element functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setElementFrozen', return_types=['bool'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False), FunctionArgument(name='freezeStatus', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description='This function freezes an element (stops it in its position and disables movement) or unfreezes it.', arguments={'theElement': 'The element whose freeze status we want to change.', 'freezeStatus': 'A boolean denoting whether we want to freeze (true) or unfreeze (false) it.'}, result="Returns ''true'' if the element was frozen, ''false'' if it wasn't or if invalid arguments are passed."), oop=FunctionOOP(class_name='element', method_name='setFrozen', field='frozen'), url=FunctionUrl(url='/wiki/SetElementFrozen', name='setElementFrozen', category='Element functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setElementFrozen', return_types=['bool'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False), FunctionArgument(name='freezeStatus', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description='This function freezes an element (stops it in its position and disables movement) or unfreezes it.', arguments={'theElement': 'The element whose freeze status we want to change.', 'freezeStatus': 'A boolean denoting whether we want to freeze (true) or unfreeze (false) it.'}, result="Returns ''true'' if the element was frozen, ''false'' if it wasn't or if invalid arguments are passed."), oop=FunctionOOP(class_name='element', method_name='setFrozen', field='frozen'), url=FunctionUrl(url='/wiki/SetElementFrozen', name='setElementFrozen', category='Element functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setElementHealth', return_types=['bool'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False), FunctionArgument(name='newHealth', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description="This function sets the health for the specified [[element]]. This can be a [[ped]], [[object]] or a [[vehicle]].\n*'''650:''' white steam 0%, black smoke 0%\n*'''450:''' white steam 100%, black smoke 50%\n*'''250:''' white steam 0%, black smoke 100%\n*'''249:''' fire with big black smoke\n}}", arguments={'theElement': 'The ped, vehicle or object whose health you want to set.', 'newHealth': 'A float indicating the new health to set for the element.'}, result="Returns ''true'' if the new health was set successfully, or ''false'' if invalid arguments were passed."), oop=FunctionOOP(class_name='element', method_name='setHealth', field='health'), url=FunctionUrl(url='/wiki/SetElementHealth', name='setElementHealth', category='Element functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setElementHealth', return_types=['bool'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False), FunctionArgument(name='newHealth', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description="This function sets the health for the specified [[element]]. This can be a [[ped]], [[object]] or a [[vehicle]].\n*'''650:''' white steam 0%, black smoke 0%\n*'''450:''' white steam 100%, black smoke 50%\n*'''250:''' white steam 0%, black smoke 100%\n*'''249:''' fire with big black smoke\n}}", arguments={'theElement': 'The ped, vehicle or object whose health you want to set.', 'newHealth': 'A float indicating the new health to set for the element.'}, result="Returns ''true'' if the new health was set successfully, or ''false'' if invalid arguments were passed."), oop=FunctionOOP(class_name='element', method_name='setHealth', field='health'), url=FunctionUrl(url='/wiki/SetElementHealth', name='setElementHealth', category='Element functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setElementID', return_types=['bool'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False), FunctionArgument(name='name', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='This function sets the ID of an element to a string. This can be anything from an identifying number, to a name.\nYou can only change the ID of an element clientside if that element has been created clientside as well.', arguments={'theElement': 'The element you want to set the ID of.', 'name': 'The new ID for theElement.'}, result="This returns ''true'' if successful. It will return ''false'' if '''theElement''' is invalid, or does not exist, or if '''name''' is invalid, or is not a string."), oop=FunctionOOP(class_name='element', method_name='setID', field='id'), url=FunctionUrl(url='/wiki/SetElementID', name='setElementID', category='Element functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setElementID', return_types=['bool'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False), FunctionArgument(name='name', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='This function sets the ID of an element to a string. This can be anything from an identifying number, to a name.\nYou can only change the ID of an element clientside if that element has been created clientside as well.', arguments={'theElement': 'The element you want to set the ID of.', 'name': 'The new ID for theElement.'}, result="This returns ''true'' if successful. It will return ''false'' if '''theElement''' is invalid, or does not exist, or if '''name''' is invalid, or is not a string."), oop=FunctionOOP(class_name='element', method_name='setID', field='id'), url=FunctionUrl(url='/wiki/SetElementID', name='setElementID', category='Element functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setElementInterior', return_types=['bool'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False), FunctionArgument(name='interior', argument_type='int', default_value=None, optional=False), FunctionArgument(name='x', argument_type='float', default_value=None, optional=True), FunctionArgument(name='y', argument_type='float', default_value=None, optional=True), FunctionArgument(name='z', argument_type='float', default_value=None, optional=True)]), docs=FunctionDoc(description='This function allows you to set the [[interior]] of any element. An interior is the current loaded place, 0 being outside.', arguments={'theElement': 'The element in which youd like to set the interior of.', 'interior': 'The interior you want to set the element to. Valid values are 0 to 255.\n{{OptionalArg}} ', 'x': 'A floating point number representing the X coordinate on the map.', 'y': 'A floating point number representing the Y coordinate on the map.', 'z': 'A floating point number representing the Z coordinate on the map.'}, result="Returns ''true'' if '''theElement''' and '''interior''' are valid arguments, ''false'' otherwise."), oop=FunctionOOP(class_name='element', method_name='setInterior', field='interior'), url=FunctionUrl(url='/wiki/SetElementInterior', name='setElementInterior', category='Element functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setElementInterior', return_types=['bool'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False), FunctionArgument(name='interior', argument_type='int', default_value=None, optional=False), FunctionArgument(name='x', argument_type='float', default_value=None, optional=True), FunctionArgument(name='y', argument_type='float', default_value=None, optional=True), FunctionArgument(name='z', argument_type='float', default_value=None, optional=True)]), docs=FunctionDoc(description='This function allows you to set the [[interior]] of any element. An interior is the current loaded place, 0 being outside.', arguments={'theElement': 'The element in which youd like to set the interior of.', 'interior': 'The interior you want to set the element to. Valid values are 0 to 255.\n{{OptionalArg}} ', 'x': 'A floating point number representing the X coordinate on the map.', 'y': 'A floating point number representing the Y coordinate on the map.', 'z': 'A floating point number representing the Z coordinate on the map.'}, result="Returns ''true'' if '''theElement''' and '''interior''' are valid arguments, ''false'' otherwise."), oop=FunctionOOP(class_name='element', method_name='setInterior', field='interior'), url=FunctionUrl(url='/wiki/SetElementInterior', name='setElementInterior', category='Element functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setElementMatrix', return_types=['bool'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False), FunctionArgument(name='theMatrix', argument_type='table', default_value=None, optional=False)]), docs=FunctionDoc(description='This function sets matrix to element.', arguments={'theElement': 'The element which you set matrix', 'theMatrix': 'The matrix.'}, result="Returns ''true'' if the matrix was set succesfully, ''false'' otherwise."), oop=FunctionOOP(class_name='element', method_name='setMatrix', field='matrix'), url=FunctionUrl(url='/wiki/SetElementMatrix', name='setElementMatrix', category='Element functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setElementMatrix', return_types=['bool'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False), FunctionArgument(name='theMatrix', argument_type='table', default_value=None, optional=False)]), docs=FunctionDoc(description='This function sets matrix to element.', arguments={'theElement': 'The element which you set matrix', 'theMatrix': 'The matrix.'}, result="Returns ''true'' if the matrix was set succesfully, ''false'' otherwise."), oop=FunctionOOP(class_name='element', method_name='setMatrix', field='matrix'), url=FunctionUrl(url='/wiki/SetElementMatrix', name='setElementMatrix', category='Element functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setElementModel', return_types=['bool'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False), FunctionArgument(name='model', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='Sets the model of a given element. This allows you to change the model of a player (or ped), a vehicle or an object.', arguments={'theElement': 'the element you want to change.', 'model': 'the model ID to set.\n** For players/peds: A GTASA player model (skin) ID. See [[Character Skins]].\n** For vehicles: The [[Vehicle IDs|vehicle ID]] of the vehicle being changed.\n** For objects/projectiles/weapons: An [[int]] specifying the model id.'}, result="Returns ''true'' if successful, ''false'' otherwise."), oop=FunctionOOP(class_name='element', method_name='setModel', field='model'), url=FunctionUrl(url='/wiki/SetElementModel', name='setElementModel', category='Element functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setElementModel', return_types=['bool'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False), FunctionArgument(name='model', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='Sets the model of a given element. This allows you to change the model of a player (or ped), a vehicle or an object.', arguments={'theElement': 'the element you want to change.', 'model': 'the model ID to set.\n** For players/peds: A GTASA player model (skin) ID. See [[Character Skins]].\n** For vehicles: The [[Vehicle IDs|vehicle ID]] of the vehicle being changed.\n** For objects/projectiles/weapons: An [[int]] specifying the model id.'}, result="Returns ''true'' if successful, ''false'' otherwise."), oop=FunctionOOP(class_name='element', method_name='setModel', field='model'), url=FunctionUrl(url='/wiki/SetElementModel', name='setElementModel', category='Element functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setElementParent', return_types=['bool'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False), FunctionArgument(name='parent', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is used for setting an element as the parent of another element.', arguments={'theElement': 'The element that you wish to set the parent of.', 'parent': 'The element you wish to be the parent of theElement.'}, result="Returns ''true'' if both [[element]]s are valid, ''false'' otherwise."), oop=FunctionOOP(class_name='element', method_name='setParent', field='parent'), url=FunctionUrl(url='/wiki/SetElementParent', name='setElementParent', category='Element functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setElementParent', return_types=['bool'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False), FunctionArgument(name='parent', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is used for setting an element as the parent of another element.', arguments={'theElement': 'The element that you wish to set the parent of.', 'parent': 'The element you wish to be the parent of theElement.'}, result="Returns ''true'' if both [[element]]s are valid, ''false'' otherwise."), oop=FunctionOOP(class_name='element', method_name='setParent', field='parent'), url=FunctionUrl(url='/wiki/SetElementParent', name='setElementParent', category='Element functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setElementPosition', return_types=['bool'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False), FunctionArgument(name='x', argument_type='float', default_value=None, optional=False), FunctionArgument(name='y', argument_type='float', default_value=None, optional=False), FunctionArgument(name='z', argument_type='float', default_value=None, optional=False), FunctionArgument(name='warp', argument_type='bool', default_value='true', optional=True)]), docs=FunctionDoc(description='This function sets the position of an element to the specified coordinates.', arguments={'theElement': 'A valid element to be moved.', 'x': 'The x coordinate of the destination.', 'y': 'The y coordinate of the destination.', 'z': 'The z coordinate of the destination.', 'warp': 'teleports players, resetting any animations they were doing. Setting this to false preserves the current animation.'}, result="Returns ''true'' if the function was successful, ''false'' otherwise."), oop=FunctionOOP(class_name='element', method_name='setPosition', field='position'), url=FunctionUrl(url='/wiki/SetElementPosition', name='setElementPosition', category='Element functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setElementPosition', return_types=['bool'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False), FunctionArgument(name='x', argument_type='float', default_value=None, optional=False), FunctionArgument(name='y', argument_type='float', default_value=None, optional=False), FunctionArgument(name='z', argument_type='float', default_value=None, optional=False), FunctionArgument(name='warp', argument_type='bool', default_value='true', optional=True)]), docs=FunctionDoc(description='This function sets the position of an element to the specified coordinates.', arguments={'theElement': 'A valid element to be moved.', 'x': 'The x coordinate of the destination.', 'y': 'The y coordinate of the destination.', 'z': 'The z coordinate of the destination.', 'warp': 'teleports players, resetting any animations they were doing. Setting this to false preserves the current animation.'}, result="Returns ''true'' if the function was successful, ''false'' otherwise."), oop=FunctionOOP(class_name='element', method_name='setPosition', field='position'), url=FunctionUrl(url='/wiki/SetElementPosition', name='setElementPosition', category='Element functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setElementRotation', return_types=['bool'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False), FunctionArgument(name='rotX', argument_type='float', default_value=None, optional=False), FunctionArgument(name='rotY', argument_type='float', default_value=None, optional=False), FunctionArgument(name='rotZ', argument_type='float', default_value=None, optional=False), FunctionArgument(name='rotOrder', argument_type='string', default_value='"default"', optional=True), FunctionArgument(name='conformPedRotation', argument_type='bool', default_value='false', optional=True)]), docs=FunctionDoc(description='Sets the rotation of elements according to the world (does not work with players that are on the ground).', arguments={'theElement': 'The element whose rotation will be set', 'rotX': 'The elements rotation around the x axis in degrees', 'rotY': 'The elements rotation around the y axis in degrees', 'rotZ': 'The elements rotation around the z axis in degrees\n{{New feature|3.0110|1.1|', 'rotOrder': 'A string representing the rotation order desired when interpreting the provided http://en.wikipedia.org/wiki/Euler_angles euler angles. If omitted, default value is default. Allowed values are:', '"default"': 'default MTA behavior prior to 1.1, where rotation order depends on element type', '"ZXY"': 'rotation about the Z axis (up), then about the resulting X axis (right), and finally about the resulting Y axis (front). This is the default rotation order for object|objects', '"ZYX"': 'rotation about the Z axis (up), then about the resulting Y axis (front), and finally about the resulting X axis (right). This is the default rotation order for vehicle|vehicles\nThe default rotation order for peds/players is -Z-Y-X but this rotation order (set using \'\'"default"\'\' on peds) can not be set manually on other element types since it only exists due to historical and backward compatibility reasons.\nSpecifying a rotation order other than \'\'"default"\'\' allows the same angles to be uniformly used on several elements without having to consider their type.\n}}\n{{New feature/item|3.0152|1.3.2|4680|', 'conformPedRotation': 'Relevant only for peds and will be ignored for other element types. A bool which should be set to true to ensure the ped rotation is correctly set in all circumstances. Failing to set this argument may result in the ped rotation being inverted whilst it is in the air and other inconsistencies. The default value of false is for backward compatibility with scripts which may depend upon the incorrect behaviour.\n}}'}, result="Returns ''true'' if the element rotation was successfully set and ''false'' otherwise."), oop=FunctionOOP(class_name='element', method_name='setRotation', field='rotation'), url=FunctionUrl(url='/wiki/SetElementRotation', name='setElementRotation', category='Element functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setElementRotation', return_types=['bool'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False), FunctionArgument(name='rotX', argument_type='float', default_value=None, optional=False), FunctionArgument(name='rotY', argument_type='float', default_value=None, optional=False), FunctionArgument(name='rotZ', argument_type='float', default_value=None, optional=False), FunctionArgument(name='rotOrder', argument_type='string', default_value='"default"', optional=True), FunctionArgument(name='conformPedRotation', argument_type='bool', default_value='false', optional=True)]), docs=FunctionDoc(description='Sets the rotation of elements according to the world (does not work with players that are on the ground).', arguments={'theElement': 'The element whose rotation will be set', 'rotX': 'The elements rotation around the x axis in degrees', 'rotY': 'The elements rotation around the y axis in degrees', 'rotZ': 'The elements rotation around the z axis in degrees\n{{New feature|3.0110|1.1|', 'rotOrder': 'A string representing the rotation order desired when interpreting the provided http://en.wikipedia.org/wiki/Euler_angles euler angles. If omitted, default value is default. Allowed values are:', '"default"': 'default MTA behavior prior to 1.1, where rotation order depends on element type', '"ZXY"': 'rotation about the Z axis (up), then about the resulting X axis (right), and finally about the resulting Y axis (front). This is the default rotation order for object|objects', '"ZYX"': 'rotation about the Z axis (up), then about the resulting Y axis (front), and finally about the resulting X axis (right). This is the default rotation order for vehicle|vehicles\nThe default rotation order for peds/players is -Z-Y-X but this rotation order (set using \'\'"default"\'\' on peds) can not be set manually on other element types since it only exists due to historical and backward compatibility reasons.\nSpecifying a rotation order other than \'\'"default"\'\' allows the same angles to be uniformly used on several elements without having to consider their type.\n}}\n{{New feature/item|3.0152|1.3.2|4680|', 'conformPedRotation': 'Relevant only for peds and will be ignored for other element types. A bool which should be set to true to ensure the ped rotation is correctly set in all circumstances. Failing to set this argument may result in the ped rotation being inverted whilst it is in the air and other inconsistencies. The default value of false is for backward compatibility with scripts which may depend upon the incorrect behaviour.\n}}'}, result="Returns ''true'' if the element rotation was successfully set and ''false'' otherwise."), oop=FunctionOOP(class_name='element', method_name='setRotation', field='rotation'), url=FunctionUrl(url='/wiki/SetElementRotation', name='setElementRotation', category='Element functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setElementVelocity', return_types=['bool'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False), FunctionArgument(name='speedX', argument_type='float', default_value=None, optional=False), FunctionArgument(name='speedY', argument_type='float', default_value=None, optional=False), FunctionArgument(name='speedZ', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='This function sets the velocity (movement speeds) along each axis, for an element.\nThis is not compatible with all elements. Only the following elements are compatible:\n* [[Ped]]s.\n* [[Vehicle]]s.\n* [[Object]]s.\n* [[Projectile]]s.\nObjects and projectiles velocity can only be set clientside.}}', arguments={'theElement': 'The element you wish to set the velocity of.', 'speedX': 'A floating point value determining the speed along the X axis.', 'speedY': 'A floating point value determining the speed along the Y axis.', 'speedZ': 'A floating point value determining the speed along the Z axis.'}, result="Returns ''true'' if the speed was set successfully, ''false'' if a bad element was specified or other bad arguments."), oop=FunctionOOP(class_name='element', method_name='setVelocity', field='velocity'), url=FunctionUrl(url='/wiki/SetElementVelocity', name='setElementVelocity', category='Element functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setElementVelocity', return_types=['bool'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False), FunctionArgument(name='speedX', argument_type='float', default_value=None, optional=False), FunctionArgument(name='speedY', argument_type='float', default_value=None, optional=False), FunctionArgument(name='speedZ', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='This function sets the velocity (movement speeds) along each axis, for an element.\nThis is not compatible with all elements. Only the following elements are compatible:\n* [[Ped]]s.\n* [[Vehicle]]s.\n* [[Object]]s.\n* [[Projectile]]s.\nObjects and projectiles velocity can only be set clientside.}}', arguments={'theElement': 'The element you wish to set the velocity of.', 'speedX': 'A floating point value determining the speed along the X axis.', 'speedY': 'A floating point value determining the speed along the Y axis.', 'speedZ': 'A floating point value determining the speed along the Z axis.'}, result="Returns ''true'' if the speed was set successfully, ''false'' if a bad element was specified or other bad arguments."), oop=FunctionOOP(class_name='element', method_name='setVelocity', field='velocity'), url=FunctionUrl(url='/wiki/SetElementVelocity', name='setElementVelocity', category='Element functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setLowLODElement', return_types=['bool'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False), FunctionArgument(name='lowLODElement', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='This function assigns a low LOD element to an element. The low LOD element is displayed when its associated element is not fully visible. If a low LOD element is assigned to several elements, it will be displayed when any of these elements are not fully visible.', arguments={'theElement': 'The element whose low LOD version we want to change.', 'lowLODElement ': 'A low LOD element to display when the first element is not fully visible.'}, result="Returns ''true'' if the assignment was successful, ''false'' otherwise."), oop=FunctionOOP(class_name='element', method_name='setLowLOD', field='lowLOD'), url=FunctionUrl(url='/wiki/SetLowLODElement', name='setLowLODElement', category='Element functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setLowLODElement', return_types=['bool'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False), FunctionArgument(name='lowLODElement', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='This function assigns a low LOD element to an element. The low LOD element is displayed when its associated element is not fully visible. If a low LOD element is assigned to several elements, it will be displayed when any of these elements are not fully visible.', arguments={'theElement': 'The element whose low LOD version we want to change.', 'lowLODElement ': 'A low LOD element to display when the first element is not fully visible.'}, result="Returns ''true'' if the assignment was successful, ''false'' otherwise."), oop=FunctionOOP(class_name='element', method_name='setLowLOD', field='lowLOD'), url=FunctionUrl(url='/wiki/SetLowLODElement', name='setLowLODElement', category='Element functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='addEvent', return_types=['bool'], arguments=[FunctionArgument(name='eventName', argument_type='string', default_value=None, optional=False), FunctionArgument(name='allowRemoteTrigger', argument_type='bool', default_value='false', optional=True)]), docs=FunctionDoc(description='This function allows you to register a custom [[event]]. Custom events function exactly like the built-in events. See [[event system]] for more information on the event system.', arguments={'eventName': 'The name of the event you wish to create.', 'allowRemoteTrigger': 'A boolean specifying whether this event can be called remotely using triggerClientEvent / triggerServerEvent or not.'}, result="Returns ''true'' if the event was added successfully, ''false'' if the event was already added."), oop=None, url=FunctionUrl(url='/wiki/AddEvent', name='addEvent', category='Event functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='addEvent', return_types=['bool'], arguments=[FunctionArgument(name='eventName', argument_type='string', default_value=None, optional=False), FunctionArgument(name='allowRemoteTrigger', argument_type='bool', default_value='false', optional=True)]), docs=FunctionDoc(description='This function allows you to register a custom [[event]]. Custom events function exactly like the built-in events. See [[event system]] for more information on the event system.', arguments={'eventName': 'The name of the event you wish to create.', 'allowRemoteTrigger': 'A boolean specifying whether this event can be called remotely using triggerClientEvent / triggerServerEvent or not.'}, result="Returns ''true'' if the event was added successfully, ''false'' if the event was already added."), oop=None, url=FunctionUrl(url='/wiki/AddEvent', name='addEvent', category='Event functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='addEventHandler', return_types=['bool'], arguments=[FunctionArgument(name='eventName', argument_type='string', default_value=None, optional=False), FunctionArgument(name='attachedTo', argument_type='element', default_value=None, optional=False), FunctionArgument(name='handlerFunction', argument_type='function', default_value=None, optional=False), FunctionArgument(name='propagate', argument_type='bool', default_value='true', optional=True), FunctionArgument(name='priority', argument_type='string', default_value='"normal"', optional=True)]), docs=FunctionDoc(description="This function will add an [[event]] handler. An event handler is a function that will be called when the event it's attached to is triggered. See [[event system]] for more information on how the event system works.\nEvent handlers are functions that are called when a particular event happens. Each event specifies a specific set of variables that are passed to the event handler and can be read by your function. The following global variables are available for use in handler functions:\n*'''source''': the element that triggered the event\n*'''this''': the element that the event handler is attached to\n*'''sourceResource''': the resource that triggered the event\n*'''sourceResourceRoot''': the root element of the resource that triggered the event\n*'''client''': the client that triggered the event using [[triggerServerEvent]]. Not set if the event was not triggered from a client.\n*'''eventName''': the name of the event which triggered the handler function.\n}}\nIt is important to remember that events pass up and down the [[element tree]]. An event triggered on the root element is triggered on every element in the tree. An event triggered on any other element is triggered on its ancestors (its parent element and its parent's parent etc) and its children, grandchildren and great-grandchildren. You can use the ''getPropagated'' argument to specify if you wish your handler to receive events that have propagated up or down the tree.\nThe order in which event handlers are triggered is undefined, you should not rely on one event handler being executed before another.", arguments={'eventName': 'The name of the event you want to attach the handler function to. Note: The maximum allowed length is 100 ASCII characters (that is, English letters and numerals)```', 'attachedTo': 'The element you wish to attach the handler to. The handler will only be called when the event it is attached to is triggered for this element, or one of its children. Often, this can be the root element (meaning the handler will be called when the event is triggered for any element).', 'handlerFunction': 'The handler function you wish to call when the event is triggered. This function will be passed all of the events parameters as arguments, but it isnt required that it takes all of them.', 'propagate': 'A boolean representing whether the handler will be triggered if the event was propagated down or up the element tree (starting from the source), and not triggered directly on attachedTo (that is, handlers attached with this argument set to false will only be triggered if source == this). In GUI events you will probably want to set this to false.\n{{New_feature|3.0131|1.3.1|', 'priority ': 'A string representing the trigger order priority relative to other event handlers of the same name. Possible values are:', '"high"': '', '"normal"': '', '"low"': '\n\'\'It is also possible to add finer priority control by appending a positive or negative number to the priority string. For example (in priority order for reference): "high+4" "high" "high-1" "normal-6" "normal-7" "low+1" "low" "low-1"\'\'\n{{Important Note|Anything bound to a specific element will be run before other handlers that are bound to something higher in the element tree (like root) This means that "high+10" bound to root \'\'\'won\'t\'\'\' trigger before "normal" bound directly to an element.}}\n}}'}, result="Returns ''true'' if the event handler was attached successfully. Returns ''false'' if the specified event could not be found or any parameters were invalid."), oop=None, url=FunctionUrl(url='/wiki/AddEventHandler', name='addEventHandler', category='Event functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='addEventHandler', return_types=['bool'], arguments=[FunctionArgument(name='eventName', argument_type='string', default_value=None, optional=False), FunctionArgument(name='attachedTo', argument_type='element', default_value=None, optional=False), FunctionArgument(name='handlerFunction', argument_type='function', default_value=None, optional=False), FunctionArgument(name='propagate', argument_type='bool', default_value='true', optional=True), FunctionArgument(name='priority', argument_type='string', default_value='"normal"', optional=True)]), docs=FunctionDoc(description="This function will add an [[event]] handler. An event handler is a function that will be called when the event it's attached to is triggered. See [[event system]] for more information on how the event system works.\nEvent handlers are functions that are called when a particular event happens. Each event specifies a specific set of variables that are passed to the event handler and can be read by your function. The following global variables are available for use in handler functions:\n*'''source''': the element that triggered the event\n*'''this''': the element that the event handler is attached to\n*'''sourceResource''': the resource that triggered the event\n*'''sourceResourceRoot''': the root element of the resource that triggered the event\n*'''client''': the client that triggered the event using [[triggerServerEvent]]. Not set if the event was not triggered from a client.\n*'''eventName''': the name of the event which triggered the handler function.\n}}\nIt is important to remember that events pass up and down the [[element tree]]. An event triggered on the root element is triggered on every element in the tree. An event triggered on any other element is triggered on its ancestors (its parent element and its parent's parent etc) and its children, grandchildren and great-grandchildren. You can use the ''getPropagated'' argument to specify if you wish your handler to receive events that have propagated up or down the tree.\nThe order in which event handlers are triggered is undefined, you should not rely on one event handler being executed before another.", arguments={'eventName': 'The name of the event you want to attach the handler function to. Note: The maximum allowed length is 100 ASCII characters (that is, English letters and numerals)```', 'attachedTo': 'The element you wish to attach the handler to. The handler will only be called when the event it is attached to is triggered for this element, or one of its children. Often, this can be the root element (meaning the handler will be called when the event is triggered for any element).', 'handlerFunction': 'The handler function you wish to call when the event is triggered. This function will be passed all of the events parameters as arguments, but it isnt required that it takes all of them.', 'propagate': 'A boolean representing whether the handler will be triggered if the event was propagated down or up the element tree (starting from the source), and not triggered directly on attachedTo (that is, handlers attached with this argument set to false will only be triggered if source == this). In GUI events you will probably want to set this to false.\n{{New_feature|3.0131|1.3.1|', 'priority ': 'A string representing the trigger order priority relative to other event handlers of the same name. Possible values are:', '"high"': '', '"normal"': '', '"low"': '\n\'\'It is also possible to add finer priority control by appending a positive or negative number to the priority string. For example (in priority order for reference): "high+4" "high" "high-1" "normal-6" "normal-7" "low+1" "low" "low-1"\'\'\n{{Important Note|Anything bound to a specific element will be run before other handlers that are bound to something higher in the element tree (like root) This means that "high+10" bound to root \'\'\'won\'t\'\'\' trigger before "normal" bound directly to an element.}}\n}}'}, result="Returns ''true'' if the event handler was attached successfully. Returns ''false'' if the specified event could not be found or any parameters were invalid."), oop=None, url=FunctionUrl(url='/wiki/AddEventHandler', name='addEventHandler', category='Event functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='cancelEvent', return_types=['bool'], arguments=[FunctionArgument(name='cancel', argument_type='bool', default_value='true', optional=False), FunctionArgument(name='reason', argument_type='string', default_value='""', optional=False)]), docs=FunctionDoc(description="This function is used to stop the automatic internal handling of events, for example this can be used to prevent an item being given to a player when they walk over a pickup, by canceling the [[onPickupUse]] event. \n[[cancelEvent]] does not have an effect on all events, see the individual event's pages for information on what happens when the event is canceled. [[cancelEvent]] does not stop further event handlers from being called, as the order of event handlers being called is undefined in many cases. Instead, you can see if the currently active event has been cancelled using [[wasEventCancelled]].\nThe use of cancelEvent outside of an event handler has no effect.\nIf you implement your own custom events and want to handle them being cancelled, you should call [[wasEventCancelled]] to check after your call to [[triggerEvent]].", arguments={}, result="Always returns ''true''."), oop=None, url=FunctionUrl(url='/wiki/CancelEvent', name='cancelEvent', category='Event functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='cancelEvent', return_types=['bool'], arguments=[]), docs=FunctionDoc(description="This function is used to stop the automatic internal handling of events, for example this can be used to prevent an item being given to a player when they walk over a pickup, by canceling the [[onPickupUse]] event. \n[[cancelEvent]] does not have an effect on all events, see the individual event's pages for information on what happens when the event is canceled. [[cancelEvent]] does not stop further event handlers from being called, as the order of event handlers being called is undefined in many cases. Instead, you can see if the currently active event has been cancelled using [[wasEventCancelled]].\nThe use of cancelEvent outside of an event handler has no effect.\nIf you implement your own custom events and want to handle them being cancelled, you should call [[wasEventCancelled]] to check after your call to [[triggerEvent]].", arguments={}, result="Always returns ''true''."), oop=None, url=FunctionUrl(url='/wiki/CancelEvent', name='cancelEvent', category='Event functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='cancelLatentEvent', return_types=['bool'], arguments=[FunctionArgument(name='thePlayer', argument_type='player', default_value=None, optional=False), FunctionArgument(name='handle', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='Stops a latent event from completing', arguments={'thePlayer': 'The player who is receiving the event.', 'handle': 'A handle previous got from getLatentEventHandles.'}, result='Returns a true if the latent event was successfully cancelled, or false if it was not'), oop=None, url=FunctionUrl(url='/wiki/CancelLatentEvent', name='cancelLatentEvent', category='Event functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='cancelLatentEvent', return_types=['bool'], arguments=[FunctionArgument(name='handle', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='Stops a latent event from completing', arguments={'handle': 'A handle previous got from getLatentEventHandles.'}, result='Returns a true if the latent event was successfully cancelled, or false if it was not'), oop=None, url=FunctionUrl(url='/wiki/CancelLatentEvent', name='cancelLatentEvent', category='Event functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getEventHandlers', return_types=['table'], arguments=[FunctionArgument(name='eventName', argument_type='string', default_value=None, optional=False), FunctionArgument(name='attachedTo', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='This function gets the attached functions from the event and attached element from current lua script.\n}}', arguments={'eventName': 'The name of the event. For example ( onPlayerWasted ).', 'attachedTo': 'The element attached to.'}, result='Returns table with attached functions, empty table otherwise.'), oop=None, url=FunctionUrl(url='/wiki/GetEventHandlers', name='getEventHandlers', category='Event functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getEventHandlers', return_types=['table'], arguments=[FunctionArgument(name='eventName', argument_type='string', default_value=None, optional=False), FunctionArgument(name='attachedTo', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='This function gets the attached functions from the event and attached element from current lua script.\n}}', arguments={'eventName': 'The name of the event. For example ( onPlayerWasted ).', 'attachedTo': 'The element attached to.'}, result='Returns table with attached functions, empty table otherwise.'), oop=None, url=FunctionUrl(url='/wiki/GetEventHandlers', name='getEventHandlers', category='Event functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getLatentEventHandles', return_types=['table'], arguments=[FunctionArgument(name='thePlayer', argument_type='player', default_value=None, optional=False)]), docs=FunctionDoc(description='Gets the currently queued latent events. The last one in the table is always the latest event queued. Each returned handle can be used with [[getLatentEventStatus]] or [[cancelLatentEvent]]', arguments={'thePlayer': 'The player who is receiving the events.'}, result='Returns a table of handles or false if invalid arguments were passed.'), oop=None, url=FunctionUrl(url='/wiki/GetLatentEventHandles', name='getLatentEventHandles', category='Event functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getLatentEventHandles', return_types=['table'], arguments=[]), docs=FunctionDoc(description='Gets the currently queued latent events. The last one in the table is always the latest event queued. Each returned handle can be used with [[getLatentEventStatus]] or [[cancelLatentEvent]]', arguments={}, result='Returns a table of handles or false if invalid arguments were passed.'), oop=None, url=FunctionUrl(url='/wiki/GetLatentEventHandles', name='getLatentEventHandles', category='Event functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getLatentEventStatus', return_types=['table'], arguments=[FunctionArgument(name='thePlayer', argument_type='player', default_value=None, optional=False), FunctionArgument(name='handle', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='Gets the status of one queued latent event.', arguments={'thePlayer': 'The player who is receiving the event.', 'handle': 'A handle previous got from getLatentEventHandles.'}, result="Returns a table with the following info or false if invalid arguments were passed:\n*'''tickStart:''' A number estimating how many ticks until the data transfer starts (Negative means the transfer has already started)\n*'''tickEnd:''' A number estimating how many ticks until the data transfer completes\n*'''totalSize:''' A number representing how many bytes in total this transfer will transfer\n*'''percentComplete:''' A number between 0-100 saying how much is done"), oop=None, url=FunctionUrl(url='/wiki/GetLatentEventStatus', name='getLatentEventStatus', category='Event functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getLatentEventStatus', return_types=['table'], arguments=[FunctionArgument(name='handle', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='Gets the status of one queued latent event.', arguments={'handle': 'A handle previous got from getLatentEventHandles.'}, result="Returns a table with the following info or false if invalid arguments were passed:\n*'''tickStart:''' A number estimating how many ticks until the data transfer starts (Negative means the transfer has already started)\n*'''tickEnd:''' A number estimating how many ticks until the data transfer completes\n*'''totalSize:''' A number representing how many bytes in total this transfer will transfer\n*'''percentComplete:''' A number between 0-100 saying how much is done"), oop=None, url=FunctionUrl(url='/wiki/GetLatentEventStatus', name='getLatentEventStatus', category='Event functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='removeEventHandler', return_types=['bool'], arguments=[FunctionArgument(name='eventName', argument_type='string', default_value=None, optional=False), FunctionArgument(name='attachedTo', argument_type='element', default_value=None, optional=False), FunctionArgument(name='functionVar', argument_type='function', default_value=None, optional=False)]), docs=FunctionDoc(description='This functions removes a handler function from an [[event]], so that the function is not called anymore when the event is triggered. See [[event system]] for more information on how the event system works.', arguments={'eventName': 'The name of the event you want to detach the handler function from.', 'attachedTo': 'The element the handler was attached to.', 'functionVar': 'The handler function that was attached.'}, result="Returns ''true'' if the event handler was removed successfully. Returns ''false'' if the specified event handler could not be found or invalid parameters were passed."), oop=None, url=FunctionUrl(url='/wiki/RemoveEventHandler', name='removeEventHandler', category='Event functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='removeEventHandler', return_types=['bool'], arguments=[FunctionArgument(name='eventName', argument_type='string', default_value=None, optional=False), FunctionArgument(name='attachedTo', argument_type='element', default_value=None, optional=False), FunctionArgument(name='functionVar', argument_type='function', default_value=None, optional=False)]), docs=FunctionDoc(description='This functions removes a handler function from an [[event]], so that the function is not called anymore when the event is triggered. See [[event system]] for more information on how the event system works.', arguments={'eventName': 'The name of the event you want to detach the handler function from.', 'attachedTo': 'The element the handler was attached to.', 'functionVar': 'The handler function that was attached.'}, result="Returns ''true'' if the event handler was removed successfully. Returns ''false'' if the specified event handler could not be found or invalid parameters were passed."), oop=None, url=FunctionUrl(url='/wiki/RemoveEventHandler', name='removeEventHandler', category='Event functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='triggerEvent', return_types=['bool'], arguments=[FunctionArgument(name='eventName', argument_type='string', default_value=None, optional=False), FunctionArgument(name='baseElement', argument_type='element', default_value=None, optional=False), FunctionArgument(name='argument1', argument_type='var', default_value=None, optional=False), FunctionArgument(name='...args', argument_type='any[]', default_value=None, optional=True)]), docs=FunctionDoc(description="This function will trigger a named [[event]] on a specific [[element]] in the [[element tree]]. See [[event system]] for more information on how the event system works.\nYou can use the value returned from this function to determine if the event was cancelled by one of the event handlers. You should determine what your response (if any) to this should be based on the event's purpose. Generally, cancelling an event should prevent any further code being run that is dependent on whatever triggered that event. For example, if you have an ''onFlagCapture'' event, cancelling it would be expected to prevent the flag being able to be captured. Similarly, if you have ''onPlayerKill'' as an event you trigger, canceling it would either be expected to prevent the player being killed from dying or at least prevent the player from getting a score for it.", arguments={'eventName': 'The name of the event you wish to trigger', 'baseElement': 'The element you wish to trigger the event on. See event system for information on how this works.\n{{OptionalArg}} ', 'argument1': 'The first argument that the event handler expects should be added after the baseElement variable.', 'NOTE': 'This function can have more than one of these arguments specified, once for each argument the event handler is expecting.'}, result="* Returns '''nil''' if the arguments are invalid or the event could not be found.  \n* Returns '''true''' if the event was triggered successfully, and ''was not'' cancelled using [[cancelEvent]].\n* Returns '''false''' if the event was triggered successfully, and ''was'' cancelled using [[cancelEvent]]."), oop=None, url=FunctionUrl(url='/wiki/TriggerEvent', name='triggerEvent', category='Event functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='triggerEvent', return_types=['bool'], arguments=[FunctionArgument(name='eventName', argument_type='string', default_value=None, optional=False), FunctionArgument(name='baseElement', argument_type='element', default_value=None, optional=False), FunctionArgument(name='argument1', argument_type='var', default_value=None, optional=False), FunctionArgument(name='...args', argument_type='any[]', default_value=None, optional=True)]), docs=FunctionDoc(description="This function will trigger a named [[event]] on a specific [[element]] in the [[element tree]]. See [[event system]] for more information on how the event system works.\nYou can use the value returned from this function to determine if the event was cancelled by one of the event handlers. You should determine what your response (if any) to this should be based on the event's purpose. Generally, cancelling an event should prevent any further code being run that is dependent on whatever triggered that event. For example, if you have an ''onFlagCapture'' event, cancelling it would be expected to prevent the flag being able to be captured. Similarly, if you have ''onPlayerKill'' as an event you trigger, canceling it would either be expected to prevent the player being killed from dying or at least prevent the player from getting a score for it.", arguments={'eventName': 'The name of the event you wish to trigger', 'baseElement': 'The element you wish to trigger the event on. See event system for information on how this works.\n{{OptionalArg}} ', 'argument1': 'The first argument that the event handler expects should be added after the baseElement variable.', 'NOTE': 'This function can have more than one of these arguments specified, once for each argument the event handler is expecting.'}, result="* Returns '''nil''' if the arguments are invalid or the event could not be found.  \n* Returns '''true''' if the event was triggered successfully, and ''was not'' cancelled using [[cancelEvent]].\n* Returns '''false''' if the event was triggered successfully, and ''was'' cancelled using [[cancelEvent]]."), oop=None, url=FunctionUrl(url='/wiki/TriggerEvent', name='triggerEvent', category='Event functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='wasEventCancelled', return_types=['bool'], arguments=[]), docs=FunctionDoc(description='This function checks if the last completed event was cancelled. This is mainly useful for custom events created by scripts. \nEvents can be cancelled using [[cancelEvent]], this indicates that the resource which triggered the event should do whatever it can to reverse any changes made by whatever caused the event. See [[triggerEvent]] for a more detailed explanation of this.', arguments={}, result="Returns ''true'' if the event was cancelled, ''false'' if it wasn't or doesn't exist."), oop=None, url=FunctionUrl(url='/wiki/WasEventCancelled', name='wasEventCancelled', category='Event functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='wasEventCancelled', return_types=['bool'], arguments=[]), docs=FunctionDoc(description='This function checks if the last completed event was cancelled. This is mainly useful for custom events created by scripts. \nEvents can be cancelled using [[cancelEvent]], this indicates that the resource which triggered the event should do whatever it can to reverse any changes made by whatever caused the event. See [[triggerEvent]] for a more detailed explanation of this.', arguments={}, result="Returns ''true'' if the event was cancelled, ''false'' if it wasn't or doesn't exist."), oop=None, url=FunctionUrl(url='/wiki/WasEventCancelled', name='wasEventCancelled', category='Event functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='createExplosion', return_types=['bool'], arguments=[FunctionArgument(name='x', argument_type='float', default_value=None, optional=False), FunctionArgument(name='y', argument_type='float', default_value=None, optional=False), FunctionArgument(name='z', argument_type='float', default_value=None, optional=False), FunctionArgument(name='theType', argument_type='int', default_value=None, optional=False), FunctionArgument(name='creator', argument_type='player', default_value='nil', optional=True)]), docs=FunctionDoc(description='Creates an explosion of a certain type at a specified point in the world. If creator is specified, the explosion will occur only in its dimension.', arguments={'x': 'a float value that specifies the X world coordinate where the explosion is created at.', 'y': 'a float value that specifies the Y world coordinate where the explosion is created at.', 'z': 'a float value that specifies the Z world coordinate where the explosion is created at.', 'theType': 'an integer specifying the explosion type. Valid types are:\n{{Explosions}}', 'creator': 'the explosions simulated creator, the player responsible for it.'}, result="*''true'' if the explosion was created.\n* ''false'' if invalid parameters were passed."), oop=None, url=FunctionUrl(url='/wiki/CreateExplosion', name='createExplosion', category='Explosion functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='createExplosion', return_types=['bool'], arguments=[FunctionArgument(name='x', argument_type='float', default_value=None, optional=False), FunctionArgument(name='y', argument_type='float', default_value=None, optional=False), FunctionArgument(name='z', argument_type='float', default_value=None, optional=False), FunctionArgument(name='theType', argument_type='int', default_value=None, optional=False), FunctionArgument(name='makeSound', argument_type='bool', default_value='true', optional=True), FunctionArgument(name='camShake', argument_type='float', default_value='-1.0', optional=True), FunctionArgument(name='damaging', argument_type='bool', default_value='true', optional=True)]), docs=FunctionDoc(description='Creates an explosion of a certain type at a specified point in the world. If creator is specified, the explosion will occur only in its dimension.', arguments={'x': 'a float value that specifies the X world coordinate where the explosion is created at.', 'y': 'a float value that specifies the Y world coordinate where the explosion is created at.', 'z': 'a float value that specifies the Z world coordinate where the explosion is created at.', 'theType': 'a integer specifying the explosion type. Valid types are:\n{{Explosions}}', 'makeSound': 'a boolean specifying whether the explosion should be heard or not.', 'camShake': 'a float specifying the camera shakes intensity.', 'damaging': 'a boolean specifying whether the explosion should cause damage or not.'}, result="*''true'' if the explosion was created.\n* ''false'' if invalid parameters were passed."), oop=None, url=FunctionUrl(url='/wiki/CreateExplosion', name='createExplosion', category='Explosion functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='fileClose', return_types=['bool'], arguments=[FunctionArgument(name='theFile', argument_type='file', default_value=None, optional=False)]), docs=FunctionDoc(description='Closes a file handle obtained by [[fileCreate]] or [[fileOpen]].', arguments={'theFile': 'The file handle to close.'}, result="Returns ''true'' if successful, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/FileClose', name='fileClose', category='File functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='fileClose', return_types=['bool'], arguments=[FunctionArgument(name='theFile', argument_type='file', default_value=None, optional=False)]), docs=FunctionDoc(description='Closes a file handle obtained by [[fileCreate]] or [[fileOpen]].', arguments={'theFile': 'The file handle to close.'}, result="Returns ''true'' if successful, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/FileClose', name='fileClose', category='File functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='fileCopy', return_types=['bool'], arguments=[FunctionArgument(name='filePath', argument_type='string', default_value=None, optional=False), FunctionArgument(name='copyToFilePath', argument_type='string', default_value=None, optional=False), FunctionArgument(name='overwrite', argument_type='bool', default_value='false', optional=True)]), docs=FunctionDoc(description='This function copies a file.{{Note|The file functions should not be used to implement configuration files. It is encouraged to use the XML functions for this instead.}}', arguments={'filePath': ': The path of the file you want to copy.', 'copyToFilePath': ': Where to copy the specified file to.', 'overwrite': ': If set to true it will overwrite a file that already exists at copyToFilePath.'}, result="Return true if the file was copied, else false if the 'filePath' doesn't exist."), oop=None, url=FunctionUrl(url='/wiki/FileCopy', name='fileCopy', category='File functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='fileCopy', return_types=['bool'], arguments=[FunctionArgument(name='filePath', argument_type='string', default_value=None, optional=False), FunctionArgument(name='copyToFilePath', argument_type='string', default_value=None, optional=False), FunctionArgument(name='overwrite', argument_type='bool', default_value='false', optional=True)]), docs=FunctionDoc(description='This function copies a file.{{Note|The file functions should not be used to implement configuration files. It is encouraged to use the XML functions for this instead.}}', arguments={'filePath': ': The path of the file you want to copy.', 'copyToFilePath': ': Where to copy the specified file to.', 'overwrite': ': If set to true it will overwrite a file that already exists at copyToFilePath.'}, result="Return true if the file was copied, else false if the 'filePath' doesn't exist."), oop=None, url=FunctionUrl(url='/wiki/FileCopy', name='fileCopy', category='File functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='fileCreate', return_types=['file'], arguments=[FunctionArgument(name='filePath', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='Creates a new file in a directory of a resource. If there already exists a file with the specified name, it is overwritten with an empty file.', arguments={'filePath': 'The filepath of the file to be created in the following format: :resourceName/path. resourceName is the name of the resource the file is in, and path is the path from the root directory of the resource to the file.\n:For example, if you want to create a file named \'myfile.txt\' in the resource \'mapcreator\', it can be created from another resource this way: \'\'fileCreate(":mapcreator/myfile.txt")\'\'.\n:If the file is in the current resource, only the file path is necessary, e.g. \'\'fileCreate("myfile.txt")\'\'.'}, result="If successful, returns a file handle which can be used with other file functions ([[fileWrite]], [[fileClose]]...). Returns ''false'' if an error occured."), oop=FunctionOOP(class_name='File', method_name='new}}\n\n{{New feature/item', field='9.0156'), url=FunctionUrl(url='/wiki/FileCreate', name='fileCreate', category='File functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='fileCreate', return_types=['file'], arguments=[FunctionArgument(name='filePath', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='Creates a new file in a directory of a resource. If there already exists a file with the specified name, it is overwritten with an empty file.', arguments={'filePath': 'The filepath of the file to be created in the following format: :resourceName/path. resourceName is the name of the resource the file is in, and path is the path from the root directory of the resource to the file.\n:For example, if you want to create a file named \'myfile.txt\' in the resource \'mapcreator\', it can be created from another resource this way: \'\'fileCreate(":mapcreator/myfile.txt")\'\'.\n:If the file is in the current resource, only the file path is necessary, e.g. \'\'fileCreate("myfile.txt")\'\'.'}, result="If successful, returns a file handle which can be used with other file functions ([[fileWrite]], [[fileClose]]...). Returns ''false'' if an error occured."), oop=FunctionOOP(class_name='File', method_name='new}}\n\n{{New feature/item', field='9.0156'), url=FunctionUrl(url='/wiki/FileCreate', name='fileCreate', category='File functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='fileDelete', return_types=['bool'], arguments=[FunctionArgument(name='filePath', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='Deletes the specified file.', arguments={'filePath': 'The filepath of the file to delete in the following format: :resourceName/path. resourceName is the name of the resource the file is in, and path is the path from the root directory of the resource to the file.\n:For example, if you want to delete a file name "myFile.txt" in the resource \'fileres\', it can be deleted from another resource this way: \'\'fileDelete(":fileres/myFile.txt")\'\'.\n:If the file is in the current resource, only the file path is necessary, e.g. \'\'fileDelete("myFile.txt")\'\'.'}, result="Returns ''true'' if successful, ''false'' otherwise (for example if there exists no file with the given name, or it does exist but is in use)."), oop=None, url=FunctionUrl(url='/wiki/FileDelete', name='fileDelete', category='File functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='fileDelete', return_types=['bool'], arguments=[FunctionArgument(name='filePath', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='Deletes the specified file.', arguments={'filePath': 'The filepath of the file to delete in the following format: :resourceName/path. resourceName is the name of the resource the file is in, and path is the path from the root directory of the resource to the file.\n:For example, if you want to delete a file name "myFile.txt" in the resource \'fileres\', it can be deleted from another resource this way: \'\'fileDelete(":fileres/myFile.txt")\'\'.\n:If the file is in the current resource, only the file path is necessary, e.g. \'\'fileDelete("myFile.txt")\'\'.'}, result="Returns ''true'' if successful, ''false'' otherwise (for example if there exists no file with the given name, or it does exist but is in use)."), oop=None, url=FunctionUrl(url='/wiki/FileDelete', name='fileDelete', category='File functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='fileExists', return_types=['bool'], arguments=[FunctionArgument(name='filePath', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='This functions checks whether a specified file exists inside a resource.', arguments={'filePath': 'The filepath of the file, whose existence is going to be checked, in the following format: :resourceName/path. resourceName is the name of the resource the file is checked to be in, and path is the path from the root directory of the resource to the file.\n:For example, if you want to check whether a file named \'myfile.txt\' exists in the resource \'mapcreator\', it can be done from another resource this way: \'\'fileExists(":mapcreator/myfile.txt")\'\'.\n:If the file, whose existence is going to be checked, is in the current resource, only the file path is necessary, e.g. \'\'fileExists("myfile.txt")\'\'. Note that you must use forward slashes \'/\' for the folders, backslashes \'\\\' will return false.'}, result="Returns ''true'' if the file exists, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/FileExists', name='fileExists', category='File functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='fileExists', return_types=['bool'], arguments=[FunctionArgument(name='filePath', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='This functions checks whether a specified file exists inside a resource.', arguments={'filePath': 'The filepath of the file, whose existence is going to be checked, in the following format: :resourceName/path. resourceName is the name of the resource the file is checked to be in, and path is the path from the root directory of the resource to the file.\n:For example, if you want to check whether a file named \'myfile.txt\' exists in the resource \'mapcreator\', it can be done from another resource this way: \'\'fileExists(":mapcreator/myfile.txt")\'\'.\n:If the file, whose existence is going to be checked, is in the current resource, only the file path is necessary, e.g. \'\'fileExists("myfile.txt")\'\'. Note that you must use forward slashes \'/\' for the folders, backslashes \'\\\' will return false.'}, result="Returns ''true'' if the file exists, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/FileExists', name='fileExists', category='File functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='fileFlush', return_types=['bool'], arguments=[FunctionArgument(name='theFile', argument_type='file', default_value=None, optional=False)]), docs=FunctionDoc(description="Forces pending disk writes to be executed. [[fileWrite]] doesn't directly write to the hard disk but places the data in a temporary buffer; only when there is enough data in the buffer it is actually written to disk. Call this function if you need the data written right now without closing the file. This is useful for log files that might want to be read while the resource is still executing. [[fileFlush]] can be called after each log entry is written. Without this, the file may appear empty or outdated to the user.", arguments={'theFile': 'The file handle of the file you wish to flush.'}, result="Returns ''true'' if succeeded, ''false'' in case of failure (e.g. the file handle is invalid)."), oop=None, url=FunctionUrl(url='/wiki/FileFlush', name='fileFlush', category='File functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='fileFlush', return_types=['bool'], arguments=[FunctionArgument(name='theFile', argument_type='file', default_value=None, optional=False)]), docs=FunctionDoc(description="Forces pending disk writes to be executed. [[fileWrite]] doesn't directly write to the hard disk but places the data in a temporary buffer; only when there is enough data in the buffer it is actually written to disk. Call this function if you need the data written right now without closing the file. This is useful for log files that might want to be read while the resource is still executing. [[fileFlush]] can be called after each log entry is written. Without this, the file may appear empty or outdated to the user.", arguments={'theFile': 'The file handle of the file you wish to flush.'}, result="Returns ''true'' if succeeded, ''false'' in case of failure (e.g. the file handle is invalid)."), oop=None, url=FunctionUrl(url='/wiki/FileFlush', name='fileFlush', category='File functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='fileGetPath', return_types=['string'], arguments=[FunctionArgument(name='theFile', argument_type='file', default_value=None, optional=False)]), docs=FunctionDoc(description='This function retrieves the path of the given file.\n}}', arguments={'theFile': 'The file you want to get the path.'}, result="Returns a ''string'' representing the file path, ''false'' if invalid file was provided."), oop=None, url=FunctionUrl(url='/wiki/FileGetPath', name='fileGetPath', category='File functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='fileGetPath', return_types=['string'], arguments=[FunctionArgument(name='theFile', argument_type='file', default_value=None, optional=False)]), docs=FunctionDoc(description='This function retrieves the path of the given file.\n}}', arguments={'theFile': 'The file you want to get the path.'}, result="Returns a ''string'' representing the file path, ''false'' if invalid file was provided."), oop=None, url=FunctionUrl(url='/wiki/FileGetPath', name='fileGetPath', category='File functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='fileGetPos', return_types=['int'], arguments=[FunctionArgument(name='theFile', argument_type='file', default_value=None, optional=False)]), docs=FunctionDoc(description='Returns the current read/write position in the given file.', arguments={'theFile': 'the file handle you wish to get the position of.'}, result="Returns the file position if successful, or ''false'' if an error occured (e.g. an invalid handle was passed)."), oop=FunctionOOP(class_name='file', method_name='getPos', field='pos'), url=FunctionUrl(url='/wiki/FileGetPos', name='fileGetPos', category='File functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='fileGetPos', return_types=['int'], arguments=[FunctionArgument(name='theFile', argument_type='file', default_value=None, optional=False)]), docs=FunctionDoc(description='Returns the current read/write position in the given file.', arguments={'theFile': 'the file handle you wish to get the position of.'}, result="Returns the file position if successful, or ''false'' if an error occured (e.g. an invalid handle was passed)."), oop=FunctionOOP(class_name='file', method_name='getPos', field='pos'), url=FunctionUrl(url='/wiki/FileGetPos', name='fileGetPos', category='File functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='fileGetSize', return_types=['int'], arguments=[FunctionArgument(name='theFile', argument_type='file', default_value=None, optional=False)]), docs=FunctionDoc(description='Returns the total size in bytes of the given file.', arguments={'theFile': 'the file handle you wish to get the size of.'}, result="Returns the file size if successful, or ''false'' if an error occured (e.g. an invalid file handle was passed)."), oop=FunctionOOP(class_name='file', method_name='getSize', field="size}}\n\n===Required Arguments===\n*'''theFile:''' the file handle you wish to get the size of.\n\n===Returns===\nReturns the file size if successful, or ''false'' if an error occured (e.g. an invalid file handle was passed).\n\n"), url=FunctionUrl(url='/wiki/FileGetSize', name='fileGetSize', category='File functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='fileGetSize', return_types=['int'], arguments=[FunctionArgument(name='theFile', argument_type='file', default_value=None, optional=False)]), docs=FunctionDoc(description='Returns the total size in bytes of the given file.', arguments={'theFile': 'the file handle you wish to get the size of.'}, result="Returns the file size if successful, or ''false'' if an error occured (e.g. an invalid file handle was passed)."), oop=FunctionOOP(class_name='file', method_name='getSize', field="size}}\n\n===Required Arguments===\n*'''theFile:''' the file handle you wish to get the size of.\n\n===Returns===\nReturns the file size if successful, or ''false'' if an error occured (e.g. an invalid file handle was passed).\n\n"), url=FunctionUrl(url='/wiki/FileGetSize', name='fileGetSize', category='File functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='fileIsEOF', return_types=['bool'], arguments=[FunctionArgument(name='theFile', argument_type='file', default_value=None, optional=False)]), docs=FunctionDoc(description='Checks if the file position is at the end of the file.', arguments={'theFile': 'A handle to the file you wish to check.'}, result="Returns ''true'' if the file position of the specified file is at the end of the file, ''false'' otherwise."), oop=FunctionOOP(class_name='file', method_name='isEOF', field="eof}}\n\n===Required Arguments===\n*'''theFile:''' A handle to the file you wish to check.\n\n===Returns===\nReturns ''true'' if the file position of the specified file is at the end of the file, ''false'' otherwise.\n\n"), url=FunctionUrl(url='/wiki/FileIsEOF', name='fileIsEOF', category='File functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='fileIsEOF', return_types=['bool'], arguments=[FunctionArgument(name='theFile', argument_type='file', default_value=None, optional=False)]), docs=FunctionDoc(description='Checks if the file position is at the end of the file.', arguments={'theFile': 'A handle to the file you wish to check.'}, result="Returns ''true'' if the file position of the specified file is at the end of the file, ''false'' otherwise."), oop=FunctionOOP(class_name='file', method_name='isEOF', field="eof}}\n\n===Required Arguments===\n*'''theFile:''' A handle to the file you wish to check.\n\n===Returns===\nReturns ''true'' if the file position of the specified file is at the end of the file, ''false'' otherwise.\n\n"), url=FunctionUrl(url='/wiki/FileIsEOF', name='fileIsEOF', category='File functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='fileOpen', return_types=['file'], arguments=[FunctionArgument(name='filePath', argument_type='string', default_value=None, optional=False), FunctionArgument(name='readOnly', argument_type='bool', default_value='false', optional=True)]), docs=FunctionDoc(description='Opens an existing file for reading and writing.', arguments={'filePath': 'The filepath of the file in the following format: :resourceName/path. resourceName is the name of the resource the file is in, and path is the path from the root directory of the resource to the file.\n:For example, if there is a file named \'coolObjects.txt\' in the resource \'objectSearch\', it can be opened from another resource this way: \'\'fileOpen(":objectSearch/coolObjects.txt")\'\'.\n:If the file is in the current resource, only the file path is necessary, e.g. \'\'fileOpen("coolObjects.txt")\'\'.', 'readOnly': 'By default, the file is opened with reading and writing access. You can specify true for this parameter if you only need reading access.'}, result="If successful, returns a file handle for the file. Otherwise returns ''false'' (f.e. if the file doesn't exist)."), oop=None, url=FunctionUrl(url='/wiki/FileOpen', name='fileOpen', category='File functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='fileOpen', return_types=['file'], arguments=[FunctionArgument(name='filePath', argument_type='string', default_value=None, optional=False), FunctionArgument(name='readOnly', argument_type='bool', default_value='false', optional=True)]), docs=FunctionDoc(description='Opens an existing file for reading and writing.', arguments={'filePath': 'The filepath of the file in the following format: :resourceName/path. resourceName is the name of the resource the file is in, and path is the path from the root directory of the resource to the file.\n:For example, if there is a file named \'coolObjects.txt\' in the resource \'objectSearch\', it can be opened from another resource this way: \'\'fileOpen(":objectSearch/coolObjects.txt")\'\'.\n:If the file is in the current resource, only the file path is necessary, e.g. \'\'fileOpen("coolObjects.txt")\'\'.', 'readOnly': 'By default, the file is opened with reading and writing access. You can specify true for this parameter if you only need reading access.'}, result="If successful, returns a file handle for the file. Otherwise returns ''false'' (f.e. if the file doesn't exist)."), oop=None, url=FunctionUrl(url='/wiki/FileOpen', name='fileOpen', category='File functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='fileRead', return_types=['string'], arguments=[FunctionArgument(name='theFile', argument_type='file', default_value=None, optional=False), FunctionArgument(name='count', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='Reads the specified number of bytes from the given file starting at its current read/write position, and returns them as a string.', arguments={'theFile': 'A handle to the file you wish to read from. Use fileOpen to obtain this handle.', 'count': 'The number of bytes you wish to read.'}, result='Returns the bytes that were read in a string. Note that this string might not contain as many bytes as you specified if an error occured, i.e. end of file.'), oop=None, url=FunctionUrl(url='/wiki/FileRead', name='fileRead', category='File functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='fileRead', return_types=['string'], arguments=[FunctionArgument(name='theFile', argument_type='file', default_value=None, optional=False), FunctionArgument(name='count', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='Reads the specified number of bytes from the given file starting at its current read/write position, and returns them as a string.', arguments={'theFile': 'A handle to the file you wish to read from. Use fileOpen to obtain this handle.', 'count': 'The number of bytes you wish to read.'}, result='Returns the bytes that were read in a string. Note that this string might not contain as many bytes as you specified if an error occured, i.e. end of file.'), oop=None, url=FunctionUrl(url='/wiki/FileRead', name='fileRead', category='File functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='fileRename', return_types=['bool'], arguments=[FunctionArgument(name='filePath', argument_type='string', default_value=None, optional=False), FunctionArgument(name='newFilePath', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='Renames the specified file.', arguments={'filePath': 'The filepath of the source file in the following format: :resourceName/path. resourceName is the name of the resource the file is in, and path is the path from the root directory of the resource to the file. If the file is in the current resource, only the file path is necessary.', 'newFilePath': 'Destination filepath for the specified source file in the same format.'}, result="If successful, returns ''true''. Otherwise returns ''false''."), oop=None, url=FunctionUrl(url='/wiki/FileRename', name='fileRename', category='File functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='fileRename', return_types=['bool'], arguments=[FunctionArgument(name='filePath', argument_type='string', default_value=None, optional=False), FunctionArgument(name='newFilePath', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='Renames the specified file.', arguments={'filePath': 'The filepath of the source file in the following format: :resourceName/path. resourceName is the name of the resource the file is in, and path is the path from the root directory of the resource to the file. If the file is in the current resource, only the file path is necessary.', 'newFilePath': 'Destination filepath for the specified source file in the same format.'}, result="If successful, returns ''true''. Otherwise returns ''false''."), oop=None, url=FunctionUrl(url='/wiki/FileRename', name='fileRename', category='File functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='fileSetPos', return_types=['int'], arguments=[FunctionArgument(name='theFile', argument_type='file', default_value=None, optional=False), FunctionArgument(name='offset', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='Sets the current read/write position in the file.', arguments={'theFile': 'The file handle of which you want to change the read/write position.', 'offset': 'The new position. This is the number of bytes from the beginning of the file. If this value is larger than the file size, it is limited to 52,428,800 bytes (50 MB).'}, result="Returns where the offset was actually set at. I.e. if '''offset''' was past the end of the file, it will be set at the end of the file, and this position will be returned. Returns ''false'' in case of failure (e.g. the specified file handle is invalid)."), oop=FunctionOOP(class_name='file', method_name='setPos', field='pos'), url=FunctionUrl(url='/wiki/FileSetPos', name='fileSetPos', category='File functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='fileSetPos', return_types=['int'], arguments=[FunctionArgument(name='theFile', argument_type='file', default_value=None, optional=False), FunctionArgument(name='offset', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='Sets the current read/write position in the file.', arguments={'theFile': 'The file handle of which you want to change the read/write position.', 'offset': 'The new position. This is the number of bytes from the beginning of the file. If this value is larger than the file size, it is limited to 52,428,800 bytes (50 MB).'}, result="Returns where the offset was actually set at. I.e. if '''offset''' was past the end of the file, it will be set at the end of the file, and this position will be returned. Returns ''false'' in case of failure (e.g. the specified file handle is invalid)."), oop=FunctionOOP(class_name='file', method_name='setPos', field='pos'), url=FunctionUrl(url='/wiki/FileSetPos', name='fileSetPos', category='File functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='fileWrite', return_types=['int'], arguments=[FunctionArgument(name='theFile', argument_type='file', default_value=None, optional=False), FunctionArgument(name='string1', argument_type='string', default_value=None, optional=False), FunctionArgument(name='string2', argument_type='string', default_value=None, optional=True), FunctionArgument(name='...args', argument_type='any[]', default_value=None, optional=True)]), docs=FunctionDoc(description='Writes one or more strings to a given file, starting at the current read/write position. Advances the position over the number of bytes that were written.', arguments={'theFile': 'A handle to the file you wish to write to. The file must have been opened with write access, i.e. the file handle must be a result of fileCreate or fileOpen with the readonly parameter set to false.', 'string1': "The string to write.\n*You can provide any number of additional strings to write after '''string1'''. These will be written in the order in which they are specified."}, result="Returns the number of bytes successfully written to the file, returns ''false'' if invalid arguments were specified."), oop=None, url=FunctionUrl(url='/wiki/FileWrite', name='fileWrite', category='File functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='fileWrite', return_types=['int'], arguments=[FunctionArgument(name='theFile', argument_type='file', default_value=None, optional=False), FunctionArgument(name='string1', argument_type='string', default_value=None, optional=False), FunctionArgument(name='string2', argument_type='string', default_value=None, optional=True), FunctionArgument(name='...args', argument_type='any[]', default_value=None, optional=True)]), docs=FunctionDoc(description='Writes one or more strings to a given file, starting at the current read/write position. Advances the position over the number of bytes that were written.', arguments={'theFile': 'A handle to the file you wish to write to. The file must have been opened with write access, i.e. the file handle must be a result of fileCreate or fileOpen with the readonly parameter set to false.', 'string1': "The string to write.\n*You can provide any number of additional strings to write after '''string1'''. These will be written in the order in which they are specified."}, result="Returns the number of bytes successfully written to the file, returns ''false'' if invalid arguments were specified."), oop=None, url=FunctionUrl(url='/wiki/FileWrite', name='fileWrite', category='File functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='addCommandHandler', return_types=['bool'], arguments=[FunctionArgument(name='commandName', argument_type='string', default_value=None, optional=False), FunctionArgument(name='handlerFunction', argument_type='function', default_value=None, optional=False), FunctionArgument(name='restricted', argument_type='bool', default_value='false', optional=True), FunctionArgument(name='caseSensitive', argument_type='bool', default_value='true', optional=True)]), docs=FunctionDoc(description="This function will attach a scripting function (handler) to a console command, so that whenever a player or administrator uses the command the function is called.\nMultiple command handlers can be attached to a single command, and they will be called in the order that the handlers were attached. Equally, multiple commands can be handled by a single function, and the ''commandName'' parameter used to decide the course of action.\nFor users, a command is in the format:\n''commandName'' ''argument1'' ''argument2''\nThis can be triggered from the player's console or directly from the chat box by prefixing the message with a forward slash (''/''). For server side handlers, the server admin is also able to trigger these directly from the server's console in the same way as they are triggered from a player's console.", arguments={'commandName': 'This is the name of the command you wish to attach a handler to. This is what must be typed into the console to trigger the function.', 'handlerFunction': 'This is the function that you want the command to trigger, which has to be defined before you add the handler. This function can take two parameters, playerSource and commandName, followed by as many parameters as you expect after your command (see below). These are all optional.\n{{OptionalArg}} ', 'restricted': 'Specify whether or not this command should be restricted by default. Use this on commands that should be inaccessible to everyone as default except special users specified in the ACL (Access Control List). This is to make sure admin commands such as ie. punish wont be available to everyone if a server administrator forgets masking it in ACL. Make sure to add the command to your ACL under the proper group for it to be usefull (i.e <right name=command.killEveryone access=true></right>). This argument defaults to false if nothing is specified.\n{{New feature|3|1.0|', 'caseSensitive': 'Specifies if the command handler will ignore the case for this command name.\n}}'}, result="Returns ''true'' if the command handler was added successfully, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/AddCommandHandler', name='addCommandHandler', category='Input functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='addCommandHandler', return_types=['bool'], arguments=[FunctionArgument(name='commandName', argument_type='string', default_value=None, optional=False), FunctionArgument(name='handlerFunction', argument_type='function', default_value=None, optional=False), FunctionArgument(name='caseSensitive', argument_type='bool', default_value='true', optional=True)]), docs=FunctionDoc(description="This function will attach a scripting function (handler) to a console command, so that whenever a player or administrator uses the command the function is called.\nMultiple command handlers can be attached to a single command, and they will be called in the order that the handlers were attached. Equally, multiple commands can be handled by a single function, and the ''commandName'' parameter used to decide the course of action.\nFor users, a command is in the format:\n''commandName'' ''argument1'' ''argument2''\nThis can be triggered from the player's console or directly from the chat box by prefixing the message with a forward slash (''/''). For server side handlers, the server admin is also able to trigger these directly from the server's console in the same way as they are triggered from a player's console.", arguments={'commandName': 'This is the name of the command you wish to attach a handler to. This is what must be typed into the console to trigger the function.', 'handlerFunction': 'This is the function that you want the command to trigger, which has to be defined before you add the handler. This function can take commandName parameter, followed by as many parameters as you expect after your command (see below). These are all optional.\n{{OptionalArg}} \n{{New feature|3|1.0|', 'caseSensitive': 'Specifies if the command handler will ignore the case for this command name.\n}}'}, result="Returns ''true'' if the command handler was added successfully, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/AddCommandHandler', name='addCommandHandler', category='Input functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='bindKey', return_types=['bool'], arguments=[FunctionArgument(name='thePlayer', argument_type='player', default_value=None, optional=False), FunctionArgument(name='key', argument_type='string', default_value=None, optional=False), FunctionArgument(name='keyState', argument_type='string', default_value=None, optional=False), FunctionArgument(name='handlerFunction', argument_type='function', default_value=None, optional=False), FunctionArgument(name='arguments', argument_type='var', default_value=None, optional=False), FunctionArgument(name='...args', argument_type='any[]', default_value=None, optional=True)]), docs=FunctionDoc(description="Binds a player's key to a handler function or command, which will be called when the key is pressed. ", arguments={'thePlayer': 'The player you wish to bind the key of.', 'key': 'The key that was pressed', 'keyState': 'The state of the key that was pressed, down if it was pressed, up if it was released.', '"up"': 'If the bound key should trigger the function when the key is released', '"down"': 'If the bound key should trigger the function when the key is pressed', '"both"': 'If the bound key should trigger the function when the key is pressed or released', 'handlerFunction': 'The function that will be triggered when the players key is pressed. This function should have the form:\n:<syntaxhighlight lang="lua">function functionName ( player keyPresser, string key, string keyState, [ var arguments, ... ] )</syntaxhighlight>\n:The values passed to this function are:', 'keyPresser': 'The player who pressed the key', 'arguments': 'The optional arguments you specified when calling bindKey (see below).'}, result="Returns ''true'' if the key was bound, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/BindKey', name='bindKey', category='Input functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='bindKey', return_types=['bool'], arguments=[FunctionArgument(name='key', argument_type='string', default_value=None, optional=False), FunctionArgument(name='keyState', argument_type='string', default_value=None, optional=False), FunctionArgument(name='handlerFunction', argument_type='function', default_value=None, optional=False), FunctionArgument(name='arguments', argument_type='var', default_value=None, optional=False), FunctionArgument(name='...args', argument_type='any[]', default_value=None, optional=True)]), docs=FunctionDoc(description="Binds a player's key to a handler function or command, which will be called when the key is pressed. ", arguments={'key': 'The key that was pressed', 'keyState': 'The state of the key that was pressed, down if it was pressed, up if it was released.', '"up"': 'If the bound key should trigger the function when the key is released', '"down"': 'If the bound key should trigger the function when the key is pressed', '"both"': 'If the bound key should trigger the function when the key is pressed or released', 'bindName': 'The name for this key bind when it appears in the clients settings dialog.-->', 'handlerFunction': 'The function that will be triggered when the players key is pressed. This function should have the form:\n:<syntaxhighlight lang="lua">function functionName ( string key, string keyState, [ var arguments, ... ] )</syntaxhighlight>\n:The values passed to this function are:', 'arguments': 'The optional arguments you specified when calling bindKey (see below).'}, result="Returns ''true'' if the key was bound, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/BindKey', name='bindKey', category='Input functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='executeCommandHandler', return_types=['bool'], arguments=[FunctionArgument(name='commandName', argument_type='string', default_value=None, optional=False), FunctionArgument(name='thePlayer', argument_type='player', default_value=None, optional=False), FunctionArgument(name='args', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='This function will call all the attached functions of an existing console command, for a specified player.\n ', arguments={'commandName': 'The name of the command you wish to execute. This is what must be typed into the console to trigger the function.', 'thePlayer': 'The player that will be presented as executer of the command to the handler function(s) of the command.\n{{OptionalArg}}', 'args': 'Additional parameters that will be passed to the handler function(s) of the command that is called, separated by spaces.'}, result="Returns ''true'' if the command handler was called successfully, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/ExecuteCommandHandler', name='executeCommandHandler', category='Input functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='executeCommandHandler', return_types=['bool'], arguments=[FunctionArgument(name='commandName', argument_type='string', default_value=None, optional=False), FunctionArgument(name='args', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='This function will call all the attached functions of an existing console command, for a specified player.\n ', arguments={'commandName': 'The name of the command you wish to execute. This is what must be typed into the console to trigger the function.\n{{OptionalArg}}', 'args': 'Additional parameters that will be passed to the handler function(s) of the command that is called, separated by spaces.'}, result="Returns ''true'' if the command handler was called successfully, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/ExecuteCommandHandler', name='executeCommandHandler', category='Input functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getCommandHandlers', return_types=['table'], arguments=[FunctionArgument(name='theResource', argument_type='resource', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is used to retrieve a list of all the registered command handlers of a given resource (or of all resources).\n}}', arguments={'theResource': 'The resource from which you wish to retrieve all command handlers. Or leave it empty to retrieve command handlers of all resources.'}, result='Returns a \'\'table\'\' containing all the commands of the given resource or a table with subtables containing the command and theResource pointer ( { "command", theResource } ). See examples below if you don\'t understand it.'), oop=None, url=FunctionUrl(url='/wiki/GetCommandHandlers', name='getCommandHandlers', category='Input functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getCommandHandlers', return_types=['table'], arguments=[FunctionArgument(name='theResource', argument_type='resource', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is used to retrieve a list of all the registered command handlers of a given resource (or of all resources).\n}}', arguments={'theResource': 'The resource from which you wish to retrieve all command handlers. Or leave it empty to retrieve command handlers of all resources.'}, result='Returns a \'\'table\'\' containing all the commands of the given resource or a table with subtables containing the command and theResource pointer ( { "command", theResource } ). See examples below if you don\'t understand it.'), oop=None, url=FunctionUrl(url='/wiki/GetCommandHandlers', name='getCommandHandlers', category='Input functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getFunctionsBoundToKey', return_types=['table'], arguments=[FunctionArgument(name='thePlayer', argument_type='player', default_value=None, optional=False), FunctionArgument(name='key', argument_type='string', default_value=None, optional=False), FunctionArgument(name='keyState', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='Gets the functions bound to a key. To bind a function to a key use the [[bindKey]] function', arguments={'thePlayer': 'The player to get the functions from a key.', 'theKey': 'The key you wish to check the functions from.', 'keyState': 'A string that has one of the following values:', '"up"': 'If the bound key should trigger the function when the key is released', '"down"': 'If the bound key should trigger the function when the key is pressed', '"both"': 'If the bound key should trigger the function when the key is pressed or released'}, result='Returns a table of the key function(s).'), oop=None, url=FunctionUrl(url='/wiki/GetFunctionsBoundToKey', name='getFunctionsBoundToKey', category='Input functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getFunctionsBoundToKey', return_types=['table'], arguments=[FunctionArgument(name='key', argument_type='string', default_value=None, optional=False), FunctionArgument(name='keyState', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='Gets the functions bound to a key. To bind a function to a key use the [[bindKey]] function', arguments={'theKey': 'The key you wish to check the functions from.', 'keyState': 'A string that has one of the following values:', '"up"': 'If the bound key should trigger the function when the key is released', '"down"': 'If the bound key should trigger the function when the key is pressed', '"both"': 'If the bound key should trigger the function when the key is pressed or released'}, result='Returns a table of the key function(s).'), oop=None, url=FunctionUrl(url='/wiki/GetFunctionsBoundToKey', name='getFunctionsBoundToKey', category='Input functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getKeyBoundToFunction', return_types=['string'], arguments=[FunctionArgument(name='thePlayer', argument_type='player', default_value=None, optional=False), FunctionArgument(name='theFunction', argument_type='function', default_value=None, optional=False)]), docs=FunctionDoc(description='getKeyBoundToFunction allows retrieval of the first key bound to a function.', arguments={'thePlayer': 'The player you are checking the function bound to a key', 'theFunction': 'The function in which you would like to check the bound key'}, result='Returns a string of the first key the function was bound to.'), oop=None, url=FunctionUrl(url='/wiki/GetKeyBoundToFunction', name='getKeyBoundToFunction', category='Input functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getKeyBoundToFunction', return_types=['string'], arguments=[FunctionArgument(name='theFunction', argument_type='function', default_value=None, optional=False)]), docs=FunctionDoc(description='getKeyBoundToFunction allows retrieval of the first key bound to a function.', arguments={'theFunction': 'The function in which you would like to check the bound key'}, result='Returns a string of the first key the function was bound to.'), oop=None, url=FunctionUrl(url='/wiki/GetKeyBoundToFunction', name='getKeyBoundToFunction', category='Input functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='isControlEnabled', return_types=['bool'], arguments=[FunctionArgument(name='thePlayer', argument_type='player', default_value=None, optional=False), FunctionArgument(name='control', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='Checks whether a GTA control is enabled or disabled for a certain player.', arguments={'thePlayer': 'The player you wish the control status of.', 'control': 'The control you wish to check. See control names for a list of possible controls.'}, result="Returns ''true'' if control is enabled, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/IsControlEnabled', name='isControlEnabled', category='Input functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='isControlEnabled', return_types=['bool'], arguments=[FunctionArgument(name='control', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='Checks whether a GTA control is enabled or disabled for a certain player.', arguments={'control': 'The control you wish to check. See control names for a list of possible controls.'}, result="Returns ''true'' if control is enabled, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/IsControlEnabled', name='isControlEnabled', category='Input functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='removeCommandHandler', return_types=['bool'], arguments=[FunctionArgument(name='commandName', argument_type='string', default_value=None, optional=False), FunctionArgument(name='handler', argument_type='function', default_value=None, optional=True)]), docs=FunctionDoc(description='This function removes a command handler, that is one that has been added using [[addCommandHandler]]. This function can only remove command handlers that were added by the resource that it is called in.', arguments={'commandName': 'the name of the command you wish to remove.', 'handler': 'the specific handler function to remove. If not specified, all handler functions for the command (from the calling resource) will be removed. This argument is only available in the server.'}, result="Returns ''true'' if the command handler was removed successfully, ''false'' if the command doesn't exist."), oop=None, url=FunctionUrl(url='/wiki/RemoveCommandHandler', name='removeCommandHandler', category='Input functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='removeCommandHandler', return_types=['bool'], arguments=[FunctionArgument(name='commandName', argument_type='string', default_value=None, optional=False), FunctionArgument(name='handler', argument_type='function', default_value=None, optional=True)]), docs=FunctionDoc(description='This function removes a command handler, that is one that has been added using [[addCommandHandler]]. This function can only remove command handlers that were added by the resource that it is called in.', arguments={'commandName': 'the name of the command you wish to remove.', 'handler': 'the specific handler function to remove. If not specified, all handler functions for the command (from the calling resource) will be removed. This argument is only available in the server.'}, result="Returns ''true'' if the command handler was removed successfully, ''false'' if the command doesn't exist."), oop=None, url=FunctionUrl(url='/wiki/RemoveCommandHandler', name='removeCommandHandler', category='Input functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='toggleAllControls', return_types=['bool'], arguments=[FunctionArgument(name='thePlayer', argument_type='player', default_value=None, optional=False), FunctionArgument(name='enabled', argument_type='bool', default_value=None, optional=False), FunctionArgument(name='gtaControls', argument_type='bool', default_value='true', optional=False), FunctionArgument(name='mtaControls', argument_type='bool', default_value='true', optional=False)]), docs=FunctionDoc(description='Enables or disables the use of all GTA controls for a specified player.', arguments={'thePlayer': 'The player you wish to toggle the control ability of.', 'enabled': 'A boolean value representing whether or not the controls will be usable.\n{{OptionalArg}}', 'gtaControls': 'A boolean deciding whether the enabled parameter will affect GTAs internal controls.', 'mtaControls': 'A boolean deciding whether the enabled parameter will affect MTAs own controls., e.g. chatbox.'}, result="This function returns ''true'' if controls were toggled successfully, false otherwise."), oop=None, url=FunctionUrl(url='/wiki/ToggleAllControls', name='toggleAllControls', category='Input functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='toggleAllControls', return_types=['bool'], arguments=[FunctionArgument(name='enabled', argument_type='bool', default_value=None, optional=False), FunctionArgument(name='gtaControls', argument_type='bool', default_value='true', optional=False), FunctionArgument(name='mtaControls', argument_type='bool', default_value='true', optional=False)]), docs=FunctionDoc(description='Enables or disables the use of all GTA controls for a specified player.', arguments={'enabled': 'A boolean value representing whether or not the controls will be usable.\n{{OptionalArg}}', 'gtaControls': 'A boolean deciding whether the enabled parameter will affect GTAs internal controls.', 'mtaControls': 'A boolean deciding whether the enabled parameter will affect MTAs own controls., e.g. chatbox.'}, result="This function returns ''true'' if controls were toggled successfully, false otherwise."), oop=None, url=FunctionUrl(url='/wiki/ToggleAllControls', name='toggleAllControls', category='Input functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='toggleControl', return_types=['bool'], arguments=[FunctionArgument(name='thePlayer', argument_type='player', default_value=None, optional=False), FunctionArgument(name='control', argument_type='string', default_value=None, optional=False), FunctionArgument(name='enabled', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description='Enables or disables the use of a GTA control for a specific player.', arguments={'thePlayer': 'The player you wish to toggle the control ability of.', 'control': 'The control that you want to toggle the ability of. See control names for a list of possible controls.', 'enabled': 'A boolean value representing whether or not the key will be usable or not.'}, result="This function ''true'' if the control was set successfully, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/ToggleControl', name='toggleControl', category='Input functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='toggleControl', return_types=['bool'], arguments=[FunctionArgument(name='control', argument_type='string', default_value=None, optional=False), FunctionArgument(name='enabled', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description='Enables or disables the use of a GTA control for a specific player.', arguments={'control': 'The control that you want to toggle the ability of. See control names for a list of possible controls.', 'enabled': 'A boolean value representing whether or not the key will be usable or not.'}, result="This function ''true'' if the control was set successfully, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/ToggleControl', name='toggleControl', category='Input functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='unbindKey', return_types=['bool'], arguments=[FunctionArgument(name='thePlayer', argument_type='player', default_value=None, optional=False), FunctionArgument(name='key', argument_type='string', default_value=None, optional=False), FunctionArgument(name='keyState', argument_type='string', default_value=None, optional=False), FunctionArgument(name='command', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='Removes an existing key bind from the specified player.', arguments={'thePlayer': 'The player you wish to unbind the key of.', 'key': 'The key you wish to unbind. See Key names for a list of valid key names.', 'keyState': 'is optional in Syntax 2.', '"up"': 'If the bound key triggered a function when the key was released', '"down"': 'If the bound key triggered a function when the key was pressed', '"both"': 'If the bound key triggered a function when the key was pressed and released', 'command ': '(Syntax 1) The command you wish to unbind.', 'handler': "(Syntax 2) The function you wish to unbind.\nNote: If you do not specify ''handler'', any instances of ''key'' being bound will be unbound, whatever function they are bound to."}, result="Returns '''true'' if the key was unbound, ''false'' if it was not previously bound or invalid arguments were passed to the function."), oop=None, url=FunctionUrl(url='/wiki/UnbindKey', name='unbindKey', category='Input functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='unbindKey', return_types=['bool'], arguments=[FunctionArgument(name='key', argument_type='string', default_value=None, optional=False), FunctionArgument(name='keyState', argument_type='string', default_value=None, optional=False), FunctionArgument(name='command', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='Removes an existing key bind from the specified player.', arguments={'key': 'The key you wish to unbind. See Key names for a list of valid key names.', 'keyState': 'is optional in Syntax 2.', '"up"': 'If the bound key triggered a function when the key was released', '"down"': 'If the bound key triggered a function when the key was pressed', '"both"': 'If the bound key triggered a function when the key was pressed and released', 'command ': '(Syntax 1) The command you wish to unbind.', 'handler': "(Syntax 2) The function you wish to unbind.\nNote: If you do not specify ''handler'', any instances of ''key'' being bound will be unbound, whatever function they are bound to."}, result="Returns '''true'' if the key was unbound, ''false'' if it was not previously bound or invalid arguments were passed to the function."), oop=None, url=FunctionUrl(url='/wiki/UnbindKey', name='unbindKey', category='Input functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='createMarker', return_types=['marker'], arguments=[FunctionArgument(name='x', argument_type='float', default_value=None, optional=False), FunctionArgument(name='y', argument_type='float', default_value=None, optional=False), FunctionArgument(name='z', argument_type='float', default_value=None, optional=False), FunctionArgument(name='theType', argument_type='string', default_value='"checkpoint"', optional=True), FunctionArgument(name='size', argument_type='float', default_value='4.0', optional=True), FunctionArgument(name='r', argument_type='int', default_value='0', optional=True), FunctionArgument(name='g', argument_type='int', default_value='0', optional=True), FunctionArgument(name='b', argument_type='int', default_value='255', optional=True), FunctionArgument(name='a', argument_type='int', default_value='255', optional=True), FunctionArgument(name='visibleTo', argument_type='element', default_value='getRootElement(', optional=True)]), docs=FunctionDoc(description='[[Image:Mtasa_markers.png|thumb|337px|This image shows all the different marker types available using this function.]]\nThis function creates a marker. A marker is a 3D model in the world that can highlight a particular point or area, often used to instruct players where to go to perform actions such as entering buildings.\nThere are various limits that govern the maximum number of each type that can be visible at once. These are:\n* Coronas: 32\n* Checkpoints, Rings, Cylinders and Arrows combined: 32\nYou are able to create as many markers as you wish (memory and element limit permitting), but the player will only be able to see the nearest ones up to the limit.\n<br><br><br><br>', arguments={'x': ': A floating point number representing the X coordinate on the map.', 'y': ': A floating point number representing the Y coordinate on the map.', 'z': ': A floating point number representing the Z coordinate on the map.\n{{OptionalArg}}', 'theType': ': The visual type of the marker to be created. Possible values:\n{{Marker_types}}', 'size': ': The diameter of the marker to be created, in meters.', 'r': ': An integer number representing the amount of red to use in the colouring of the marker (0 - 255).', 'g': ': An integer number representing the amount of green to use in the colouring of the marker (0 - 255).', 'b': ': An integer number representing the amount of blue to use in the colouring of the marker (0 - 255).', 'a': ': An integer number representing the amount of alpha to use in the colouring of the marker (0 - 255 where 0 is transparent and 255 is opaque).', 'visibleTo': ': This defines which elements can see the marker. Defaults to visible to everyone. See visibility.'}, result="Returns the [[marker]] element that was created, or ''false'' if the arguments are incorrect."), oop=None, url=FunctionUrl(url='/wiki/CreateMarker', name='createMarker', category='Marker functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='createMarker', return_types=['marker'], arguments=[FunctionArgument(name='x', argument_type='float', default_value=None, optional=False), FunctionArgument(name='y', argument_type='float', default_value=None, optional=False), FunctionArgument(name='z', argument_type='float', default_value=None, optional=False), FunctionArgument(name='theType', argument_type='string', default_value='"checkpoint"', optional=True), FunctionArgument(name='size', argument_type='float', default_value='4.0', optional=True), FunctionArgument(name='r', argument_type='int', default_value='0', optional=True), FunctionArgument(name='g', argument_type='int', default_value='0', optional=True), FunctionArgument(name='b', argument_type='int', default_value='255', optional=True), FunctionArgument(name='a', argument_type='int', default_value='255', optional=True)]), docs=FunctionDoc(description='[[Image:Mtasa_markers.png|thumb|337px|This image shows all the different marker types available using this function.]]\nThis function creates a marker. A marker is a 3D model in the world that can highlight a particular point or area, often used to instruct players where to go to perform actions such as entering buildings.\nThere are various limits that govern the maximum number of each type that can be visible at once. These are:\n* Coronas: 32\n* Checkpoints, Rings, Cylinders and Arrows combined: 32\nYou are able to create as many markers as you wish (memory and element limit permitting), but the player will only be able to see the nearest ones up to the limit.\n<br><br><br><br>', arguments={'x': ': A floating point number representing the X coordinate on the map.', 'y': ': A floating point number representing the Y coordinate on the map.', 'z': ': A floating point number representing the Z coordinate on the map.\n{{OptionalArg}}', 'theType': ': The visual type of the marker to be created. Possible values:\n{{Marker_types}}', 'size': ': The diameter of the marker to be created, in meters.', 'r': ': An integer number representing the amount of red to use in the colouring of the marker (0 - 255).', 'g': ': An integer number representing the amount of green to use in the colouring of the marker (0 - 255).', 'b': ': An integer number representing the amount of blue to use in the colouring of the marker (0 - 255).', 'a': ': An integer number representing the amount of alpha to use in the colouring of the marker (0 - 255 where 0 is transparent and 255 is opaque).'}, result="Returns the [[marker]] element that was created, or ''false'' if the arguments are incorrect."), oop=None, url=FunctionUrl(url='/wiki/CreateMarker', name='createMarker', category='Marker functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getMarkerColor', return_types=['int,', 'int,', 'int,', 'int'], arguments=[FunctionArgument(name='theMarker', argument_type='marker', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns the color and transparency for a marker element. Not all marker types support transparency.', arguments={'theMarker': ': The marker that you wish to retrieve the color of.'}, result="Returns four [[int]]s corresponding to the amount of ''red'', ''green'', ''blue'' and ''alpha'' (respectively) of the marker, ''false'' if invalid arguments were passed."), oop=FunctionOOP(class_name='Marker', method_name='getColor', field=None), url=FunctionUrl(url='/wiki/GetMarkerColor', name='getMarkerColor', category='Marker functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getMarkerColor', return_types=['int,', 'int,', 'int,', 'int'], arguments=[FunctionArgument(name='theMarker', argument_type='marker', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns the color and transparency for a marker element. Not all marker types support transparency.', arguments={'theMarker': ': The marker that you wish to retrieve the color of.'}, result="Returns four [[int]]s corresponding to the amount of ''red'', ''green'', ''blue'' and ''alpha'' (respectively) of the marker, ''false'' if invalid arguments were passed."), oop=FunctionOOP(class_name='Marker', method_name='getColor', field=None), url=FunctionUrl(url='/wiki/GetMarkerColor', name='getMarkerColor', category='Marker functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getMarkerCount', return_types=['int'], arguments=[]), docs=FunctionDoc(description='Returns the number of markers that currently exist in the world.', arguments={}, result='Returns the number of markers that currently exist.'), oop=None, url=FunctionUrl(url='/wiki/GetMarkerCount', name='getMarkerCount', category='Marker functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getMarkerCount', return_types=['int'], arguments=[]), docs=FunctionDoc(description='Returns the number of markers that currently exist in the world.', arguments={}, result='Returns the number of markers that currently exist.'), oop=None, url=FunctionUrl(url='/wiki/GetMarkerCount', name='getMarkerCount', category='Marker functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getMarkerIcon', return_types=['string'], arguments=[FunctionArgument(name='theMarker', argument_type='marker', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns the icon name for a marker.', arguments={'theMarker': ': A marker element referencing the specified marker.'}, result='Returns \'\'false\'\' if the marker passed is invalid or a string containing one of the following:\n* \'\'\'"none"\'\'\': No icon\n* \'\'\'"arrow"\'\'\': Arrow icon\n* \'\'\'"finish"\'\'\': Finish (end-race) icon'), oop=FunctionOOP(class_name='Marker', method_name='getIcon', field='icon'), url=FunctionUrl(url='/wiki/GetMarkerIcon', name='getMarkerIcon', category='Marker functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getMarkerIcon', return_types=['string'], arguments=[FunctionArgument(name='theMarker', argument_type='marker', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns the icon name for a marker.', arguments={'theMarker': ': A marker element referencing the specified marker.'}, result='Returns \'\'false\'\' if the marker passed is invalid or a string containing one of the following:\n* \'\'\'"none"\'\'\': No icon\n* \'\'\'"arrow"\'\'\': Arrow icon\n* \'\'\'"finish"\'\'\': Finish (end-race) icon'), oop=FunctionOOP(class_name='Marker', method_name='getIcon', field='icon'), url=FunctionUrl(url='/wiki/GetMarkerIcon', name='getMarkerIcon', category='Marker functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getMarkerSize', return_types=['float'], arguments=[FunctionArgument(name='myMarker', argument_type='marker', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns a [[float]] containing the size of the specified marker.', arguments={'myMarker': ': The marker that you wish to retrieve the size of.'}, result='Returns a [[float]] containing the size of the specified marker.'), oop=FunctionOOP(class_name='Marker', method_name='getSize', field='size'), url=FunctionUrl(url='/wiki/GetMarkerSize', name='getMarkerSize', category='Marker functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getMarkerSize', return_types=['float'], arguments=[FunctionArgument(name='myMarker', argument_type='marker', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns a [[float]] containing the size of the specified marker.', arguments={'myMarker': ': The marker that you wish to retrieve the size of.'}, result='Returns a [[float]] containing the size of the specified marker.'), oop=FunctionOOP(class_name='Marker', method_name='getSize', field='size'), url=FunctionUrl(url='/wiki/GetMarkerSize', name='getMarkerSize', category='Marker functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getMarkerTarget', return_types=['float', 'float', 'float'], arguments=[FunctionArgument(name='theMarker', argument_type='marker', default_value=None, optional=False)]), docs=FunctionDoc(description="This function returns the position of the specified marker's target, the position it points to. This only works for checkpoint markers and ring markers. For checkpoints it returns the position the arrow is pointing to, for ring markers it returns the position the ring is facing. You can set this target with [[setMarkerTarget]].", arguments={'theMarker': 'The marker you wish to retrieve the target position of.'}, result="Returns three ''float''s if a target is set, or ''false'' in the first variable and ''nil'' in the two others if the marker is invalid or no target is set."), oop=FunctionOOP(class_name='Marker', method_name='getTarget', field='target'), url=FunctionUrl(url='/wiki/GetMarkerTarget', name='getMarkerTarget', category='Marker functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getMarkerTarget', return_types=['float', 'float', 'float'], arguments=[FunctionArgument(name='theMarker', argument_type='marker', default_value=None, optional=False)]), docs=FunctionDoc(description="This function returns the position of the specified marker's target, the position it points to. This only works for checkpoint markers and ring markers. For checkpoints it returns the position the arrow is pointing to, for ring markers it returns the position the ring is facing. You can set this target with [[setMarkerTarget]].", arguments={'theMarker': 'The marker you wish to retrieve the target position of.'}, result="Returns three ''float''s if a target is set, or ''false'' in the first variable and ''nil'' in the two others if the marker is invalid or no target is set."), oop=FunctionOOP(class_name='Marker', method_name='getTarget', field='target'), url=FunctionUrl(url='/wiki/GetMarkerTarget', name='getMarkerTarget', category='Marker functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getMarkerType', return_types=['string'], arguments=[FunctionArgument(name='theMarker', argument_type='marker', default_value=None, optional=False)]), docs=FunctionDoc(description="This function returns a marker's type.", arguments={'theMarker': ': A marker element referencing the specified marker.'}, result="* Returns one of the following strings:\n{{Marker_types}}\nIf an invalid marker is specified, ''false'' is returned."), oop=FunctionOOP(class_name='Marker', method_name='getMarkerType', field='markerType'), url=FunctionUrl(url='/wiki/GetMarkerType', name='getMarkerType', category='Marker functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getMarkerType', return_types=['string'], arguments=[FunctionArgument(name='theMarker', argument_type='marker', default_value=None, optional=False)]), docs=FunctionDoc(description="This function returns a marker's type.", arguments={'theMarker': ': A marker element referencing the specified marker.'}, result="* Returns one of the following strings:\n{{Marker_types}}\nIf an invalid marker is specified, ''false'' is returned."), oop=FunctionOOP(class_name='Marker', method_name='getMarkerType', field='markerType'), url=FunctionUrl(url='/wiki/GetMarkerType', name='getMarkerType', category='Marker functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='isElementWithinMarker', return_types=['bool'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False), FunctionArgument(name='theMarker', argument_type='marker', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is used to determine if an [[element]] is within a [[marker]].', arguments={'theElement': 'The element youre checking.', 'theMarker': 'The marker youre checking.'}, result="Returns ''true'' if the element is within the marker, ''false'' otherwise"), oop=FunctionOOP(class_name='element', method_name='isWithinMarker', field=None), url=FunctionUrl(url='/wiki/IsElementWithinMarker', name='isElementWithinMarker', category='Marker functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='isElementWithinMarker', return_types=['bool'], arguments=[FunctionArgument(name='theElement', argument_type='element', default_value=None, optional=False), FunctionArgument(name='theMarker', argument_type='marker', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is used to determine if an [[element]] is within a [[marker]].', arguments={'theElement': 'The element youre checking.', 'theMarker': 'The marker youre checking.'}, result="Returns ''true'' if the element is within the marker, ''false'' otherwise"), oop=FunctionOOP(class_name='element', method_name='isWithinMarker', field=None), url=FunctionUrl(url='/wiki/IsElementWithinMarker', name='isElementWithinMarker', category='Marker functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setMarkerColor', return_types=['bool'], arguments=[FunctionArgument(name='theMarker', argument_type='marker', default_value=None, optional=False), FunctionArgument(name='r', argument_type='int', default_value=None, optional=False), FunctionArgument(name='g', argument_type='int', default_value=None, optional=False), FunctionArgument(name='b', argument_type='int', default_value=None, optional=False), FunctionArgument(name='a', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function sets the color of the specified marker by modifying the values for red, green, blue and alpha.', arguments={'theMarker': 'The marker that you wish to set the color of.', 'r': 'The amount of red in the final color (0 to 255).', 'g': 'The amount of green in the final color (0 to 255).', 'b': 'The amount of blue in the final color (0 to 255).', 'a': 'The amount of alpha in the final color (0 to 255).'}, result=''), oop=FunctionOOP(class_name='Marker', method_name='setColor', field=None), url=FunctionUrl(url='/wiki/SetMarkerColor', name='setMarkerColor', category='Marker functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setMarkerColor', return_types=['bool'], arguments=[FunctionArgument(name='theMarker', argument_type='marker', default_value=None, optional=False), FunctionArgument(name='r', argument_type='int', default_value=None, optional=False), FunctionArgument(name='g', argument_type='int', default_value=None, optional=False), FunctionArgument(name='b', argument_type='int', default_value=None, optional=False), FunctionArgument(name='a', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function sets the color of the specified marker by modifying the values for red, green, blue and alpha.', arguments={'theMarker': 'The marker that you wish to set the color of.', 'r': 'The amount of red in the final color (0 to 255).', 'g': 'The amount of green in the final color (0 to 255).', 'b': 'The amount of blue in the final color (0 to 255).', 'a': 'The amount of alpha in the final color (0 to 255).'}, result=''), oop=FunctionOOP(class_name='Marker', method_name='setColor', field=None), url=FunctionUrl(url='/wiki/SetMarkerColor', name='setMarkerColor', category='Marker functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setMarkerIcon', return_types=['bool'], arguments=[FunctionArgument(name='theMarker', argument_type='marker', default_value=None, optional=False), FunctionArgument(name='icon', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'theMarker': 'The marker to change the visual style of', 'icon': 'A string referring to the type of icon, acceptable values are:', '"none"': ': No icon', '"arrow"': ': Arrow icon', '"finish"': ': Finish icon (at end of race)'}, result=''), oop=FunctionOOP(class_name='Marker', method_name='setIcon', field='icon'), url=FunctionUrl(url='/wiki/SetMarkerIcon', name='setMarkerIcon', category='Marker functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setMarkerIcon', return_types=['bool'], arguments=[FunctionArgument(name='theMarker', argument_type='marker', default_value=None, optional=False), FunctionArgument(name='icon', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'theMarker': 'The marker to change the visual style of', 'icon': 'A string referring to the type of icon, acceptable values are:', '"none"': ': No icon', '"arrow"': ': Arrow icon', '"finish"': ': Finish icon (at end of race)'}, result=''), oop=FunctionOOP(class_name='Marker', method_name='setIcon', field='icon'), url=FunctionUrl(url='/wiki/SetMarkerIcon', name='setMarkerIcon', category='Marker functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setMarkerSize', return_types=['bool'], arguments=[FunctionArgument(name='theMarker', argument_type='marker', default_value=None, optional=False), FunctionArgument(name='size', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='This function sets the size of the specified marker.\nSetting negative value will "flip" the marker, do nothing or make it invisible: \n* \'\'\'cylinder\'\'\' or \'\'\'arrow\'\'\': upside down\n* \'\'\'ring\'\'\': inside out\n* \'\'\'checkpoint\'\'\': disappear\n* \'\'\'corona\'\'\': bigger', arguments={'theMarker': 'The marker that you wish to set the size of.', 'size': 'A float representing new size of the marker.'}, result="Returns ''true'' if successful, ''false'' if failed."), oop=FunctionOOP(class_name='Marker', method_name='setSize', field='size'), url=FunctionUrl(url='/wiki/SetMarkerSize', name='setMarkerSize', category='Marker functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setMarkerSize', return_types=['bool'], arguments=[FunctionArgument(name='theMarker', argument_type='marker', default_value=None, optional=False), FunctionArgument(name='size', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='This function sets the size of the specified marker.\nSetting negative value will "flip" the marker, do nothing or make it invisible: \n* \'\'\'cylinder\'\'\' or \'\'\'arrow\'\'\': upside down\n* \'\'\'ring\'\'\': inside out\n* \'\'\'checkpoint\'\'\': disappear\n* \'\'\'corona\'\'\': bigger', arguments={'theMarker': 'The marker that you wish to set the size of.', 'size': 'A float representing new size of the marker.'}, result="Returns ''true'' if successful, ''false'' if failed."), oop=FunctionOOP(class_name='Marker', method_name='setSize', field='size'), url=FunctionUrl(url='/wiki/SetMarkerSize', name='setMarkerSize', category='Marker functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setMarkerTarget', return_types=['bool'], arguments=[FunctionArgument(name='theMarker', argument_type='marker', default_value=None, optional=False), FunctionArgument(name='x', argument_type='float', default_value=None, optional=False), FunctionArgument(name='y', argument_type='float', default_value=None, optional=False), FunctionArgument(name='z', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description="This function sets the 'target' for a marker. Only the ''checkpoint'' and ''ring'' marker types can have a target.\nFor ''checkpoint'' markers, the target is shown as an arrow aiming at the point specified.\nFor ''ring'' markers, the target is shown by rotating the whole ring so that it faces the point specified.\nThis function is most useful for setting up markers for races, where each marker points to the next one's position.\n(This is mostly used in races!)", arguments={'theMarker': 'The marker to set the target of', 'x': 'The x axis of the coordinate to target the marker at', 'y': 'The y axis of the coordinate to target the marker at', 'z': 'The z axis of the coordinate to target the marker at'}, result="Returns ''true'' if target was set, ''false'' otherwise."), oop=FunctionOOP(class_name='Marker', method_name='setTarget', field="getMarkerTarget}}\n===Required Arguments=== \n*'''theMarker:''' The marker to set the target of\n*'''x:''' The x axis of the coordinate to target the marker at\n*'''y:''' The y axis of the coordinate to target the marker at\n*'''z:''' The z axis of the coordinate to target the marker at\n\n===Returns===\nReturns ''true'' if target was set, ''false'' otherwise.\n\n"), url=FunctionUrl(url='/wiki/SetMarkerTarget', name='setMarkerTarget', category='Marker functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setMarkerTarget', return_types=['bool'], arguments=[FunctionArgument(name='theMarker', argument_type='marker', default_value=None, optional=False), FunctionArgument(name='x', argument_type='float', default_value=None, optional=False), FunctionArgument(name='y', argument_type='float', default_value=None, optional=False), FunctionArgument(name='z', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description="This function sets the 'target' for a marker. Only the ''checkpoint'' and ''ring'' marker types can have a target.\nFor ''checkpoint'' markers, the target is shown as an arrow aiming at the point specified.\nFor ''ring'' markers, the target is shown by rotating the whole ring so that it faces the point specified.\nThis function is most useful for setting up markers for races, where each marker points to the next one's position.\n(This is mostly used in races!)", arguments={'theMarker': 'The marker to set the target of', 'x': 'The x axis of the coordinate to target the marker at', 'y': 'The y axis of the coordinate to target the marker at', 'z': 'The z axis of the coordinate to target the marker at'}, result="Returns ''true'' if target was set, ''false'' otherwise."), oop=FunctionOOP(class_name='Marker', method_name='setTarget', field="getMarkerTarget}}\n===Required Arguments=== \n*'''theMarker:''' The marker to set the target of\n*'''x:''' The x axis of the coordinate to target the marker at\n*'''y:''' The y axis of the coordinate to target the marker at\n*'''z:''' The z axis of the coordinate to target the marker at\n\n===Returns===\nReturns ''true'' if target was set, ''false'' otherwise.\n\n"), url=FunctionUrl(url='/wiki/SetMarkerTarget', name='setMarkerTarget', category='Marker functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setMarkerType', return_types=['bool'], arguments=[FunctionArgument(name='theMarker', argument_type='marker', default_value=None, optional=False), FunctionArgument(name='markerType', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description="This function changes a marker's type. The type controls how the marker is displayed in the game. It's important that you use marker types that users are used to from the single player game. For example, checkpoints are used in races, rings are used for aircraft races, arrows are used for entering buildings etc. ", arguments={'theMarker': ': A marker element referencing the specified marker.', 'markerType': ': A string denoting the marker type. Valid values are:\n{{Marker types}}'}, result="Returns ''true'' if the marker type was changed, ''false'' if it wasn't or marker values were invalid."), oop=FunctionOOP(class_name='Marker', method_name='setMarkerType', field='markerType'), url=FunctionUrl(url='/wiki/SetMarkerType', name='setMarkerType', category='Marker functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setMarkerType', return_types=['bool'], arguments=[FunctionArgument(name='theMarker', argument_type='marker', default_value=None, optional=False), FunctionArgument(name='markerType', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description="This function changes a marker's type. The type controls how the marker is displayed in the game. It's important that you use marker types that users are used to from the single player game. For example, checkpoints are used in races, rings are used for aircraft races, arrows are used for entering buildings etc. ", arguments={'theMarker': ': A marker element referencing the specified marker.', 'markerType': ': A string denoting the marker type. Valid values are:\n{{Marker types}}'}, result="Returns ''true'' if the marker type was changed, ''false'' if it wasn't or marker values were invalid."), oop=FunctionOOP(class_name='Marker', method_name='setMarkerType', field='markerType'), url=FunctionUrl(url='/wiki/SetMarkerType', name='setMarkerType', category='Marker functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='createObject', return_types=['object'], arguments=[FunctionArgument(name='modelId', argument_type='int', default_value=None, optional=False), FunctionArgument(name='x', argument_type='float', default_value=None, optional=False), FunctionArgument(name='y', argument_type='float', default_value=None, optional=False), FunctionArgument(name='z', argument_type='float', default_value=None, optional=False), FunctionArgument(name='rx', argument_type='float', default_value=None, optional=False), FunctionArgument(name='ry', argument_type='float', default_value=None, optional=False), FunctionArgument(name='rz', argument_type='float', default_value=None, optional=False), FunctionArgument(name='isLowLOD', argument_type='bool', default_value='false', optional=False)]), docs=FunctionDoc(description='Creates an [[object]] [[element]] at a given position and rotation.', arguments={'modelId': 'A whole integer specifying the GTA:SA object model ID.', 'x': 'A floating point number representing the X coordinate on the map.', 'y': 'A floating point number representing the Y coordinate on the map.', 'z': 'A floating point number representing the Z coordinate on the map.\n{{OptionalArg}} ', 'rx': 'A floating point number representing the rotation about the X axis in degrees.', 'ry': 'A floating point number representing the rotation about the Y axis in degrees.', 'rz': 'A floating point number representing the rotation about the Z axis in degrees.\n{{New items|3.0120|1.2|', 'isLowLOD': 'A bool value specifying if the object will be low LOD. A low LOD object has no collision and a longer draw distance.\n}}'}, result="* Returns the [[object]] element if the creation was successful, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/CreateObject', name='createObject', category='Object functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='createObject', return_types=['object'], arguments=[FunctionArgument(name='modelId', argument_type='int', default_value=None, optional=False), FunctionArgument(name='x', argument_type='float', default_value=None, optional=False), FunctionArgument(name='y', argument_type='float', default_value=None, optional=False), FunctionArgument(name='z', argument_type='float', default_value=None, optional=False), FunctionArgument(name='rx', argument_type='float', default_value=None, optional=False), FunctionArgument(name='ry', argument_type='float', default_value=None, optional=False), FunctionArgument(name='rz', argument_type='float', default_value=None, optional=False), FunctionArgument(name='isLowLOD', argument_type='bool', default_value='false', optional=False)]), docs=FunctionDoc(description='Creates an [[object]] [[element]] at a given position and rotation.', arguments={'modelId': 'A whole integer specifying the GTA:SA object model ID.', 'x': 'A floating point number representing the X coordinate on the map.', 'y': 'A floating point number representing the Y coordinate on the map.', 'z': 'A floating point number representing the Z coordinate on the map.\n{{OptionalArg}} ', 'rx': 'A floating point number representing the rotation about the X axis in degrees.', 'ry': 'A floating point number representing the rotation about the Y axis in degrees.', 'rz': 'A floating point number representing the rotation about the Z axis in degrees.\n{{New items|3.0120|1.2|', 'isLowLOD': 'A bool value specifying if the object will be low LOD. A low LOD object has no collision and a longer draw distance.\n}}'}, result="* Returns the [[object]] element if the creation was successful, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/CreateObject', name='createObject', category='Object functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getObjectScale', return_types=['float,', 'float,', 'float'], arguments=[FunctionArgument(name='theObject', argument_type='object', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns the visible size of an object.', arguments={'theObject': ': the object you wish to return the scale of.'}, result="* Three [[float]] values indicating the scale of the object on the x, y, and z axis if successful, ''false'' otherwise."), oop=FunctionOOP(class_name='Object', method_name='getScale', field='scale'), url=FunctionUrl(url='/wiki/GetObjectScale', name='getObjectScale', category='Object functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getObjectScale', return_types=['float,', 'float,', 'float'], arguments=[FunctionArgument(name='theObject', argument_type='object', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns the visible size of an object.', arguments={'theObject': ': the object you wish to return the scale of.'}, result="* Three [[float]] values indicating the scale of the object on the x, y, and z axis if successful, ''false'' otherwise."), oop=FunctionOOP(class_name='Object', method_name='getScale', field='scale'), url=FunctionUrl(url='/wiki/GetObjectScale', name='getObjectScale', category='Object functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='moveObject', return_types=['bool'], arguments=[FunctionArgument(name='theObject', argument_type='object', default_value=None, optional=False), FunctionArgument(name='time', argument_type='int', default_value=None, optional=False), FunctionArgument(name='targetx', argument_type='float', default_value=None, optional=False), FunctionArgument(name='targety', argument_type='float', default_value=None, optional=False), FunctionArgument(name='targetz', argument_type='float', default_value=None, optional=False), FunctionArgument(name='moverx', argument_type='float', default_value=None, optional=False), FunctionArgument(name='movery', argument_type='float', default_value=None, optional=False), FunctionArgument(name='moverz', argument_type='float', default_value=None, optional=False), FunctionArgument(name='strEasingType', argument_type='string', default_value=None, optional=False), FunctionArgument(name='fEasingPeriod', argument_type='float', default_value=None, optional=False), FunctionArgument(name='fEasingAmplitude', argument_type='float', default_value=None, optional=False), FunctionArgument(name='fEasingOvershoot', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='This function will smoothly move an object from its current position to a specified rotation and position.', arguments={'theObject': 'the object that will be moved.', 'time': 'the time in milliseconds the object will arrive at the destination.', 'targetx': 'the X value of the target position', 'targety': 'the Y value of the target position', 'targetz': 'the Z value of the target position', 'moverx': 'the rotation along the X axis relative to its current rotation, which is its starting angle.', 'movery': 'the rotation along the Y axis relative to its current rotation, which is its starting angle.', 'moverz': 'the rotation along the Z axis relative to its current rotation, which is its starting angle.', 'strEasingType': 'the Easing|easing function to use for the interpolation (default is Linear)', 'fEasingPeriod': 'the period of the Easing|easing function (only some easing functions use this parameter)', 'fEasingAmplitude': 'the amplitude of the Easing|easing function (only some easing functions use this parameter)', 'fEasingOvershoot': 'the overshoot of the Easing|easing function (only some easing functions use this parameter)'}, result="* ''true'' if the function moved the object succesfully.\n* ''false'' otherwise."), oop=FunctionOOP(class_name='object', method_name='move', field=None), url=FunctionUrl(url='/wiki/MoveObject', name='moveObject', category='Object functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='moveObject', return_types=['bool'], arguments=[FunctionArgument(name='theObject', argument_type='object', default_value=None, optional=False), FunctionArgument(name='time', argument_type='int', default_value=None, optional=False), FunctionArgument(name='targetx', argument_type='float', default_value=None, optional=False), FunctionArgument(name='targety', argument_type='float', default_value=None, optional=False), FunctionArgument(name='targetz', argument_type='float', default_value=None, optional=False), FunctionArgument(name='moverx', argument_type='float', default_value=None, optional=False), FunctionArgument(name='movery', argument_type='float', default_value=None, optional=False), FunctionArgument(name='moverz', argument_type='float', default_value=None, optional=False), FunctionArgument(name='strEasingType', argument_type='string', default_value=None, optional=False), FunctionArgument(name='fEasingPeriod', argument_type='float', default_value=None, optional=False), FunctionArgument(name='fEasingAmplitude', argument_type='float', default_value=None, optional=False), FunctionArgument(name='fEasingOvershoot', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='This function will smoothly move an object from its current position to a specified rotation and position.', arguments={'theObject': 'the object that will be moved.', 'time': 'the time in milliseconds the object will arrive at the destination.', 'targetx': 'the X value of the target position', 'targety': 'the Y value of the target position', 'targetz': 'the Z value of the target position', 'moverx': 'the rotation along the X axis relative to its current rotation, which is its starting angle.', 'movery': 'the rotation along the Y axis relative to its current rotation, which is its starting angle.', 'moverz': 'the rotation along the Z axis relative to its current rotation, which is its starting angle.', 'strEasingType': 'the Easing|easing function to use for the interpolation (default is Linear)', 'fEasingPeriod': 'the period of the Easing|easing function (only some easing functions use this parameter)', 'fEasingAmplitude': 'the amplitude of the Easing|easing function (only some easing functions use this parameter)', 'fEasingOvershoot': 'the overshoot of the Easing|easing function (only some easing functions use this parameter)'}, result="* ''true'' if the function moved the object succesfully.\n* ''false'' otherwise."), oop=FunctionOOP(class_name='object', method_name='move', field=None), url=FunctionUrl(url='/wiki/MoveObject', name='moveObject', category='Object functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setObjectScale', return_types=['bool'], arguments=[FunctionArgument(name='theObject', argument_type='object', default_value=None, optional=False), FunctionArgument(name='scale', argument_type='float', default_value=None, optional=False), FunctionArgument(name='scaleY', argument_type='float', default_value='scale', optional=True), FunctionArgument(name='scaleZ', argument_type='float', default_value='scale', optional=True)]), docs=FunctionDoc(description='This function changes the visible size of an object.', arguments={'theObject': ': the object you wish to change the scale of.', 'scale': ': a float containing the new scale. 1.0 is the standard scale, with 0.5 being half the size and 2.0 being twice the size. If the scaleY is set, this will be scaleX.', 'scaleY': ': a float containing the new scale on the Y axis', 'scaleZ': ': a float containing the new scale on the Z axis'}, result="* ''true'' if the scale was set properly.\n* ''false'' otherwise."), oop=FunctionOOP(class_name='object', method_name='setScale', field='scale'), url=FunctionUrl(url='/wiki/SetObjectScale', name='setObjectScale', category='Object functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setObjectScale', return_types=['bool'], arguments=[FunctionArgument(name='theObject', argument_type='object', default_value=None, optional=False), FunctionArgument(name='scale', argument_type='float', default_value=None, optional=False), FunctionArgument(name='scaleY', argument_type='float', default_value='scale', optional=True), FunctionArgument(name='scaleZ', argument_type='float', default_value='scale', optional=True)]), docs=FunctionDoc(description='This function changes the visible size of an object.', arguments={'theObject': ': the object you wish to change the scale of.', 'scale': ': a float containing the new scale. 1.0 is the standard scale, with 0.5 being half the size and 2.0 being twice the size. If the scaleY is set, this will be scaleX.', 'scaleY': ': a float containing the new scale on the Y axis', 'scaleZ': ': a float containing the new scale on the Z axis'}, result="* ''true'' if the scale was set properly.\n* ''false'' otherwise."), oop=FunctionOOP(class_name='object', method_name='setScale', field='scale'), url=FunctionUrl(url='/wiki/SetObjectScale', name='setObjectScale', category='Object functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='stopObject', return_types=['bool'], arguments=[FunctionArgument(name='theobject', argument_type='object', default_value=None, optional=False)]), docs=FunctionDoc(description='This will allow you to stop an object that is currently moving.', arguments={'theobject': 'the object whose movement you wish to stop'}, result="* ''true'' if successful.\n* ''false'' otherwise."), oop=FunctionOOP(class_name='object', method_name='stop', field=None), url=FunctionUrl(url='/wiki/StopObject', name='stopObject', category='Object functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='stopObject', return_types=['bool'], arguments=[FunctionArgument(name='theobject', argument_type='object', default_value=None, optional=False)]), docs=FunctionDoc(description='This will allow you to stop an object that is currently moving.', arguments={'theobject': 'the object whose movement you wish to stop'}, result="* ''true'' if successful.\n* ''false'' otherwise."), oop=FunctionOOP(class_name='object', method_name='stop', field=None), url=FunctionUrl(url='/wiki/StopObject', name='stopObject', category='Object functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='clearChatBox', return_types=['bool'], arguments=[FunctionArgument(name='clearFor', argument_type='element', default_value='getRootElement(', optional=False)]), docs=FunctionDoc(description='', arguments={'clearFor ': 'The player whose chat is to be cleared. By default, this is set to the root element, which will affect all players.'}, result="Returns ''true'' if the player's chat was cleared successfully, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/ClearChatBox', name='clearChatBox', category='Output functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='clearChatBox', return_types=['bool'], arguments=[]), docs=FunctionDoc(description='', arguments={}, result="Returns ''true'' if the player's chat was cleared successfully, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/ClearChatBox', name='clearChatBox', category='Output functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='outputChatBox', return_types=['bool'], arguments=[FunctionArgument(name='text', argument_type='string', default_value=None, optional=False), FunctionArgument(name='visibleTo', argument_type='element', default_value='root', optional=True), FunctionArgument(name='r', argument_type='int', default_value='231', optional=True), FunctionArgument(name='g', argument_type='int', default_value='217', optional=True), FunctionArgument(name='b', argument_type='int', default_value='176', optional=True), FunctionArgument(name='colorCoded', argument_type='bool', default_value='false', optional=True)]), docs=FunctionDoc(description='This outputs the specified text string to the chatbox. It can be specified as a message to certain player(s) or all players.\nIt can optionally allow you to embed color changes into the string by setting the colorCoded boolean to true. This allows: \n<syntaxhighlight lang="lua">\noutputChatBox ( "#FF0000Hello #00FF00World", root, 255, 255, 255, true )\n</syntaxhighlight>\nThis will display as: \'\'\'<span style=\'color:red;\'>Hello</span> <span style=\'color:green\'>World</span> \'\'\'', arguments={'text': 'The text string that you wish to send to the chat window. If more than 256 characters it will not be showed in chat.\n{{OptionalArg}}', 'visibleTo': 'Can also be a table of players or team.}}', 'r': 'The amount of red in the color of the text. Default value is 231.', 'g': 'The amount of green in the color of the text. Default value is 217.', 'b': 'The amount of blue in the color of the text. Default value is 176.', 'colorCoded': "A boolean value determining whether or not #RRGGBB tags should be used.\nNote: The #RRGGBB format must contain capital letters a-f is not acceptable but A-F is. Default RGB values in this format are: '#E7D9B0'."}, result="Returns ''true'' if the message was displayed successfully. Returns ''false'' if invalid arguments are specified."), oop=FunctionOOP(class_name='player', method_name="outputChat}}\n==Required Arguments==\n*'''text:''' The text string that you wish to send to the chat window. If more than 256 characters it will not be showed in chat.\n\n==Optional Arguments==\n{{OptionalArg}}\n*'''visibleTo:''' This specifies who the chat is visible to. Any players in this element will see the chat message. See [[visibility]].\n{{New items", field='5.0157'), url=FunctionUrl(url='/wiki/OutputChatBox', name='outputChatBox', category='Output functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='outputChatBox', return_types=['bool'], arguments=[FunctionArgument(name='text', argument_type='string', default_value=None, optional=False), FunctionArgument(name='r', argument_type='int', default_value='231', optional=True), FunctionArgument(name='g', argument_type='int', default_value='217', optional=True), FunctionArgument(name='b', argument_type='int', default_value='176', optional=True), FunctionArgument(name='colorCoded', argument_type='bool', default_value='false', optional=True)]), docs=FunctionDoc(description='This outputs the specified text string to the chatbox. It can be specified as a message to certain player(s) or all players.\nIt can optionally allow you to embed color changes into the string by setting the colorCoded boolean to true. This allows: \n<syntaxhighlight lang="lua">\noutputChatBox ( "#FF0000Hello #00FF00World", root, 255, 255, 255, true )\n</syntaxhighlight>\nThis will display as: \'\'\'<span style=\'color:red;\'>Hello</span> <span style=\'color:green\'>World</span> \'\'\'', arguments={'text': 'The text string that you wish to send to the chat window. If more than 256 characters it will not be showed in chat.\n{{OptionalArg}}', 'r': 'The amount of red in the color of the text. Default value is 231.', 'g': 'The amount of green in the color of the text. Default value is 217.', 'b': 'The amount of blue in the color of the text. Default value is 176.', 'colorCoded': "A boolean value determining whether or not #RRGGBB tags should be used.\nNote: The #RRGGBB format must contain capital letters a-f is not acceptable but A-F is. Default RGB values in this format are: '#E7D9B0'."}, result="Returns ''true'' if the message was displayed successfully. Returns ''false'' if invalid arguments are specified."), oop=None, url=FunctionUrl(url='/wiki/OutputChatBox', name='outputChatBox', category='Output functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='outputConsole', return_types=['bool'], arguments=[FunctionArgument(name='text', argument_type='string', default_value=None, optional=False), FunctionArgument(name='visibleTo', argument_type='element', default_value='getRootElement(', optional=False)]), docs=FunctionDoc(description='This outputs the specified text string to the console window (accessed with F8 or ~ key). It can be specified as a message to certain player(s) or all players.', arguments={'text': 'The text string that you wish to send to the console window', 'visibleTo': "This specifies who the chat is visible to. Any players in this element will see the chat message. See visibility.\n{{Note|'''visibleTo''' can also be a Team object, in this case, the text will be visible to all the players of that team.}}"}, result=''), oop=None, url=FunctionUrl(url='/wiki/OutputConsole', name='outputConsole', category='Output functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='outputConsole', return_types=['bool'], arguments=[FunctionArgument(name='text', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='This outputs the specified text string to the console window (accessed with F8 or ~ key). It can be specified as a message to certain player(s) or all players.', arguments={'text': 'The text string that you wish to send to the console window'}, result=''), oop=None, url=FunctionUrl(url='/wiki/OutputConsole', name='outputConsole', category='Output functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='outputDebugString', return_types=['bool'], arguments=[FunctionArgument(name='text', argument_type='string', default_value=None, optional=False), FunctionArgument(name='level', argument_type='int', default_value='3', optional=False), FunctionArgument(name='red', argument_type='int', default_value='255', optional=False), FunctionArgument(name='green', argument_type='int', default_value='255', optional=False), FunctionArgument(name='blue', argument_type='int', default_value='255', optional=False)]), docs=FunctionDoc(description='This function outputs scripting debug messages, which can be read by enabling the debug textbox. The debug display level can then be set so that info or warning messages get filtered out.', arguments={'text': 'the text to be output to the debug box.\n{{OptionalArg}} ', 'level': 'the debug message level. Possible values are:', '0': 'Custom message', '1': 'Error message', '2': 'Warning message', '3': 'Information message (default)\n{{New items|5.0157|1.5.7-9.20477|', '4': 'Custom message (omits file path and line number)}}', 'red': 'The amount of red in the color of the text. Default value is 255.', 'green': 'The amount of green in the color of the text. Default value is 255.', 'blue': 'The amount of blue in the color of the text. Default value is 255.\n{{Note|Color values are only applied when debug level is 0 or 4.}}'}, result="Returns ''true'' if the debug message was successfully output, ''false'' if invalid arguments are specified."), oop=None, url=FunctionUrl(url='/wiki/OutputDebugString', name='outputDebugString', category='Output functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='outputDebugString', return_types=['bool'], arguments=[FunctionArgument(name='text', argument_type='string', default_value=None, optional=False), FunctionArgument(name='level', argument_type='int', default_value='3', optional=False), FunctionArgument(name='red', argument_type='int', default_value='255', optional=False), FunctionArgument(name='green', argument_type='int', default_value='255', optional=False), FunctionArgument(name='blue', argument_type='int', default_value='255', optional=False)]), docs=FunctionDoc(description='This function outputs scripting debug messages, which can be read by enabling the debug textbox. The debug display level can then be set so that info or warning messages get filtered out.', arguments={'text': 'the text to be output to the debug box.\n{{OptionalArg}} ', 'level': 'the debug message level. Possible values are:', '0': 'Custom message', '1': 'Error message', '2': 'Warning message', '3': 'Information message (default)\n{{New items|5.0157|1.5.7-9.20477|', '4': 'Custom message (omits file path and line number)}}', 'red': 'The amount of red in the color of the text. Default value is 255.', 'green': 'The amount of green in the color of the text. Default value is 255.', 'blue': 'The amount of blue in the color of the text. Default value is 255.\n{{Note|Color values are only applied when debug level is 0 or 4.}}'}, result="Returns ''true'' if the debug message was successfully output, ''false'' if invalid arguments are specified."), oop=None, url=FunctionUrl(url='/wiki/OutputDebugString', name='outputDebugString', category='Output functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='showChat', return_types=['bool'], arguments=[FunctionArgument(name='thePlayer', argument_type='player', default_value=None, optional=False), FunctionArgument(name='show', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description="This function is used to show or hide the player's chat.", arguments={'thePlayer': 'The player whose chat is to be hidden or shown.', 'show': 'A boolean value determining whether to show (true) or hide (false) the chat.'}, result="Returns ''true'' if the player's chat was shown or hidden successfully, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/ShowChat', name='showChat', category='Output functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='showChat', return_types=['bool'], arguments=[FunctionArgument(name='show', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description="This function is used to show or hide the player's chat.", arguments={'show': 'A boolean value determining whether to show (true) or hide (false) the chat.'}, result="Returns ''true'' if the player's chat was shown or hidden successfully, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/ShowChat', name='showChat', category='Output functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='addPedClothes', return_types=['bool'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False), FunctionArgument(name='clothesTexture', argument_type='string', default_value=None, optional=False), FunctionArgument(name='clothesModel', argument_type='string', default_value=None, optional=False), FunctionArgument(name='clothesType', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is used to set the current clothes on a [[ped]]. ', arguments={'thePed': ': The ped whose clothes you want to change.', 'clothesTexture': ': A string determining the clothes texture that will be added. See the CJ Clothes|clothes catalog.', 'clothesModel': ': A string determining the clothes model that will be added. See the CJ Clothes|clothes catalog.', 'clothesType': ': A integer representing the clothes slot/type the clothes should be added to. See the CJ Clothes|clothes catalog.'}, result="This function returns ''true'' if the clothes were successfully added to the ped, ''false'' otherwise."), oop=FunctionOOP(class_name='ped', method_name='addClothes', field=None), url=FunctionUrl(url='/wiki/AddPedClothes', name='addPedClothes', category='Ped functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='addPedClothes', return_types=['bool'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False), FunctionArgument(name='clothesTexture', argument_type='string', default_value=None, optional=False), FunctionArgument(name='clothesModel', argument_type='string', default_value=None, optional=False), FunctionArgument(name='clothesType', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is used to set the current clothes on a [[ped]]. ', arguments={'thePed': ': The ped whose clothes you want to change.', 'clothesTexture': ': A string determining the clothes texture that will be added. See the CJ Clothes|clothes catalog.', 'clothesModel': ': A string determining the clothes model that will be added. See the CJ Clothes|clothes catalog.', 'clothesType': ': A integer representing the clothes slot/type the clothes should be added to. See the CJ Clothes|clothes catalog.'}, result="This function returns ''true'' if the clothes were successfully added to the ped, ''false'' otherwise."), oop=FunctionOOP(class_name='ped', method_name='addClothes', field=None), url=FunctionUrl(url='/wiki/AddPedClothes', name='addPedClothes', category='Ped functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='createPed', return_types=['ped'], arguments=[FunctionArgument(name='modelid', argument_type='int', default_value=None, optional=False), FunctionArgument(name='x', argument_type='float', default_value=None, optional=False), FunctionArgument(name='y', argument_type='float', default_value=None, optional=False), FunctionArgument(name='z', argument_type='float', default_value=None, optional=False), FunctionArgument(name='rot', argument_type='float', default_value='0.0', optional=True), FunctionArgument(name='synced', argument_type='bool', default_value='true', optional=True)]), docs=FunctionDoc(description='Creates a Ped in the GTA world.', arguments={'modelid': 'A whole integer specifying the Character_Skins|GTASA skin ID.', 'x': 'A floating point number representing the X coordinate on the map.', 'y': 'A floating point number representing the Y coordinate on the map.', 'z': 'A floating point number representing the Z coordinate on the map.\n{{OptionalArg}}', 'rot': 'A floating point number representing the rotation in degrees.', 'synced': 'A boolean value representing whether or not the ped will be synced. Disabling the sync might be useful for frozen or static peds to increase the server performance.'}, result='Returns a ped element if it was successfully created.'), oop=None, url=FunctionUrl(url='/wiki/CreatePed', name='createPed', category='Ped functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='createPed', return_types=['ped'], arguments=[FunctionArgument(name='modelid', argument_type='int', default_value=None, optional=False), FunctionArgument(name='x', argument_type='float', default_value=None, optional=False), FunctionArgument(name='y', argument_type='float', default_value=None, optional=False), FunctionArgument(name='z', argument_type='float', default_value=None, optional=False), FunctionArgument(name='rot', argument_type='float', default_value='0.0', optional=True)]), docs=FunctionDoc(description='Creates a Ped in the GTA world.', arguments={'modelid': 'A whole integer specifying the Character_Skins|GTASA skin ID.', 'x': 'A floating point number representing the X coordinate on the map.', 'y': 'A floating point number representing the Y coordinate on the map.', 'z': 'A floating point number representing the Z coordinate on the map.\n{{OptionalArg}}', 'rot': 'A floating point number representing the rotation in degrees.'}, result='Returns a ped element if it was successfully created.'), oop=None, url=FunctionUrl(url='/wiki/CreatePed', name='createPed', category='Ped functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getPedAmmoInClip', return_types=['int'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False), FunctionArgument(name='weaponSlot', argument_type='int', default_value='current', optional=True)]), docs=FunctionDoc(description="This function returns an integer that contains the ammo in a specified [[ped]]'s weapon. See [[weapon|Weapon Info]]", arguments={'thePed': 'The ped whose ammo you want to check.', 'weaponSlot': 'an integer representing the weapon slot (set to the peds currently selected slot if not specified).'}, result="Returns an [[int]] containing the amount of ammo in the specified ped's currently selected or specified clip, or 0 if the ped specified is invalid."), oop=FunctionOOP(class_name='ped', method_name='getAmmoInClip', field="ammoInClip}}\n\n===Required Arguments===\n*'''thePed:''' The [[ped]] whose ammo you want to check.\n\n===Optional Arguments===\n*'''weaponSlot:''' an integer representing the weapon slot (set to the ped's currently selected slot if not specified).\n\n===Returns===\nReturns an [[int]] containing the amount of ammo in the specified ped's currently selected or specified clip, or 0 if the ped specified is invalid.\n\n"), url=FunctionUrl(url='/wiki/GetPedAmmoInClip', name='getPedAmmoInClip', category='Ped functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getPedAmmoInClip', return_types=['int'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False), FunctionArgument(name='weaponSlot', argument_type='int', default_value='current', optional=True)]), docs=FunctionDoc(description="This function returns an integer that contains the ammo in a specified [[ped]]'s weapon. See [[weapon|Weapon Info]]", arguments={'thePed': 'The ped whose ammo you want to check.', 'weaponSlot': 'an integer representing the weapon slot (set to the peds currently selected slot if not specified).'}, result="Returns an [[int]] containing the amount of ammo in the specified ped's currently selected or specified clip, or 0 if the ped specified is invalid."), oop=FunctionOOP(class_name='ped', method_name='getAmmoInClip', field="ammoInClip}}\n\n===Required Arguments===\n*'''thePed:''' The [[ped]] whose ammo you want to check.\n\n===Optional Arguments===\n*'''weaponSlot:''' an integer representing the weapon slot (set to the ped's currently selected slot if not specified).\n\n===Returns===\nReturns an [[int]] containing the amount of ammo in the specified ped's currently selected or specified clip, or 0 if the ped specified is invalid.\n\n"), url=FunctionUrl(url='/wiki/GetPedAmmoInClip', name='getPedAmmoInClip', category='Ped functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getPedArmor', return_types=['float'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns the current armor of the specified [[ped]].', arguments={'thePed': 'The ped whose armor you want to check'}, result="A ''float'' with the armor, ''false'' if an invalid ped was given."), oop=FunctionOOP(class_name='ped', method_name='getArmor', field='armor'), url=FunctionUrl(url='/wiki/GetPedArmor', name='getPedArmor', category='Ped functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getPedArmor', return_types=['float'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns the current armor of the specified [[ped]].', arguments={'thePed': 'The ped whose armor you want to check'}, result="A ''float'' with the armor, ''false'' if an invalid ped was given."), oop=FunctionOOP(class_name='ped', method_name='getArmor', field='armor'), url=FunctionUrl(url='/wiki/GetPedArmor', name='getPedArmor', category='Ped functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getPedClothes', return_types=['string,', 'string'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False), FunctionArgument(name='clothesType', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is used to get the current clothes texture and model of a certain type on a [[ped]].', arguments={'thePed': 'The ped whose clothes you want to retrieve.', 'clothesType': 'The type/slot of clothing you want to get.\n{{Clothes Textures}}'}, result="This function returns 2 [[string|strings]], the clothes texture and model. The first return value will be ''false'' if this player's clothes type is empty or an invalid player was specified."), oop=FunctionOOP(class_name='ped', method_name='getClothes', field=None), url=FunctionUrl(url='/wiki/GetPedClothes', name='getPedClothes', category='Ped functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getPedClothes', return_types=['string,', 'string'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False), FunctionArgument(name='clothesType', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is used to get the current clothes texture and model of a certain type on a [[ped]].', arguments={'thePed': 'The ped whose clothes you want to retrieve.', 'clothesType': 'The type/slot of clothing you want to get.\n{{Clothes Textures}}'}, result="This function returns 2 [[string|strings]], the clothes texture and model. The first return value will be ''false'' if this player's clothes type is empty or an invalid player was specified."), oop=FunctionOOP(class_name='ped', method_name='getClothes', field=None), url=FunctionUrl(url='/wiki/GetPedClothes', name='getPedClothes', category='Ped functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getPedContactElement', return_types=['element'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False)]), docs=FunctionDoc(description='This function detects the element a ped is standing on. This can be a vehicle or an object.', arguments={'thePed': 'The ped of which you want to get the element he is standing on.'}, result="Returns an [[object]] or a [[vehicle]] if the ped is standing on one, ''false'' if he is touching none or an invalid element was passed."), oop=FunctionOOP(class_name='ped', method_name='getContactElement', field="contactElement}}\n\n===Required Arguments=== \n*'''thePed:''' The [[ped]] of which you want to get the [[element]] he is standing on.\n\n===Returns===\nReturns an [[object]] or a [[vehicle]] if the ped is standing on one, ''false'' if he is touching none or an invalid element was passed.\n\n"), url=FunctionUrl(url='/wiki/GetPedContactElement', name='getPedContactElement', category='Ped functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getPedContactElement', return_types=['element'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False)]), docs=FunctionDoc(description='This function detects the element a ped is standing on. This can be a vehicle or an object.', arguments={'thePed': 'The ped of which you want to get the element he is standing on.'}, result="Returns an [[object]] or a [[vehicle]] if the ped is standing on one, ''false'' if he is touching none or an invalid element was passed."), oop=FunctionOOP(class_name='ped', method_name='getContactElement', field="contactElement}}\n\n===Required Arguments=== \n*'''thePed:''' The [[ped]] of which you want to get the [[element]] he is standing on.\n\n===Returns===\nReturns an [[object]] or a [[vehicle]] if the ped is standing on one, ''false'' if he is touching none or an invalid element was passed.\n\n"), url=FunctionUrl(url='/wiki/GetPedContactElement', name='getPedContactElement', category='Ped functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getPedFightingStyle', return_types=['int'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False)]), docs=FunctionDoc(description='Retrieves the fighting style a player/ped is currently using.', arguments={'thePed': 'the ped whose current fighting style ID you wish to retrieve.'}, result="Returns the ped's current fighting style as an integer ID, ''false'' if it fails to retrieve a value.\n{{Fighting Styles}}"), oop=FunctionOOP(class_name='ped', method_name='getFightingStyle', field='fightingStyle'), url=FunctionUrl(url='/wiki/GetPedFightingStyle', name='getPedFightingStyle', category='Ped functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getPedFightingStyle', return_types=['int'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False)]), docs=FunctionDoc(description='Retrieves the fighting style a player/ped is currently using.', arguments={'thePed': 'the ped whose current fighting style ID you wish to retrieve.'}, result="Returns the ped's current fighting style as an integer ID, ''false'' if it fails to retrieve a value.\n{{Fighting Styles}}"), oop=FunctionOOP(class_name='ped', method_name='getFightingStyle', field='fightingStyle'), url=FunctionUrl(url='/wiki/GetPedFightingStyle', name='getPedFightingStyle', category='Ped functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getPedOccupiedVehicle', return_types=['vehicle'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False)]), docs=FunctionDoc(description='This function gets the [[vehicle]] that the ped is currently in or is trying to enter, if any.', arguments={'thePed': ': The ped whose vehicle youre looking up.'}, result="Returns the vehicle that the specified ped is in, or ''false'' if the ped is not in a vehicle or is an invalid ped."), oop=FunctionOOP(class_name='ped', method_name='getOccupiedVehicle', field='vehicle'), url=FunctionUrl(url='/wiki/GetPedOccupiedVehicle', name='getPedOccupiedVehicle', category='Ped functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getPedOccupiedVehicle', return_types=['vehicle'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False)]), docs=FunctionDoc(description='This function gets the [[vehicle]] that the ped is currently in or is trying to enter, if any.', arguments={'thePed': ': The ped whose vehicle youre looking up.'}, result="Returns the vehicle that the specified ped is in, or ''false'' if the ped is not in a vehicle or is an invalid ped."), oop=FunctionOOP(class_name='ped', method_name='getOccupiedVehicle', field='vehicle'), url=FunctionUrl(url='/wiki/GetPedOccupiedVehicle', name='getPedOccupiedVehicle', category='Ped functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getPedOccupiedVehicleSeat', return_types=['int'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False)]), docs=FunctionDoc(description='This function gets the seat that a specific ped is sitting in in a vehicle.\n[[File:vehicle seat ids.png|200px|thumb|right|Vehicle seat ids]] ', arguments={'thePed': ': The ped whose vehicle seat youre looking up.'}, result="* Returns an integer containing the number of the seat that the ped is currently in:\n** '''0:''' Front-left\n** '''1:''' Front-right\n** '''2:''' Rear-left\n** '''3:''' Rear-right\nReturns ''false'' if the ped is on foot, or the ped doesn't exist."), oop=FunctionOOP(class_name='ped', method_name='getOccupiedVehicleSeat', field="vehicleSeat}}\n\n===Required Arguments===\n*'''thePed''': The [[ped]] whose vehicle seat you're looking up.\n\n===Returns===\n* Returns an integer containing the number of the seat that the ped is currently in:\n** '''0:''' Front-left\n** '''1:''' Front-right\n** '''2:''' Rear-left\n** '''3:''' Rear-right\n\nReturns ''false'' if the ped is on foot, or the ped doesn't exist.\n\n"), url=FunctionUrl(url='/wiki/GetPedOccupiedVehicleSeat', name='getPedOccupiedVehicleSeat', category='Ped functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getPedOccupiedVehicleSeat', return_types=['int'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False)]), docs=FunctionDoc(description='This function gets the seat that a specific ped is sitting in in a vehicle.\n[[File:vehicle seat ids.png|200px|thumb|right|Vehicle seat ids]] ', arguments={'thePed': ': The ped whose vehicle seat youre looking up.'}, result="* Returns an integer containing the number of the seat that the ped is currently in:\n** '''0:''' Front-left\n** '''1:''' Front-right\n** '''2:''' Rear-left\n** '''3:''' Rear-right\nReturns ''false'' if the ped is on foot, or the ped doesn't exist."), oop=FunctionOOP(class_name='ped', method_name='getOccupiedVehicleSeat', field="vehicleSeat}}\n\n===Required Arguments===\n*'''thePed''': The [[ped]] whose vehicle seat you're looking up.\n\n===Returns===\n* Returns an integer containing the number of the seat that the ped is currently in:\n** '''0:''' Front-left\n** '''1:''' Front-right\n** '''2:''' Rear-left\n** '''3:''' Rear-right\n\nReturns ''false'' if the ped is on foot, or the ped doesn't exist.\n\n"), url=FunctionUrl(url='/wiki/GetPedOccupiedVehicleSeat', name='getPedOccupiedVehicleSeat', category='Ped functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getPedStat', return_types=['float'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False), FunctionArgument(name='stat', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns the value of the specified statistic of a specific [[ped]].', arguments={'thePed': ': The ped whose stat you want to retrieve.', 'stat': ': A whole number determining the stat ID.\n{{Stats}}'}, result='Returns the value of the requested statistic.'), oop=None, url=FunctionUrl(url='/wiki/GetPedStat', name='getPedStat', category='Ped functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getPedStat', return_types=['float'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False), FunctionArgument(name='stat', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns the value of the specified statistic of a specific [[ped]].', arguments={'thePed': ': The ped whose stat you want to retrieve.', 'stat': ': A whole number determining the stat ID.\n{{Stats}}'}, result='Returns the value of the requested statistic.'), oop=None, url=FunctionUrl(url='/wiki/GetPedStat', name='getPedStat', category='Ped functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getPedTarget', return_types=['element'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is used to get the element a [[ped]] is currently targeting.', arguments={'thePed': 'The ped whose target you want to retrieve.'}, result="Returns the [[element]] that's being targeted, or ''false'' if there isn't one.\nThis is only effective on physical GTA elements, namely:\n* Players\n* Peds\n* Vehicles\n* Objects"), oop=None, url=FunctionUrl(url='/wiki/GetPedTarget', name='getPedTarget', category='Ped functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getPedTarget', return_types=['element'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is used to get the element a [[ped]] is currently targeting.', arguments={'thePed': 'The ped whose target you want to retrieve.'}, result="Returns the [[element]] that's being targeted, or ''false'' if there isn't one.\nThis is only effective on physical GTA elements, namely:\n* Players\n* Peds\n* Vehicles\n* Objects"), oop=None, url=FunctionUrl(url='/wiki/GetPedTarget', name='getPedTarget', category='Ped functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getPedTotalAmmo', return_types=['int'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False), FunctionArgument(name='weaponSlot', argument_type='int', default_value='current', optional=False)]), docs=FunctionDoc(description="This function returns an integer that contains the total ammo in a specified [[ped]]'s weapon. See [[weapon|Weapon Info]]", arguments={'thePed': ': The ped whose ammo you want to check.', 'weaponSlot': ': an integer representing the weapon slot (set to the peds current slot if not given)'}, result="Returns an [[int]] containing the total amount of ammo for the specified ped's weapon, or 0 if the ped specified is invalid."), oop=None, url=FunctionUrl(url='/wiki/GetPedTotalAmmo', name='getPedTotalAmmo', category='Ped functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getPedTotalAmmo', return_types=['int'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False), FunctionArgument(name='weaponSlot', argument_type='int', default_value='current', optional=False)]), docs=FunctionDoc(description="This function returns an integer that contains the total ammo in a specified [[ped]]'s weapon. See [[weapon|Weapon Info]]", arguments={'thePed': ': The ped whose ammo you want to check.', 'weaponSlot': ': an integer representing the weapon slot (set to the peds current slot if not given)'}, result="Returns an [[int]] containing the total amount of ammo for the specified ped's weapon, or 0 if the ped specified is invalid."), oop=None, url=FunctionUrl(url='/wiki/GetPedTotalAmmo', name='getPedTotalAmmo', category='Ped functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getPedWalkingStyle', return_types=['int'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'thePed': 'the ped whose walking style to retrieve.'}, result="Returns the walking style ID if successful, ''false'' otherwise. The possible walking styles are as follows:\n{{Ped walking styles}}"), oop=FunctionOOP(class_name='ped', method_name='getWalkingStyle', field='walkingStyle'), url=FunctionUrl(url='/wiki/GetPedWalkingStyle', name='getPedWalkingStyle', category='Ped functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getPedWalkingStyle', return_types=['int'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'thePed': 'the ped whose walking style to retrieve.'}, result="Returns the walking style ID if successful, ''false'' otherwise. The possible walking styles are as follows:\n{{Ped walking styles}}"), oop=FunctionOOP(class_name='ped', method_name='getWalkingStyle', field='walkingStyle'), url=FunctionUrl(url='/wiki/GetPedWalkingStyle', name='getPedWalkingStyle', category='Ped functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getPedWeapon', return_types=['int'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False), FunctionArgument(name='weaponSlot', argument_type='int', default_value='current', optional=False)]), docs=FunctionDoc(description='This function tells you which weapon type is in a certain weapon slot of a ped. See [[weapon|Weapon Info]]', arguments={'thePed': ': the ped you want to get the weapon type from.', 'weaponSlot': ': an integer representing the weapon slot (set to the peds current slot if not given).'}, result="Returns an [[int]] indicating the type of the weapon the ped has in the specified slot. If the slot is empty, it returns 0.\nIt should be noted that if a ped runs out of ammo for a weapon, it will still return the ID of that weapon in the slot (even if it appears as if the ped does not have a weapon at all), though [[getPedTotalAmmo]] will return '''0'''.  Therefore, [[getPedTotalAmmo]] should be used in conjunction with [[getPedWeapon]] in order to check if a ped has a weapon."), oop=None, url=FunctionUrl(url='/wiki/GetPedWeapon', name='getPedWeapon', category='Ped functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getPedWeapon', return_types=['int'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False), FunctionArgument(name='weaponSlot', argument_type='int', default_value='current', optional=False)]), docs=FunctionDoc(description='This function tells you which weapon type is in a certain weapon slot of a ped. See [[weapon|Weapon Info]]', arguments={'thePed': ': the ped you want to get the weapon type from.', 'weaponSlot': ': an integer representing the weapon slot (set to the peds current slot if not given).'}, result="Returns an [[int]] indicating the type of the weapon the ped has in the specified slot. If the slot is empty, it returns 0.\nIt should be noted that if a ped runs out of ammo for a weapon, it will still return the ID of that weapon in the slot (even if it appears as if the ped does not have a weapon at all), though [[getPedTotalAmmo]] will return '''0'''.  Therefore, [[getPedTotalAmmo]] should be used in conjunction with [[getPedWeapon]] in order to check if a ped has a weapon."), oop=None, url=FunctionUrl(url='/wiki/GetPedWeapon', name='getPedWeapon', category='Ped functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getPedWeaponSlot', return_types=['int'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False)]), docs=FunctionDoc(description="This function gets a ped's selected weapon slot.", arguments={'thePed': 'the ped to get the current weapon slot of.'}, result="Returns the selected weapon slot ID on success, ''false'' otherwise.\n{{Weapon_Slots}}"), oop=FunctionOOP(class_name='ped', method_name='getWeaponSlot', field='weaponSlot'), url=FunctionUrl(url='/wiki/GetPedWeaponSlot', name='getPedWeaponSlot', category='Ped functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getPedWeaponSlot', return_types=['int'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False)]), docs=FunctionDoc(description="This function gets a ped's selected weapon slot.", arguments={'thePed': 'the ped to get the current weapon slot of.'}, result="Returns the selected weapon slot ID on success, ''false'' otherwise.\n{{Weapon_Slots}}"), oop=FunctionOOP(class_name='ped', method_name='getWeaponSlot', field='weaponSlot'), url=FunctionUrl(url='/wiki/GetPedWeaponSlot', name='getPedWeaponSlot', category='Ped functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getValidPedModels', return_types=['table'], arguments=[]), docs=FunctionDoc(description='This function returns all valid ped models.', arguments={}, result='Returns a [[table]] with all valid ped models.'), oop=None, url=FunctionUrl(url='/wiki/GetValidPedModels', name='getValidPedModels', category='Ped functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getValidPedModels', return_types=['table'], arguments=[]), docs=FunctionDoc(description='This function returns all valid ped models.', arguments={}, result='Returns a [[table]] with all valid ped models.'), oop=None, url=FunctionUrl(url='/wiki/GetValidPedModels', name='getValidPedModels', category='Ped functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='isPedChoking', return_types=['bool'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False)]), docs=FunctionDoc(description='This function checks if the specified [[ped]] is choking (coughing) or not. This happens as a result of weapons that produce smoke - smoke grenades, fire extinguisher and the spray can. ', arguments={'thePed': ': The ped you wish to check'}, result="Returns ''true'' if the ped is choking, ''false'' otherwise."), oop=FunctionOOP(class_name='ped', method_name='isChoking', field='choking'), url=FunctionUrl(url='/wiki/IsPedChoking', name='isPedChoking', category='Ped functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='isPedChoking', return_types=['bool'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False)]), docs=FunctionDoc(description='This function checks if the specified [[ped]] is choking (coughing) or not. This happens as a result of weapons that produce smoke - smoke grenades, fire extinguisher and the spray can. ', arguments={'thePed': ': The ped you wish to check'}, result="Returns ''true'' if the ped is choking, ''false'' otherwise."), oop=FunctionOOP(class_name='ped', method_name='isChoking', field='choking'), url=FunctionUrl(url='/wiki/IsPedChoking', name='isPedChoking', category='Ped functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='isPedDoingGangDriveby', return_types=['bool'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False)]), docs=FunctionDoc(description='This function checks if the ped is in the driveby state.', arguments={'thePed': 'The ped element whose state is to be checked.'}, result="Returns '''true''' if the driveby state is enabled, '''false''' otherwise."), oop=FunctionOOP(class_name='ped', method_name='isDoingGangDriveby', field='doingGangDriveby'), url=FunctionUrl(url='/wiki/IsPedDoingGangDriveby', name='isPedDoingGangDriveby', category='Ped functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='isPedDoingGangDriveby', return_types=['bool'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False)]), docs=FunctionDoc(description='This function checks if the ped is in the driveby state.', arguments={'thePed': 'The ped element whose state is to be checked.'}, result="Returns '''true''' if the driveby state is enabled, '''false''' otherwise."), oop=FunctionOOP(class_name='ped', method_name='isDoingGangDriveby', field='doingGangDriveby'), url=FunctionUrl(url='/wiki/IsPedDoingGangDriveby', name='isPedDoingGangDriveby', category='Ped functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='isPedDucked', return_types=['bool'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False)]), docs=FunctionDoc(description='This function checks if the specified [[ped]] is ducked (crouched) or not.', arguments={'thePed': ': The ped to check.'}, result="Returns ''true'' if the ped is ducked, ''false'' otherwise."), oop=FunctionOOP(class_name='ped', method_name='isDucked', field="ducked}}\n\n===Required Arguments===\n*'''thePed''': The [[ped]] to check.\n\n===Returns===\nReturns ''true'' if the ped is ducked, ''false'' otherwise.\n\n"), url=FunctionUrl(url='/wiki/IsPedDucked', name='isPedDucked', category='Ped functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='isPedDucked', return_types=['bool'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False)]), docs=FunctionDoc(description='This function checks if the specified [[ped]] is ducked (crouched) or not.', arguments={'thePed': ': The ped to check.'}, result="Returns ''true'' if the ped is ducked, ''false'' otherwise."), oop=FunctionOOP(class_name='ped', method_name='isDucked', field="ducked}}\n\n===Required Arguments===\n*'''thePed''': The [[ped]] to check.\n\n===Returns===\nReturns ''true'' if the ped is ducked, ''false'' otherwise.\n\n"), url=FunctionUrl(url='/wiki/IsPedDucked', name='isPedDucked', category='Ped functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='isPedHeadless', return_types=['bool'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False)]), docs=FunctionDoc(description='With this function, you can check if a ped has a head or not.', arguments={'thePed': ': The ped to check.'}, result="Returns ''true'' if the ped is headless, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/IsPedHeadless', name='isPedHeadless', category='Ped functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='isPedHeadless', return_types=['bool'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False)]), docs=FunctionDoc(description='With this function, you can check if a ped has a head or not.', arguments={'thePed': ': The ped to check.'}, result="Returns ''true'' if the ped is headless, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/IsPedHeadless', name='isPedHeadless', category='Ped functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='isPedInVehicle', return_types=['bool'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False)]), docs=FunctionDoc(description="Checks whether or not a given ped is currently in a vehicle. This also returns true if they're trying to enter a vehicle.", arguments={'thePed': 'the ped you want to check.'}, result="Returns ''true'' if the ped is in a vehicle, ''false'' if he is on foot or an invalid element was passed."), oop=FunctionOOP(class_name='ped', method_name='isInVehicle', field="inVehicle}}\n\n===Required Arguments===\n*'''thePed:''' the ped you want to check.\n\n===Returns===\nReturns ''true'' if the ped is in a vehicle, ''false'' if he is on foot or an invalid element was passed.\n\n"), url=FunctionUrl(url='/wiki/IsPedInVehicle', name='isPedInVehicle', category='Ped functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='isPedInVehicle', return_types=['bool'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False)]), docs=FunctionDoc(description="Checks whether or not a given ped is currently in a vehicle. This also returns true if they're trying to enter a vehicle.", arguments={'thePed': 'the ped you want to check.'}, result="Returns ''true'' if the ped is in a vehicle, ''false'' if he is on foot or an invalid element was passed."), oop=FunctionOOP(class_name='ped', method_name='isInVehicle', field="inVehicle}}\n\n===Required Arguments===\n*'''thePed:''' the ped you want to check.\n\n===Returns===\nReturns ''true'' if the ped is in a vehicle, ''false'' if he is on foot or an invalid element was passed.\n\n"), url=FunctionUrl(url='/wiki/IsPedInVehicle', name='isPedInVehicle', category='Ped functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='isPedOnFire', return_types=['bool'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False)]), docs=FunctionDoc(description='This function checks if the specified [[ped]] is on fire or not.', arguments={'thePed': ': The ped to check.'}, result="Returns ''true'' if the ped is on fire, ''false'' otherwise."), oop=FunctionOOP(class_name='ped', method_name='isOnFire', field='onFire'), url=FunctionUrl(url='/wiki/IsPedOnFire', name='isPedOnFire', category='Ped functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='isPedOnFire', return_types=['bool'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False)]), docs=FunctionDoc(description='This function checks if the specified [[ped]] is on fire or not.', arguments={'thePed': ': The ped to check.'}, result="Returns ''true'' if the ped is on fire, ''false'' otherwise."), oop=FunctionOOP(class_name='ped', method_name='isOnFire', field='onFire'), url=FunctionUrl(url='/wiki/IsPedOnFire', name='isPedOnFire', category='Ped functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='isPedOnGround', return_types=['bool'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is used to determine whether or not a ped is on the ground. This is for on-foot usage only.', arguments={'thePed': 'The ped you are checking.'}, result="Returns ''true'' if the ped is on foot and on the ground, ''false'' otherwise, even if he is in a car that stands still or on object outside world map."), oop=FunctionOOP(class_name='ped', method_name='isOnGround', field="onGround}}\n\n===Required Arguments===\n*'''thePed:''' The [[ped]] you are checking.\n\n===Returns===\nReturns ''true'' if the ped is on foot and on the ground, ''false'' otherwise, even if he is in a car that stands still or on object outside world map.\n\n"), url=FunctionUrl(url='/wiki/IsPedOnGround', name='isPedOnGround', category='Ped functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='isPedOnGround', return_types=['bool'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is used to determine whether or not a ped is on the ground. This is for on-foot usage only.', arguments={'thePed': 'The ped you are checking.'}, result="Returns ''true'' if the ped is on foot and on the ground, ''false'' otherwise, even if he is in a car that stands still or on object outside world map."), oop=FunctionOOP(class_name='ped', method_name='isOnGround', field="onGround}}\n\n===Required Arguments===\n*'''thePed:''' The [[ped]] you are checking.\n\n===Returns===\nReturns ''true'' if the ped is on foot and on the ground, ''false'' otherwise, even if he is in a car that stands still or on object outside world map.\n\n"), url=FunctionUrl(url='/wiki/IsPedOnGround', name='isPedOnGround', category='Ped functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='isPedWearingJetpack', return_types=['bool'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'thePed': 'the ped you want to check'}, result="Returns ''true'' if the ped is carrying a jetpack, ''false'' if he is not or an invalid element was passed."), oop=FunctionOOP(class_name='ped', method_name='isWearingJetpack', field="jetpack}}\n\n===Required Arguments===\n*'''thePed:''' the ped you want to check\n\n===Returns===\nReturns ''true'' if the ped is carrying a jetpack, ''false'' if he is not or an invalid element was passed.\n\n"), url=FunctionUrl(url='/wiki/IsPedWearingJetpack', name='isPedWearingJetpack', category='Ped functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='isPedWearingJetpack', return_types=['bool'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'thePed': 'the ped you want to check'}, result="Returns ''true'' if the ped is carrying a jetpack, ''false'' if he is not or an invalid element was passed."), oop=FunctionOOP(class_name='ped', method_name='isWearingJetpack', field="jetpack}}\n\n===Required Arguments===\n*'''thePed:''' the ped you want to check\n\n===Returns===\nReturns ''true'' if the ped is carrying a jetpack, ''false'' if he is not or an invalid element was passed.\n\n"), url=FunctionUrl(url='/wiki/IsPedWearingJetpack', name='isPedWearingJetpack', category='Ped functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='killPed', return_types=['bool'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False), FunctionArgument(name='theKiller', argument_type='ped', default_value='nil', optional=False), FunctionArgument(name='weapon', argument_type='int', default_value='255', optional=False), FunctionArgument(name='bodyPart', argument_type='int', default_value='255', optional=False), FunctionArgument(name='stealth', argument_type='bool', default_value='false', optional=False)]), docs=FunctionDoc(description='This function kills the specified ped.\nFrom v1.5.3 onwards this function is now available client side. Only works on client side peds.\n}}', arguments={'thePed': 'The ped to kill', 'theKiller': 'The ped responsible for the kill', 'weapon': 'The ID of the weapon or Damage Types that should appear to have killed the ped (doesnt affect how they die)', 'bodyPart': 'The ID of the body part that should appear to have been hit by the weapon (doesnt affect how they die)\n{{BodyParts}}', 'stealth': 'Boolean value, representing whether or not this a stealth kill'}, result="Returns ''true'' if the ped was killed, ''false'' if the ped specified could not be killed or is invalid."), oop=None, url=FunctionUrl(url='/wiki/KillPed', name='killPed', category='Ped functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='killPed', return_types=['bool'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False), FunctionArgument(name='theKiller', argument_type='ped', default_value='nil', optional=False), FunctionArgument(name='weapon', argument_type='int', default_value='255', optional=False), FunctionArgument(name='bodyPart', argument_type='int', default_value='255', optional=False), FunctionArgument(name='stealth', argument_type='bool', default_value='false', optional=False)]), docs=FunctionDoc(description='This function kills the specified ped.\nFrom v1.5.3 onwards this function is now available client side. Only works on client side peds.\n}}', arguments={'thePed': 'The ped to kill', 'theKiller': 'The ped responsible for the kill', 'weapon': 'The ID of the weapon or Damage Types that should appear to have killed the ped (doesnt affect how they die)', 'bodyPart': 'The ID of the body part that should appear to have been hit by the weapon (doesnt affect how they die)\n{{BodyParts}}', 'stealth': 'Boolean value, representing whether or not this a stealth kill'}, result="Returns ''true'' if the ped was killed, ''false'' if the ped specified could not be killed or is invalid."), oop=None, url=FunctionUrl(url='/wiki/KillPed', name='killPed', category='Ped functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='removePedClothes', return_types=['bool'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False), FunctionArgument(name='clothesType', argument_type='int', default_value=None, optional=False), FunctionArgument(name='clothesTexture', argument_type='string', default_value=None, optional=False), FunctionArgument(name='clothesModel', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description="This function is used to remove the current clothes of a certain type on a [[ped]]. It will remove them if the clothesTexture and clothesModel aren't specified, or if they match the current clothes on that slot.", arguments={'thePed': ': The ped you want to remove clothes from.', 'clothesType': ': the clothes slot/type to remove. See the CJ Clothes|clothes catalog.', 'clothesTexture': ': (Server only) A string determining the clothes texture that will be removed. See the CJ Clothes|clothes catalog.', 'clothesModel': ': (Server only) A string determining the clothes model that will be removed. See the CJ Clothes|clothes catalog.'}, result="This function returns ''true'' if the clothes were successfully removed from the ped, ''false'' otherwise."), oop=FunctionOOP(class_name='ped', method_name="removeClothes}}\n\n===Required Arguments===\n*'''thePed''': The [[ped]] you want to remove clothes from.\n*'''clothesType''': the clothes slot/type to remove. See the [[CJ Clothes", field="clothes catalog]].\n\n===Optional Arguments===\n*'''clothesTexture''': (Server only) A string determining the clothes texture that will be removed. See the [[CJ Clothes"), url=FunctionUrl(url='/wiki/RemovePedClothes', name='removePedClothes', category='Ped functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='removePedClothes', return_types=['bool'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False), FunctionArgument(name='clothesType', argument_type='int', default_value=None, optional=False), FunctionArgument(name='clothesTexture', argument_type='string', default_value=None, optional=False), FunctionArgument(name='clothesModel', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description="This function is used to remove the current clothes of a certain type on a [[ped]]. It will remove them if the clothesTexture and clothesModel aren't specified, or if they match the current clothes on that slot.", arguments={'thePed': ': The ped you want to remove clothes from.', 'clothesType': ': the clothes slot/type to remove. See the CJ Clothes|clothes catalog.', 'clothesTexture': ': (Server only) A string determining the clothes texture that will be removed. See the CJ Clothes|clothes catalog.', 'clothesModel': ': (Server only) A string determining the clothes model that will be removed. See the CJ Clothes|clothes catalog.'}, result="This function returns ''true'' if the clothes were successfully removed from the ped, ''false'' otherwise."), oop=FunctionOOP(class_name='ped', method_name="removeClothes}}\n\n===Required Arguments===\n*'''thePed''': The [[ped]] you want to remove clothes from.\n*'''clothesType''': the clothes slot/type to remove. See the [[CJ Clothes", field="clothes catalog]].\n\n===Optional Arguments===\n*'''clothesTexture''': (Server only) A string determining the clothes texture that will be removed. See the [[CJ Clothes"), url=FunctionUrl(url='/wiki/RemovePedClothes', name='removePedClothes', category='Ped functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='removePedFromVehicle', return_types=['bool'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False)]), docs=FunctionDoc(description="This function removes a ped from a vehicle immediately. This works for drivers and passengers. Note that this removes the ped from the vehicle and puts him in the exact position where the command was initiated.\n'''Available client side from 1.3.1''' (It will only work with client side vehicles and peds)", arguments={'thePed': 'The ped you wish to remove from a vehicle'}, result="Returns ''true'' if the operation was successful, ''false'' if the specified ped is not valid or if it isn't in a vehicle."), oop=FunctionOOP(class_name='ped', method_name='removeFromVehicle', field="vehicle}}\n\n===Required Arguments=== \n*'''thePed:''' The ped you wish to remove from a vehicle\n\n===Returns===\nReturns ''true'' if the operation was successful, ''false'' if the specified ped is not valid or if it isn't in a vehicle.\n\n"), url=FunctionUrl(url='/wiki/RemovePedFromVehicle', name='removePedFromVehicle', category='Ped functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='removePedFromVehicle', return_types=['bool'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False)]), docs=FunctionDoc(description="This function removes a ped from a vehicle immediately. This works for drivers and passengers. Note that this removes the ped from the vehicle and puts him in the exact position where the command was initiated.\n'''Available client side from 1.3.1''' (It will only work with client side vehicles and peds)", arguments={'thePed': 'The ped you wish to remove from a vehicle'}, result="Returns ''true'' if the operation was successful, ''false'' if the specified ped is not valid or if it isn't in a vehicle."), oop=FunctionOOP(class_name='ped', method_name='removeFromVehicle', field="vehicle}}\n\n===Required Arguments=== \n*'''thePed:''' The ped you wish to remove from a vehicle\n\n===Returns===\nReturns ''true'' if the operation was successful, ''false'' if the specified ped is not valid or if it isn't in a vehicle.\n\n"), url=FunctionUrl(url='/wiki/RemovePedFromVehicle', name='removePedFromVehicle', category='Ped functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setPedAnimation', return_types=['bool'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False), FunctionArgument(name='block', argument_type='string', default_value='nil', optional=True), FunctionArgument(name='anim', argument_type='string', default_value='nil', optional=True), FunctionArgument(name='time', argument_type='int', default_value='-1', optional=True), FunctionArgument(name='loop', argument_type='bool', default_value='true', optional=True), FunctionArgument(name='updatePosition', argument_type='bool', default_value='true', optional=True), FunctionArgument(name='interruptable', argument_type='bool', default_value='true', optional=True), FunctionArgument(name='freezeLastFrame', argument_type='bool', default_value='true', optional=True), FunctionArgument(name='blendTime', argument_type='int', default_value='250', optional=True), FunctionArgument(name='retainPedState', argument_type='bool', default_value='false', optional=True)]), docs=FunctionDoc(description='Sets the current [[Animations|animation]] of a [[player]] or [[ped]]. Not specifying the type of animation will automatically cancel the current one.', arguments={'thePed': 'the player or ped you want to apply an Animations|animation to.\n{{OptionalArg}}', 'block': 'the Animations|animation blocks name.', 'anim': 'the name of the Animations|animation within the block.', 'time': 'how long the animation will run for in milliseconds.', 'loop': 'indicates whether or not the animation will loop.', 'updatePosition': 'will change the actual coordinates of the ped according to the animation. Use this for e.g. walking animations.', 'interruptable': 'if set to false other tasks wont be able to interupt the animation. Setting this to false also gives this function more power to override other animations that are running. For example, squatting after a jump can be terminated.', 'freezeLastFrame': 'if set to true after animation the last frame will be frozen, otherwise the animation will end and controls will return.', 'blendTime': 'how long the animation will mixed with the previous one in milliseconds.\n{{New items|3.0157|1.5.7|', 'retainPedState': 'will restore the task which was playing before calling this function. Useful for restoring the crouch task after animation ends. This may be extended in the future to support other states/tasks.\n|16632}}'}, result="Returns ''true'' if succesful, ''false'' otherwise."), oop=FunctionOOP(class_name='ped', method_name='setAnimation', field=None), url=FunctionUrl(url='/wiki/SetPedAnimation', name='setPedAnimation', category='Ped functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setPedAnimation', return_types=['bool'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False), FunctionArgument(name='block', argument_type='string', default_value='nil', optional=True), FunctionArgument(name='anim', argument_type='string', default_value='nil', optional=True), FunctionArgument(name='time', argument_type='int', default_value='-1', optional=True), FunctionArgument(name='loop', argument_type='bool', default_value='true', optional=True), FunctionArgument(name='updatePosition', argument_type='bool', default_value='true', optional=True), FunctionArgument(name='interruptable', argument_type='bool', default_value='true', optional=True), FunctionArgument(name='freezeLastFrame', argument_type='bool', default_value='true', optional=True), FunctionArgument(name='blendTime', argument_type='int', default_value='250', optional=True), FunctionArgument(name='retainPedState', argument_type='bool', default_value='false', optional=True)]), docs=FunctionDoc(description='Sets the current [[Animations|animation]] of a [[player]] or [[ped]]. Not specifying the type of animation will automatically cancel the current one.', arguments={'thePed': 'the player or ped you want to apply an Animations|animation to.\n{{OptionalArg}}', 'block': 'the Animations|animation blocks name.', 'anim': 'the name of the Animations|animation within the block.', 'time': 'how long the animation will run for in milliseconds.', 'loop': 'indicates whether or not the animation will loop.', 'updatePosition': 'will change the actual coordinates of the ped according to the animation. Use this for e.g. walking animations.', 'interruptable': 'if set to false other tasks wont be able to interupt the animation. Setting this to false also gives this function more power to override other animations that are running. For example, squatting after a jump can be terminated.', 'freezeLastFrame': 'if set to true after animation the last frame will be frozen, otherwise the animation will end and controls will return.', 'blendTime': 'how long the animation will mixed with the previous one in milliseconds.\n{{New items|3.0157|1.5.7|', 'retainPedState': 'will restore the task which was playing before calling this function. Useful for restoring the crouch task after animation ends. This may be extended in the future to support other states/tasks.\n|16632}}'}, result="Returns ''true'' if succesful, ''false'' otherwise."), oop=FunctionOOP(class_name='ped', method_name='setAnimation', field=None), url=FunctionUrl(url='/wiki/SetPedAnimation', name='setPedAnimation', category='Ped functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setPedAnimationProgress', return_types=['bool'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False), FunctionArgument(name='anim', argument_type='string', default_value=None, optional=True), FunctionArgument(name='progress', argument_type='float', default_value=None, optional=True)]), docs=FunctionDoc(description='Sets the current animation progress of a player or ped.', arguments={'thePed': 'the player or ped you want to change animation progress.', 'anim': 'the animation name currently applied to ped, if not supplied, the animation will stop', 'progress': 'current animation progress you want to apply, value from 0.0 to 1.0, if not supplied will default to 0.0'}, result="Returns ''true'' if successful, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/SetPedAnimationProgress', name='setPedAnimationProgress', category='Ped functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setPedAnimationProgress', return_types=['bool'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False), FunctionArgument(name='anim', argument_type='string', default_value=None, optional=True), FunctionArgument(name='progress', argument_type='float', default_value=None, optional=True)]), docs=FunctionDoc(description='Sets the current animation progress of a player or ped.', arguments={'thePed': 'the player or ped you want to change animation progress.', 'anim': 'the animation name currently applied to ped, if not supplied, the animation will stop', 'progress': 'current animation progress you want to apply, value from 0.0 to 1.0, if not supplied will default to 0.0'}, result="Returns ''true'' if successful, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/SetPedAnimationProgress', name='setPedAnimationProgress', category='Ped functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setPedAnimationSpeed', return_types=['bool'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False), FunctionArgument(name='anim', argument_type='string', default_value='""', optional=True), FunctionArgument(name='speed', argument_type='float', default_value='1.0', optional=True)]), docs=FunctionDoc(description='Sets the speed of a currently running animation for a particular player or ped.\n}}', arguments={'thePed': 'the player or ped you want to change animation speed of.', 'anim': 'the animation name it will affect.', 'speed': 'a float containing the speed between 0.0–1.0 you want to apply to the animation. This limitation may be adjusted in the future, so do not provide speeds outside this boundary. {{New feature/item|3.0160|1.5.7|20395|The limit is now 0.0 to 10.0.}} {{Warning|Setting speed higher than 1 can cause issues with some animations.}}'}, result="Returns ''true'' if successful, ''false'' otherwise."), oop=FunctionOOP(class_name='ped', method_name="setAnimationSpeed}}\n\n===Required Arguments===\n*'''thePed:''' the [[player]] or [[ped]] you want to change animation speed of.\n\n===Optional Arguments===\n*'''anim:''' the animation name it will affect.\n*'''speed:''' a [[float]] containing the speed between 0.0–1.0 you want to apply to the animation. ''This limitation may be adjusted in the future, so do not provide speeds outside this boundary.'' {{New feature/item", field='3.0160'), url=FunctionUrl(url='/wiki/SetPedAnimationSpeed', name='setPedAnimationSpeed', category='Ped functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setPedAnimationSpeed', return_types=['bool'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False), FunctionArgument(name='anim', argument_type='string', default_value='""', optional=True), FunctionArgument(name='speed', argument_type='float', default_value='1.0', optional=True)]), docs=FunctionDoc(description='Sets the speed of a currently running animation for a particular player or ped.\n}}', arguments={'thePed': 'the player or ped you want to change animation speed of.', 'anim': 'the animation name it will affect.', 'speed': 'a float containing the speed between 0.0–1.0 you want to apply to the animation. This limitation may be adjusted in the future, so do not provide speeds outside this boundary. {{New feature/item|3.0160|1.5.7|20395|The limit is now 0.0 to 10.0.}} {{Warning|Setting speed higher than 1 can cause issues with some animations.}}'}, result="Returns ''true'' if successful, ''false'' otherwise."), oop=FunctionOOP(class_name='ped', method_name="setAnimationSpeed}}\n\n===Required Arguments===\n*'''thePed:''' the [[player]] or [[ped]] you want to change animation speed of.\n\n===Optional Arguments===\n*'''anim:''' the animation name it will affect.\n*'''speed:''' a [[float]] containing the speed between 0.0–1.0 you want to apply to the animation. ''This limitation may be adjusted in the future, so do not provide speeds outside this boundary.'' {{New feature/item", field='3.0160'), url=FunctionUrl(url='/wiki/SetPedAnimationSpeed', name='setPedAnimationSpeed', category='Ped functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setPedArmor', return_types=['bool'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False), FunctionArgument(name='armor', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='This function allows you to set the armor value of a [[ped]].', arguments={'thePed': ': the ped whose armor you want to modify.', 'armor': ': the amount of armor you want to set on the ped. Valid values are from 0 to 100.'}, result="Returns ''true'' if the armor was changed succesfully. Returns ''false'' if an invalid ped was specified, or the armor value specified is out of acceptable range."), oop=FunctionOOP(class_name='ped', method_name='setArmor', field='armor'), url=FunctionUrl(url='/wiki/SetPedArmor', name='setPedArmor', category='Ped functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setPedArmor', return_types=['bool'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False), FunctionArgument(name='armor', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='This function allows you to set the armor value of a [[ped]].', arguments={'thePed': ': the ped whose armor you want to modify.', 'armor': ': the amount of armor you want to set on the ped. Valid values are from 0 to 100.'}, result="Returns ''true'' if the armor was changed succesfully. Returns ''false'' if an invalid ped was specified, or the armor value specified is out of acceptable range."), oop=FunctionOOP(class_name='ped', method_name='setArmor', field='armor'), url=FunctionUrl(url='/wiki/SetPedArmor', name='setPedArmor', category='Ped functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setPedDoingGangDriveby', return_types=['bool'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False), FunctionArgument(name='state', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description='This function sets the driveby state of a ped.', arguments={'thePed': 'The ped element whose state is to be changed.', 'state': 'A boolean value representing the drive-by state, true meaning enabled and false disabled.'}, result="Returns ''true'' if the driveby state could be changed, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/SetPedDoingGangDriveby', name='setPedDoingGangDriveby', category='Ped functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setPedDoingGangDriveby', return_types=['bool'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False), FunctionArgument(name='state', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description='This function sets the driveby state of a ped.', arguments={'thePed': 'The ped element whose state is to be changed.', 'state': 'A boolean value representing the drive-by state, true meaning enabled and false disabled.'}, result="Returns ''true'' if the driveby state could be changed, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/SetPedDoingGangDriveby', name='setPedDoingGangDriveby', category='Ped functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setPedFightingStyle', return_types=['bool'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False), FunctionArgument(name='style', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description="Changes a ped's fighting style. Most styles only change the 'special attack' which is done using the Aim and Enter keys.", arguments={'thePed': 'The ped whose fighting style to change.', 'style': 'The fighting style ID to apply.\n{{Fighting Styles}}'}, result="Returns ''true'' in case of success, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/SetPedFightingStyle', name='setPedFightingStyle', category='Ped functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setPedFightingStyle', return_types=['bool'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False), FunctionArgument(name='style', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description="Changes a ped's fighting style. Most styles only change the 'special attack' which is done using the Aim and Enter keys.", arguments={'thePed': 'The ped whose fighting style to change.', 'style': 'The fighting style ID to apply.\n{{Fighting Styles}}'}, result="Returns ''true'' in case of success, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/SetPedFightingStyle', name='setPedFightingStyle', category='Ped functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setPedHeadless', return_types=['bool'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False), FunctionArgument(name='headState', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description='With this function, you can set if a ped has a head or not.', arguments={'thePed': ': The ped to check.', 'headState': ': head state, use true if you want the ped be headless, use false to give back the head.'}, result="Returns ''true'' if successful, ''false'' otherwise"), oop=FunctionOOP(class_name='ped', method_name='setHeadless', field="headless}}\n\n===Required Arguments===\n*'''thePed''': The [[ped]] to check.\n*'''headState''': head state, use true if you want the ped be headless, use false to give back the head.\n\n===Returns===\nReturns ''true'' if successful, ''false'' otherwise\n\n"), url=FunctionUrl(url='/wiki/SetPedHeadless', name='setPedHeadless', category='Ped functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setPedHeadless', return_types=['bool'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False), FunctionArgument(name='headState', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description='With this function, you can set if a ped has a head or not.', arguments={'thePed': ': The ped to check.', 'headState': ': head state, use true if you want the ped be headless, use false to give back the head.'}, result="Returns ''true'' if successful, ''false'' otherwise"), oop=FunctionOOP(class_name='ped', method_name='setHeadless', field="headless}}\n\n===Required Arguments===\n*'''thePed''': The [[ped]] to check.\n*'''headState''': head state, use true if you want the ped be headless, use false to give back the head.\n\n===Returns===\nReturns ''true'' if successful, ''false'' otherwise\n\n"), url=FunctionUrl(url='/wiki/SetPedHeadless', name='setPedHeadless', category='Ped functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setPedOnFire', return_types=['bool'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False), FunctionArgument(name='isOnFire', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description='This function can be used to set a ped on fire or extinguish a fire on it.', arguments={'thePed': 'The ped that we want to set/unset', 'isOnFire': 'true to set the ped on fire, false to extinguish any fire on him'}, result="Returns ''true'' if successful, ''false'' otherwise"), oop=FunctionOOP(class_name='ped', method_name='setOnFire', field='onFire'), url=FunctionUrl(url='/wiki/SetPedOnFire', name='setPedOnFire', category='Ped functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setPedOnFire', return_types=['bool'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False), FunctionArgument(name='isOnFire', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description='This function can be used to set a ped on fire or extinguish a fire on it.', arguments={'thePed': 'The ped that we want to set/unset', 'isOnFire': 'true to set the ped on fire, false to extinguish any fire on him'}, result="Returns ''true'' if successful, ''false'' otherwise"), oop=FunctionOOP(class_name='ped', method_name='setOnFire', field='onFire'), url=FunctionUrl(url='/wiki/SetPedOnFire', name='setPedOnFire', category='Ped functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setPedStat', return_types=['bool'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False), FunctionArgument(name='stat', argument_type='int', default_value=None, optional=False), FunctionArgument(name='value', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description="*Things like infinite run, fire proof CJ, 150 armor have special activation flags. They need a way to be triggered on/off.\n}}\nThis function allows you to set the value of a specific statistic for a [[ped]]. '''Visual stats (FAT and BODY_MUSCLE) can only be used on the CJ skin''', they have no effect on other skins.\nWhen this function is used client side, it can only be used on client side created peds.", arguments={'thePed': ': the ped whose statistic you want to modify.', 'stat': ': the stat ID.\n{{Stats}}', 'value': ': the new value of the stat. It must be between 0 and 1000.'}, result="Returns ''true'' if the statistic was changed succesfully. Returns ''false'' if an invalid player is specified, if the stat-id/value is out of acceptable range or if the FAT or BODY_MUSCLE stats are used on non-CJ players."), oop=None, url=FunctionUrl(url='/wiki/SetPedStat', name='setPedStat', category='Ped functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setPedStat', return_types=['bool'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False), FunctionArgument(name='stat', argument_type='int', default_value=None, optional=False), FunctionArgument(name='value', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description="*Things like infinite run, fire proof CJ, 150 armor have special activation flags. They need a way to be triggered on/off.\n}}\nThis function allows you to set the value of a specific statistic for a [[ped]]. '''Visual stats (FAT and BODY_MUSCLE) can only be used on the CJ skin''', they have no effect on other skins.\nWhen this function is used client side, it can only be used on client side created peds.", arguments={'thePed': ': the ped whose statistic you want to modify.', 'stat': ': the stat ID.\n{{Stats}}', 'value': ': the new value of the stat. It must be between 0 and 1000.'}, result="Returns ''true'' if the statistic was changed succesfully. Returns ''false'' if an invalid player is specified, if the stat-id/value is out of acceptable range or if the FAT or BODY_MUSCLE stats are used on non-CJ players."), oop=None, url=FunctionUrl(url='/wiki/SetPedStat', name='setPedStat', category='Ped functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setPedWalkingStyle', return_types=['bool'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False), FunctionArgument(name='style', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='Sets the walking style of a ped. A walking style consists of a set of animations that are used for walking, running etc.', arguments={'thePed': 'the ped whose walking style to change.', 'style': 'the walking style to set.\nThe possible walking styles are:\n{{Ped walking styles}}'}, result="Returns ''true'' if successful, ''false'' otherwise."), oop=FunctionOOP(class_name='ped', method_name='setWalkingStyle', field='walkingStyle'), url=FunctionUrl(url='/wiki/SetPedWalkingStyle', name='setPedWalkingStyle', category='Ped functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setPedWalkingStyle', return_types=['bool'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False), FunctionArgument(name='style', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='Sets the walking style of a ped. A walking style consists of a set of animations that are used for walking, running etc.', arguments={'thePed': 'the ped whose walking style to change.', 'style': 'the walking style to set.\nThe possible walking styles are:\n{{Ped walking styles}}'}, result="Returns ''true'' if successful, ''false'' otherwise."), oop=FunctionOOP(class_name='ped', method_name='setWalkingStyle', field='walkingStyle'), url=FunctionUrl(url='/wiki/SetPedWalkingStyle', name='setPedWalkingStyle', category='Ped functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setPedWeaponSlot', return_types=['bool'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False), FunctionArgument(name='weaponSlot', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function changes the selected weapon slot of a [[ped]].', arguments={'thePed': 'the ped whose weapon slot you want to set. In a clientside script, this cannot be used on remote players.', 'weaponSlot': 'the weapon slot to set.\n{{Weapon_Slots}}'}, result="Returns ''true'' if successful in setting the ped's equipped weapon slot, ''false'' otherwise."), oop=FunctionOOP(class_name='ped', method_name='setWeaponSlot', field='weaponSlot'), url=FunctionUrl(url='/wiki/SetPedWeaponSlot', name='setPedWeaponSlot', category='Ped functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setPedWeaponSlot', return_types=['bool'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False), FunctionArgument(name='weaponSlot', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function changes the selected weapon slot of a [[ped]].', arguments={'thePed': 'the ped whose weapon slot you want to set. In a clientside script, this cannot be used on remote players.', 'weaponSlot': 'the weapon slot to set.\n{{Weapon_Slots}}'}, result="Returns ''true'' if successful in setting the ped's equipped weapon slot, ''false'' otherwise."), oop=FunctionOOP(class_name='ped', method_name='setWeaponSlot', field='weaponSlot'), url=FunctionUrl(url='/wiki/SetPedWeaponSlot', name='setPedWeaponSlot', category='Ped functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='warpPedIntoVehicle', return_types=['bool'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False), FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='seat', argument_type='int', default_value='0', optional=False)]), docs=FunctionDoc(description="This function is used to warp or force a ped into a vehicle.  There are no animations involved when this happens.\n[[File:vehicle seat ids.png|200px|thumb|right|Vehicle seat ids]] \n'''Available client side from 1.3.1''' (It will only work with client side vehicles and peds)", arguments={'thePed': 'The ped which you wish to force inside the vehicle', 'theVehicle': 'The vehicle you wish to force the ped into\n{{OptionalArg}} ', 'seat': 'An integer representing the seat ID.', '0': 'Front-left', '1': 'Front-right', '2': 'Rear-left', '3': 'Rear-right'}, result="Returns ''true'' if the operation is successful, ''false'' otherwise."), oop=FunctionOOP(class_name='ped', method_name='warpIntoVehicle', field='vehicle'), url=FunctionUrl(url='/wiki/WarpPedIntoVehicle', name='warpPedIntoVehicle', category='Ped functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='warpPedIntoVehicle', return_types=['bool'], arguments=[FunctionArgument(name='thePed', argument_type='ped', default_value=None, optional=False), FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='seat', argument_type='int', default_value='0', optional=False)]), docs=FunctionDoc(description="This function is used to warp or force a ped into a vehicle.  There are no animations involved when this happens.\n[[File:vehicle seat ids.png|200px|thumb|right|Vehicle seat ids]] \n'''Available client side from 1.3.1''' (It will only work with client side vehicles and peds)", arguments={'thePed': 'The ped which you wish to force inside the vehicle', 'theVehicle': 'The vehicle you wish to force the ped into\n{{OptionalArg}} ', 'seat': 'An integer representing the seat ID.', '0': 'Front-left', '1': 'Front-right', '2': 'Rear-left', '3': 'Rear-right'}, result="Returns ''true'' if the operation is successful, ''false'' otherwise."), oop=FunctionOOP(class_name='ped', method_name='warpIntoVehicle', field='vehicle'), url=FunctionUrl(url='/wiki/WarpPedIntoVehicle', name='warpPedIntoVehicle', category='Ped functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='createPickup', return_types=['pickup'], arguments=[FunctionArgument(name='x', argument_type='float', default_value=None, optional=False), FunctionArgument(name='y', argument_type='float', default_value=None, optional=False), FunctionArgument(name='z', argument_type='float', default_value=None, optional=False), FunctionArgument(name='theType', argument_type='int', default_value=None, optional=False), FunctionArgument(name='amount', argument_type='int', default_value=None, optional=False), FunctionArgument(name='respawnTime', argument_type='int', default_value='30000', optional=False), FunctionArgument(name='ammo', argument_type='int', default_value='50', optional=False)]), docs=FunctionDoc(description='This function creates a pickup element, which is placed in the GTA world and can be picked up to retrieve a health, armour or a weapon. ', arguments={'x': ': A floating point number representing the X coordinate on the map.', 'y': ': A floating point number representing the Y coordinate on the map.', 'z': ': A floating point number representing the Z coordinate on the map.', 'theType': ': This is an integer representing the type of pickup, representing the following types:', '0': ': Health Pickup', '1': ': Armour Pickup', '2': ': Weapon Pickup', '3': ': Custom Pickup', 'amount': ": This is an integer representing the amount of Health points or Armour points a pickup has.\n'''OR'''", 'weapon': ": If the type is a Weapon pickup, then it represents the Weapon|weapon ID of the weapon pickup. When used with the weapon pickup type set, the ammo parameter can be used.\n'''OR'''", 'model': ': If the pickup is a custom model, this is the model id to use. Many non-pickup models can be used, though some may cause crashes. The following is a list of models designed to be used as pickups.', '1212': 'Money (wad of cash)', '1240': 'Health (heart)', '1242': 'Armour', '1239': 'Info icon', '1272': 'House (blue)', '1273': 'House (green)', '1241': 'Adrenaline', '1247': 'Bribe', '1248': 'GTA III sign', '1252': 'Bomb from GTA III', '1253': 'Photo op', '1254': 'Skull', '1274': 'Money icon', '1275': 'Blue t-shirt', '1277': 'Save disk', '1313': '2 Skulls', '1314': '2 Players icon', '1276': 'Tiki statue', '1310': 'Parachute (with leg straps)', '1318': 'Down arrow', '1279': "Drug bundle\n'''OR'''\nOther ID Object\n{{OptionalArg}} ", 'respawnTime': ': How long before the pickup respawns in milliseconds (This parameter is ignored on the client!)', 'ammo': ': An integer representing the amount of ammo a pickup contains.  This is only valid when the pickup type is a weapon pickup.'}, result="Returns [[pickup]] [[element]] if the pickup was created succesfully, otherwise returns ''false''."), oop=None, url=FunctionUrl(url='/wiki/CreatePickup', name='createPickup', category='Pickup functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='createPickup', return_types=['pickup'], arguments=[FunctionArgument(name='x', argument_type='float', default_value=None, optional=False), FunctionArgument(name='y', argument_type='float', default_value=None, optional=False), FunctionArgument(name='z', argument_type='float', default_value=None, optional=False), FunctionArgument(name='theType', argument_type='int', default_value=None, optional=False), FunctionArgument(name='amount', argument_type='int', default_value=None, optional=False), FunctionArgument(name='respawnTime', argument_type='int', default_value='30000', optional=False), FunctionArgument(name='ammo', argument_type='int', default_value='50', optional=False)]), docs=FunctionDoc(description='This function creates a pickup element, which is placed in the GTA world and can be picked up to retrieve a health, armour or a weapon. ', arguments={'x': ': A floating point number representing the X coordinate on the map.', 'y': ': A floating point number representing the Y coordinate on the map.', 'z': ': A floating point number representing the Z coordinate on the map.', 'theType': ': This is an integer representing the type of pickup, representing the following types:', '0': ': Health Pickup', '1': ': Armour Pickup', '2': ': Weapon Pickup', '3': ': Custom Pickup', 'amount': ": This is an integer representing the amount of Health points or Armour points a pickup has.\n'''OR'''", 'weapon': ": If the type is a Weapon pickup, then it represents the Weapon|weapon ID of the weapon pickup. When used with the weapon pickup type set, the ammo parameter can be used.\n'''OR'''", 'model': ': If the pickup is a custom model, this is the model id to use. Many non-pickup models can be used, though some may cause crashes. The following is a list of models designed to be used as pickups.', '1212': 'Money (wad of cash)', '1240': 'Health (heart)', '1242': 'Armour', '1239': 'Info icon', '1272': 'House (blue)', '1273': 'House (green)', '1241': 'Adrenaline', '1247': 'Bribe', '1248': 'GTA III sign', '1252': 'Bomb from GTA III', '1253': 'Photo op', '1254': 'Skull', '1274': 'Money icon', '1275': 'Blue t-shirt', '1277': 'Save disk', '1313': '2 Skulls', '1314': '2 Players icon', '1276': 'Tiki statue', '1310': 'Parachute (with leg straps)', '1318': 'Down arrow', '1279': "Drug bundle\n'''OR'''\nOther ID Object\n{{OptionalArg}} ", 'respawnTime': ': How long before the pickup respawns in milliseconds (This parameter is ignored on the client!)', 'ammo': ': An integer representing the amount of ammo a pickup contains.  This is only valid when the pickup type is a weapon pickup.'}, result="Returns [[pickup]] [[element]] if the pickup was created succesfully, otherwise returns ''false''."), oop=None, url=FunctionUrl(url='/wiki/CreatePickup', name='createPickup', category='Pickup functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getPickupAmmo', return_types=['int'], arguments=[FunctionArgument(name='thePickup', argument_type='pickup', default_value=None, optional=False)]), docs=FunctionDoc(description='This function retrieves the amount of ammo in a weapon pickup.', arguments={'thePickup': 'The pickup in which you wish to retrieve the ammo of'}, result="Returns an ''integer'' of the amount of ammo in the pickup, ''false'' if the pickup element is invalid, 0 if it's no weapon pickup."), oop=None, url=FunctionUrl(url='/wiki/GetPickupAmmo', name='getPickupAmmo', category='Pickup functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getPickupAmmo', return_types=['int'], arguments=[FunctionArgument(name='thePickup', argument_type='pickup', default_value=None, optional=False)]), docs=FunctionDoc(description='This function retrieves the amount of ammo in a weapon pickup.', arguments={'thePickup': 'The pickup in which you wish to retrieve the ammo of'}, result="Returns an ''integer'' of the amount of ammo in the pickup, ''false'' if the pickup element is invalid, 0 if it's no weapon pickup."), oop=None, url=FunctionUrl(url='/wiki/GetPickupAmmo', name='getPickupAmmo', category='Pickup functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getPickupAmount', return_types=['int'], arguments=[FunctionArgument(name='thePickup', argument_type='pickup', default_value=None, optional=False)]), docs=FunctionDoc(description='This function retrieves the amount of health or armor given from a pickup.', arguments={'thePickup': 'The pickup you wish to retrieve the amount from.'}, result="Returns an ''integer'' of the amount the pickup is set to, ''false'' if it's invalid, 0 if it's no health or amor pickup."), oop=None, url=FunctionUrl(url='/wiki/GetPickupAmount', name='getPickupAmount', category='Pickup functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getPickupAmount', return_types=['int'], arguments=[FunctionArgument(name='thePickup', argument_type='pickup', default_value=None, optional=False)]), docs=FunctionDoc(description='This function retrieves the amount of health or armor given from a pickup.', arguments={'thePickup': 'The pickup you wish to retrieve the amount from.'}, result="Returns an ''integer'' of the amount the pickup is set to, ''false'' if it's invalid, 0 if it's no health or amor pickup."), oop=None, url=FunctionUrl(url='/wiki/GetPickupAmount', name='getPickupAmount', category='Pickup functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getPickupType', return_types=['int'], arguments=[FunctionArgument(name='thePickup', argument_type='pickup', default_value=None, optional=False)]), docs=FunctionDoc(description='This function retrieves the type of a pickup, either a health, armour or weapon pickup.', arguments={'thePickup': 'The pickup you wish to retrieve the type of.'}, result="Returns ''false'' if the pickup is invalid, or an integer of the type of the pickup, which include:\n*'''0:''' Health pickup\n*'''1:''' Armour pickup\n*'''2:''' Weapon pickup\n*'''3:''' Custom Pickup"), oop=None, url=FunctionUrl(url='/wiki/GetPickupType', name='getPickupType', category='Pickup functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getPickupType', return_types=['int'], arguments=[FunctionArgument(name='thePickup', argument_type='pickup', default_value=None, optional=False)]), docs=FunctionDoc(description='This function retrieves the type of a pickup, either a health, armour or weapon pickup.', arguments={'thePickup': 'The pickup you wish to retrieve the type of.'}, result="Returns ''false'' if the pickup is invalid, or an integer of the type of the pickup, which include:\n*'''0:''' Health pickup\n*'''1:''' Armour pickup\n*'''2:''' Weapon pickup\n*'''3:''' Custom Pickup"), oop=None, url=FunctionUrl(url='/wiki/GetPickupType', name='getPickupType', category='Pickup functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getPickupWeapon', return_types=['int'], arguments=[FunctionArgument(name='thePickup', argument_type='pickup', default_value=None, optional=False)]), docs=FunctionDoc(description='This function retrieves the weapon ID of a weapon pickup.', arguments={'thePickup': 'The pickup of which you wish to retrieve the weapon'}, result="Returns the [[Weapons|Weapon ID]] of the pickup, or ''false'' if the pickup is invalid."), oop=None, url=FunctionUrl(url='/wiki/GetPickupWeapon', name='getPickupWeapon', category='Pickup functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getPickupWeapon', return_types=['int'], arguments=[FunctionArgument(name='thePickup', argument_type='pickup', default_value=None, optional=False)]), docs=FunctionDoc(description='This function retrieves the weapon ID of a weapon pickup.', arguments={'thePickup': 'The pickup of which you wish to retrieve the weapon'}, result="Returns the [[Weapons|Weapon ID]] of the pickup, or ''false'' if the pickup is invalid."), oop=None, url=FunctionUrl(url='/wiki/GetPickupWeapon', name='getPickupWeapon', category='Pickup functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setPickupType', return_types=['bool'], arguments=[FunctionArgument(name='thePickup', argument_type='pickup', default_value=None, optional=False), FunctionArgument(name='theType', argument_type='int', default_value=None, optional=False), FunctionArgument(name='amount', argument_type='int', default_value=None, optional=False), FunctionArgument(name='ammo', argument_type='int', default_value=None, optional=True)]), docs=FunctionDoc(description="This function allows changing the type of a pickup to a Weapon, Armour or Health pickup, and allows you to set the health points '''or''' the weapon and ammo that the pickup will give.", arguments={'thePickup': 'The pickup which you wish to change the settings of', 'theType': ': An integer representing the type of pickup. You can choose from:', '0': ': Health Pickup', '1': ': Armour Pickup', '2': ': Weapon Pickup', '3': ': Custom Pickup', 'amount': ": This is an integer representing the amount of Health points or Armour points a pickup has.\n'''OR'''", 'weapon': ": If the type is a Weapon pickup, then it represents the Weapon|weapon ID of the weapon pickup the ammo field must be entered if the type is Weapon Pickup.\n'''OR'''", 'model': ': If the pickup is a custom model, this is the model id to use. Many non-pickup models can be used, though some may cause crashes. The following is a list of models designed to be used as pickups.', '370': 'Jetpack', '1240': 'Health (heart)', '1242': 'Armour', '1272': 'House (blue)', '1273': 'House (green)', '1274': 'Money (dollar symbol)', '1277': 'Save (floppy disk)\n{{OptionalArg}} ', 'ammo': ': An integer representing the amount of ammo a pickup contains. This argument is only valid when the pickup type is a Weapon Pickup, and must be specified in that case.'}, result="Returns ''true'' if successful, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/SetPickupType', name='setPickupType', category='Pickup functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setPickupType', return_types=['bool'], arguments=[FunctionArgument(name='thePickup', argument_type='pickup', default_value=None, optional=False), FunctionArgument(name='theType', argument_type='int', default_value=None, optional=False), FunctionArgument(name='amount', argument_type='int', default_value=None, optional=False), FunctionArgument(name='ammo', argument_type='int', default_value=None, optional=True)]), docs=FunctionDoc(description="This function allows changing the type of a pickup to a Weapon, Armour or Health pickup, and allows you to set the health points '''or''' the weapon and ammo that the pickup will give.", arguments={'thePickup': 'The pickup which you wish to change the settings of', 'theType': ': An integer representing the type of pickup. You can choose from:', '0': ': Health Pickup', '1': ': Armour Pickup', '2': ': Weapon Pickup', '3': ': Custom Pickup', 'amount': ": This is an integer representing the amount of Health points or Armour points a pickup has.\n'''OR'''", 'weapon': ": If the type is a Weapon pickup, then it represents the Weapon|weapon ID of the weapon pickup the ammo field must be entered if the type is Weapon Pickup.\n'''OR'''", 'model': ': If the pickup is a custom model, this is the model id to use. Many non-pickup models can be used, though some may cause crashes. The following is a list of models designed to be used as pickups.', '370': 'Jetpack', '1240': 'Health (heart)', '1242': 'Armour', '1272': 'House (blue)', '1273': 'House (green)', '1274': 'Money (dollar symbol)', '1277': 'Save (floppy disk)\n{{OptionalArg}} ', 'ammo': ': An integer representing the amount of ammo a pickup contains. This argument is only valid when the pickup type is a Weapon Pickup, and must be specified in that case.'}, result="Returns ''true'' if successful, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/SetPickupType', name='setPickupType', category='Pickup functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='forcePlayerMap', return_types=['bool'], arguments=[FunctionArgument(name='thePlayer', argument_type='player', default_value=None, optional=False), FunctionArgument(name='forceOn', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description="This function is used to forcefully show a player's radar map.", arguments={'thePlayer': ': A player object referencing the specified player', 'forceOn': ': A boolean value representing whether or not the players radar map will be forced on'}, result="Returns ''true'' if the player's radar map was forced on, ''false'' otherwise."), oop=FunctionOOP(class_name='player', method_name='forceMap', field='mapForced'), url=FunctionUrl(url='/wiki/ForcePlayerMap', name='forcePlayerMap', category='Player functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='forcePlayerMap', return_types=['bool'], arguments=[FunctionArgument(name='forceOn', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description="This function is used to forcefully show a player's radar map.", arguments={'forceOn': ': A boolean value representing whether or not the players radar map will be forced on'}, result="Returns ''true'' if the player's radar map was forced on, ''false'' otherwise."), oop=FunctionOOP(class_name='Player', method_name='forceMap', field=None), url=FunctionUrl(url='/wiki/ForcePlayerMap', name='forcePlayerMap', category='Player functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getPlayerBlurLevel', return_types=['int'], arguments=[FunctionArgument(name='thePlayer', argument_type='player', default_value=None, optional=False)]), docs=FunctionDoc(description='This function allows you to check the current blur level of a specified [[player]].', arguments={'thePlayer': 'The player whose blur level you want to check.'}, result="Returns the player's blur level if successful, ''false'' if an invalid player was given."), oop=FunctionOOP(class_name='player', method_name='getBlurLevel', field=None), url=FunctionUrl(url='/wiki/GetPlayerBlurLevel', name='getPlayerBlurLevel', category='Player functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getBlurLevel', return_types=['int'], arguments=[]), docs=FunctionDoc(description='This function allows you to check the current blur level of a specified [[player]].', arguments={}, result='Returns the local blur level.'), oop=FunctionOOP(class_name='Player', method_name='getBlurLevel', field='blurLevel'), url=FunctionUrl(url='/wiki/GetPlayerBlurLevel', name='getPlayerBlurLevel', category='Player functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getPlayerFromName', return_types=['player'], arguments=[FunctionArgument(name='playerName', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns a [[player]] [[element]] for the player with the name passed to the function.', arguments={'playerName': ': A string containing the name of the player you want to reference'}, result="Returns a [[player]] [[element]] for the player with the nickname provided. If there is no player with that name, ''false'' is returned."), oop=None, url=FunctionUrl(url='/wiki/GetPlayerFromName', name='getPlayerFromName', category='Player functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getPlayerFromName', return_types=['player'], arguments=[FunctionArgument(name='playerName', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns a [[player]] [[element]] for the player with the name passed to the function.', arguments={'playerName': ': A string containing the name of the player you want to reference'}, result="Returns a [[player]] [[element]] for the player with the nickname provided. If there is no player with that name, ''false'' is returned."), oop=None, url=FunctionUrl(url='/wiki/GetPlayerFromName', name='getPlayerFromName', category='Player functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getPlayerMoney', return_types=['int'], arguments=[FunctionArgument(name='thePlayer', argument_type='player', default_value=None, optional=False)]), docs=FunctionDoc(description='Returns the amount of money a player currently has.', arguments={'thePlayer': 'The player you wish the retrieve the amount of money from.'}, result="Returns an integer with the amount of money the specified player has, ''false'' if the player is invalid."), oop=FunctionOOP(class_name='player', method_name='getMoney', field='money'), url=FunctionUrl(url='/wiki/GetPlayerMoney', name='getPlayerMoney', category='Player functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getPlayerMoney', return_types=['int'], arguments=[]), docs=FunctionDoc(description='Returns the amount of money a player currently has.', arguments={}, result='Returns an integer with the amount of money the local player has.'), oop=FunctionOOP(class_name='Player', method_name='getMoney', field=None), url=FunctionUrl(url='/wiki/GetPlayerMoney', name='getPlayerMoney', category='Player functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getPlayerName', return_types=['string'], arguments=[FunctionArgument(name='thePlayer', argument_type='player', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns a string containing the name of the specified player.', arguments={'thePlayer': 'the player you want to get the name of'}, result="Returns a string containing the requested player's name, or ''false'' if the player passed to the function is invalid."), oop=FunctionOOP(class_name='player', method_name='getName', field='name'), url=FunctionUrl(url='/wiki/GetPlayerName', name='getPlayerName', category='Player functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getPlayerName', return_types=['string'], arguments=[FunctionArgument(name='thePlayer', argument_type='player', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns a string containing the name of the specified player.', arguments={'thePlayer': 'the player you want to get the name of'}, result="Returns a string containing the requested player's name, or ''false'' if the player passed to the function is invalid."), oop=FunctionOOP(class_name='player', method_name='getName', field='name'), url=FunctionUrl(url='/wiki/GetPlayerName', name='getPlayerName', category='Player functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getPlayerNametagColor', return_types=['int,', 'int,', 'int'], arguments=[FunctionArgument(name='thePlayer', argument_type='player', default_value=None, optional=False)]), docs=FunctionDoc(description="<!-- Describe in plain english what this function does. Don't go into details, just give an overview -->\nThis function gets the current color of a player's name tag as RGB values. These are in the range 0-255.", arguments={'thePlayer': 'The player whose name tag RGB color values you wish to retrieve.'}, result="Returns ''red'', ''green'' and ''blue'' values if an existent player was specified, ''false'' otherwise."), oop=FunctionOOP(class_name='player', method_name='getNametagColor', field=None), url=FunctionUrl(url='/wiki/GetPlayerNametagColor', name='getPlayerNametagColor', category='Player functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getPlayerNametagColor', return_types=['int,', 'int,', 'int'], arguments=[FunctionArgument(name='thePlayer', argument_type='player', default_value=None, optional=False)]), docs=FunctionDoc(description="<!-- Describe in plain english what this function does. Don't go into details, just give an overview -->\nThis function gets the current color of a player's name tag as RGB values. These are in the range 0-255.", arguments={'thePlayer': 'The player whose name tag RGB color values you wish to retrieve.'}, result="Returns ''red'', ''green'' and ''blue'' values if an existent player was specified, ''false'' otherwise."), oop=FunctionOOP(class_name='player', method_name='getNametagColor', field=None), url=FunctionUrl(url='/wiki/GetPlayerNametagColor', name='getPlayerNametagColor', category='Player functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getPlayerNametagText', return_types=['string'], arguments=[FunctionArgument(name='thePlayer', argument_type='player', default_value=None, optional=False)]), docs=FunctionDoc(description="<!-- Describe in plain english what this function does. Don't go into details, just give an overview -->\nThis will allow you to retrieve the name tag a player is currently using.", arguments={'thePlayer': 'The person whose name tag you want to retrieve'}, result="<!-- Make this descriptive. Explain what cases will return false. If you're unsure, add a tag to it so we can check -->\nReturns a ''string'' with the nametag text, ''false'' if the player is invalid."), oop=FunctionOOP(class_name='player', method_name='getNametagText', field='nametagText'), url=FunctionUrl(url='/wiki/GetPlayerNametagText', name='getPlayerNametagText', category='Player functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getPlayerNametagText', return_types=['string'], arguments=[FunctionArgument(name='thePlayer', argument_type='player', default_value=None, optional=False)]), docs=FunctionDoc(description="<!-- Describe in plain english what this function does. Don't go into details, just give an overview -->\nThis will allow you to retrieve the name tag a player is currently using.", arguments={'thePlayer': 'The person whose name tag you want to retrieve'}, result="<!-- Make this descriptive. Explain what cases will return false. If you're unsure, add a tag to it so we can check -->\nReturns a ''string'' with the nametag text, ''false'' if the player is invalid."), oop=FunctionOOP(class_name='player', method_name='getNametagText', field='nametagText'), url=FunctionUrl(url='/wiki/GetPlayerNametagText', name='getPlayerNametagText', category='Player functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getPlayerPing', return_types=['int'], arguments=[FunctionArgument(name='thePlayer', argument_type='player', default_value=None, optional=False)]), docs=FunctionDoc(description="This function returns the ping of a specified [[player]]. The ping is the number of milliseconds that data takes to travel from the player's client to the server or vice versa.", arguments={'thePlayer': ': The player whose ping you want to determine.'}, result="Returns the ping as an [[int]], or ''false'' if the player is invalid."), oop=FunctionOOP(class_name='player', method_name='getPing', field='ping'), url=FunctionUrl(url='/wiki/GetPlayerPing', name='getPlayerPing', category='Player functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getPlayerPing', return_types=['int'], arguments=[FunctionArgument(name='thePlayer', argument_type='player', default_value=None, optional=False)]), docs=FunctionDoc(description="This function returns the ping of a specified [[player]]. The ping is the number of milliseconds that data takes to travel from the player's client to the server or vice versa.", arguments={'thePlayer': ': The player whose ping you want to determine.'}, result="Returns the ping as an [[int]], or ''false'' if the player is invalid."), oop=FunctionOOP(class_name='player', method_name='getPing', field='ping'), url=FunctionUrl(url='/wiki/GetPlayerPing', name='getPlayerPing', category='Player functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getPlayerTeam', return_types=['team'], arguments=[FunctionArgument(name='thePlayer', argument_type='player', default_value=None, optional=False)]), docs=FunctionDoc(description='This function gets the current [[team]] a [[player]] is on.', arguments={'thePlayer': ': The player whose team you want to find out.'}, result="Returns a ''team'' element representing the team the player is on, ''false'' if the player is not part of a team."), oop=FunctionOOP(class_name='player', method_name='getTeam', field='team'), url=FunctionUrl(url='/wiki/GetPlayerTeam', name='getPlayerTeam', category='Player functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getPlayerTeam', return_types=['team'], arguments=[FunctionArgument(name='thePlayer', argument_type='player', default_value=None, optional=False)]), docs=FunctionDoc(description='This function gets the current [[team]] a [[player]] is on.', arguments={'thePlayer': ': The player whose team you want to find out.'}, result="Returns a ''team'' element representing the team the player is on, ''false'' if the player is not part of a team."), oop=FunctionOOP(class_name='player', method_name='getTeam', field='team'), url=FunctionUrl(url='/wiki/GetPlayerTeam', name='getPlayerTeam', category='Player functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getPlayerWantedLevel', return_types=['int'], arguments=[FunctionArgument(name='thePlayer', argument_type='player', default_value=None, optional=False)]), docs=FunctionDoc(description="This function gets a player's current wanted level. The wanted level is indicated by the amount of stars a player has on the GTA HUD.", arguments={'thePlayer': 'The player whose wanted level you wish to get'}, result="Returns an ''int'' from 0 to 6 representing the player's wanted level, ''false'' if the player does not exist."), oop=FunctionOOP(class_name='player', method_name='getWantedLevel', field='wantedLevel'), url=FunctionUrl(url='/wiki/GetPlayerWantedLevel', name='getPlayerWantedLevel', category='Player functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getPlayerWantedLevel', return_types=['int'], arguments=[]), docs=FunctionDoc(description="This function gets a player's current wanted level. The wanted level is indicated by the amount of stars a player has on the GTA HUD.", arguments={}, result="Returns an ''int'' from 0 to 6 representing the player's wanted level, ''false'' if the player does not exist."), oop=FunctionOOP(class_name='Player', method_name='getWantedLevel', field=None), url=FunctionUrl(url='/wiki/GetPlayerWantedLevel', name='getPlayerWantedLevel', category='Player functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='givePlayerMoney', return_types=['bool'], arguments=[FunctionArgument(name='thePlayer', argument_type='player', default_value=None, optional=False), FunctionArgument(name='amount', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description="This function adds money to a [[player]]'s current money amount.  To set absolute values, [[setPlayerMoney]] can be used.<br>", arguments={'thePlayer': 'the player you are giving the money to.', 'amount': 'a positive integer number specifying the amount of money to give to the player.'}, result="Returns ''true'' if the money was added, or ''false'' if invalid parameters were passed."), oop=FunctionOOP(class_name='player', method_name='giveMoney', field="money}}\n===Required Arguments=== \n*'''thePlayer:''' the [[player]] you are giving the money to.\n*'''amount:''' a positive integer number specifying the amount of money to give to the player.\n"), url=FunctionUrl(url='/wiki/GivePlayerMoney', name='givePlayerMoney', category='Player functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='givePlayerMoney', return_types=['bool'], arguments=[FunctionArgument(name='amount', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description="This function adds money to a [[player]]'s current money amount.  To set absolute values, [[setPlayerMoney]] can be used.<br>", arguments={'amount': 'a positive integer number specifying the amount of money to give to the player.'}, result="Returns ''true'' if the money was added, or ''false'' if invalid parameters were passed."), oop=None, url=FunctionUrl(url='/wiki/GivePlayerMoney', name='givePlayerMoney', category='Player functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='isPlayerMapForced', return_types=['bool'], arguments=[FunctionArgument(name='thePlayer', argument_type='player', default_value=None, optional=False)]), docs=FunctionDoc(description="This function checks if the specified player's radar map has been forced on or not.", arguments={'thePlayer': 'A player object referencing the specified player'}, result="Returns ''true'' if the player's radar map is forced on, ''false'' otherwise."), oop=FunctionOOP(class_name='player', method_name='isMapForced', field='mapForced'), url=FunctionUrl(url='/wiki/IsPlayerMapForced', name='isPlayerMapForced', category='Player functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='isPlayerMapForced', return_types=['bool'], arguments=[]), docs=FunctionDoc(description="This function checks if the specified player's radar map has been forced on or not.", arguments={}, result="Returns ''true'' if the local player's radar map is forced on, ''false'' otherwise."), oop=FunctionOOP(class_name='Player', method_name='isMapForced', field=None), url=FunctionUrl(url='/wiki/IsPlayerMapForced', name='isPlayerMapForced', category='Player functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='isPlayerNametagShowing', return_types=['bool'], arguments=[FunctionArgument(name='thePlayer', argument_type='player', default_value=None, optional=False)]), docs=FunctionDoc(description="<!-- Describe in plain english what this function does. Don't go into details, just give an overview -->\nThis function will allow you to determine if a player's name tag is currently showing.", arguments={'thePlayer': 'The player whose current name tag condition you want to check'}, result="<!-- Make this descriptive. Explain what cases will return false. If you're unsure, add a tag to it so we can check -->\nReturns ''true'' if the player's name tag is being shown, ''false'' otherwise."), oop=FunctionOOP(class_name='player', method_name='isNametagShowing', field='nametagShowing'), url=FunctionUrl(url='/wiki/IsPlayerNametagShowing', name='isPlayerNametagShowing', category='Player functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='isPlayerNametagShowing', return_types=['bool'], arguments=[FunctionArgument(name='thePlayer', argument_type='player', default_value=None, optional=False)]), docs=FunctionDoc(description="<!-- Describe in plain english what this function does. Don't go into details, just give an overview -->\nThis function will allow you to determine if a player's name tag is currently showing.", arguments={'thePlayer': 'The player whose current name tag condition you want to check'}, result="<!-- Make this descriptive. Explain what cases will return false. If you're unsure, add a tag to it so we can check -->\nReturns ''true'' if the player's name tag is being shown, ''false'' otherwise."), oop=FunctionOOP(class_name='player', method_name='isNametagShowing', field='nametagShowing'), url=FunctionUrl(url='/wiki/IsPlayerNametagShowing', name='isPlayerNametagShowing', category='Player functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='isVoiceEnabled', return_types=['bool'], arguments=[]), docs=FunctionDoc(description='Added to client side.\n}}\nThis function allows you to make the server reveal whether or not voice is currently enabled.', arguments={}, result="Returns ''true'' if the voice is enabled on the server, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/IsVoiceEnabled', name='isVoiceEnabled', category='Player functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='isVoiceEnabled', return_types=['bool'], arguments=[]), docs=FunctionDoc(description='Added to client side.\n}}\nThis function allows you to make the server reveal whether or not voice is currently enabled.', arguments={}, result="Returns ''true'' if the voice is enabled on the server, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/IsVoiceEnabled', name='isVoiceEnabled', category='Player functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setPlayerBlurLevel', return_types=['bool'], arguments=[FunctionArgument(name='thePlayer', argument_type='player', default_value=None, optional=False), FunctionArgument(name='level', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='Sets the motion blur level on the clients screen. Accepts a value between 0 and 255.', arguments={'thePlayer': 'The player whose blur level will be changed.', 'level': 'The level to set the blur to (default: 36)'}, result=''), oop=FunctionOOP(class_name='player', method_name='setBlurLevel', field='blurLevel'), url=FunctionUrl(url='/wiki/SetPlayerBlurLevel', name='setPlayerBlurLevel', category='Player functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setBlurLevel', return_types=['bool'], arguments=[FunctionArgument(name='level', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='Sets the motion blur level on the clients screen. Accepts a value between 0 and 255.', arguments={'level': 'The level to set the blur to (default: 36)'}, result=''), oop=FunctionOOP(class_name='Player', method_name='setBlurLevel', field=None), url=FunctionUrl(url='/wiki/SetPlayerBlurLevel', name='setPlayerBlurLevel', category='Player functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setPlayerHudComponentVisible', return_types=['bool'], arguments=[FunctionArgument(name='thePlayer', argument_type='player', default_value=None, optional=False), FunctionArgument(name='component', argument_type='string', default_value=None, optional=False), FunctionArgument(name='show', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description="This function will show or hide a part of the player's HUD. ", arguments={'thePlayer': 'The player element for which you wish to show/hide a HUD component', 'component': 'The component you wish to show or hide. Valid values are:', 'all': 'All of the following at the same time', 'ammo': 'The display showing how much ammo the player has in their weapon', 'area_name': 'The text that appears containing the name of the area a player has entered', 'armour': 'The display showing the players armor', 'breath': 'The display showing the players breath', 'clock': 'The display showing the in-game time', 'health': 'The display showing the players health', 'money': 'The display showing how much money the player has', 'radar': 'The bottom-left corner miniradar', 'vehicle_name': 'The text that appears containing the players vehicle name when the player enters a vehicle', 'weapon': 'The display showing the players weapon\n{{New feature|3.0110|1.1|', 'radio': 'The display showing the radio label', 'wanted': 'The display showing the players wanted level', 'crosshair': 'The weapon crosshair and sniper scope\n}}', 'show': 'Specify if the component should be shown (true) or hidden (false)'}, result="Returns ''true'' if the component was shown or hidden succesfully, ''false'' if an invalid argument was specified."), oop=FunctionOOP(class_name='player', method_name='setHudComponentVisible', field=None), url=FunctionUrl(url='/wiki/SetPlayerHudComponentVisible', name='setPlayerHudComponentVisible', category='Player functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setPlayerHudComponentVisible', return_types=['bool'], arguments=[FunctionArgument(name='component', argument_type='string', default_value=None, optional=False), FunctionArgument(name='show', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description="This function will show or hide a part of the player's HUD. ", arguments={'component': 'The component you wish to show or hide. Valid values are:', 'all': 'All of the following at the same time', 'ammo': 'The display showing how much ammo the player has in their weapon', 'area_name': 'The text that appears containing the name of the area a player has entered', 'armour': 'The display showing the players armor', 'breath': 'The display showing the players breath', 'clock': 'The display showing the in-game time', 'health': 'The display showing the players health', 'money': 'The display showing how much money the player has', 'radar': 'The bottom-left corner miniradar', 'vehicle_name': 'The text that appears containing the players vehicle name when the player enters a vehicle', 'weapon': 'The display showing the players weapon\n{{New feature/item|3.0110|1.1||', 'radio': 'The display showing the radio label', 'wanted': 'The display showing the players wanted level', 'crosshair': 'The weapon crosshair and sniper scope\n}}', 'show': 'Specify if the component should be shown (true) or hidden (false)'}, result="Returns ''true'' if the component was shown or hidden succesfully, ''false'' if an invalid argument was specified."), oop=None, url=FunctionUrl(url='/wiki/SetPlayerHudComponentVisible', name='setPlayerHudComponentVisible', category='Player functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setPlayerMoney', return_types=['bool'], arguments=[FunctionArgument(name='thePlayer', argument_type='player', default_value=None, optional=False), FunctionArgument(name='amount', argument_type='int', default_value=None, optional=False), FunctionArgument(name='instant', argument_type='bool', default_value='false', optional=True)]), docs=FunctionDoc(description="Sets a player's money to a certain value, regardless of current player money. It should be noted that setting negative values does not work and in fact gives the player large amounts of money.", arguments={'thePlayer': 'Which player to set the money of.', 'amount': 'A whole integer specifying the new amount of money the player will have.\n{{OptionalArg}}\n{{New items|3.0140|1.4|', 'instant': 'If set to true money will be set instantly without counting up/down like in singleplayer.}}'}, result="Returns ''true'' if the money was added, or ''false'' if invalid parameters were passed."), oop=FunctionOOP(class_name='player', method_name='setMoney', field='money'), url=FunctionUrl(url='/wiki/SetPlayerMoney', name='setPlayerMoney', category='Player functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setPlayerMoney', return_types=['bool'], arguments=[FunctionArgument(name='amount', argument_type='int', default_value=None, optional=False), FunctionArgument(name='instant', argument_type='bool', default_value='false', optional=True)]), docs=FunctionDoc(description="Sets a player's money to a certain value, regardless of current player money. It should be noted that setting negative values does not work and in fact gives the player large amounts of money.", arguments={'amount': 'A whole integer specifying the new amount of money the local player will have.\n{{OptionalArg}}\n{{New items|3.0140|1.4|', 'instant': 'If set to true money will be set instantly without counting up/down like in singleplayer.}}'}, result="Returns ''true'' if the money was added, or ''false'' if invalid parameters were passed."), oop=FunctionOOP(class_name='Player', method_name='setMoney', field=None), url=FunctionUrl(url='/wiki/SetPlayerMoney', name='setPlayerMoney', category='Player functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setPlayerNametagColor', return_types=['bool'], arguments=[FunctionArgument(name='thePlayer', argument_type='player', default_value=None, optional=False), FunctionArgument(name='r', argument_type='int', default_value=None, optional=False), FunctionArgument(name='g', argument_type='int', default_value=None, optional=False), FunctionArgument(name='b', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description="<!-- Describe in plain english what this function does. Don't go into details, just give an overview -->\nThis allows you to change the RGB color mixture in the name tags of players.", arguments={'thePlayer': 'The player whose name tag text you wish to change the color of', 'r': 'The amount of red you want in the mixture of RGB (0-255 is valid)', 'g': 'The amount of green you want in the mixture of RGB (0-255 is valid)', 'b': 'The amount of blue you want in the mixture of RGB (0-255 is valid)\n{{New feature|2|DP2|', 'false': 'If false is specified instead of the colors, the nametag color will reset to defaulting to your team color.\n}}'}, result="<!-- Make this descriptive. Explain what cases will return false. If you're unsure, add a tag to it so we can check -->\nReturns ''true'' if the function was successful, ''false'' otherwise."), oop=FunctionOOP(class_name='player', method_name='setNametagColor', field=None), url=FunctionUrl(url='/wiki/SetPlayerNametagColor', name='setPlayerNametagColor', category='Player functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setPlayerNametagColor', return_types=['bool'], arguments=[FunctionArgument(name='thePlayer', argument_type='player', default_value=None, optional=False), FunctionArgument(name='r', argument_type='int', default_value=None, optional=False), FunctionArgument(name='g', argument_type='int', default_value=None, optional=False), FunctionArgument(name='b', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description="<!-- Describe in plain english what this function does. Don't go into details, just give an overview -->\nThis allows you to change the RGB color mixture in the name tags of players.", arguments={'thePlayer': 'The player whose name tag text you wish to change the color of', 'r': 'The amount of red you want in the mixture of RGB (0-255 is valid)', 'g': 'The amount of green you want in the mixture of RGB (0-255 is valid)', 'b': 'The amount of blue you want in the mixture of RGB (0-255 is valid)\n{{New feature|2|DP2|', 'false': 'If false is specified instead of the colors, the nametag color will reset to defaulting to your team color.\n}}'}, result="<!-- Make this descriptive. Explain what cases will return false. If you're unsure, add a tag to it so we can check -->\nReturns ''true'' if the function was successful, ''false'' otherwise."), oop=FunctionOOP(class_name='player', method_name='setNametagColor', field=None), url=FunctionUrl(url='/wiki/SetPlayerNametagColor', name='setPlayerNametagColor', category='Player functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setPlayerNametagShowing', return_types=['bool'], arguments=[FunctionArgument(name='thePlayer', argument_type='player', default_value=None, optional=False), FunctionArgument(name='showing', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description="Use this to define whether the player's name tag is visible or invisible.", arguments={'thePlayer': 'Define the player whos tag visiblity status you want to change', 'showing': 'Use true or false to show/hide the tag'}, result="Returns ''true'' if successful, ''false'' otherwise"), oop=FunctionOOP(class_name='player', method_name='setNametagShowing', field='nametagShowing'), url=FunctionUrl(url='/wiki/SetPlayerNametagShowing', name='setPlayerNametagShowing', category='Player functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setPlayerNametagShowing', return_types=['bool'], arguments=[FunctionArgument(name='thePlayer', argument_type='player', default_value=None, optional=False), FunctionArgument(name='showing', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description="Use this to define whether the player's name tag is visible or invisible.", arguments={'thePlayer': 'Define the player whos tag visiblity status you want to change', 'showing': 'Use true or false to show/hide the tag'}, result="Returns ''true'' if successful, ''false'' otherwise"), oop=FunctionOOP(class_name='player', method_name='setNametagShowing', field='nametagShowing'), url=FunctionUrl(url='/wiki/SetPlayerNametagShowing', name='setPlayerNametagShowing', category='Player functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setPlayerNametagText', return_types=['bool'], arguments=[FunctionArgument(name='thePlayer', argument_type='player', default_value=None, optional=False), FunctionArgument(name='text', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description="<!-- Describe in plain english what this function does. Don't go into details, just give an overview -->\nThis will change the text of a player's nickname in the world to something besides the nickname he chose. This will not change the player's actual nickname, it only changes the visible aspect inside the world (you will see his original nickname in the scoreboard and will refer to his original name in scripts).", arguments={'thePlayer': 'The player whose nickname text you wish to change', 'text': 'The new nickname text that will be displayed'}, result="<!-- Make this descriptive. Explain what cases will return false. If you're unsure, add a tag to it so we can check -->\nReturns ''true'' if successful, ''false'' otherwise."), oop=FunctionOOP(class_name='player', method_name='setNametagText', field='nametagText'), url=FunctionUrl(url='/wiki/SetPlayerNametagText', name='setPlayerNametagText', category='Player functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setPlayerNametagText', return_types=['bool'], arguments=[FunctionArgument(name='thePlayer', argument_type='player', default_value=None, optional=False), FunctionArgument(name='text', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description="<!-- Describe in plain english what this function does. Don't go into details, just give an overview -->\nThis will change the text of a player's nickname in the world to something besides the nickname he chose. This will not change the player's actual nickname, it only changes the visible aspect inside the world (you will see his original nickname in the scoreboard and will refer to his original name in scripts).", arguments={'thePlayer': 'The player whose nickname text you wish to change', 'text': 'The new nickname text that will be displayed'}, result="<!-- Make this descriptive. Explain what cases will return false. If you're unsure, add a tag to it so we can check -->\nReturns ''true'' if successful, ''false'' otherwise."), oop=FunctionOOP(class_name='player', method_name='setNametagText', field='nametagText'), url=FunctionUrl(url='/wiki/SetPlayerNametagText', name='setPlayerNametagText', category='Player functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='takePlayerMoney', return_types=['bool'], arguments=[FunctionArgument(name='thePlayer', argument_type='player', default_value=None, optional=False), FunctionArgument(name='amount', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description="This function subtracts money from a [[player]]'s current money amount.", arguments={'thePlayer': 'the player you are taking the money from.', 'amount': 'an integer number specifying the amount of money to take from the player.'}, result="Returns ''true'' if the money was taken, or ''false'' if invalid parameters were passed."), oop=FunctionOOP(class_name='player', method_name='takeMoney', field='money'), url=FunctionUrl(url='/wiki/TakePlayerMoney', name='takePlayerMoney', category='Player functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='takePlayerMoney', return_types=['bool'], arguments=[FunctionArgument(name='amount', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description="This function subtracts money from a [[player]]'s current money amount.", arguments={'amount': 'an integer number specifying the amount of money to take from the player.'}, result="Returns ''true'' if the money was taken, or ''false'' if invalid parameters were passed."), oop=None, url=FunctionUrl(url='/wiki/TakePlayerMoney', name='takePlayerMoney', category='Player functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='detonateSatchels', return_types=['bool'], arguments=[FunctionArgument(name='Player', argument_type='player', default_value=None, optional=False)]), docs=FunctionDoc(description='This function can be used to detonate a players satchels.', arguments={}, result="Returns ''true'' if successful, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/DetonateSatchels', name='detonateSatchels', category='Projectile functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='detonateSatchels', return_types=['bool'], arguments=[]), docs=FunctionDoc(description='This function can be used to detonate a players satchels.', arguments={}, result="Returns ''true'' if successful, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/DetonateSatchels', name='detonateSatchels', category='Projectile functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='createRadarArea', return_types=['radararea'], arguments=[FunctionArgument(name='startPosX', argument_type='float', default_value=None, optional=False), FunctionArgument(name='startPosY', argument_type='float', default_value=None, optional=False), FunctionArgument(name='sizeX', argument_type='float', default_value=None, optional=False), FunctionArgument(name='sizeY', argument_type='float', default_value=None, optional=False), FunctionArgument(name='r', argument_type='int', default_value='255', optional=False), FunctionArgument(name='g', argument_type='int', default_value='0', optional=False), FunctionArgument(name='b', argument_type='int', default_value='0', optional=False), FunctionArgument(name='a', argument_type='int', default_value='255', optional=False), FunctionArgument(name='visibleTo', argument_type='element', default_value='root', optional=False)]), docs=FunctionDoc(description='This function can be used to create custom radar areas on the radar.', arguments={'startPosX': 'A float representing the origin x position of the radar area.', 'startPosY': 'A float representing the origin y position of the radar area.', 'sizeX': 'A float representing the width of the radar area.', 'sizeY': 'A float representing the height of the radar area.\n{{OptionalArg}} ', 'r': 'An integer representing the amount of red in the color.  Maximum value is 255', 'g': 'An integer representing the amount of green in the color.  Maximum value is 255', 'b': 'An integer representing the amount of blue in the color.  Maximum value is 255', 'a': 'An integer representing the amount of alpha in the color.  This allows setting the transparency of the radar area.  255 is opaque and 0 is transparent.', 'visibleTo': 'An element that you wish to restrict the visibility of the radar area to. (Server function only)'}, result=''), oop=None, url=FunctionUrl(url='/wiki/CreateRadarArea', name='createRadarArea', category='Radar area functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='createRadarArea', return_types=['radararea'], arguments=[FunctionArgument(name='startPosX', argument_type='float', default_value=None, optional=False), FunctionArgument(name='startPosY', argument_type='float', default_value=None, optional=False), FunctionArgument(name='sizeX', argument_type='float', default_value=None, optional=False), FunctionArgument(name='sizeY', argument_type='float', default_value=None, optional=False), FunctionArgument(name='r', argument_type='int', default_value='255', optional=False), FunctionArgument(name='g', argument_type='int', default_value='0', optional=False), FunctionArgument(name='b', argument_type='int', default_value='0', optional=False), FunctionArgument(name='a', argument_type='int', default_value='255', optional=False), FunctionArgument(name='visibleTo', argument_type='element', default_value='root', optional=False)]), docs=FunctionDoc(description='This function can be used to create custom radar areas on the radar.', arguments={'startPosX': 'A float representing the origin x position of the radar area.', 'startPosY': 'A float representing the origin y position of the radar area.', 'sizeX': 'A float representing the width of the radar area.', 'sizeY': 'A float representing the height of the radar area.\n{{OptionalArg}} ', 'r': 'An integer representing the amount of red in the color.  Maximum value is 255', 'g': 'An integer representing the amount of green in the color.  Maximum value is 255', 'b': 'An integer representing the amount of blue in the color.  Maximum value is 255', 'a': 'An integer representing the amount of alpha in the color.  This allows setting the transparency of the radar area.  255 is opaque and 0 is transparent.', 'visibleTo': 'An element that you wish to restrict the visibility of the radar area to. (Server function only)'}, result=''), oop=None, url=FunctionUrl(url='/wiki/CreateRadarArea', name='createRadarArea', category='Radar area functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getRadarAreaColor', return_types=['int,', 'int,', 'int,', 'int'], arguments=[FunctionArgument(name='theRadararea', argument_type='radararea', default_value=None, optional=False)]), docs=FunctionDoc(description='This function can be used to retrieve the current color of a [[radararea|radar area]].', arguments={'theRadararea': 'The radararea|radar area you wish to retrieve the colour of.'}, result="Returns four integers in RGBA format (''red'', ''green'', ''blue'', ''alpha''), with a maximum value of 255 for each.  Alpha decides transparency where 255 is opaque and 0 is transparent.  Returns ''false'' if the radararea is invalid."), oop=FunctionOOP(class_name='radararea', method_name="getColor}}\n\n===Required Arguments=== \n*'''theRadararea:''' The [[radararea", field="radar area]] you wish to retrieve the colour of.\n\n===Returns===\nReturns four integers in RGBA format (''red'', ''green'', ''blue'', ''alpha''), with a maximum value of 255 for each.  Alpha decides transparency where 255 is opaque and 0 is transparent.  Returns ''false'' if the radararea is invalid.\n\n"), url=FunctionUrl(url='/wiki/GetRadarAreaColor', name='getRadarAreaColor', category='Radar area functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getRadarAreaColor', return_types=['int,', 'int,', 'int,', 'int'], arguments=[FunctionArgument(name='theRadararea', argument_type='radararea', default_value=None, optional=False)]), docs=FunctionDoc(description='This function can be used to retrieve the current color of a [[radararea|radar area]].', arguments={'theRadararea': 'The radararea|radar area you wish to retrieve the colour of.'}, result="Returns four integers in RGBA format (''red'', ''green'', ''blue'', ''alpha''), with a maximum value of 255 for each.  Alpha decides transparency where 255 is opaque and 0 is transparent.  Returns ''false'' if the radararea is invalid."), oop=FunctionOOP(class_name='radararea', method_name="getColor}}\n\n===Required Arguments=== \n*'''theRadararea:''' The [[radararea", field="radar area]] you wish to retrieve the colour of.\n\n===Returns===\nReturns four integers in RGBA format (''red'', ''green'', ''blue'', ''alpha''), with a maximum value of 255 for each.  Alpha decides transparency where 255 is opaque and 0 is transparent.  Returns ''false'' if the radararea is invalid.\n\n"), url=FunctionUrl(url='/wiki/GetRadarAreaColor', name='getRadarAreaColor', category='Radar area functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getRadarAreaSize', return_types=['float,', 'float'], arguments=[FunctionArgument(name='theRadararea', argument_type='radararea', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is used for getting the X and Y size of an existing [[radararea|radar area]].', arguments={'theRadararea': 'The radararea|radar area element whose size you wish to get.'}, result="Returns two ''floats'' indicating the X and Y length of the radar area respectively, ''false'' if the radar area is invalid."), oop=FunctionOOP(class_name='radararea', method_name="getSize}}\n\n===Required Arguments=== \n*'''theRadararea:''' The [[radararea", field="radar area]] element whose size you wish to get.\n\n===Returns===\nReturns two ''floats'' indicating the X and Y length of the radar area respectively, ''false'' if the radar area is invalid.\n\n"), url=FunctionUrl(url='/wiki/GetRadarAreaSize', name='getRadarAreaSize', category='Radar area functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getRadarAreaSize', return_types=['float,', 'float'], arguments=[FunctionArgument(name='theRadararea', argument_type='radararea', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is used for getting the X and Y size of an existing [[radararea|radar area]].', arguments={'theRadararea': 'The radararea|radar area element whose size you wish to get.'}, result="Returns two ''floats'' indicating the X and Y length of the radar area respectively, ''false'' if the radar area is invalid."), oop=FunctionOOP(class_name='radararea', method_name="getSize}}\n\n===Required Arguments=== \n*'''theRadararea:''' The [[radararea", field="radar area]] element whose size you wish to get.\n\n===Returns===\nReturns two ''floats'' indicating the X and Y length of the radar area respectively, ''false'' if the radar area is invalid.\n\n"), url=FunctionUrl(url='/wiki/GetRadarAreaSize', name='getRadarAreaSize', category='Radar area functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='isInsideRadarArea', return_types=['bool'], arguments=[FunctionArgument(name='theArea', argument_type='radararea', default_value=None, optional=False), FunctionArgument(name='posX', argument_type='float', default_value=None, optional=False), FunctionArgument(name='posY', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='This function checks if a 2D position is inside a [[radararea|radar area]] or not.', arguments={'theArea': 'The radararea|radar area youre checking the position against.', 'posX': 'The X coordinate of the position youre checking.', 'posY': 'The Y coordinate of the position youre checking.'}, result="Returns ''true'' if the position is inside the radar area, ''false'' if it isn't or if any parameters are invalid."), oop=FunctionOOP(class_name='radararea', method_name="isInside}}\n\n===Required Arguments=== \n*'''theArea:''' The [[radararea", field="radar area]] you're checking the position against.\n*'''posX:''' The X coordinate of the position you're checking.\n*'''posY:''' The Y coordinate of the position you're checking.\n\n===Returns===\nReturns ''true'' if the position is inside the radar area, ''false'' if it isn't or if any parameters are invalid.\n\n"), url=FunctionUrl(url='/wiki/IsInsideRadarArea', name='isInsideRadarArea', category='Radar area functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='isInsideRadarArea', return_types=['bool'], arguments=[FunctionArgument(name='theArea', argument_type='radararea', default_value=None, optional=False), FunctionArgument(name='posX', argument_type='float', default_value=None, optional=False), FunctionArgument(name='posY', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='This function checks if a 2D position is inside a [[radararea|radar area]] or not.', arguments={'theArea': 'The radararea|radar area youre checking the position against.', 'posX': 'The X coordinate of the position youre checking.', 'posY': 'The Y coordinate of the position youre checking.'}, result="Returns ''true'' if the position is inside the radar area, ''false'' if it isn't or if any parameters are invalid."), oop=FunctionOOP(class_name='radararea', method_name="isInside}}\n\n===Required Arguments=== \n*'''theArea:''' The [[radararea", field="radar area]] you're checking the position against.\n*'''posX:''' The X coordinate of the position you're checking.\n*'''posY:''' The Y coordinate of the position you're checking.\n\n===Returns===\nReturns ''true'' if the position is inside the radar area, ''false'' if it isn't or if any parameters are invalid.\n\n"), url=FunctionUrl(url='/wiki/IsInsideRadarArea', name='isInsideRadarArea', category='Radar area functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='isRadarAreaFlashing', return_types=['bool'], arguments=[FunctionArgument(name='theRadararea', argument_type='radararea', default_value=None, optional=False)]), docs=FunctionDoc(description='This function allows detection of whether a radar area is flashing or not.', arguments={'theRadararea': 'The radar area you wish to check the state of flashing'}, result="Returns ''true'' if the radar area is flashing, ''false'' if it is not or if it doesn't exist."), oop=FunctionOOP(class_name='radararea', method_name='isFlashing', field='flashing'), url=FunctionUrl(url='/wiki/IsRadarAreaFlashing', name='isRadarAreaFlashing', category='Radar area functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='isRadarAreaFlashing', return_types=['bool'], arguments=[FunctionArgument(name='theRadararea', argument_type='radararea', default_value=None, optional=False)]), docs=FunctionDoc(description='This function allows detection of whether a radar area is flashing or not.', arguments={'theRadararea': 'The radar area you wish to check the state of flashing'}, result="Returns ''true'' if the radar area is flashing, ''false'' if it is not or if it doesn't exist."), oop=FunctionOOP(class_name='radararea', method_name='isFlashing', field='flashing'), url=FunctionUrl(url='/wiki/IsRadarAreaFlashing', name='isRadarAreaFlashing', category='Radar area functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setRadarAreaColor', return_types=['bool'], arguments=[FunctionArgument(name='theRadarArea', argument_type='radararea', default_value=None, optional=False), FunctionArgument(name='r', argument_type='int', default_value=None, optional=False), FunctionArgument(name='g', argument_type='int', default_value=None, optional=False), FunctionArgument(name='b', argument_type='int', default_value=None, optional=False), FunctionArgument(name='a', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='Sets the color of an existing radar area.', arguments={'theRadarArea': 'the radararea element whose color you wish to set.', 'r': 'an integer representing the amount of red in the color (0 for no red, 255 for solid red)', 'g': 'an integer representing the amount of green in the color (0 for no green, 255 for solid green)', 'b': 'an integer representing the amount of blue in the color (0 for no blue, 255 for solid blue)', 'a': 'an integer representing the colors alpha (0 for transparent, 255 for opaque)'}, result="Returns ''true'' if the color was set successfully, ''false'' if the radar area doesn't exist or the color arguments are improper."), oop=None, url=FunctionUrl(url='/wiki/SetRadarAreaColor', name='setRadarAreaColor', category='Radar area functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setRadarAreaColor', return_types=['bool'], arguments=[FunctionArgument(name='theRadarArea', argument_type='radararea', default_value=None, optional=False), FunctionArgument(name='r', argument_type='int', default_value=None, optional=False), FunctionArgument(name='g', argument_type='int', default_value=None, optional=False), FunctionArgument(name='b', argument_type='int', default_value=None, optional=False), FunctionArgument(name='a', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='Sets the color of an existing radar area.', arguments={'theRadarArea': 'the radararea element whose color you wish to set.', 'r': 'an integer representing the amount of red in the color (0 for no red, 255 for solid red)', 'g': 'an integer representing the amount of green in the color (0 for no green, 255 for solid green)', 'b': 'an integer representing the amount of blue in the color (0 for no blue, 255 for solid blue)', 'a': 'an integer representing the colors alpha (0 for transparent, 255 for opaque)'}, result="Returns ''true'' if the color was set successfully, ''false'' if the radar area doesn't exist or the color arguments are improper."), oop=None, url=FunctionUrl(url='/wiki/SetRadarAreaColor', name='setRadarAreaColor', category='Radar area functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setRadarAreaFlashing', return_types=['bool'], arguments=[FunctionArgument(name='theRadarArea', argument_type='radararea', default_value=None, optional=False), FunctionArgument(name='flash', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description='This function makes an existing radar area flash in transparency.', arguments={'theRadarArea': 'the radararea element we want to change flashing state of.', 'flash': 'a bool indicating whether the radar area should flash (true to flash, false to not flash).'}, result="Returns ''true'' if the new flash state was successfully set, ''false'' if the radar area doesn't exist or invalid arguments were passed."), oop=FunctionOOP(class_name='radararea', method_name='setFlashing', field='flashing'), url=FunctionUrl(url='/wiki/SetRadarAreaFlashing', name='setRadarAreaFlashing', category='Radar area functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setRadarAreaFlashing', return_types=['bool'], arguments=[FunctionArgument(name='theRadarArea', argument_type='radararea', default_value=None, optional=False), FunctionArgument(name='flash', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description='This function makes an existing radar area flash in transparency.', arguments={'theRadarArea': 'the radararea element we want to change flashing state of.', 'flash': 'a bool indicating whether the radar area should flash (true to flash, false to not flash).'}, result="Returns ''true'' if the new flash state was successfully set, ''false'' if the radar area doesn't exist or invalid arguments were passed."), oop=FunctionOOP(class_name='radararea', method_name='setFlashing', field='flashing'), url=FunctionUrl(url='/wiki/SetRadarAreaFlashing', name='setRadarAreaFlashing', category='Radar area functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setRadarAreaSize', return_types=['bool'], arguments=[FunctionArgument(name='theRadararea', argument_type='radararea', default_value=None, optional=False), FunctionArgument(name='x', argument_type='float', default_value=None, optional=False), FunctionArgument(name='y', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='This function changes the size of an existing [[radararea|radar area]].', arguments={'theRadararea': 'the radararea element whose size is to be changed.', 'x': 'the x length of the radar area.', 'y': 'the y length of the radar area.'}, result="Returns ''true'' if the size was set successfully, ''false'' if invalid arguments are passed."), oop=None, url=FunctionUrl(url='/wiki/SetRadarAreaSize', name='setRadarAreaSize', category='Radar area functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setRadarAreaSize', return_types=['bool'], arguments=[FunctionArgument(name='theRadararea', argument_type='radararea', default_value=None, optional=False), FunctionArgument(name='x', argument_type='float', default_value=None, optional=False), FunctionArgument(name='y', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='This function changes the size of an existing [[radararea|radar area]].', arguments={'theRadararea': 'the radararea element whose size is to be changed.', 'x': 'the x length of the radar area.', 'y': 'the y length of the radar area.'}, result="Returns ''true'' if the size was set successfully, ''false'' if invalid arguments are passed."), oop=None, url=FunctionUrl(url='/wiki/SetRadarAreaSize', name='setRadarAreaSize', category='Radar area functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='fetchRemote', return_types=['bool'], arguments=[FunctionArgument(name='URL', argument_type='string', default_value=None, optional=False), FunctionArgument(name='queueName', argument_type='string', default_value='"default"', optional=False), FunctionArgument(name='connectionAttempts', argument_type='int', default_value='10', optional=False), FunctionArgument(name='connectTimeout', argument_type='int', default_value='10000', optional=False), FunctionArgument(name='callbackFunction', argument_type='function', default_value=None, optional=False), FunctionArgument(name='postData', argument_type='string', default_value='""', optional=False), FunctionArgument(name='postIsBinary', argument_type='bool', default_value='false', optional=False), FunctionArgument(name='...args', argument_type='any[]', default_value=None, optional=True)]), docs=FunctionDoc(description='This function allows you to post and receive data from HTTP servers. The calls are asynchronous so you do not get an immediate result from the call, instead a callback function you specify is called when the download completes.\nIn the case when the call fails, a string containing "ERROR" followed by an integer containing the error reason will be passed to the callback function. The reason for failure will be similar to errors found with websites - file not found, server not found and timeouts.\nIf you are using fetchRemote to connect to a PHP script, you can use \'\'file_get_contents("php://input")\'\' to read the \'\'\'postData\'\'\' sent from this function.', arguments={'URL': 'A full URL in the format <nowiki>http://hostname/path/file.ext</nowiki>. A port can be specified with a colon followed by a port number appended to the hostname.', 'callbackFunction': 'This is the function that should receive the data returned from the remote server. The callback argument list should be:', 'responseData': '- A string containing the remote response or ERROR if there was a problem', 'error': '- A number containing the error number or zero if there was no error. A list of possible error values are:\n{{Error_codes_for_callRemote_and_fetchRemote}}\n<div style="padding-left:19px;">', 'arguments...': '- The arguments that were passed into fetchRemote\n</div>\n{{New items|4.0153|1.5.3-9.11270|', 'queueName': 'Name of the queue to use. Any name can be used. If not set, the queue name is default. Requests in the same queue are processed in order, one at a time.\n}}', 'connectionAttempts': 'Number of times to retry if the remote host does not respond. In the case of a non-responding remote server, each connection attempt will timeout after 10 seconds. Therefore, the default setting of 10 connection attempts means it will be 100 seconds before your script gets a callback about the error. Reducing this value to 2 for example, will decrease that period to 20 seconds', 'connectTimeout': 'Number of milliseconds each connection attempt will take before timing out', 'postData': 'A string specifying any data you want to send to the remote HTTP server.', 'postIsBinary ': 'A boolean specifying if the data is text, or binary.', 'arguments': 'Any arguments you may want to pass to the callback.\n{{New items|5.0154|1.5.4-9.11342|'}, result="{{New items|5.0154|1.5.7-9.20307|\nReturns a '''''request''''' value which can be used with [[GetRemoteRequestInfo|getRemoteRequestInfo]] or [[AbortRemoteRequest|abortRemoteRequest]]\n}}"), oop=None, url=FunctionUrl(url='/wiki/FetchRemote', name='fetchRemote', category='Resource functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='fetchRemote', return_types=['bool'], arguments=[FunctionArgument(name='URL', argument_type='string', default_value=None, optional=False), FunctionArgument(name='queueName', argument_type='string', default_value='"default"', optional=False), FunctionArgument(name='connectionAttempts', argument_type='int', default_value='10', optional=False), FunctionArgument(name='connectTimeout', argument_type='int', default_value='10000', optional=False), FunctionArgument(name='callbackFunction', argument_type='function', default_value=None, optional=False), FunctionArgument(name='postData', argument_type='string', default_value='""', optional=False), FunctionArgument(name='postIsBinary', argument_type='bool', default_value='false', optional=False), FunctionArgument(name='...args', argument_type='any[]', default_value=None, optional=True)]), docs=FunctionDoc(description='This function allows you to post and receive data from HTTP servers. The calls are asynchronous so you do not get an immediate result from the call, instead a callback function you specify is called when the download completes.\nIn the case when the call fails, a string containing "ERROR" followed by an integer containing the error reason will be passed to the callback function. The reason for failure will be similar to errors found with websites - file not found, server not found and timeouts.\nIf you are using fetchRemote to connect to a PHP script, you can use \'\'file_get_contents("php://input")\'\' to read the \'\'\'postData\'\'\' sent from this function.', arguments={'URL': 'A full URL in the format <nowiki>http://hostname/path/file.ext</nowiki>. A port can be specified with a colon followed by a port number appended to the hostname.', 'callbackFunction': 'This is the function that should receive the data returned from the remote server. The callback argument list should be:', 'responseData': '- A string containing the remote response or ERROR if there was a problem', 'error': '- A number containing the error number or zero if there was no error. A list of possible error values are:\n{{Error_codes_for_callRemote_and_fetchRemote}}\n<div style="padding-left:19px;">', 'arguments...': '- The arguments that were passed into fetchRemote\n</div>\n{{New items|4.0153|1.5.3-9.11270|', 'queueName': 'Name of the queue to use. Any name can be used. If not set, the queue name is default. Requests in the same queue are processed in order, one at a time.\n}}', 'connectionAttempts': 'Number of times to retry if the remote host does not respond. In the case of a non-responding remote server, each connection attempt will timeout after 10 seconds. Therefore, the default setting of 10 connection attempts means it will be 100 seconds before your script gets a callback about the error. Reducing this value to 2 for example, will decrease that period to 20 seconds', 'connectTimeout': 'Number of milliseconds each connection attempt will take before timing out', 'postData': 'A string specifying any data you want to send to the remote HTTP server.', 'postIsBinary ': 'A boolean specifying if the data is text, or binary.', 'arguments': 'Any arguments you may want to pass to the callback.\n{{New items|5.0154|1.5.4-9.11342|'}, result="{{New items|5.0154|1.5.7-9.20307|\nReturns a '''''request''''' value which can be used with [[GetRemoteRequestInfo|getRemoteRequestInfo]] or [[AbortRemoteRequest|abortRemoteRequest]]\n}}"), oop=None, url=FunctionUrl(url='/wiki/FetchRemote', name='fetchRemote', category='Resource functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getResourceConfig', return_types=['xmlnode'], arguments=[FunctionArgument(name='filePath', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description="This function is used to return the root node of a configuration file. Config files must be predefined in a resource's [[Meta.xml|meta file]].  An alternative way to load XML files is to use [[xmlLoadFile]].", arguments={'filePath': 'The filepath of the file in the following format: :resourceName/path. resourceName is the name of the resource the file is in, and path is the path from the root directory of the resource to the file.\n:For example, if there is a file named \'settings.xml\' in the resource \'ctf\', it can be accessed from another resource this way: \'\'getResourceConfig(":ctf/settings.xml")\'\'.\n:If the file is in the current resource, only the file path is necessary, e.g. \'\'getResourceConfig("settings.xml")\'\'.'}, result="Returns the root node of the specified configuration file. If the file is corrupted, not defined in the meta file or doesn't exist, returns false."), oop=None, url=FunctionUrl(url='/wiki/GetResourceConfig', name='getResourceConfig', category='Resource functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getResourceConfig', return_types=['xmlnode'], arguments=[FunctionArgument(name='filePath', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description="This function is used to return the root node of a configuration file. Config files must be predefined in a resource's [[Meta.xml|meta file]].  An alternative way to load XML files is to use [[xmlLoadFile]].", arguments={'filePath': 'The filepath of the file in the following format: :resourceName/path. resourceName is the name of the resource the file is in, and path is the path from the root directory of the resource to the file.\n:For example, if there is a file named \'settings.xml\' in the resource \'ctf\', it can be accessed from another resource this way: \'\'getResourceConfig(":ctf/settings.xml")\'\'.\n:If the file is in the current resource, only the file path is necessary, e.g. \'\'getResourceConfig("settings.xml")\'\'.'}, result="Returns the root node of the specified configuration file. If the file is corrupted, not defined in the meta file or doesn't exist, returns false."), oop=None, url=FunctionUrl(url='/wiki/GetResourceConfig', name='getResourceConfig', category='Resource functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getResourceDynamicElementRoot', return_types=['element'], arguments=[FunctionArgument(name='theResource', argument_type='resource', default_value=None, optional=False)]), docs=FunctionDoc(description="This function retrieves the ''dynamic element root'' of a specified [[resource]]. The ''dynamic element root'' is the parent of elements that are created by scripts (e.g. with [[createObject]]) unless they specify a different parent.", arguments={'theResource': 'the resource of which dynamic element root we want.\n{{OOP||[[resource]]:getDynamicElementRoot}}'}, result="Returns an [[element]] of the resource's dynamic element root if the resource specified was valid and active (currently running), ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/GetResourceDynamicElementRoot', name='getResourceDynamicElementRoot', category='Resource functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getResourceDynamicElementRoot', return_types=['element'], arguments=[FunctionArgument(name='theResource', argument_type='resource', default_value=None, optional=False)]), docs=FunctionDoc(description="This function retrieves the ''dynamic element root'' of a specified [[resource]]. The ''dynamic element root'' is the parent of elements that are created by scripts (e.g. with [[createObject]]) unless they specify a different parent.", arguments={'theResource': 'the resource of which dynamic element root we want.\n{{OOP||[[resource]]:getDynamicElementRoot}}'}, result="Returns an [[element]] of the resource's dynamic element root if the resource specified was valid and active (currently running), ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/GetResourceDynamicElementRoot', name='getResourceDynamicElementRoot', category='Resource functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getResourceExportedFunctions', return_types=['table'], arguments=[FunctionArgument(name='theResource', argument_type='resource', default_value='getThisResource(', optional=False)]), docs=FunctionDoc(description='Returns a table containing the names of the functions that a resource exports. It will return the exports of the current resource if there is no argument passed in.', arguments={'theResource': 'the resource of which you want to know the call|exported functions.'}, result="Returns a [[table]] of function names if successful, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/GetResourceExportedFunctions', name='getResourceExportedFunctions', category='Resource functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getResourceExportedFunctions', return_types=['table'], arguments=[FunctionArgument(name='theResource', argument_type='resource', default_value='getThisResource(', optional=False)]), docs=FunctionDoc(description='Returns a table containing the names of the functions that a resource exports. It will return the exports of the current resource if there is no argument passed in.', arguments={'theResource': 'the resource of which you want to know the call|exported functions.'}, result="Returns a [[table]] of function names if successful, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/GetResourceExportedFunctions', name='getResourceExportedFunctions', category='Resource functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getResourceFromName', return_types=['resource'], arguments=[FunctionArgument(name='resourceName', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description="This function is used to retrieve a resource from its name. A resource's name is the same as its folder or file archive name on the server (without the extension).", arguments={'resourceName': 'the name of the resource you wish to get.'}, result="Returns the [[resource]] with the specified name, or ''false'' if no resource of that name exists. Note that clientside this will also return ''false'' for resources that are in the ''loaded'' state, since the client is unaware of resources that have not been started."), oop=None, url=FunctionUrl(url='/wiki/GetResourceFromName', name='getResourceFromName', category='Resource functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getResourceFromName', return_types=['resource'], arguments=[FunctionArgument(name='resourceName', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description="This function is used to retrieve a resource from its name. A resource's name is the same as its folder or file archive name on the server (without the extension).", arguments={'resourceName': 'the name of the resource you wish to get.'}, result="Returns the [[resource]] with the specified name, or ''false'' if no resource of that name exists. Note that clientside this will also return ''false'' for resources that are in the ''loaded'' state, since the client is unaware of resources that have not been started."), oop=None, url=FunctionUrl(url='/wiki/GetResourceFromName', name='getResourceFromName', category='Resource functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getResourceName', return_types=['string'], arguments=[FunctionArgument(name='res', argument_type='resource', default_value=None, optional=False)]), docs=FunctionDoc(description='This function gets the name of the specified resource.', arguments={'res': 'The resource you wish to get the name of.'}, result="Returns a string with the resource name in it, or ''false'' if the resource does not exist."), oop=FunctionOOP(class_name='resource', method_name='getName', field="name}}\n\n===Required Arguments=== \n*'''res:''' The resource you wish to get the name of.\n\n===Returns===\nReturns a string with the resource name in it, or ''false'' if the resource does not exist.\n\n"), url=FunctionUrl(url='/wiki/GetResourceName', name='getResourceName', category='Resource functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getResourceName', return_types=['string'], arguments=[FunctionArgument(name='res', argument_type='resource', default_value=None, optional=False)]), docs=FunctionDoc(description='This function gets the name of the specified resource.', arguments={'res': 'The resource you wish to get the name of.'}, result="Returns a string with the resource name in it, or ''false'' if the resource does not exist."), oop=FunctionOOP(class_name='resource', method_name='getName', field="name}}\n\n===Required Arguments=== \n*'''res:''' The resource you wish to get the name of.\n\n===Returns===\nReturns a string with the resource name in it, or ''false'' if the resource does not exist.\n\n"), url=FunctionUrl(url='/wiki/GetResourceName', name='getResourceName', category='Resource functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getResourceRootElement', return_types=['element'], arguments=[FunctionArgument(name='theResource', argument_type='resource', default_value='getThisResource(', optional=False)]), docs=FunctionDoc(description="This function retrieves a resource's root element. The resource's root element is the element in the element tree which is the parent of all elements that belong to a particular resource (except for elements specifically created elsewhere). You can attach event handlers to this element to easily capture events that originate from your resource (and global events that originate from the root element).\nNote: every resource has a [[Predefined_variables_list|predefined global variable]] called ''resourceRoot'' whose value is the root element of that resource.", arguments={'theResource': 'the resource whose root element we are getting. If not specified, assumes the current resource. (the resource returned from getThisResource)'}, result="Returns an ''element'' representing the resource's root, ''false'' if the specified resource doesn't exist."), oop=FunctionOOP(class_name='resource', method_name='getRootElement', field="rootElement}}\n===Optional Arguments===\n{{OptionalArg}}\n*'''theResource:''' the resource whose root element we are getting. If not specified, assumes the current resource. (the resource returned from [[getThisResource]])\n\n===Returns===\nReturns an ''element'' representing the resource's root, ''false'' if the specified resource doesn't exist.\n\n"), url=FunctionUrl(url='/wiki/GetResourceRootElement', name='getResourceRootElement', category='Resource functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getResourceRootElement', return_types=['element'], arguments=[FunctionArgument(name='theResource', argument_type='resource', default_value='getThisResource(', optional=False)]), docs=FunctionDoc(description="This function retrieves a resource's root element. The resource's root element is the element in the element tree which is the parent of all elements that belong to a particular resource (except for elements specifically created elsewhere). You can attach event handlers to this element to easily capture events that originate from your resource (and global events that originate from the root element).\nNote: every resource has a [[Predefined_variables_list|predefined global variable]] called ''resourceRoot'' whose value is the root element of that resource.", arguments={'theResource': 'the resource whose root element we are getting. If not specified, assumes the current resource. (the resource returned from getThisResource)'}, result="Returns an ''element'' representing the resource's root, ''false'' if the specified resource doesn't exist."), oop=FunctionOOP(class_name='resource', method_name='getRootElement', field="rootElement}}\n===Optional Arguments===\n{{OptionalArg}}\n*'''theResource:''' the resource whose root element we are getting. If not specified, assumes the current resource. (the resource returned from [[getThisResource]])\n\n===Returns===\nReturns an ''element'' representing the resource's root, ''false'' if the specified resource doesn't exist.\n\n"), url=FunctionUrl(url='/wiki/GetResourceRootElement', name='getResourceRootElement', category='Resource functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getResourceState', return_types=['string'], arguments=[FunctionArgument(name='theResource', argument_type='resource', default_value=None, optional=False)]), docs=FunctionDoc(description="<!-- Describe in plain english what this function does. Don't go into details, just give an overview -->\nThis function returns the state of a given resource", arguments={'theResource': 'The resource you wish to get the state of.\n{{OOP||[[resource]]:getState|state}}'}, result="If successful returns a string with the resource state in it, ''false'' otherwise.\nThe state can be one of:\n*'''loaded'''\n*'''running'''\n{{New feature|3|1.0|\n*'''starting'''\n*'''stopping'''\n*'''failed to load''' - Use [[getResourceLoadFailureReason]] to find out why it failed.\n}}"), oop=FunctionOOP(class_name='resource', method_name='getState', field="state}}\n===Returns===\nIf successful returns a string with the resource state in it, ''false'' otherwise.\nThe state can be one of:\n*'''loaded'''\n*'''running'''\n{{New feature"), url=FunctionUrl(url='/wiki/GetResourceState', name='getResourceState', category='Resource functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getResourceState', return_types=['string'], arguments=[FunctionArgument(name='theResource', argument_type='resource', default_value=None, optional=False)]), docs=FunctionDoc(description="<!-- Describe in plain english what this function does. Don't go into details, just give an overview -->\nThis function returns the state of a given resource", arguments={'theResource': 'The resource you wish to get the state of.\n{{OOP||[[resource]]:getState|state}}'}, result="If successful returns a string with the resource state in it, ''false'' otherwise.\nThe state can be one of:\n*'''loaded'''\n*'''running'''\n{{New feature|3|1.0|\n*'''starting'''\n*'''stopping'''\n*'''failed to load''' - Use [[getResourceLoadFailureReason]] to find out why it failed.\n}}"), oop=FunctionOOP(class_name='resource', method_name='getState', field="state}}\n===Returns===\nIf successful returns a string with the resource state in it, ''false'' otherwise.\nThe state can be one of:\n*'''loaded'''\n*'''running'''\n{{New feature"), url=FunctionUrl(url='/wiki/GetResourceState', name='getResourceState', category='Resource functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getThisResource', return_types=['resource'], arguments=[]), docs=FunctionDoc(description='This function retrieves the resource from which the function call was made.', arguments={}, result='Returns the resource in which the current script is.'), oop=None, url=FunctionUrl(url='/wiki/GetThisResource', name='getThisResource', category='Resource functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getThisResource', return_types=['resource'], arguments=[]), docs=FunctionDoc(description='This function retrieves the resource from which the function call was made.', arguments={}, result='Returns the resource in which the current script is.'), oop=None, url=FunctionUrl(url='/wiki/GetThisResource', name='getThisResource', category='Resource functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getRemoteRequests', return_types=['table'], arguments=[FunctionArgument(name='theResource', argument_type='resource', default_value='nil', optional=False)]), docs=FunctionDoc(description='Gets all [[FetchRemote|fetchRemote]] and [[CallRemote|callRemote]] requests currently running.\n}}', arguments={'theResource': ': the resource to get all requests from'}, result='Returns a table with all requests, false if an invalid resource was provided'), oop=None, url=FunctionUrl(url='/wiki/GetRemoteRequests', name='getRemoteRequests', category='Resource functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getRemoteRequests', return_types=['table'], arguments=[FunctionArgument(name='theResource', argument_type='resource', default_value='nil', optional=False)]), docs=FunctionDoc(description='Gets all [[FetchRemote|fetchRemote]] and [[CallRemote|callRemote]] requests currently running.\n}}', arguments={'theResource': ': the resource to get all requests from'}, result='Returns a table with all requests, false if an invalid resource was provided'), oop=None, url=FunctionUrl(url='/wiki/GetRemoteRequests', name='getRemoteRequests', category='Resource functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getRemoteRequestInfo', return_types=['table'], arguments=[FunctionArgument(name='theRequest', argument_type='request', default_value=None, optional=False), FunctionArgument(name='postDataLength', argument_type='int', default_value='0 [', optional=True), FunctionArgument(name='includeHeaders', argument_type='bool', default_value='false', optional=True)]), docs=FunctionDoc(description='Gets informations of an [[FetchRemote|fetchRemote]] or [[CallRemote|callRemote]] request info.\n}}', arguments={'theRequest': ': returned from FetchRemote|fetchRemote, CallRemote|callRemote or GetRemoteRequests|getRemoteRequests'}, result='Returns a table when valid, false otherwise\nThe table contains:\n*\'\'\'bytesReceived:\'\'\' A number specifying the amount of data received so far. Zero means the download is queued\n*\'\'\'bytesTotal:\'\'\' A number specifying the final download size. Will be zero if the remote HTTP server has not set the \'Content-Length\' header\n*\'\'\'currentAttempt:\'\'\' A number specifying the current connection attempt\n*\'\'\'type:\'\'\' A string specifying either "fetch" or "call"\n*\'\'\'url:\'\'\' A string specifying the URL\n*\'\'\'resource:\'\'\' The resource which started the request, or false if the resource has since been stopped/restarted\n*\'\'\'queue:\'\'\' A string specifying the queue name\n*\'\'\'method:\'\'\' A string specifying the HTTP method. e.g. "GET" or "POST"\n*\'\'\'connectionAttempts:\'\'\' A number specifying max number connection attempts as declared in the fetchRemote call\n*\'\'\'connectionTimeout:\'\'\' A number specifying connection attempt timeout as declared in the fetchRemote call\n*\'\'\'postData:\'\'\' A string containing the request post data as declared in the fetchRemote call\n*\'\'\'headers:\'\'\' A table containing the request HTTP headers as declared in the fetchRemote call'), oop=None, url=FunctionUrl(url='/wiki/GetRemoteRequestInfo', name='getRemoteRequestInfo', category='Resource functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getRemoteRequestInfo', return_types=['table'], arguments=[FunctionArgument(name='theRequest', argument_type='request', default_value=None, optional=False), FunctionArgument(name='postDataLength', argument_type='int', default_value='0 [', optional=True), FunctionArgument(name='includeHeaders', argument_type='bool', default_value='false', optional=True)]), docs=FunctionDoc(description='Gets informations of an [[FetchRemote|fetchRemote]] or [[CallRemote|callRemote]] request info.\n}}', arguments={'theRequest': ': returned from FetchRemote|fetchRemote, CallRemote|callRemote or GetRemoteRequests|getRemoteRequests'}, result='Returns a table when valid, false otherwise\nThe table contains:\n*\'\'\'bytesReceived:\'\'\' A number specifying the amount of data received so far. Zero means the download is queued\n*\'\'\'bytesTotal:\'\'\' A number specifying the final download size. Will be zero if the remote HTTP server has not set the \'Content-Length\' header\n*\'\'\'currentAttempt:\'\'\' A number specifying the current connection attempt\n*\'\'\'type:\'\'\' A string specifying either "fetch" or "call"\n*\'\'\'url:\'\'\' A string specifying the URL\n*\'\'\'resource:\'\'\' The resource which started the request, or false if the resource has since been stopped/restarted\n*\'\'\'queue:\'\'\' A string specifying the queue name\n*\'\'\'method:\'\'\' A string specifying the HTTP method. e.g. "GET" or "POST"\n*\'\'\'connectionAttempts:\'\'\' A number specifying max number connection attempts as declared in the fetchRemote call\n*\'\'\'connectionTimeout:\'\'\' A number specifying connection attempt timeout as declared in the fetchRemote call\n*\'\'\'postData:\'\'\' A string containing the request post data as declared in the fetchRemote call\n*\'\'\'headers:\'\'\' A table containing the request HTTP headers as declared in the fetchRemote call'), oop=None, url=FunctionUrl(url='/wiki/GetRemoteRequestInfo', name='getRemoteRequestInfo', category='Resource functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='abortRemoteRequest', return_types=['bool'], arguments=[FunctionArgument(name='theRequest', argument_type='request', default_value=None, optional=False)]), docs=FunctionDoc(description='Aborts a [[FetchRemote|fetchRemote]] or [[CallRemote|callRemote]] request.\n}}', arguments={'theRequest': ': returned from FetchRemote|fetchRemote, CallRemote|callRemote or GetRemoteRequests|getRemoteRequests'}, result='Returns true on success, false when invalid request was provided'), oop=None, url=FunctionUrl(url='/wiki/AbortRemoteRequest', name='abortRemoteRequest', category='Resource functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='abortRemoteRequest', return_types=['bool'], arguments=[FunctionArgument(name='theRequest', argument_type='request', default_value=None, optional=False)]), docs=FunctionDoc(description='Aborts a [[FetchRemote|fetchRemote]] or [[CallRemote|callRemote]] request.\n}}', arguments={'theRequest': ': returned from FetchRemote|fetchRemote, CallRemote|callRemote or GetRemoteRequests|getRemoteRequests'}, result='Returns true on success, false when invalid request was provided'), oop=None, url=FunctionUrl(url='/wiki/AbortRemoteRequest', name='abortRemoteRequest', category='Resource functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='countPlayersInTeam', return_types=['int'], arguments=[FunctionArgument(name='theTeam', argument_type='team', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is for returning the number of players in the specified team.', arguments={'theTeam': 'The team you wish to retrieve the player count of.'}, result="Returns an integer containing the number of players in the team, ''false'' if it could not be retrieved."), oop=FunctionOOP(class_name='team', method_name='countPlayers', field='playerCount'), url=FunctionUrl(url='/wiki/CountPlayersInTeam', name='countPlayersInTeam', category='Team functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='countPlayersInTeam', return_types=['int'], arguments=[FunctionArgument(name='theTeam', argument_type='team', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is for returning the number of players in the specified team.', arguments={'theTeam': 'The team you wish to retrieve the player count of.'}, result="Returns an integer containing the number of players in the team, ''false'' if it could not be retrieved."), oop=FunctionOOP(class_name='team', method_name='countPlayers', field='playerCount'), url=FunctionUrl(url='/wiki/CountPlayersInTeam', name='countPlayersInTeam', category='Team functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getPlayerTeam', return_types=['team'], arguments=[FunctionArgument(name='thePlayer', argument_type='player', default_value=None, optional=False)]), docs=FunctionDoc(description='This function gets the current [[team]] a [[player]] is on.', arguments={'thePlayer': ': The player whose team you want to find out.'}, result="Returns a ''team'' element representing the team the player is on, ''false'' if the player is not part of a team."), oop=FunctionOOP(class_name='player', method_name='getTeam', field='team'), url=FunctionUrl(url='/wiki/GetPlayerTeam', name='getPlayerTeam', category='Team functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getPlayerTeam', return_types=['team'], arguments=[FunctionArgument(name='thePlayer', argument_type='player', default_value=None, optional=False)]), docs=FunctionDoc(description='This function gets the current [[team]] a [[player]] is on.', arguments={'thePlayer': ': The player whose team you want to find out.'}, result="Returns a ''team'' element representing the team the player is on, ''false'' if the player is not part of a team."), oop=FunctionOOP(class_name='player', method_name='getTeam', field='team'), url=FunctionUrl(url='/wiki/GetPlayerTeam', name='getPlayerTeam', category='Team functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getPlayersInTeam', return_types=['table'], arguments=[FunctionArgument(name='theTeam', argument_type='team', default_value=None, optional=False)]), docs=FunctionDoc(description='This function retrieves all the players of the specified team.', arguments={'theTeam': 'The team you wish to retrieve all the players from.'}, result='Returns a [[table]] of all the players in the team, or an empty one if there are none else false if invalid arguments are passed.'), oop=FunctionOOP(class_name='team', method_name='getPlayers', field='players'), url=FunctionUrl(url='/wiki/GetPlayersInTeam', name='getPlayersInTeam', category='Team functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getPlayersInTeam', return_types=['table'], arguments=[FunctionArgument(name='theTeam', argument_type='team', default_value=None, optional=False)]), docs=FunctionDoc(description='This function retrieves all the players of the specified team.', arguments={'theTeam': 'The team you wish to retrieve all the players from.'}, result='Returns a [[table]] of all the players in the team, or an empty one if there are none else false if invalid arguments are passed.'), oop=FunctionOOP(class_name='team', method_name='getPlayers', field='players'), url=FunctionUrl(url='/wiki/GetPlayersInTeam', name='getPlayersInTeam', category='Team functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getTeamColor', return_types=['int,', 'int,', 'int'], arguments=[FunctionArgument(name='theTeam', argument_type='team', default_value=None, optional=False)]), docs=FunctionDoc(description='This function retrieves the color of a team.', arguments={'theTeam': 'The team you want to get the color of.'}, result="Returns 3 integers representing the red, green, and blue color components of the team if it's valid, ''false'' otherwise."), oop=FunctionOOP(class_name='team', method_name='getColor', field=None), url=FunctionUrl(url='/wiki/GetTeamColor', name='getTeamColor', category='Team functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getTeamColor', return_types=['int,', 'int,', 'int'], arguments=[FunctionArgument(name='theTeam', argument_type='team', default_value=None, optional=False)]), docs=FunctionDoc(description='This function retrieves the color of a team.', arguments={'theTeam': 'The team you want to get the color of.'}, result="Returns 3 integers representing the red, green, and blue color components of the team if it's valid, ''false'' otherwise."), oop=FunctionOOP(class_name='team', method_name='getColor', field=None), url=FunctionUrl(url='/wiki/GetTeamColor', name='getTeamColor', category='Team functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getTeamFriendlyFire', return_types=['bool'], arguments=[FunctionArgument(name='theTeam', argument_type='team', default_value=None, optional=False)]), docs=FunctionDoc(description='This function tells you if friendly fire is turned on for the specified team.', arguments={'theTeam': 'The team object that will be checked'}, result="Returns ''true'' if friendly fire is on for the specified team, ''false'' if it is turned off or if invalid arguments are specified."), oop=FunctionOOP(class_name='team', method_name='getFriendlyFire', field='friendlyFire'), url=FunctionUrl(url='/wiki/GetTeamFriendlyFire', name='getTeamFriendlyFire', category='Team functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getTeamFriendlyFire', return_types=['bool'], arguments=[FunctionArgument(name='theTeam', argument_type='team', default_value=None, optional=False)]), docs=FunctionDoc(description='This function tells you if friendly fire is turned on for the specified team.', arguments={'theTeam': 'The team object that will be checked'}, result="Returns ''true'' if friendly fire is on for the specified team, ''false'' if it is turned off or if invalid arguments are specified."), oop=FunctionOOP(class_name='team', method_name='getFriendlyFire', field='friendlyFire'), url=FunctionUrl(url='/wiki/GetTeamFriendlyFire', name='getTeamFriendlyFire', category='Team functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getTeamFromName', return_types=['team'], arguments=[FunctionArgument(name='teamName', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='This function finds a [[team]] element using the provided team name.', arguments={'teamName': 'A string determining the name of the team you wish to find.'}, result="Returns the [[team]] element if it was found, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/GetTeamFromName', name='getTeamFromName', category='Team functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getTeamFromName', return_types=['team'], arguments=[FunctionArgument(name='teamName', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='This function finds a [[team]] element using the provided team name.', arguments={'teamName': 'A string determining the name of the team you wish to find.'}, result="Returns the [[team]] element if it was found, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/GetTeamFromName', name='getTeamFromName', category='Team functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getTeamName', return_types=['string'], arguments=[FunctionArgument(name='theTeam', argument_type='team', default_value=None, optional=False)]), docs=FunctionDoc(description='This function gets the team name of a team object.', arguments={'theTeam': 'The team you want to retrieve the name of.'}, result="Returns a string representing the team's name if the team object was valid, ''false'' otherwise."), oop=FunctionOOP(class_name='team', method_name='getName', field='name'), url=FunctionUrl(url='/wiki/GetTeamName', name='getTeamName', category='Team functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getTeamName', return_types=['string'], arguments=[FunctionArgument(name='theTeam', argument_type='team', default_value=None, optional=False)]), docs=FunctionDoc(description='This function gets the team name of a team object.', arguments={'theTeam': 'The team you want to retrieve the name of.'}, result="Returns a string representing the team's name if the team object was valid, ''false'' otherwise."), oop=FunctionOOP(class_name='team', method_name='getName', field='name'), url=FunctionUrl(url='/wiki/GetTeamName', name='getTeamName', category='Team functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='addDebugHook', return_types=['bool'], arguments=[FunctionArgument(name='hookType', argument_type='string', default_value=None, optional=False), FunctionArgument(name='callbackFunction', argument_type='function', default_value=None, optional=False), FunctionArgument(name='nameList', argument_type='table', default_value=None, optional=True)]), docs=FunctionDoc(description='This function allows tracing of MTA functions and events. It should only be used when debugging scripts as it may degrade script performance.\nDebug hooks are not recursive, so functions and events triggered inside the hook callback will not be traced.\n}}', arguments={'hookType': 'The type of hook to add. This can be:\n** preEvent\n** postEvent\n** preFunction\n** postFunction\n{{New feature/item|3.0158|1.5.5|11856|\n* preEventFunction\n* postEventFunction\n}}', 'callbackFunction': 'The function to call\n** Returning the string "skip" from the callback function will cause the original function/event to be skipped', 'nameList': 'Table of strings for restricting which functions and events the hook will be triggered on\n** addDebugHook and removeDebugHook will only be hooked if they are specified in the name list'}, result="Returns ''true'' if the hook was successfully added, or ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/AddDebugHook', name='addDebugHook', category='Utility functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='addDebugHook', return_types=['bool'], arguments=[FunctionArgument(name='hookType', argument_type='string', default_value=None, optional=False), FunctionArgument(name='callbackFunction', argument_type='function', default_value=None, optional=False), FunctionArgument(name='nameList', argument_type='table', default_value=None, optional=True)]), docs=FunctionDoc(description='This function allows tracing of MTA functions and events. It should only be used when debugging scripts as it may degrade script performance.\nDebug hooks are not recursive, so functions and events triggered inside the hook callback will not be traced.\n}}', arguments={'hookType': 'The type of hook to add. This can be:\n** preEvent\n** postEvent\n** preFunction\n** postFunction\n{{New feature/item|3.0158|1.5.5|11856|\n* preEventFunction\n* postEventFunction\n}}', 'callbackFunction': 'The function to call\n** Returning the string "skip" from the callback function will cause the original function/event to be skipped', 'nameList': 'Table of strings for restricting which functions and events the hook will be triggered on\n** addDebugHook and removeDebugHook will only be hooked if they are specified in the name list'}, result="Returns ''true'' if the hook was successfully added, or ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/AddDebugHook', name='addDebugHook', category='Utility functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='base64Decode', return_types=['string'], arguments=[FunctionArgument(name='data', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns the decrypted data from [https://en.wikipedia.org/wiki/Base64 base64] representation of the encrypted block', arguments={'data': 'The block of data you want to decrypt'}, result="Returns the decrypted data from [https://en.wikipedia.org/wiki/Base64 base64] representation of the encrypted block if the decryption process was successfully completed, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/Base64Decode', name='base64Decode', category='Utility functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='base64Decode', return_types=['string'], arguments=[FunctionArgument(name='data', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns the decrypted data from [https://en.wikipedia.org/wiki/Base64 base64] representation of the encrypted block', arguments={'data': 'The block of data you want to decrypt'}, result="Returns the decrypted data from [https://en.wikipedia.org/wiki/Base64 base64] representation of the encrypted block if the decryption process was successfully completed, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/Base64Decode', name='base64Decode', category='Utility functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='base64Encode', return_types=['string'], arguments=[FunctionArgument(name='data', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns the [https://en.wikipedia.org/wiki/Base64 base64] representation of the encoded block of data', arguments={'data': 'The block of data you want to encode'}, result="Returns the [https://en.wikipedia.org/wiki/Base64 base64] representation of the encoded data if the encoding process was successfully completed, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/Base64Encode', name='base64Encode', category='Utility functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='base64Encode', return_types=['string'], arguments=[FunctionArgument(name='data', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns the [https://en.wikipedia.org/wiki/Base64 base64] representation of the encoded block of data', arguments={'data': 'The block of data you want to encode'}, result="Returns the [https://en.wikipedia.org/wiki/Base64 base64] representation of the encoded data if the encoding process was successfully completed, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/Base64Encode', name='base64Encode', category='Utility functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='bitAnd', return_types=['uint'], arguments=[FunctionArgument(name='var1', argument_type='uint', default_value=None, optional=False), FunctionArgument(name='var2', argument_type='uint', default_value=None, optional=False), FunctionArgument(name='...args', argument_type='any[]', default_value=None, optional=True)]), docs=FunctionDoc(description='This function performs a bitwise AND-conjunction on two or more (unsigned) 32-bit [[Int|integers]]. See [http://en.wikipedia.org/wiki/Bitwise_operation#AND Bitwise operation] for more details.\n}}', arguments={'varN': 'The value you want to perform an AND-conjunction on'}, result='Returns the conjuncted value.'), oop=None, url=FunctionUrl(url='/wiki/BitAnd', name='bitAnd', category='Utility functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='bitAnd', return_types=['uint'], arguments=[FunctionArgument(name='var1', argument_type='uint', default_value=None, optional=False), FunctionArgument(name='var2', argument_type='uint', default_value=None, optional=False), FunctionArgument(name='...args', argument_type='any[]', default_value=None, optional=True)]), docs=FunctionDoc(description='This function performs a bitwise AND-conjunction on two or more (unsigned) 32-bit [[Int|integers]]. See [http://en.wikipedia.org/wiki/Bitwise_operation#AND Bitwise operation] for more details.\n}}', arguments={'varN': 'The value you want to perform an AND-conjunction on'}, result='Returns the conjuncted value.'), oop=None, url=FunctionUrl(url='/wiki/BitAnd', name='bitAnd', category='Utility functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='bitNot', return_types=['uint'], arguments=[FunctionArgument(name='var', argument_type='uint', default_value=None, optional=False)]), docs=FunctionDoc(description='This function performs a bitwise NOT on an (unsigned) 32-bit [[Int|integer]]. See [http://en.wikipedia.org/wiki/Bitwise_operation#NOT Bitwise operation] for more details.\n}}', arguments={'var': 'The value you want to perform a bitwise NOT on'}, result='Returns the value on which the operation has been performed.'), oop=None, url=FunctionUrl(url='/wiki/BitNot', name='bitNot', category='Utility functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='bitNot', return_types=['uint'], arguments=[FunctionArgument(name='var', argument_type='uint', default_value=None, optional=False)]), docs=FunctionDoc(description='This function performs a bitwise NOT on an (unsigned) 32-bit [[Int|integer]]. See [http://en.wikipedia.org/wiki/Bitwise_operation#NOT Bitwise operation] for more details.\n}}', arguments={'var': 'The value you want to perform a bitwise NOT on'}, result='Returns the value on which the operation has been performed.'), oop=None, url=FunctionUrl(url='/wiki/BitNot', name='bitNot', category='Utility functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='bitOr', return_types=['uint'], arguments=[FunctionArgument(name='var1', argument_type='uint', default_value=None, optional=False), FunctionArgument(name='var2', argument_type='uint', default_value=None, optional=False), FunctionArgument(name='...args', argument_type='any[]', default_value=None, optional=True)]), docs=FunctionDoc(description='This function performs a bitwise OR-conjunction on two or more (unsigned) 32-bit [[Int|integers]]. See [http://en.wikipedia.org/wiki/Bitwise_operation#OR Bitwise operation] for more details.\n}}', arguments={'varN': 'The value you want to perform an OR-conjunction on'}, result='Returns the conjuncted value.'), oop=None, url=FunctionUrl(url='/wiki/BitOr', name='bitOr', category='Utility functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='bitOr', return_types=['uint'], arguments=[FunctionArgument(name='var1', argument_type='uint', default_value=None, optional=False), FunctionArgument(name='var2', argument_type='uint', default_value=None, optional=False), FunctionArgument(name='...args', argument_type='any[]', default_value=None, optional=True)]), docs=FunctionDoc(description='This function performs a bitwise OR-conjunction on two or more (unsigned) 32-bit [[Int|integers]]. See [http://en.wikipedia.org/wiki/Bitwise_operation#OR Bitwise operation] for more details.\n}}', arguments={'varN': 'The value you want to perform an OR-conjunction on'}, result='Returns the conjuncted value.'), oop=None, url=FunctionUrl(url='/wiki/BitOr', name='bitOr', category='Utility functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='bitXor', return_types=['uint'], arguments=[FunctionArgument(name='var1', argument_type='uint', default_value=None, optional=False), FunctionArgument(name='var2', argument_type='uint', default_value=None, optional=False), FunctionArgument(name='...args', argument_type='any[]', default_value=None, optional=True)]), docs=FunctionDoc(description='This function performs a bitwise XOR-conjunction (exclusive OR) on two or more (unsigned) 32-bit [[Int|integers]]. See [http://en.wikipedia.org/wiki/Bitwise_operation#XOR Bitwise operation] for more details.\n}}', arguments={'varN': 'The value you want to perform a XOR-conjunction on'}, result='Returns the conjuncted value.'), oop=None, url=FunctionUrl(url='/wiki/BitXor', name='bitXor', category='Utility functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='bitXor', return_types=['uint'], arguments=[FunctionArgument(name='var1', argument_type='uint', default_value=None, optional=False), FunctionArgument(name='var2', argument_type='uint', default_value=None, optional=False), FunctionArgument(name='...args', argument_type='any[]', default_value=None, optional=True)]), docs=FunctionDoc(description='This function performs a bitwise XOR-conjunction (exclusive OR) on two or more (unsigned) 32-bit [[Int|integers]]. See [http://en.wikipedia.org/wiki/Bitwise_operation#XOR Bitwise operation] for more details.\n}}', arguments={'varN': 'The value you want to perform a XOR-conjunction on'}, result='Returns the conjuncted value.'), oop=None, url=FunctionUrl(url='/wiki/BitXor', name='bitXor', category='Utility functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='bitTest', return_types=['bool'], arguments=[FunctionArgument(name='var1', argument_type='uint', default_value=None, optional=False), FunctionArgument(name='var2', argument_type='uint', default_value=None, optional=False), FunctionArgument(name='...args', argument_type='any[]', default_value=None, optional=True)]), docs=FunctionDoc(description='This function performs an AND-conjunction on two or more (unsigned) 32-bit [[Int|integers]] and checks, whether the conjuncted value is zero or not. See [http://en.wikipedia.org/wiki/Bitwise_operation#AND Bitwise operation] for more details.\n}}', arguments={'varN': 'The value you want to perform the operation on (see above)'}, result="Returns ''true'' if the conjuncted value is '''not''' zero, ''false'' otherwise. If a bad argument was passed to [[bitTest]], you'll get ''nil''."), oop=None, url=FunctionUrl(url='/wiki/BitTest', name='bitTest', category='Utility functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='bitTest', return_types=['bool'], arguments=[FunctionArgument(name='var1', argument_type='uint', default_value=None, optional=False), FunctionArgument(name='var2', argument_type='uint', default_value=None, optional=False), FunctionArgument(name='...args', argument_type='any[]', default_value=None, optional=True)]), docs=FunctionDoc(description='This function performs an AND-conjunction on two or more (unsigned) 32-bit [[Int|integers]] and checks, whether the conjuncted value is zero or not. See [http://en.wikipedia.org/wiki/Bitwise_operation#AND Bitwise operation] for more details.\n}}', arguments={'varN': 'The value you want to perform the operation on (see above)'}, result="Returns ''true'' if the conjuncted value is '''not''' zero, ''false'' otherwise. If a bad argument was passed to [[bitTest]], you'll get ''nil''."), oop=None, url=FunctionUrl(url='/wiki/BitTest', name='bitTest', category='Utility functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='bitLRotate', return_types=['int'], arguments=[FunctionArgument(name='value', argument_type='int', default_value=None, optional=False), FunctionArgument(name='n', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description="This functions performs a bitwise circular left-rotation on the integer '''value''' by integer '''n''' positions.\nSee [https://en.wikipedia.org/wiki/Bitwise_operation#Rotate_no_carry Bitwise operation] for more details.", arguments={'value': 'The value you want to perform the rotation on.', 'n': 'The amount of positions to rotate the value by.'}, result="Returns the circular left-rotated value as ''integer''."), oop=None, url=FunctionUrl(url='/wiki/BitLRotate', name='bitLRotate', category='Utility functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='bitLRotate', return_types=['int'], arguments=[FunctionArgument(name='value', argument_type='int', default_value=None, optional=False), FunctionArgument(name='n', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description="This functions performs a bitwise circular left-rotation on the integer '''value''' by integer '''n''' positions.\nSee [https://en.wikipedia.org/wiki/Bitwise_operation#Rotate_no_carry Bitwise operation] for more details.", arguments={'value': 'The value you want to perform the rotation on.', 'n': 'The amount of positions to rotate the value by.'}, result="Returns the circular left-rotated value as ''integer''."), oop=None, url=FunctionUrl(url='/wiki/BitLRotate', name='bitLRotate', category='Utility functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='bitRRotate', return_types=['int'], arguments=[FunctionArgument(name='value', argument_type='int', default_value=None, optional=False), FunctionArgument(name='n', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description="This functions performs a bitwise circular right-rotation on the integer '''value''' by integer '''n''' positions.\nSee [https://en.wikipedia.org/wiki/Bitwise_operation#Rotate_no_carry Bitwise operation] for more details.", arguments={'value': 'The value you want to perform the rotation on.', 'n': 'The amount of positions to rotate the value by.'}, result="Returns the circular right-rotated value as ''integer''."), oop=None, url=FunctionUrl(url='/wiki/BitRRotate', name='bitRRotate', category='Utility functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='bitRRotate', return_types=['int'], arguments=[FunctionArgument(name='value', argument_type='int', default_value=None, optional=False), FunctionArgument(name='n', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description="This functions performs a bitwise circular right-rotation on the integer '''value''' by integer '''n''' positions.\nSee [https://en.wikipedia.org/wiki/Bitwise_operation#Rotate_no_carry Bitwise operation] for more details.", arguments={'value': 'The value you want to perform the rotation on.', 'n': 'The amount of positions to rotate the value by.'}, result="Returns the circular right-rotated value as ''integer''."), oop=None, url=FunctionUrl(url='/wiki/BitRRotate', name='bitRRotate', category='Utility functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='bitLShift', return_types=['int'], arguments=[FunctionArgument(name='value', argument_type='int', default_value=None, optional=False), FunctionArgument(name='n', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description="This functions performs a logical left shift on the integer '''value''' by integer '''n''' positions. In a ''logical shift'', zeros are shifted in to replace the discarded bits.\nSee [https://en.wikipedia.org/wiki/Bitwise_operation#Logical_shift Bitwise operation] for more details.", arguments={'value': 'The value you want to perform the shift on.', 'n': 'The amount of positions to shift the value by.'}, result="Returns the logical left shifted value as ''integer''."), oop=None, url=FunctionUrl(url='/wiki/BitLShift', name='bitLShift', category='Utility functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='bitLShift', return_types=['int'], arguments=[FunctionArgument(name='value', argument_type='int', default_value=None, optional=False), FunctionArgument(name='n', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description="This functions performs a logical left shift on the integer '''value''' by integer '''n''' positions. In a ''logical shift'', zeros are shifted in to replace the discarded bits.\nSee [https://en.wikipedia.org/wiki/Bitwise_operation#Logical_shift Bitwise operation] for more details.", arguments={'value': 'The value you want to perform the shift on.', 'n': 'The amount of positions to shift the value by.'}, result="Returns the logical left shifted value as ''integer''."), oop=None, url=FunctionUrl(url='/wiki/BitLShift', name='bitLShift', category='Utility functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='bitRShift', return_types=['int'], arguments=[FunctionArgument(name='value', argument_type='int', default_value=None, optional=False), FunctionArgument(name='n', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description="This functions performs a logical right shift on the integer '''value''' by integer '''n''' positions. In a ''logical shift'', zeros are shifted in to replace the discarded bits.\nSee [https://en.wikipedia.org/wiki/Bitwise_operation#Logical_shift Bitwise operation] for more details.", arguments={'value': 'The value you want to perform the shift on.', 'n': 'The amount of positions to shift the value by.'}, result="Returns the logical right shifted value as ''integer''."), oop=None, url=FunctionUrl(url='/wiki/BitRShift', name='bitRShift', category='Utility functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='bitRShift', return_types=['int'], arguments=[FunctionArgument(name='value', argument_type='int', default_value=None, optional=False), FunctionArgument(name='n', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description="This functions performs a logical right shift on the integer '''value''' by integer '''n''' positions. In a ''logical shift'', zeros are shifted in to replace the discarded bits.\nSee [https://en.wikipedia.org/wiki/Bitwise_operation#Logical_shift Bitwise operation] for more details.", arguments={'value': 'The value you want to perform the shift on.', 'n': 'The amount of positions to shift the value by.'}, result="Returns the logical right shifted value as ''integer''."), oop=None, url=FunctionUrl(url='/wiki/BitRShift', name='bitRShift', category='Utility functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='bitArShift', return_types=['int'], arguments=[FunctionArgument(name='value', argument_type='int', default_value=None, optional=False), FunctionArgument(name='n', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description="This functions performs an arithmetic shift on the integer '''value''' by integer '''n''' positions. In an ''arithmetic shift'', zeros are shifted in to replace the discarded bits. In a ''right arithmetic'' shift, the [https://en.wikipedia.org/wiki/Sign_bit sign bit] is shifted in on the left, thus preserving the sign of the operand.\nSee [https://en.wikipedia.org/wiki/Bitwise_operation#Arithmetic_shift Bitwise operation] for more details.", arguments={'value': 'The value you want to perform the arithmetic shift on.', 'n': 'The amount of positions to shift the value by.'}, result="Returns the arithmetic shifted value as ''integer''."), oop=None, url=FunctionUrl(url='/wiki/BitArShift', name='bitArShift', category='Utility functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='bitArShift', return_types=['int'], arguments=[FunctionArgument(name='value', argument_type='int', default_value=None, optional=False), FunctionArgument(name='n', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description="This functions performs an arithmetic shift on the integer '''value''' by integer '''n''' positions. In an ''arithmetic shift'', zeros are shifted in to replace the discarded bits. In a ''right arithmetic'' shift, the [https://en.wikipedia.org/wiki/Sign_bit sign bit] is shifted in on the left, thus preserving the sign of the operand.\nSee [https://en.wikipedia.org/wiki/Bitwise_operation#Arithmetic_shift Bitwise operation] for more details.", arguments={'value': 'The value you want to perform the arithmetic shift on.', 'n': 'The amount of positions to shift the value by.'}, result="Returns the arithmetic shifted value as ''integer''."), oop=None, url=FunctionUrl(url='/wiki/BitArShift', name='bitArShift', category='Utility functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='bitExtract', return_types=['uint'], arguments=[FunctionArgument(name='var', argument_type='uint', default_value=None, optional=False), FunctionArgument(name='field', argument_type='int', default_value=None, optional=False), FunctionArgument(name='width', argument_type='int', default_value='1', optional=True)]), docs=FunctionDoc(description='This function returns the unsigned number formed by the bits field to field + width - 1 (range: 0-31).\n}}', arguments={'var': 'The value', 'field': 'The field number', 'width': 'Number of bits to extract'}, result='Returns the extracted value/bit sequence.'), oop=None, url=FunctionUrl(url='/wiki/BitExtract', name='bitExtract', category='Utility functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='bitExtract', return_types=['uint'], arguments=[FunctionArgument(name='var', argument_type='uint', default_value=None, optional=False), FunctionArgument(name='field', argument_type='int', default_value=None, optional=False), FunctionArgument(name='width', argument_type='int', default_value='1', optional=True)]), docs=FunctionDoc(description='This function returns the unsigned number formed by the bits field to field + width - 1 (range: 0-31).\n}}', arguments={'var': 'The value', 'field': 'The field number', 'width': 'Number of bits to extract'}, result='Returns the extracted value/bit sequence.'), oop=None, url=FunctionUrl(url='/wiki/BitExtract', name='bitExtract', category='Utility functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='bitReplace', return_types=['uint'], arguments=[FunctionArgument(name='var', argument_type='uint', default_value=None, optional=False), FunctionArgument(name='replaceValue', argument_type='uint', default_value=None, optional=False), FunctionArgument(name='field', argument_type='int', default_value=None, optional=False), FunctionArgument(name='width', argument_type='int', default_value='1', optional=False)]), docs=FunctionDoc(description='This function returns the unsigned number formed by var value with replacement specified at bits field to field + width - 1\n}}', arguments={'var': 'The value', 'replaceValue': 'The replaceValue', 'field': 'The field number', 'width': 'Number of bits to extract'}, result='Returns the replaced value/bit sequence.'), oop=None, url=FunctionUrl(url='/wiki/BitReplace', name='bitReplace', category='Utility functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='bitReplace', return_types=['uint'], arguments=[FunctionArgument(name='var', argument_type='uint', default_value=None, optional=False), FunctionArgument(name='replaceValue', argument_type='uint', default_value=None, optional=False), FunctionArgument(name='field', argument_type='int', default_value=None, optional=False), FunctionArgument(name='width', argument_type='int', default_value='1', optional=False)]), docs=FunctionDoc(description='This function returns the unsigned number formed by var value with replacement specified at bits field to field + width - 1\n}}', arguments={'var': 'The value', 'replaceValue': 'The replaceValue', 'field': 'The field number', 'width': 'Number of bits to extract'}, result='Returns the replaced value/bit sequence.'), oop=None, url=FunctionUrl(url='/wiki/BitReplace', name='bitReplace', category='Utility functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='debugSleep', return_types=['bool'], arguments=[FunctionArgument(name='sleep', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='[[debugSleep]] freezes the client/server for the specified time. This means that all synchronization, rendering and script execution will stop except HTTP processing invoked by [[fetchRemote]]. This function only works, if development mode is enabled by [[setDevelopmentMode]] and can be utilised to build a debugger that communicates via HTTP requests with the editor/IDE.', arguments={'sleep ': ': An integer value in milliseconds.'}, result="Returns ''true'' if the development mode is enabled and arguments are correct, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/DebugSleep', name='debugSleep', category='Utility functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='debugSleep', return_types=['bool'], arguments=[FunctionArgument(name='sleep', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='[[debugSleep]] freezes the client/server for the specified time. This means that all synchronization, rendering and script execution will stop except HTTP processing invoked by [[fetchRemote]]. This function only works, if development mode is enabled by [[setDevelopmentMode]] and can be utilised to build a debugger that communicates via HTTP requests with the editor/IDE.', arguments={'sleep ': ': An integer value in milliseconds.'}, result="Returns ''true'' if the development mode is enabled and arguments are correct, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/DebugSleep', name='debugSleep', category='Utility functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='decodeString', return_types=['string'], arguments=[FunctionArgument(name='algorithm', argument_type='string', default_value=None, optional=False), FunctionArgument(name='input', argument_type='string', default_value=None, optional=False), FunctionArgument(name='options', argument_type='table', default_value=None, optional=False), FunctionArgument(name='callback', argument_type='function', default_value=None, optional=True)]), docs=FunctionDoc(description='This function decodes an encoded [[string]] using the specified algorithm. The counterpart of this function is [[encodeString]].\n}}', arguments={'algorithm': 'The algorithm to use.', 'input': 'The input to decode.', 'options': 'A table with options and other neccessary data for the algorithm, as detailed below.'}, result="Returns the decoded string if successful, ''false'' otherwise. If a callback was provided, the decoded string is argument to the callback."), oop=None, url=FunctionUrl(url='/wiki/DecodeString', name='decodeString', category='Utility functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='decodeString', return_types=['string'], arguments=[FunctionArgument(name='algorithm', argument_type='string', default_value=None, optional=False), FunctionArgument(name='input', argument_type='string', default_value=None, optional=False), FunctionArgument(name='options', argument_type='table', default_value=None, optional=False), FunctionArgument(name='callback', argument_type='function', default_value=None, optional=True)]), docs=FunctionDoc(description='This function decodes an encoded [[string]] using the specified algorithm. The counterpart of this function is [[encodeString]].\n}}', arguments={'algorithm': 'The algorithm to use.', 'input': 'The input to decode.', 'options': 'A table with options and other neccessary data for the algorithm, as detailed below.'}, result="Returns the decoded string if successful, ''false'' otherwise. If a callback was provided, the decoded string is argument to the callback."), oop=None, url=FunctionUrl(url='/wiki/DecodeString', name='decodeString', category='Utility functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='encodeString', return_types=['string'], arguments=[FunctionArgument(name='algorithm', argument_type='string', default_value=None, optional=False), FunctionArgument(name='input', argument_type='string', default_value=None, optional=False), FunctionArgument(name='options', argument_type='table', default_value=None, optional=False), FunctionArgument(name='callback', argument_type='function', default_value=None, optional=True)]), docs=FunctionDoc(description='This function encodes a [[string]] using the specified algorithm. The counterpart of this function is [[decodeString]].\n}}', arguments={'algorithm': 'The algorithm to use.', 'input': 'The input to encode.', 'options': 'A table with options and other neccessary data for the algorithm, as detailed below.'}, result="Returns the encoded string if successful, ''false'' otherwise. If a callback was provided, ''true'' is returned immediately, and the encoded string is passed as an argument to the callback."), oop=None, url=FunctionUrl(url='/wiki/EncodeString', name='encodeString', category='Utility functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='encodeString', return_types=['string'], arguments=[FunctionArgument(name='algorithm', argument_type='string', default_value=None, optional=False), FunctionArgument(name='input', argument_type='string', default_value=None, optional=False), FunctionArgument(name='options', argument_type='table', default_value=None, optional=False), FunctionArgument(name='callback', argument_type='function', default_value=None, optional=True)]), docs=FunctionDoc(description='This function encodes a [[string]] using the specified algorithm. The counterpart of this function is [[decodeString]].\n}}', arguments={'algorithm': 'The algorithm to use.', 'input': 'The input to encode.', 'options': 'A table with options and other neccessary data for the algorithm, as detailed below.'}, result="Returns the encoded string if successful, ''false'' otherwise. If a callback was provided, ''true'' is returned immediately, and the encoded string is passed as an argument to the callback."), oop=None, url=FunctionUrl(url='/wiki/EncodeString', name='encodeString', category='Utility functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='fromJSON', return_types=['var'], arguments=[FunctionArgument(name='json', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='This function parses a [[JSON]] formatted string into variables. You can use [[toJSON]] to encode variables into a JSON string that can be read by this function.', arguments={'json': 'A JSON formatted string'}, result='Returns variables read from the JSON string.\n\'\'\'Note:\'\'\' Indices of a JSON object such as "1": "cat" are being returned as [[string]], not as [[int]]eger.'), oop=None, url=FunctionUrl(url='/wiki/FromJSON', name='fromJSON', category='Utility functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='fromJSON', return_types=['var'], arguments=[FunctionArgument(name='json', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='This function parses a [[JSON]] formatted string into variables. You can use [[toJSON]] to encode variables into a JSON string that can be read by this function.', arguments={'json': 'A JSON formatted string'}, result='Returns variables read from the JSON string.\n\'\'\'Note:\'\'\' Indices of a JSON object such as "1": "cat" are being returned as [[string]], not as [[int]]eger.'), oop=None, url=FunctionUrl(url='/wiki/FromJSON', name='fromJSON', category='Utility functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getColorFromString', return_types=['int,', 'int,', 'int,', 'int'], arguments=[FunctionArgument(name='theColor', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='This function will extract Red, Green, Blue and Alpha values from a hex string you provide it. These strings follow the same format as used in HTML, with addition of the Alpha values.', arguments={'theColor': 'A string containing a valid color code.\n:Valid strings are:', '#RRGGBB': ': Colors specified, Alpha assumed to be 255.', '#RRGGBBAA': ': All values specified.', '#RGB': ': Shortened form, will be expanded internally to RRGGBB, as such it provides a smaller number of colors.', '#RGBA': ': As above, shortened - each character is duplicated.\n:For example:', '#FF00FF': 'is Red: 255, Green: 0, Blue: 255, Alpha: 255', '#F0F': 'is Red: 255, Green: 0, Blue: 255, Alpha: 255 (the same as the example above)', '#34455699': 'is Red: 52, Green: 69, Blue: 86, Alpha: 153\nAll colors used must begin with a # sign.'}, result="Returns four integers in RGBA format, with a maximum value of 255 for each.  Each stands for ''red'', ''green'', ''blue'', and ''alpha''.  Alpha decides transparancy where 255 is opaque and 0 is transparent.  ''false'' is returned if the string passed is invalid (for example, is missing the preceeding # sign)."), oop=None, url=FunctionUrl(url='/wiki/GetColorFromString', name='getColorFromString', category='Utility functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getColorFromString', return_types=['int,', 'int,', 'int,', 'int'], arguments=[FunctionArgument(name='theColor', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='This function will extract Red, Green, Blue and Alpha values from a hex string you provide it. These strings follow the same format as used in HTML, with addition of the Alpha values.', arguments={'theColor': 'A string containing a valid color code.\n:Valid strings are:', '#RRGGBB': ': Colors specified, Alpha assumed to be 255.', '#RRGGBBAA': ': All values specified.', '#RGB': ': Shortened form, will be expanded internally to RRGGBB, as such it provides a smaller number of colors.', '#RGBA': ': As above, shortened - each character is duplicated.\n:For example:', '#FF00FF': 'is Red: 255, Green: 0, Blue: 255, Alpha: 255', '#F0F': 'is Red: 255, Green: 0, Blue: 255, Alpha: 255 (the same as the example above)', '#34455699': 'is Red: 52, Green: 69, Blue: 86, Alpha: 153\nAll colors used must begin with a # sign.'}, result="Returns four integers in RGBA format, with a maximum value of 255 for each.  Each stands for ''red'', ''green'', ''blue'', and ''alpha''.  Alpha decides transparancy where 255 is opaque and 0 is transparent.  ''false'' is returned if the string passed is invalid (for example, is missing the preceeding # sign)."), oop=None, url=FunctionUrl(url='/wiki/GetColorFromString', name='getColorFromString', category='Utility functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getDevelopmentMode', return_types=['bool'], arguments=[]), docs=FunctionDoc(description='This function is used to get the development mode of the client. For more information see [[setDevelopmentMode]]', arguments={}, result="Returns ''true'' if the development mode is on, ''false'' if off."), oop=None, url=FunctionUrl(url='/wiki/GetDevelopmentMode', name='getDevelopmentMode', category='Utility functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getDevelopmentMode', return_types=['bool'], arguments=[]), docs=FunctionDoc(description='This function is used to get the development mode of the client. For more information see [[setDevelopmentMode]]', arguments={}, result="Returns ''true'' if the development mode is on, ''false'' if off."), oop=None, url=FunctionUrl(url='/wiki/GetDevelopmentMode', name='getDevelopmentMode', category='Utility functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getDistanceBetweenPoints2D', return_types=['float'], arguments=[FunctionArgument(name='x1', argument_type='float', default_value=None, optional=False), FunctionArgument(name='y1', argument_type='float', default_value=None, optional=False), FunctionArgument(name='x2', argument_type='float', default_value=None, optional=False), FunctionArgument(name='y2', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns the distance between two 2 dimensional points using the pythagorean theorem.', arguments={'x1': ': The X position of the first point', 'y1': ': The Y position of the first point', 'x2': ': The X position of the second point', 'y2': ': The Y position of the second point'}, result="Returns a float containing the 2D distance between the two points. Returns ''false'' if invalid parameters are passed."), oop=None, url=FunctionUrl(url='/wiki/GetDistanceBetweenPoints2D', name='getDistanceBetweenPoints2D', category='Utility functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getDistanceBetweenPoints2D', return_types=['float'], arguments=[FunctionArgument(name='x1', argument_type='float', default_value=None, optional=False), FunctionArgument(name='y1', argument_type='float', default_value=None, optional=False), FunctionArgument(name='x2', argument_type='float', default_value=None, optional=False), FunctionArgument(name='y2', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns the distance between two 2 dimensional points using the pythagorean theorem.', arguments={'x1': ': The X position of the first point', 'y1': ': The Y position of the first point', 'x2': ': The X position of the second point', 'y2': ': The Y position of the second point'}, result="Returns a float containing the 2D distance between the two points. Returns ''false'' if invalid parameters are passed."), oop=None, url=FunctionUrl(url='/wiki/GetDistanceBetweenPoints2D', name='getDistanceBetweenPoints2D', category='Utility functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getDistanceBetweenPoints3D', return_types=['float'], arguments=[FunctionArgument(name='x1', argument_type='float', default_value=None, optional=False), FunctionArgument(name='y1', argument_type='float', default_value=None, optional=False), FunctionArgument(name='z1', argument_type='float', default_value=None, optional=False), FunctionArgument(name='x2', argument_type='float', default_value=None, optional=False), FunctionArgument(name='y2', argument_type='float', default_value=None, optional=False), FunctionArgument(name='z2', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns the distance between two 3 dimensional points using the pythagorean theorem.', arguments={'x1': ': The X position of the first point', 'y1': ': The Y position of the first point', 'z1': ': The Z position of the first point', 'x2': ': The X position of the second point', 'y2': ': The Y position of the second point', 'z2': ': The Z position of the second point'}, result="Returns a float containing the distance between the two points as a [[float]]. Returns ''false'' if an argument passed was invalid."), oop=None, url=FunctionUrl(url='/wiki/GetDistanceBetweenPoints3D', name='getDistanceBetweenPoints3D', category='Utility functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getDistanceBetweenPoints3D', return_types=['float'], arguments=[FunctionArgument(name='x1', argument_type='float', default_value=None, optional=False), FunctionArgument(name='y1', argument_type='float', default_value=None, optional=False), FunctionArgument(name='z1', argument_type='float', default_value=None, optional=False), FunctionArgument(name='x2', argument_type='float', default_value=None, optional=False), FunctionArgument(name='y2', argument_type='float', default_value=None, optional=False), FunctionArgument(name='z2', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns the distance between two 3 dimensional points using the pythagorean theorem.', arguments={'x1': ': The X position of the first point', 'y1': ': The Y position of the first point', 'z1': ': The Z position of the first point', 'x2': ': The X position of the second point', 'y2': ': The Y position of the second point', 'z2': ': The Z position of the second point'}, result="Returns a float containing the distance between the two points as a [[float]]. Returns ''false'' if an argument passed was invalid."), oop=None, url=FunctionUrl(url='/wiki/GetDistanceBetweenPoints3D', name='getDistanceBetweenPoints3D', category='Utility functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getEasingValue', return_types=['float'], arguments=[FunctionArgument(name='fProgress', argument_type='float', default_value=None, optional=False), FunctionArgument(name='strEasingType', argument_type='string', default_value=None, optional=False), FunctionArgument(name='fEasingPeriod', argument_type='float', default_value=None, optional=True), FunctionArgument(name='fEasingAmplitude', argument_type='float', default_value=None, optional=True), FunctionArgument(name='fEasingOvershoot', argument_type='float', default_value=None, optional=True)]), docs=FunctionDoc(description='Used for custom Lua based interpolation, returns the easing value (animation time to use in your custom interpolation) given a progress and an [[Easing|easing function]].\nIn most cases, either [[moveObject]] or [[interpolateBetween]] can do the job. getEasingValue is only provided in case you want to do your own custom interpolation based on easing.', arguments={'fProgress': 'float between 0 and 1 indicating the interpolation progress (0 at the beginning of the interpolation, 1 at the end).', 'strEasingType': 'the Easing|easing function to use for the interpolation', 'fEasingPeriod': 'the period of the Easing|easing function (only some easing functions use this parameter)', 'fEasingAmplitude': 'the amplitude of the Easing|easing function (only some easing functions use this parameter)', 'fEasingOvershoot': 'the overshoot of the Easing|easing function (only some easing functions use this parameter)'}, result="Returns ''fAnimationTime '' the animation time given by the easing function (can be < 0 or > 1 since some [[Easing|easing functions]] have overshoot or bounce/spring effects, ''false'' otherwise (error in parameters)."), oop=None, url=FunctionUrl(url='/wiki/GetEasingValue', name='getEasingValue', category='Utility functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getEasingValue', return_types=['float'], arguments=[FunctionArgument(name='fProgress', argument_type='float', default_value=None, optional=False), FunctionArgument(name='strEasingType', argument_type='string', default_value=None, optional=False), FunctionArgument(name='fEasingPeriod', argument_type='float', default_value=None, optional=True), FunctionArgument(name='fEasingAmplitude', argument_type='float', default_value=None, optional=True), FunctionArgument(name='fEasingOvershoot', argument_type='float', default_value=None, optional=True)]), docs=FunctionDoc(description='Used for custom Lua based interpolation, returns the easing value (animation time to use in your custom interpolation) given a progress and an [[Easing|easing function]].\nIn most cases, either [[moveObject]] or [[interpolateBetween]] can do the job. getEasingValue is only provided in case you want to do your own custom interpolation based on easing.', arguments={'fProgress': 'float between 0 and 1 indicating the interpolation progress (0 at the beginning of the interpolation, 1 at the end).', 'strEasingType': 'the Easing|easing function to use for the interpolation', 'fEasingPeriod': 'the period of the Easing|easing function (only some easing functions use this parameter)', 'fEasingAmplitude': 'the amplitude of the Easing|easing function (only some easing functions use this parameter)', 'fEasingOvershoot': 'the overshoot of the Easing|easing function (only some easing functions use this parameter)'}, result="Returns ''fAnimationTime '' the animation time given by the easing function (can be < 0 or > 1 since some [[Easing|easing functions]] have overshoot or bounce/spring effects, ''false'' otherwise (error in parameters)."), oop=None, url=FunctionUrl(url='/wiki/GetEasingValue', name='getEasingValue', category='Utility functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getFPSLimit', return_types=['int'], arguments=[]), docs=FunctionDoc(description='This function retrieves the maximum [http://en.wikipedia.org/wiki/Frame_rate FPS (Frames per second)] that players on the server can run their game at.  ', arguments={}, result="Returns an integer between '''25''' and '''100''' of the maximum FPS that players can run their game at."), oop=None, url=FunctionUrl(url='/wiki/GetFPSLimit', name='getFPSLimit', category='Utility functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getFPSLimit', return_types=['int'], arguments=[]), docs=FunctionDoc(description='This function retrieves the maximum [http://en.wikipedia.org/wiki/Frame_rate FPS (Frames per second)] that players on the server can run their game at.  ', arguments={}, result="Returns an integer between '''25''' and '''100''' of the maximum FPS that players can run their game at."), oop=None, url=FunctionUrl(url='/wiki/GetFPSLimit', name='getFPSLimit', category='Utility functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getNetworkStats', return_types=['table'], arguments=[FunctionArgument(name='thePlayer', argument_type='element', default_value='nil', optional=False)]), docs=FunctionDoc(description='This function returns network status information.', arguments={}, result="Returns a table, the indexes in the table are the following:\n* '''bytesReceived''' - Total number of bytes received since the connection was started\n* '''bytesSent''' - Total number of bytes sent since the connection was started\n* '''packetsReceived''' - Total number of packets received since the connection was started\n* '''packetsSent''' - Total number of packets sent since the connection was started\n* '''packetlossTotal''' - (0-100) Total packet loss percentage of sent data, since the connection was started\n* '''packetlossLastSecond''' - (0-100) Packet loss percentage of sent data, during the previous second\n* '''messagesInSendBuffer'''\n* '''messagesInResendBuffer''' - Number of packets queued to be resent (due to packet loss)\n* '''isLimitedByCongestionControl'''\n* '''isLimitedByOutgoingBandwidthLimit'''\n* '''encryptionStatus'''"), oop=None, url=FunctionUrl(url='/wiki/GetNetworkStats', name='getNetworkStats', category='Utility functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getNetworkStats', return_types=['table'], arguments=[]), docs=FunctionDoc(description='This function returns network status information.', arguments={}, result="Returns a table, the indexes in the table are the following:\n* '''bytesReceived''' - Total number of bytes received since the connection was started\n* '''bytesSent''' - Total number of bytes sent since the connection was started\n* '''packetsReceived''' - Total number of packets received since the connection was started\n* '''packetsSent''' - Total number of packets sent since the connection was started\n* '''packetlossTotal''' - (0-100) Total packet loss percentage of sent data, since the connection was started\n* '''packetlossLastSecond''' - (0-100) Packet loss percentage of sent data, during the previous second\n* '''messagesInSendBuffer'''\n* '''messagesInResendBuffer''' - Number of packets queued to be resent (due to packet loss)\n* '''isLimitedByCongestionControl'''\n* '''isLimitedByOutgoingBandwidthLimit'''\n* '''encryptionStatus'''"), oop=None, url=FunctionUrl(url='/wiki/GetNetworkStats', name='getNetworkStats', category='Utility functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getNetworkUsageData', return_types=['table'], arguments=[]), docs=FunctionDoc(description='This function returns a [[table]] containing network usage information about inbound and outbound packets.', arguments={}, result='Returns a [[table]] with two fields: "in" and "out". Each of these contain a table with two fields: "bits" and "count". Each of these contain a table with 256 numeric fields ranging from 0 to 255, containing the appropriate network usage data for such packet id.'), oop=None, url=FunctionUrl(url='/wiki/GetNetworkUsageData', name='getNetworkUsageData', category='Utility functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getNetworkUsageData', return_types=['table'], arguments=[]), docs=FunctionDoc(description='This function returns a [[table]] containing network usage information about inbound and outbound packets.', arguments={}, result='Returns a [[table]] with two fields: "in" and "out". Each of these contain a table with two fields: "bits" and "count". Each of these contain a table with 256 numeric fields ranging from 0 to 255, containing the appropriate network usage data for such packet id.'), oop=None, url=FunctionUrl(url='/wiki/GetNetworkUsageData', name='getNetworkUsageData', category='Utility functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getPerformanceStats', return_types=['table', 'table'], arguments=[FunctionArgument(name='category', argument_type='string', default_value=None, optional=False), FunctionArgument(name='options', argument_type='string', default_value='""', optional=True), FunctionArgument(name='filter', argument_type='string', default_value='""', optional=True)]), docs=FunctionDoc(description='This function returns performance information.', arguments={'category': 'Performance statistics category. If empty string is given, list of all categories is returned.See categories for more information.', 'options': 'Category specific , separated options. All categories supports h option for help.', 'filter': 'Case-sensitive filter used to select returned rows. Only name column is filtered.'}, result='Returns two tables. First contains column names. The second contains result rows. Each row is table of cells.'), oop=None, url=FunctionUrl(url='/wiki/GetPerformanceStats', name='getPerformanceStats', category='Utility functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getPerformanceStats', return_types=['table', 'table'], arguments=[FunctionArgument(name='category', argument_type='string', default_value=None, optional=False), FunctionArgument(name='options', argument_type='string', default_value='""', optional=True), FunctionArgument(name='filter', argument_type='string', default_value='""', optional=True)]), docs=FunctionDoc(description='This function returns performance information.', arguments={'category': 'Performance statistics category. If empty string is given, list of all categories is returned.See categories for more information.', 'options': 'Category specific , separated options. All categories supports h option for help.', 'filter': 'Case-sensitive filter used to select returned rows. Only name column is filtered.'}, result='Returns two tables. First contains column names. The second contains result rows. Each row is table of cells.'), oop=None, url=FunctionUrl(url='/wiki/GetPerformanceStats', name='getPerformanceStats', category='Utility functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getRealTime', return_types=['table'], arguments=[FunctionArgument(name='seconds', argument_type='int', default_value='current', optional=False), FunctionArgument(name='localTime', argument_type='bool', default_value='true', optional=False)]), docs=FunctionDoc(description="This function gets the server or client (if used client sided it returns time as set on client's computer) real time and returns it in a table. If you want to get the in-game time (shown on GTA's clock) use [[getTime]].", arguments={'seconds': 'A count in seconds from the year 1970.  Useful for storing points in time, or for retrieving time information for getBanTime. The valid range of this argument is 0 to 32,000,000,000\n{{New feature/item|3.0141|1.4.1|6976|', 'localTime': 'Set to true to adjust for the locally set timezone.\n}}'}, result='Returns a \'\'table\'\' of substrings with different time format or \'\'false\'\' if the \'\'\'seconds\'\'\' argument is out of range.\n{| border="2" cellpadding="2" cellspacing="0" style="margin: 1em 1em 1em 0; background: #f9f9f9; border: 1px #aaa solid; border-collapse: collapse; font-size: 95%;"\n|\'\'\'Member\'\'\'\n|\'\'\'Meaning\'\'\'\n|\'\'\'Range\'\'\'\n|-\n|second\n|seconds after the minute\n|0-61*\n|-\n|minute\n|minutes after the hour\n|0-59\n|-\n|hour\n|hours since midnight\n|0-23\n|-\n|monthday\n|day of the month\n|1-31\n|-\n|month\n|months since January\n|0-11\n|-\n|year\n|years since 1900\n|-\n|weekday\n|days since Sunday\n|0-6\n|-\n|yearday\n|days since January 1\n|0-365\n|-\n|isdst\n|Daylight Saving Time flag\n|-\n|timestamp\n|seconds since 1970 (Ignoring set timezone)\n|\n|}\n\'\'* second\'\' is generally 0-59. Extra range to accommodate for leap seconds in certain systems.'), oop=None, url=FunctionUrl(url='/wiki/GetRealTime', name='getRealTime', category='Utility functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getRealTime', return_types=['table'], arguments=[FunctionArgument(name='seconds', argument_type='int', default_value='current', optional=False), FunctionArgument(name='localTime', argument_type='bool', default_value='true', optional=False)]), docs=FunctionDoc(description="This function gets the server or client (if used client sided it returns time as set on client's computer) real time and returns it in a table. If you want to get the in-game time (shown on GTA's clock) use [[getTime]].", arguments={'seconds': 'A count in seconds from the year 1970.  Useful for storing points in time, or for retrieving time information for getBanTime. The valid range of this argument is 0 to 32,000,000,000\n{{New feature/item|3.0141|1.4.1|6976|', 'localTime': 'Set to true to adjust for the locally set timezone.\n}}'}, result='Returns a \'\'table\'\' of substrings with different time format or \'\'false\'\' if the \'\'\'seconds\'\'\' argument is out of range.\n{| border="2" cellpadding="2" cellspacing="0" style="margin: 1em 1em 1em 0; background: #f9f9f9; border: 1px #aaa solid; border-collapse: collapse; font-size: 95%;"\n|\'\'\'Member\'\'\'\n|\'\'\'Meaning\'\'\'\n|\'\'\'Range\'\'\'\n|-\n|second\n|seconds after the minute\n|0-61*\n|-\n|minute\n|minutes after the hour\n|0-59\n|-\n|hour\n|hours since midnight\n|0-23\n|-\n|monthday\n|day of the month\n|1-31\n|-\n|month\n|months since January\n|0-11\n|-\n|year\n|years since 1900\n|-\n|weekday\n|days since Sunday\n|0-6\n|-\n|yearday\n|days since January 1\n|0-365\n|-\n|isdst\n|Daylight Saving Time flag\n|-\n|timestamp\n|seconds since 1970 (Ignoring set timezone)\n|\n|}\n\'\'* second\'\' is generally 0-59. Extra range to accommodate for leap seconds in certain systems.'), oop=None, url=FunctionUrl(url='/wiki/GetRealTime', name='getRealTime', category='Utility functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getTickCount', return_types=['int'], arguments=[]), docs=FunctionDoc(description='This function returns amount of time that your system has been running in milliseconds. By comparing two values of [[getTickCount]], you can determine how much time has passed (in milliseconds) between two events. This could be used to determine how efficient your code is, or to time how long a player takes to complete a task.', arguments={}, result='Returns an integer containing the number of milliseconds since the system the server is running on started. This has the potential to wrap-around.'), oop=None, url=FunctionUrl(url='/wiki/GetTickCount', name='getTickCount', category='Utility functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getTickCount', return_types=['int'], arguments=[]), docs=FunctionDoc(description='This function returns amount of time that your system has been running in milliseconds. By comparing two values of [[getTickCount]], you can determine how much time has passed (in milliseconds) between two events. This could be used to determine how efficient your code is, or to time how long a player takes to complete a task.', arguments={}, result='Returns an integer containing the number of milliseconds since the system the server is running on started. This has the potential to wrap-around.'), oop=None, url=FunctionUrl(url='/wiki/GetTickCount', name='getTickCount', category='Utility functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getTimers', return_types=['table'], arguments=[FunctionArgument(name='theTime', argument_type='int', default_value='nil', optional=False)]), docs=FunctionDoc(description='This function returns a table of all active timers that the resource that calls it has created. Alternatively, only the timers with a remaining time less than or equal to a certain value can be retrieved.', arguments={'theTime': 'The maximum time left (in milliseconds) on the timers you wish to retrieve.'}, result='Returns a table of all the active timers.'), oop=None, url=FunctionUrl(url='/wiki/GetTimers', name='getTimers', category='Utility functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getTimers', return_types=['table'], arguments=[FunctionArgument(name='theTime', argument_type='int', default_value='nil', optional=False)]), docs=FunctionDoc(description='This function returns a table of all active timers that the resource that calls it has created. Alternatively, only the timers with a remaining time less than or equal to a certain value can be retrieved.', arguments={'theTime': 'The maximum time left (in milliseconds) on the timers you wish to retrieve.'}, result='Returns a table of all the active timers.'), oop=None, url=FunctionUrl(url='/wiki/GetTimers', name='getTimers', category='Utility functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getTimerDetails', return_types=['int,', 'int,', 'int'], arguments=[FunctionArgument(name='theTimer', argument_type='timer', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is for getting the details of a running timer.', arguments={'theTimer': 'A timer element.'}, result='* Integer one represents the time left in miliseconds (1000th of a second) of the current time left in the loop.\n* Integer two represents the amount of times the timer has left to execute.\n* Integer three represents the time interval of timer.\n* Returns false if the timer doesn\'t exist or stopped running. Also, debugscript will say "Bad Argument @ \'getTimerDetails\'". To prevent this, you can check if the timer exists with [[isTimer]]().'), oop=FunctionOOP(class_name='timer', method_name='getDetails', field=None), url=FunctionUrl(url='/wiki/GetTimerDetails', name='getTimerDetails', category='Utility functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getTimerDetails', return_types=['int,', 'int,', 'int'], arguments=[FunctionArgument(name='theTimer', argument_type='timer', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is for getting the details of a running timer.', arguments={'theTimer': 'A timer element.'}, result='* Integer one represents the time left in miliseconds (1000th of a second) of the current time left in the loop.\n* Integer two represents the amount of times the timer has left to execute.\n* Integer three represents the time interval of timer.\n* Returns false if the timer doesn\'t exist or stopped running. Also, debugscript will say "Bad Argument @ \'getTimerDetails\'". To prevent this, you can check if the timer exists with [[isTimer]]().'), oop=FunctionOOP(class_name='timer', method_name='getDetails', field=None), url=FunctionUrl(url='/wiki/GetTimerDetails', name='getTimerDetails', category='Utility functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='gettok', return_types=['string'], arguments=[FunctionArgument(name='text', argument_type='string', default_value=None, optional=False), FunctionArgument(name='tokenNumber', argument_type='int', default_value=None, optional=False), FunctionArgument(name='int', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='This function splits a string using the given separating character and returns one specified substring.', arguments={'text': 'the string that should be split.', 'tokenNumber': 'which token should be returned (1 for the first, 2 for the second, and so on).', 'separatingCharacter': 'the ASCII|ASCII number representing the character you want to use to separate the tokens. You can easily retrieve this by running string.byte on a string containing the separating character.'}, result="Returns a [[string]] containing the token if it exists, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/Gettok', name='gettok', category='Utility functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='gettok', return_types=['string'], arguments=[FunctionArgument(name='text', argument_type='string', default_value=None, optional=False), FunctionArgument(name='tokenNumber', argument_type='int', default_value=None, optional=False), FunctionArgument(name='int', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='This function splits a string using the given separating character and returns one specified substring.', arguments={'text': 'the string that should be split.', 'tokenNumber': 'which token should be returned (1 for the first, 2 for the second, and so on).', 'separatingCharacter': 'the ASCII|ASCII number representing the character you want to use to separate the tokens. You can easily retrieve this by running string.byte on a string containing the separating character.'}, result="Returns a [[string]] containing the token if it exists, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/Gettok', name='gettok', category='Utility functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getUserdataType', return_types=['string'], arguments=[FunctionArgument(name='value', argument_type='userdata', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'value': ': A userdata value to get the type of. Userdata types can be:', 'Shared': '', 'resource-data': ': a Resource|resource pointer.', 'xml-node': ': a Xmlnode|XML node.', 'lua-timer': ': a timer.', 'vector2': ': a 2D vector, used in the Vector/Vector2|Vector2 class.', 'vector3': ': a 3D vector, used in the Vector/Vector3|Vector3 class.', 'vector4': ': a 4D vector, used in the Vector/Vector4|Vector4 class.', 'matrix': ': a matrix, used in the Matrix class.', 'userdata': ': a fallback userdata type return value, when no other type could be found for the object.', 'Server only': '', 'account': ': a Account|player account.', 'db-query': ': a dbQuery|database query handle.', 'acl': ': an ACL|ACL entry.', 'acl-group': ': an Aclgroup|ACL group.', 'ban': ': a Ban|player ban.', 'text-item': ': a Textitem|text display item.', 'text-display': ": a Textdisplay|text display item.\n<!-- I don't think that this userdata type is used in current MTA versions. According to the source, is serverside only.\n     Source code commit: https://github.com/multitheftauto/mtasa-blue/commit/df8576fc3f80fa2d7a73e70a68e8f116b591cb68#diff-09a3546021ff952dc0f94a99aae11356R297", 'weapon': ': a Weapon|custom weapon.\n-->'}, result="Returns a [[string]] containing the specified userdata's type, or ''false'' plus an error message if the given value is not userdata."), oop=None, url=FunctionUrl(url='/wiki/GetUserdataType', name='getUserdataType', category='Utility functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getUserdataType', return_types=['string'], arguments=[FunctionArgument(name='value', argument_type='userdata', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'value': ': A userdata value to get the type of. Userdata types can be:', 'Shared': '', 'resource-data': ': a Resource|resource pointer.', 'xml-node': ': a Xmlnode|XML node.', 'lua-timer': ': a timer.', 'vector2': ': a 2D vector, used in the Vector/Vector2|Vector2 class.', 'vector3': ': a 3D vector, used in the Vector/Vector3|Vector3 class.', 'vector4': ': a 4D vector, used in the Vector/Vector4|Vector4 class.', 'matrix': ': a matrix, used in the Matrix class.', 'userdata': ': a fallback userdata type return value, when no other type could be found for the object.', 'Server only': '', 'account': ': a Account|player account.', 'db-query': ': a dbQuery|database query handle.', 'acl': ': an ACL|ACL entry.', 'acl-group': ': an Aclgroup|ACL group.', 'ban': ': a Ban|player ban.', 'text-item': ': a Textitem|text display item.', 'text-display': ": a Textdisplay|text display item.\n<!-- I don't think that this userdata type is used in current MTA versions. According to the source, is serverside only.\n     Source code commit: https://github.com/multitheftauto/mtasa-blue/commit/df8576fc3f80fa2d7a73e70a68e8f116b591cb68#diff-09a3546021ff952dc0f94a99aae11356R297", 'weapon': ': a Weapon|custom weapon.\n-->'}, result="Returns a [[string]] containing the specified userdata's type, or ''false'' plus an error message if the given value is not userdata."), oop=None, url=FunctionUrl(url='/wiki/GetUserdataType', name='getUserdataType', category='Utility functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getVersion', return_types=['table'], arguments=[]), docs=FunctionDoc(description='This function gives you various version information about MTA and the operating system.', arguments={}, result='Returns a table with version information. Specifically these keys are present in the table:\n*\'\'\'number:\'\'\' the MTA server or client version (depending where the function was called) in pure numerical form, e.g. \'\'"256"\'\'\n*\'\'\'mta:\'\'\' the MTA server or client version (depending where the function was called) in textual form, e.g. \'\'"1.0"\'\'\n*\'\'\'name:\'\'\' the full MTA product name, either \'\'"MTA:SA Server"\'\' or \'\'"MTA:SA Client"\'\'.\n*\'\'\'netcode:\'\'\' the netcode version number.\n*\'\'\'os:\'\'\' returns the operating system on which the server or client is running\n*\'\'\'type:\'\'\' the type of build.  can be:\n**\'\'\'"Nightly rX"\'\'\' - A nightly development build.  \'\'\'X\'\'\' represents the nightly build revision.\n**\'\'\'"Custom"\'\'\' - A build compiled manually\n**\'\'\'"Release"\'\'\' - A build that is publicly released (provisional).\n*\'\'\'tag:\'\'\' the build tag (from 1.0.3 onwards). Contains infomation about the underlying version used. i.e. The final version of 1.0.3 has the build tag of "1.0.3 rc-9". (This can be confirmed by using the console command \'ver\'.)\n*\'\'\'sortable:\'\'\' a 15 character sortable version string (from 1.0.4 onwards). Format of the string is described in [[getPlayerVersion]].'), oop=None, url=FunctionUrl(url='/wiki/GetVersion', name='getVersion', category='Utility functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getVersion', return_types=['table'], arguments=[]), docs=FunctionDoc(description='This function gives you various version information about MTA and the operating system.', arguments={}, result='Returns a table with version information. Specifically these keys are present in the table:\n*\'\'\'number:\'\'\' the MTA server or client version (depending where the function was called) in pure numerical form, e.g. \'\'"256"\'\'\n*\'\'\'mta:\'\'\' the MTA server or client version (depending where the function was called) in textual form, e.g. \'\'"1.0"\'\'\n*\'\'\'name:\'\'\' the full MTA product name, either \'\'"MTA:SA Server"\'\' or \'\'"MTA:SA Client"\'\'.\n*\'\'\'netcode:\'\'\' the netcode version number.\n*\'\'\'os:\'\'\' returns the operating system on which the server or client is running\n*\'\'\'type:\'\'\' the type of build.  can be:\n**\'\'\'"Nightly rX"\'\'\' - A nightly development build.  \'\'\'X\'\'\' represents the nightly build revision.\n**\'\'\'"Custom"\'\'\' - A build compiled manually\n**\'\'\'"Release"\'\'\' - A build that is publicly released (provisional).\n*\'\'\'tag:\'\'\' the build tag (from 1.0.3 onwards). Contains infomation about the underlying version used. i.e. The final version of 1.0.3 has the build tag of "1.0.3 rc-9". (This can be confirmed by using the console command \'ver\'.)\n*\'\'\'sortable:\'\'\' a 15 character sortable version string (from 1.0.4 onwards). Format of the string is described in [[getPlayerVersion]].'), oop=None, url=FunctionUrl(url='/wiki/GetVersion', name='getVersion', category='Utility functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='hash', return_types=['string'], arguments=[FunctionArgument(name='algorithm', argument_type='string', default_value=None, optional=False), FunctionArgument(name='dataToHash', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns a hash of the specified string in the specified algorithm.\n}}', arguments={'algorithm': ': A string which must be one of these: md5, sha1, sha224, sha256, sha384, sha512', 'dataToHash': ': A string of the data to hash.'}, result='Returns the hash of the data, false if an invalid argument was used.'), oop=None, url=FunctionUrl(url='/wiki/Hash', name='hash', category='Utility functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='hash', return_types=['string'], arguments=[FunctionArgument(name='algorithm', argument_type='string', default_value=None, optional=False), FunctionArgument(name='dataToHash', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns a hash of the specified string in the specified algorithm.\n}}', arguments={'algorithm': ': A string which must be one of these: md5, sha1, sha224, sha256, sha384, sha512', 'dataToHash': ': A string of the data to hash.'}, result='Returns the hash of the data, false if an invalid argument was used.'), oop=None, url=FunctionUrl(url='/wiki/Hash', name='hash', category='Utility functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='inspect', return_types=['string'], arguments=[FunctionArgument(name='var', argument_type='mixed', default_value=None, optional=False), FunctionArgument(name='options', argument_type='table', default_value=None, optional=True)]), docs=FunctionDoc(description='This function returns human-readable representations of tables and MTA datatypes as a string.\n}}', arguments={'var': 'A variable of any datatype.', 'options': 'A table of options. It is not mandatory, but when it is provided, it must be a table. For a list of options, see the https://github.com/kikito/inspect.lua#options Inspects GitHub page.'}, result='Always returns a string. The contents can change if we update the inspect library, so it is not expected to be consistent across Lua versions.'), oop=None, url=FunctionUrl(url='/wiki/Inspect', name='inspect', category='Utility functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='inspect', return_types=['string'], arguments=[FunctionArgument(name='var', argument_type='mixed', default_value=None, optional=False), FunctionArgument(name='options', argument_type='table', default_value=None, optional=True)]), docs=FunctionDoc(description='This function returns human-readable representations of tables and MTA datatypes as a string.\n}}', arguments={'var': 'A variable of any datatype.', 'options': 'A table of options. It is not mandatory, but when it is provided, it must be a table. For a list of options, see the https://github.com/kikito/inspect.lua#options Inspects GitHub page.'}, result='Always returns a string. The contents can change if we update the inspect library, so it is not expected to be consistent across Lua versions.'), oop=None, url=FunctionUrl(url='/wiki/Inspect', name='inspect', category='Utility functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='interpolateBetween', return_types=['float', 'float', 'float'], arguments=[FunctionArgument(name='x1', argument_type='float', default_value=None, optional=False), FunctionArgument(name='y1', argument_type='float', default_value=None, optional=False), FunctionArgument(name='z1', argument_type='float', default_value=None, optional=False), FunctionArgument(name='x2', argument_type='float', default_value=None, optional=False), FunctionArgument(name='y2', argument_type='float', default_value=None, optional=False), FunctionArgument(name='z2', argument_type='float', default_value=None, optional=False), FunctionArgument(name='fProgress', argument_type='float', default_value=None, optional=False), FunctionArgument(name='strEasingType', argument_type='string', default_value=None, optional=False), FunctionArgument(name='fEasingPeriod', argument_type='float', default_value=None, optional=False), FunctionArgument(name='fEasingAmplitude', argument_type='float', default_value=None, optional=False), FunctionArgument(name='fEasingOvershoot', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='Interpolates a 3D Vector between a source value and a target value using either linear interpolation or any other [[Easing|easing function]].\nIt can also be used to interpolate 2D vectors or scalars by only setting some of the x, y, z values and putting 0 to the others.', arguments={'x1, y1, z1': '3D coordinates of source vector/value', 'x2, y2, z2': '3D coordinates of target vector/value', 'fProgress': 'float between 0 and 1 indicating the interpolation progress (0 at the beginning of the interpolation, 1 at the end). If it is higher than 1, it will start from the beginning.', 'strEasingType': 'the Easing|easing function to use for the interpolation', 'fEasingPeriod': 'the period of the Easing|easing function (only some easing functions use this parameter)', 'fEasingAmplitude': 'the amplitude of the Easing|easing function (only some easing functions use this parameter)', 'fEasingOvershoot': 'the overshoot of the Easing|easing function (only some easing functions use this parameter)'}, result="Returns ''x, y, z'' the interpolated 3D vector/value if successful, ''false'' otherwise (error in parameters).\nAs mentioned before, interpolateBetween can be used on 2D vectors or scalars in which case only some (x, y or just x) of the returned values are to be used (cf. alpha interpolation in marker example or size interpolation in window example)."), oop=None, url=FunctionUrl(url='/wiki/InterpolateBetween', name='interpolateBetween', category='Utility functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='interpolateBetween', return_types=['float', 'float', 'float'], arguments=[FunctionArgument(name='x1', argument_type='float', default_value=None, optional=False), FunctionArgument(name='y1', argument_type='float', default_value=None, optional=False), FunctionArgument(name='z1', argument_type='float', default_value=None, optional=False), FunctionArgument(name='x2', argument_type='float', default_value=None, optional=False), FunctionArgument(name='y2', argument_type='float', default_value=None, optional=False), FunctionArgument(name='z2', argument_type='float', default_value=None, optional=False), FunctionArgument(name='fProgress', argument_type='float', default_value=None, optional=False), FunctionArgument(name='strEasingType', argument_type='string', default_value=None, optional=False), FunctionArgument(name='fEasingPeriod', argument_type='float', default_value=None, optional=False), FunctionArgument(name='fEasingAmplitude', argument_type='float', default_value=None, optional=False), FunctionArgument(name='fEasingOvershoot', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='Interpolates a 3D Vector between a source value and a target value using either linear interpolation or any other [[Easing|easing function]].\nIt can also be used to interpolate 2D vectors or scalars by only setting some of the x, y, z values and putting 0 to the others.', arguments={'x1, y1, z1': '3D coordinates of source vector/value', 'x2, y2, z2': '3D coordinates of target vector/value', 'fProgress': 'float between 0 and 1 indicating the interpolation progress (0 at the beginning of the interpolation, 1 at the end). If it is higher than 1, it will start from the beginning.', 'strEasingType': 'the Easing|easing function to use for the interpolation', 'fEasingPeriod': 'the period of the Easing|easing function (only some easing functions use this parameter)', 'fEasingAmplitude': 'the amplitude of the Easing|easing function (only some easing functions use this parameter)', 'fEasingOvershoot': 'the overshoot of the Easing|easing function (only some easing functions use this parameter)'}, result="Returns ''x, y, z'' the interpolated 3D vector/value if successful, ''false'' otherwise (error in parameters).\nAs mentioned before, interpolateBetween can be used on 2D vectors or scalars in which case only some (x, y or just x) of the returned values are to be used (cf. alpha interpolation in marker example or size interpolation in window example)."), oop=None, url=FunctionUrl(url='/wiki/InterpolateBetween', name='interpolateBetween', category='Utility functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='iprint', return_types=['bool'], arguments=[FunctionArgument(name='var1', argument_type='mixed', default_value=None, optional=False), FunctionArgument(name='var2', argument_type='mixed', default_value=None, optional=True), FunctionArgument(name='...args', argument_type='any[]', default_value=None, optional=True)]), docs=FunctionDoc(description="This function intelligently outputs debug messages into the Debug Console.  It is similar to [[outputDebugString]], but outputs useful information for '''any''' variable type, and does not require use of Lua's tostring.  This includes information about element types, and table structures.  It is especially useful for quick debug tasks.\n}}", arguments={'var1': 'A variable of any type to print intelligent information for.\n{{OptionalArg}} ', 'var2+': 'Another variable to be output.  An unlimited number of arguments can be supplied'}, result="Always returns ''nil''."), oop=None, url=FunctionUrl(url='/wiki/Iprint', name='iprint', category='Utility functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='iprint', return_types=['bool'], arguments=[FunctionArgument(name='var1', argument_type='mixed', default_value=None, optional=False), FunctionArgument(name='var2', argument_type='mixed', default_value=None, optional=True), FunctionArgument(name='...args', argument_type='any[]', default_value=None, optional=True)]), docs=FunctionDoc(description="This function intelligently outputs debug messages into the Debug Console.  It is similar to [[outputDebugString]], but outputs useful information for '''any''' variable type, and does not require use of Lua's tostring.  This includes information about element types, and table structures.  It is especially useful for quick debug tasks.\n}}", arguments={'var1': 'A variable of any type to print intelligent information for.\n{{OptionalArg}} ', 'var2+': 'Another variable to be output.  An unlimited number of arguments can be supplied'}, result="Always returns ''nil''."), oop=None, url=FunctionUrl(url='/wiki/Iprint', name='iprint', category='Utility functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='isOOPEnabled', return_types=['bool'], arguments=[]), docs=FunctionDoc(description='', arguments={}, result="Returns ''true'' or ''false'' if ''[[OOP]]'' is enabled or not. Returns ''nil'' if an error arised."), oop=None, url=FunctionUrl(url='/wiki/IsOOPEnabled', name='isOOPEnabled', category='Utility functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='isOOPEnabled', return_types=['bool'], arguments=[]), docs=FunctionDoc(description='', arguments={}, result="Returns ''true'' or ''false'' if ''[[OOP]]'' is enabled or not. Returns ''nil'' if an error arised."), oop=None, url=FunctionUrl(url='/wiki/IsOOPEnabled', name='isOOPEnabled', category='Utility functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='isTimer', return_types=['bool'], arguments=[FunctionArgument(name='theTimer', argument_type='timer', default_value=None, optional=False)]), docs=FunctionDoc(description='This function checks if a variable is a [[timer]].', arguments={'theTimer': ': The variable that we want to check.'}, result="Returns ''true'' if the passed value is a timer, ''false'' otherwise."), oop=FunctionOOP(class_name='timer', method_name='isValid', field='valid'), url=FunctionUrl(url='/wiki/IsTimer', name='isTimer', category='Utility functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='isTimer', return_types=['bool'], arguments=[FunctionArgument(name='theTimer', argument_type='timer', default_value=None, optional=False)]), docs=FunctionDoc(description='This function checks if a variable is a [[timer]].', arguments={'theTimer': ': The variable that we want to check.'}, result="Returns ''true'' if the passed value is a timer, ''false'' otherwise."), oop=FunctionOOP(class_name='timer', method_name='isValid', field='valid'), url=FunctionUrl(url='/wiki/IsTimer', name='isTimer', category='Utility functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='isTransferBoxVisible', return_types=['bool'], arguments=[]), docs=FunctionDoc(description='', arguments={}, result="On '''server''' this returns a boolean, whether the transfer box should be visible during downloads or not.\nOn '''client''' this returns a boolean, whether the transfer box should be visible or not at the time of invocation."), oop=None, url=FunctionUrl(url='/wiki/IsTransferBoxVisible', name='isTransferBoxVisible', category='Utility functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='isTransferBoxVisible', return_types=['bool'], arguments=[]), docs=FunctionDoc(description='', arguments={}, result="On '''server''' this returns a boolean, whether the transfer box should be visible during downloads or not.\nOn '''client''' this returns a boolean, whether the transfer box should be visible or not at the time of invocation."), oop=None, url=FunctionUrl(url='/wiki/IsTransferBoxVisible', name='isTransferBoxVisible', category='Utility functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='killTimer', return_types=['bool'], arguments=[FunctionArgument(name='theTimer', argument_type='timer', default_value=None, optional=False)]), docs=FunctionDoc(description='This function allows you to kill/halt existing timers.', arguments={'theTimer': 'The timer you wish to halt.'}, result="Returns ''true'' if the timer was successfully killed, ''false'' if no such timer existed."), oop=FunctionOOP(class_name='timer', method_name='destroy', field=None), url=FunctionUrl(url='/wiki/KillTimer', name='killTimer', category='Utility functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='killTimer', return_types=['bool'], arguments=[FunctionArgument(name='theTimer', argument_type='timer', default_value=None, optional=False)]), docs=FunctionDoc(description='This function allows you to kill/halt existing timers.', arguments={'theTimer': 'The timer you wish to halt.'}, result="Returns ''true'' if the timer was successfully killed, ''false'' if no such timer existed."), oop=FunctionOOP(class_name='timer', method_name='destroy', field=None), url=FunctionUrl(url='/wiki/KillTimer', name='killTimer', category='Utility functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='md5', return_types=['string'], arguments=[FunctionArgument(name='str', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='Calculates the MD5 hash of the specified string and returns its hexadecimal representation.', arguments={'str': 'the string to hash.'}, result="Returns the MD5 hash of the input string if successful, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/Md5', name='md5', category='Utility functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='md5', return_types=['string'], arguments=[FunctionArgument(name='str', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='Calculates the MD5 hash of the specified string and returns its hexadecimal representation.', arguments={'str': 'the string to hash.'}, result="Returns the MD5 hash of the input string if successful, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/Md5', name='md5', category='Utility functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='passwordHash', return_types=['string'], arguments=[FunctionArgument(name='password', argument_type='string', default_value=None, optional=False), FunctionArgument(name='algorithm', argument_type='string', default_value=None, optional=False), FunctionArgument(name='options', argument_type='table', default_value=None, optional=False), FunctionArgument(name='callback', argument_type='function', default_value=None, optional=True)]), docs=FunctionDoc(description='This function creates a new password hash using a specified hashing algorithm.\n}}', arguments={'password': 'The password to hash.', 'algorithm': 'The algorithm to use:', 'bcrypt': ': use the bcrypt hashing algorithm. Hash length: 60 characters. <span style=color:red>Note that only the prefix $2y$ is supported (older prefixes can cause security issues).</span>', 'options': 'table with options for the hashing algorithm, as detailed below.\n{{New feature/item|3.0154|1.5.4|11281|', 'callback': 'providing a callback will run this function asynchronously, the arguments to the callback are the same as the returned values below.\n}}'}, result="Returns the hash as a string if hashing was successful, ''false'' otherwise. If a callback was provided, the aforementioned values are arguments to the callback, and this function will always return ''true''."), oop=None, url=FunctionUrl(url='/wiki/PasswordHash', name='passwordHash', category='Utility functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='passwordHash', return_types=['string'], arguments=[FunctionArgument(name='password', argument_type='string', default_value=None, optional=False), FunctionArgument(name='algorithm', argument_type='string', default_value=None, optional=False), FunctionArgument(name='options', argument_type='table', default_value=None, optional=False), FunctionArgument(name='callback', argument_type='function', default_value=None, optional=True)]), docs=FunctionDoc(description='This function creates a new password hash using a specified hashing algorithm.\n}}', arguments={'password': 'The password to hash.', 'algorithm': 'The algorithm to use:', 'bcrypt': ': use the bcrypt hashing algorithm. Hash length: 60 characters. <span style=color:red>Note that only the prefix $2y$ is supported (older prefixes can cause security issues).</span>', 'options': 'table with options for the hashing algorithm, as detailed below.\n{{New feature/item|3.0154|1.5.4|11281|', 'callback': 'providing a callback will run this function asynchronously, the arguments to the callback are the same as the returned values below.\n}}'}, result="Returns the hash as a string if hashing was successful, ''false'' otherwise. If a callback was provided, the aforementioned values are arguments to the callback, and this function will always return ''true''."), oop=None, url=FunctionUrl(url='/wiki/PasswordHash', name='passwordHash', category='Utility functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='passwordVerify', return_types=['bool'], arguments=[FunctionArgument(name='password', argument_type='string', default_value=None, optional=False), FunctionArgument(name='hash', argument_type='string', default_value=None, optional=False), FunctionArgument(name='options', argument_type='table', default_value=None, optional=True), FunctionArgument(name='callback', argument_type='function', default_value=None, optional=True)]), docs=FunctionDoc(description='This function verifies whether a password matches a password hash.\n}}', arguments={'password': 'The password to check.', 'hash': 'A supported hash (see passwordHash). <span style=color:red>Note that only the prefix $2y$ is supported for type bcrypt (older prefixes can cause security issues).</span>\n{{New feature/item|3.0156|1.5.6||', 'options': 'advanced options', 'insecureBcrypt': 'If set to true, you can use the $2a$ prefix for bcrypt hashes as well. It is strongly not recommended to use it though, because the underlying implementation has a bug that leads to such hashes being relatively easy to crack. This bug was fixed for $2y$.\n}}\n{{New feature/item|3.0154|1.5.4|11281|', 'callback': 'providing a callback will run this function asynchronously, the arguments to the callback are the same as the returned values below.\n}}'}, result="Returns true if the password matches the hash. Returns false if the password does not match, or if an unknown hash was passed. If a callback was provided, the aforementioned values are arguments to the callback, and this function will always return ''true''."), oop=None, url=FunctionUrl(url='/wiki/PasswordVerify', name='passwordVerify', category='Utility functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='passwordVerify', return_types=['bool'], arguments=[FunctionArgument(name='password', argument_type='string', default_value=None, optional=False), FunctionArgument(name='hash', argument_type='string', default_value=None, optional=False), FunctionArgument(name='options', argument_type='table', default_value=None, optional=True), FunctionArgument(name='callback', argument_type='function', default_value=None, optional=True)]), docs=FunctionDoc(description='This function verifies whether a password matches a password hash.\n}}', arguments={'password': 'The password to check.', 'hash': 'A supported hash (see passwordHash). <span style=color:red>Note that only the prefix $2y$ is supported for type bcrypt (older prefixes can cause security issues).</span>\n{{New feature/item|3.0156|1.5.6||', 'options': 'advanced options', 'insecureBcrypt': 'If set to true, you can use the $2a$ prefix for bcrypt hashes as well. It is strongly not recommended to use it though, because the underlying implementation has a bug that leads to such hashes being relatively easy to crack. This bug was fixed for $2y$.\n}}\n{{New feature/item|3.0154|1.5.4|11281|', 'callback': 'providing a callback will run this function asynchronously, the arguments to the callback are the same as the returned values below.\n}}'}, result="Returns true if the password matches the hash. Returns false if the password does not match, or if an unknown hash was passed. If a callback was provided, the aforementioned values are arguments to the callback, and this function will always return ''true''."), oop=None, url=FunctionUrl(url='/wiki/PasswordVerify', name='passwordVerify', category='Utility functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='pregFind', return_types=['bool'], arguments=[FunctionArgument(name='subject', argument_type='string', default_value=None, optional=False), FunctionArgument(name='pattern', argument_type='string', default_value=None, optional=False), FunctionArgument(name='string', argument_type='int', default_value=None, optional=True)]), docs=FunctionDoc(description='This function stops at the first occurrence of the pattern in the input string and returns the result of the search.\n}}', arguments={'subject': 'The input string', 'pattern': 'The pattern string to search for in the input string.', 'flags': 'Conjuncted value that contains flags ( 1 - ignorecase, 2 - multiline, 4 - dotall, 8 - extended, 16 - unicode ) or ( i - Ignore case, m - Multiline, d - Dotall, e - Extended, u - Unicode )'}, result="Returns ''true'' if the pattern was found in the input string, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/PregFind', name='pregFind', category='Utility functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='pregFind', return_types=['bool'], arguments=[FunctionArgument(name='subject', argument_type='string', default_value=None, optional=False), FunctionArgument(name='pattern', argument_type='string', default_value=None, optional=False), FunctionArgument(name='string', argument_type='int', default_value=None, optional=True)]), docs=FunctionDoc(description='This function stops at the first occurrence of the pattern in the input string and returns the result of the search.\n}}', arguments={'subject': 'The input string', 'pattern': 'The pattern string to search for in the input string.', 'flags': 'Conjuncted value that contains flags ( 1 - ignorecase, 2 - multiline, 4 - dotall, 8 - extended, 16 - unicode ) or ( i - Ignore case, m - Multiline, d - Dotall, e - Extended, u - Unicode )'}, result="Returns ''true'' if the pattern was found in the input string, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/PregFind', name='pregFind', category='Utility functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='pregMatch', return_types=['table'], arguments=[FunctionArgument(name='base', argument_type='string', default_value=None, optional=False), FunctionArgument(name='pattern', argument_type='string', default_value=None, optional=False), FunctionArgument(name='string', argument_type='int', default_value=None, optional=True), FunctionArgument(name='maxResults', argument_type='int', default_value='100000', optional=True)]), docs=FunctionDoc(description='This function returns all matches.\n}}', arguments={'base': 'The base string for replace.', 'pattern': 'The pattern for match in base string.', 'flags': 'Conjuncted value that contains flags ( 1 - ignorecase, 2 - multiline, 4 - dotall, 8 - extended, 16 - unicode ) or ( i - Ignore case, m - Multiline, d - Dotall, e - Extended, u - Unicode )', 'maxResults': 'Maximum number of results to return'}, result="Returns a ''[[table]]'' if one or more match is found, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/PregMatch', name='pregMatch', category='Utility functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='pregMatch', return_types=['table'], arguments=[FunctionArgument(name='base', argument_type='string', default_value=None, optional=False), FunctionArgument(name='pattern', argument_type='string', default_value=None, optional=False), FunctionArgument(name='string', argument_type='int', default_value=None, optional=True), FunctionArgument(name='maxResults', argument_type='int', default_value='100000', optional=True)]), docs=FunctionDoc(description='This function returns all matches.\n}}', arguments={'base': 'The base string for replace.', 'pattern': 'The pattern for match in base string.', 'flags': 'Conjuncted value that contains flags ( 1 - ignorecase, 2 - multiline, 4 - dotall, 8 - extended, 16 - unicode ) or ( i - Ignore case, m - Multiline, d - Dotall, e - Extended, u - Unicode )', 'maxResults': 'Maximum number of results to return'}, result="Returns a ''[[table]]'' if one or more match is found, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/PregMatch', name='pregMatch', category='Utility functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='pregReplace', return_types=['string'], arguments=[FunctionArgument(name='subject', argument_type='string', default_value=None, optional=False), FunctionArgument(name='pattern', argument_type='string', default_value=None, optional=False), FunctionArgument(name='replacement', argument_type='string', default_value=None, optional=False), FunctionArgument(name='string', argument_type='int', default_value=None, optional=True)]), docs=FunctionDoc(description='This function performs a regular expression search and replace and returns the replaced string.\n}}', arguments={'subject': 'The input string.', 'pattern': 'The pattern string to search for in the input string.', 'replacement': 'The replacement string to replace all matches within the input string.', 'flags': 'Conjuncted value that contains flags ( 1 - ignorecase, 2 - multiline, 4 - dotall, 8 - extended, 16 - unicode ) or ( i - Ignore case, m - Multiline, d - Dotall, e - Extended, u - Unicode )'}, result="Returns the replaced ''[[string]]'', or [[bool]] ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/PregReplace', name='pregReplace', category='Utility functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='pregReplace', return_types=['string'], arguments=[FunctionArgument(name='subject', argument_type='string', default_value=None, optional=False), FunctionArgument(name='pattern', argument_type='string', default_value=None, optional=False), FunctionArgument(name='replacement', argument_type='string', default_value=None, optional=False), FunctionArgument(name='string', argument_type='int', default_value=None, optional=True)]), docs=FunctionDoc(description='This function performs a regular expression search and replace and returns the replaced string.\n}}', arguments={'subject': 'The input string.', 'pattern': 'The pattern string to search for in the input string.', 'replacement': 'The replacement string to replace all matches within the input string.', 'flags': 'Conjuncted value that contains flags ( 1 - ignorecase, 2 - multiline, 4 - dotall, 8 - extended, 16 - unicode ) or ( i - Ignore case, m - Multiline, d - Dotall, e - Extended, u - Unicode )'}, result="Returns the replaced ''[[string]]'', or [[bool]] ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/PregReplace', name='pregReplace', category='Utility functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='removeDebugHook', return_types=['bool'], arguments=[FunctionArgument(name='hookType', argument_type='string', default_value=None, optional=False), FunctionArgument(name='callbackFunction', argument_type='function', default_value=None, optional=False)]), docs=FunctionDoc(description='This function removes hooks added by [[addDebugHook]]\n}}', arguments={'hookType': 'The type of hook to remove. This can be:\n** preEvent\n** postEvent\n** preFunction\n** postFunction', 'callbackFunction ': 'The callback function to remove'}, result="Returns ''true'' if the hook was successfully removed, or ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/RemoveDebugHook', name='removeDebugHook', category='Utility functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='removeDebugHook', return_types=['bool'], arguments=[FunctionArgument(name='hookType', argument_type='string', default_value=None, optional=False), FunctionArgument(name='callbackFunction', argument_type='function', default_value=None, optional=False)]), docs=FunctionDoc(description='This function removes hooks added by [[addDebugHook]]\n}}', arguments={'hookType': 'The type of hook to remove. This can be:\n** preEvent\n** postEvent\n** preFunction\n** postFunction', 'callbackFunction ': 'The callback function to remove'}, result="Returns ''true'' if the hook was successfully removed, or ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/RemoveDebugHook', name='removeDebugHook', category='Utility functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='resetTimer', return_types=['bool'], arguments=[FunctionArgument(name='theTimer', argument_type='timer', default_value=None, optional=False)]), docs=FunctionDoc(description="This function allows you to reset the elapsed time in existing timers to zero. The function does not reset the 'times to execute' count on timers which have a limited amout of repetitions.", arguments={'theTimer': 'The timer whose elapsed time you wish to reset.'}, result="Returns ''true'' if the timer was successfully reset, ''false'' otherwise."), oop=FunctionOOP(class_name='timer', method_name='reset', field=None), url=FunctionUrl(url='/wiki/ResetTimer', name='resetTimer', category='Utility functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='resetTimer', return_types=['bool'], arguments=[FunctionArgument(name='theTimer', argument_type='timer', default_value=None, optional=False)]), docs=FunctionDoc(description="This function allows you to reset the elapsed time in existing timers to zero. The function does not reset the 'times to execute' count on timers which have a limited amout of repetitions.", arguments={'theTimer': 'The timer whose elapsed time you wish to reset.'}, result="Returns ''true'' if the timer was successfully reset, ''false'' otherwise."), oop=FunctionOOP(class_name='timer', method_name='reset', field=None), url=FunctionUrl(url='/wiki/ResetTimer', name='resetTimer', category='Utility functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setDevelopmentMode', return_types=['bool'], arguments=[FunctionArgument(name='enable', argument_type='bool', default_value=None, optional=False), FunctionArgument(name='enableWeb', argument_type='bool', default_value='false', optional=True)]), docs=FunctionDoc(description="This function is used to set the development mode. Setting development mode allows access to special commands which can assist with script debugging.\n'''Client-side''' development mode commands:\n* '''[[Client_Commands#showcol|showcol]]''': Enables colshapes to be viewed as a wireframe object.\n* '''[[Client_Commands#showsound|showsound]]''': Enables world sound ids to be printed in the debug output window.\n'''Shared''' development mode functions:\n* '''[[debugSleep]]''': Sets the freeze time for the client/server.", arguments={'enable': ': A boolean to indicate whether development mode is on (true) or off (false)\n{{New feature/item|3.0150|1.5||', 'enableWeb': ': A boolean to indicate whether browser debug messages will be filtered (false) or not (true)\n}}'}, result="Returns ''true'' if the mode was set correctly, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/SetDevelopmentMode', name='setDevelopmentMode', category='Utility functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setDevelopmentMode', return_types=['bool'], arguments=[FunctionArgument(name='enable', argument_type='bool', default_value=None, optional=False), FunctionArgument(name='enableWeb', argument_type='bool', default_value='false', optional=True)]), docs=FunctionDoc(description="This function is used to set the development mode. Setting development mode allows access to special commands which can assist with script debugging.\n'''Client-side''' development mode commands:\n* '''[[Client_Commands#showcol|showcol]]''': Enables colshapes to be viewed as a wireframe object.\n* '''[[Client_Commands#showsound|showsound]]''': Enables world sound ids to be printed in the debug output window.\n'''Shared''' development mode functions:\n* '''[[debugSleep]]''': Sets the freeze time for the client/server.", arguments={'enable': ': A boolean to indicate whether development mode is on (true) or off (false)\n{{New feature/item|3.0150|1.5||', 'enableWeb': ': A boolean to indicate whether browser debug messages will be filtered (false) or not (true)\n}}'}, result="Returns ''true'' if the mode was set correctly, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/SetDevelopmentMode', name='setDevelopmentMode', category='Utility functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setFPSLimit', return_types=['bool'], arguments=[FunctionArgument(name='fpsLimit', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function sets the maximum [http://en.wikipedia.org/wiki/Frame_rate FPS (Frames per second)] that players on the server can run their game at.  ', arguments={'fpsLimit': 'An integer value representing the maximum FPS. This value may be between 25 and 100 FPS. You can also pass 0 or false, in which case the FPS limit will be the one set in the client settings (by default, 100 FPS and the client fps limit should also be manually changed via fps_limit=0 in console or MTA San Andreas 1.5\\MTA\\config\\coreconfig.xml).'}, result="Returns ''true'' if successful, or ''false'' if it was not possible to set the limit or an invalid value was passed."), oop=None, url=FunctionUrl(url='/wiki/SetFPSLimit', name='setFPSLimit', category='Utility functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setFPSLimit', return_types=['bool'], arguments=[FunctionArgument(name='fpsLimit', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function sets the maximum [http://en.wikipedia.org/wiki/Frame_rate FPS (Frames per second)] that players on the server can run their game at.  ', arguments={'fpsLimit': 'An integer value representing the maximum FPS. This value may be between 25 and 100 FPS. You can also pass 0 or false, in which case the FPS limit will be the one set in the client settings (by default, 100 FPS and the client fps limit should also be manually changed via fps_limit=0 in console or MTA San Andreas 1.5\\MTA\\config\\coreconfig.xml).'}, result="Returns ''true'' if successful, or ''false'' if it was not possible to set the limit or an invalid value was passed."), oop=None, url=FunctionUrl(url='/wiki/SetFPSLimit', name='setFPSLimit', category='Utility functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setTransferBoxVisible', return_types=['bool'], arguments=[FunctionArgument(name='visible', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'visible': 'The new visibility state.'}, result="Returns ''true'' if the visibility was set successfully, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/SetTransferBoxVisible', name='setTransferBoxVisible', category='Utility functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setTransferBoxVisible', return_types=['bool'], arguments=[FunctionArgument(name='visible', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'visible': 'The new visibility state.'}, result="Returns ''true'' if the visibility was set successfully, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/SetTransferBoxVisible', name='setTransferBoxVisible', category='Utility functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='sha256', return_types=['string'], arguments=[FunctionArgument(name='str', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description="* The sha module and this function may conflict with eachother, if you use this function uninstall the module!\n* This function returns an uppercase string, so make sure you string.upper() anything else you are checking against that has been sha256'd elsewhere.}}\nCalculates the sha256 hash of the specified string.", arguments={'str': 'the string to hash.'}, result="Returns the sha256 hash of the input string if successful, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/Sha256', name='sha256', category='Utility functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='sha256', return_types=['string'], arguments=[FunctionArgument(name='str', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description="* The sha module and this function may conflict with eachother, if you use this function uninstall the module!\n* This function returns an uppercase string, so make sure you string.upper() anything else you are checking against that has been sha256'd elsewhere.}}\nCalculates the sha256 hash of the specified string.", arguments={'str': 'the string to hash.'}, result="Returns the sha256 hash of the input string if successful, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/Sha256', name='sha256', category='Utility functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='split', return_types=['table'], arguments=[FunctionArgument(name='stringToSplit', argument_type='string', default_value=None, optional=False), FunctionArgument(name='int', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='This function splits a string into substrings. You specify a character that will act as a separating character; this will determine where to split the sub-strings. For example, it can split the string "Hello World" into two strings containing the two words, by spliting using a space as a separator.\n\'\'\'Note:\'\'\' You can use the function [[gettok]] to retrieve a single token from the string at a specific index. This may be faster for one-off lookups, but considerably slower if you are going to check each token in a long string.', arguments={'stringToSplit': 'The string you wish to split into parts.', 'separatingChar': 'A string of the character you want to split, or the ASCII|ASCII number representing the character you want to use to split.'}, result='Returns a \'\'table\'\' of substrings split from the original string if successful, \'\'false\'\' otherwise.\n{{note|Unicode characters work but when combined with others do not. E.g: #split("a€cb†", "€") returns 3 but #split("a€cb", "€") returns 2.\n}}\n{{note|You can\'t use same char twice as a separator. Eg.:  ||, ||| are the same as |.\n}}'), oop=None, url=FunctionUrl(url='/wiki/Split', name='split', category='Utility functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='split', return_types=['table'], arguments=[FunctionArgument(name='stringToSplit', argument_type='string', default_value=None, optional=False), FunctionArgument(name='int', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='This function splits a string into substrings. You specify a character that will act as a separating character; this will determine where to split the sub-strings. For example, it can split the string "Hello World" into two strings containing the two words, by spliting using a space as a separator.\n\'\'\'Note:\'\'\' You can use the function [[gettok]] to retrieve a single token from the string at a specific index. This may be faster for one-off lookups, but considerably slower if you are going to check each token in a long string.', arguments={'stringToSplit': 'The string you wish to split into parts.', 'separatingChar': 'A string of the character you want to split, or the ASCII|ASCII number representing the character you want to use to split.'}, result='Returns a \'\'table\'\' of substrings split from the original string if successful, \'\'false\'\' otherwise.\n{{note|Unicode characters work but when combined with others do not. E.g: #split("a€cb†", "€") returns 3 but #split("a€cb", "€") returns 2.\n}}\n{{note|You can\'t use same char twice as a separator. Eg.:  ||, ||| are the same as |.\n}}'), oop=None, url=FunctionUrl(url='/wiki/Split', name='split', category='Utility functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='tocolor', return_types=['int'], arguments=[FunctionArgument(name='red', argument_type='int', default_value=None, optional=False), FunctionArgument(name='green', argument_type='int', default_value=None, optional=False), FunctionArgument(name='blue', argument_type='int', default_value=None, optional=False), FunctionArgument(name='alpha', argument_type='int', default_value='255', optional=True)]), docs=FunctionDoc(description='This function retrieves the hex number of a specified color, useful for the dx functions.', arguments={'red': 'The amount of http://en.wikipedia.org/wiki/RGBA_color_space red in the color (0-255).', 'green': 'The amount of http://en.wikipedia.org/wiki/RGBA_color_space green in the color (0-255).', 'blue': 'The amount of http://en.wikipedia.org/wiki/RGBA_color_space blue in the color (0-255).', 'alpha': 'The amount of http://en.wikipedia.org/wiki/RGBA_color_space alpha in the color (0-255).'}, result='Returns a single value representing the color.'), oop=None, url=FunctionUrl(url='/wiki/Tocolor', name='tocolor', category='Utility functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='tocolor', return_types=['int'], arguments=[FunctionArgument(name='red', argument_type='int', default_value=None, optional=False), FunctionArgument(name='green', argument_type='int', default_value=None, optional=False), FunctionArgument(name='blue', argument_type='int', default_value=None, optional=False), FunctionArgument(name='alpha', argument_type='int', default_value='255', optional=True)]), docs=FunctionDoc(description='This function retrieves the hex number of a specified color, useful for the dx functions.', arguments={'red': 'The amount of http://en.wikipedia.org/wiki/RGBA_color_space red in the color (0-255).', 'green': 'The amount of http://en.wikipedia.org/wiki/RGBA_color_space green in the color (0-255).', 'blue': 'The amount of http://en.wikipedia.org/wiki/RGBA_color_space blue in the color (0-255).', 'alpha': 'The amount of http://en.wikipedia.org/wiki/RGBA_color_space alpha in the color (0-255).'}, result='Returns a single value representing the color.'), oop=None, url=FunctionUrl(url='/wiki/Tocolor', name='tocolor', category='Utility functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='toJSON', return_types=['string'], arguments=[FunctionArgument(name='value', argument_type='var', default_value=None, optional=False), FunctionArgument(name='compact', argument_type='bool', default_value='false', optional=True), FunctionArgument(name='prettyType', argument_type='string', default_value='"none"', optional=True)]), docs=FunctionDoc(description="This function converts a '''single''' value (preferably a Lua table) into a [[JSON]] encoded string. You can use this to store the data and then load it again using [[fromJSON]].", arguments={'var': 'An argument of any type. Arguments that are elements will be stored as element IDs that are liable to change between sessions. As such, do not save elements across sessions as you will get unpredictable results.\n{{OptionalArg}} \n{{New feature/item|3.0150|1.5||', 'compact': 'a boolean representing whether the string will contain whitespaces. To remove whitespaces from JSON string, use true. String will contain whitespaces per default.\n}}\n{{New feature/item|3.0154|1.5.3|8046|', 'prettyType': 'a type string from below:\n** none\n** spaces\n** tabs\n}}'}, result='Returns a JSON formatted string.'), oop=None, url=FunctionUrl(url='/wiki/ToJSON', name='toJSON', category='Utility functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='toJSON', return_types=['string'], arguments=[FunctionArgument(name='value', argument_type='var', default_value=None, optional=False), FunctionArgument(name='compact', argument_type='bool', default_value='false', optional=True), FunctionArgument(name='prettyType', argument_type='string', default_value='"none"', optional=True)]), docs=FunctionDoc(description="This function converts a '''single''' value (preferably a Lua table) into a [[JSON]] encoded string. You can use this to store the data and then load it again using [[fromJSON]].", arguments={'var': 'An argument of any type. Arguments that are elements will be stored as element IDs that are liable to change between sessions. As such, do not save elements across sessions as you will get unpredictable results.\n{{OptionalArg}} \n{{New feature/item|3.0150|1.5||', 'compact': 'a boolean representing whether the string will contain whitespaces. To remove whitespaces from JSON string, use true. String will contain whitespaces per default.\n}}\n{{New feature/item|3.0154|1.5.3|8046|', 'prettyType': 'a type string from below:\n** none\n** spaces\n** tabs\n}}'}, result='Returns a JSON formatted string.'), oop=None, url=FunctionUrl(url='/wiki/ToJSON', name='toJSON', category='Utility functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='utfChar', return_types=['string'], arguments=[FunctionArgument(name='characterCode', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='The function returns the string of the specified UTF code.', arguments={'characterCode': 'The UTF code, to get the string of.'}, result="Returns a ''[[string]]'' if the function was successful, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/UtfChar', name='utfChar', category='Utility functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='utfChar', return_types=['string'], arguments=[FunctionArgument(name='characterCode', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='The function returns the string of the specified UTF code.', arguments={'characterCode': 'The UTF code, to get the string of.'}, result="Returns a ''[[string]]'' if the function was successful, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/UtfChar', name='utfChar', category='Utility functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='utfCode', return_types=['int'], arguments=[FunctionArgument(name='theString', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='The function returns the UTF codes of the given string.', arguments={'theString': 'The string to get the UTF code of.'}, result="Returns an ''[[int]]'' if the function was successful, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/UtfCode', name='utfCode', category='Utility functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='utfCode', return_types=['int'], arguments=[FunctionArgument(name='theString', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='The function returns the UTF codes of the given string.', arguments={'theString': 'The string to get the UTF code of.'}, result="Returns an ''[[int]]'' if the function was successful, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/UtfCode', name='utfCode', category='Utility functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='utfLen', return_types=['int'], arguments=[FunctionArgument(name='theString', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='The function gets the real length of a string, in characters.', arguments={'theString': 'The string to get the length of.'}, result="Returns an ''[[int]]'' if the function was successful, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/UtfLen', name='utfLen', category='Utility functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='utfLen', return_types=['int'], arguments=[FunctionArgument(name='theString', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='The function gets the real length of a string, in characters.', arguments={'theString': 'The string to get the length of.'}, result="Returns an ''[[int]]'' if the function was successful, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/UtfLen', name='utfLen', category='Utility functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='utfSeek', return_types=['int'], arguments=[FunctionArgument(name='theString', argument_type='string', default_value=None, optional=False), FunctionArgument(name='position', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='The function returns the byte position at specified character position.', arguments={'theString': 'The string.', 'position': 'An int with the specified charachter position.'}, result="Returns an ''[[int]]'' if the function was successful, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/UtfSeek', name='utfSeek', category='Utility functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='utfSeek', return_types=['int'], arguments=[FunctionArgument(name='theString', argument_type='string', default_value=None, optional=False), FunctionArgument(name='position', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='The function returns the byte position at specified character position.', arguments={'theString': 'The string.', 'position': 'An int with the specified charachter position.'}, result="Returns an ''[[int]]'' if the function was successful, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/UtfSeek', name='utfSeek', category='Utility functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='utfSub', return_types=['string'], arguments=[FunctionArgument(name='theString', argument_type='string', default_value=None, optional=False), FunctionArgument(name='Start', argument_type='int', default_value=None, optional=False), FunctionArgument(name='End', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='The function returns a sub string, from the specified positions on a character.', arguments={'theString': 'The string.', 'Start': 'An int with the start position.', 'End': 'An int with the end position.'}, result="Returns a ''[[string]]'' if the function was successful, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/UtfSub', name='utfSub', category='Utility functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='utfSub', return_types=['string'], arguments=[FunctionArgument(name='theString', argument_type='string', default_value=None, optional=False), FunctionArgument(name='Start', argument_type='int', default_value=None, optional=False), FunctionArgument(name='End', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='The function returns a sub string, from the specified positions on a character.', arguments={'theString': 'The string.', 'Start': 'An int with the start position.', 'End': 'An int with the end position.'}, result="Returns a ''[[string]]'' if the function was successful, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/UtfSub', name='utfSub', category='Utility functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='byte', return_types=['int,...', 'utf8.'], arguments=[FunctionArgument(name='input', argument_type='string', default_value=None, optional=False), FunctionArgument(name='i', argument_type='int', default_value='1', optional=True), FunctionArgument(name='j', argument_type='int', default_value='1', optional=True)]), docs=FunctionDoc(description='Returns the codepoints for the i-th through j-th character of the string passed.', arguments={'input': 'A string character sequence\n{{OptionalArg}}', 'i': 'An integer representing the beginning position.', 'j': 'An integer representing the ending position.'}, result="Returns a sequence of ''integer'' values from the original string if successful, ''nil'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/Utf8.byte', name='utf8.byte', category='UTF8 Library', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='byte', return_types=['int,...', 'utf8.'], arguments=[FunctionArgument(name='input', argument_type='string', default_value=None, optional=False), FunctionArgument(name='i', argument_type='int', default_value='1', optional=True), FunctionArgument(name='j', argument_type='int', default_value='1', optional=True)]), docs=FunctionDoc(description='Returns the codepoints for the i-th through j-th character of the string passed.', arguments={'input': 'A string character sequence\n{{OptionalArg}}', 'i': 'An integer representing the beginning position.', 'j': 'An integer representing the ending position.'}, result="Returns a sequence of ''integer'' values from the original string if successful, ''nil'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/Utf8.byte', name='utf8.byte', category='UTF8 Library', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='char', return_types=['string', 'utf8.'], arguments=[FunctionArgument(name='...args', argument_type='any[]', default_value=None, optional=True)]), docs=FunctionDoc(description='Generates a string representing the character codepoints as arguments.', arguments={'codepoints': 'An variable argument sequence of code points representing the desired unicode characters.'}, result="Returns a ''string'' representation of the codepoints passed."), oop=None, url=FunctionUrl(url='/wiki/Utf8.char', name='utf8.char', category='UTF8 Library', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='char', return_types=['string', 'utf8.'], arguments=[FunctionArgument(name='...args', argument_type='any[]', default_value=None, optional=True)]), docs=FunctionDoc(description='Generates a string representing the character codepoints as arguments.', arguments={'codepoints': 'An variable argument sequence of code points representing the desired unicode characters.'}, result="Returns a ''string'' representation of the codepoints passed."), oop=None, url=FunctionUrl(url='/wiki/Utf8.char', name='utf8.char', category='UTF8 Library', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='charpos', return_types=['int,', 'int', 'utf8.'], arguments=[FunctionArgument(name='input', argument_type='string', default_value=None, optional=False), FunctionArgument(name='charpos', argument_type='int', default_value='0', optional=True), FunctionArgument(name='offset', argument_type='int', default_value='1', optional=True)]), docs=FunctionDoc(description='Converts the UTF-8 codepoint position to byte-string position.', arguments={'input': 'A string character sequence\n{{OptionalArg}}', 'charpos': 'An integer representing the beginning position (offset will be added/subtracted).', 'offset': 'An integer representing the offset to charpos.'}, result="Returns the ''integer'' position as in a byte string and the ''integer'' codepoint at this position, ''nil'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/Utf8.charpos', name='utf8.charpos', category='UTF8 Library', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='charpos', return_types=['int,', 'int', 'utf8.'], arguments=[FunctionArgument(name='input', argument_type='string', default_value=None, optional=False), FunctionArgument(name='charpos', argument_type='int', default_value='0', optional=True), FunctionArgument(name='offset', argument_type='int', default_value='1', optional=True)]), docs=FunctionDoc(description='Converts the UTF-8 codepoint position to byte-string position.', arguments={'input': 'A string character sequence\n{{OptionalArg}}', 'charpos': 'An integer representing the beginning position (offset will be added/subtracted).', 'offset': 'An integer representing the offset to charpos.'}, result="Returns the ''integer'' position as in a byte string and the ''integer'' codepoint at this position, ''nil'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/Utf8.charpos', name='utf8.charpos', category='UTF8 Library', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='escape', return_types=['string', 'utf8.'], arguments=[FunctionArgument(name='input', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='Escapes a string to a UTF-8 format string. It supports several escape formats, see the formatting table.', arguments={'input': 'A string character sequence'}, result="Returns a ''string'' containing the escaped UTF-8 characters from the original string."), oop=None, url=FunctionUrl(url='/wiki/Utf8.escape', name='utf8.escape', category='UTF8 Library', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='escape', return_types=['string', 'utf8.'], arguments=[FunctionArgument(name='input', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='Escapes a string to a UTF-8 format string. It supports several escape formats, see the formatting table.', arguments={'input': 'A string character sequence'}, result="Returns a ''string'' containing the escaped UTF-8 characters from the original string."), oop=None, url=FunctionUrl(url='/wiki/Utf8.escape', name='utf8.escape', category='UTF8 Library', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='find', return_types=['int,', 'int', 'utf8.'], arguments=[FunctionArgument(name='input', argument_type='string', default_value=None, optional=False), FunctionArgument(name='pattern', argument_type='string', default_value=None, optional=False), FunctionArgument(name='startpos', argument_type='int', default_value='1', optional=True), FunctionArgument(name='plain', argument_type='boolean', default_value='false', optional=True)]), docs=FunctionDoc(description='Finds the first occurrence of the [http://lua-users.org/wiki/PatternsTutorial pattern] in the string passed. If an instance of the pattern is found, a pair of values representing the start and the end of the matched string is returned.', arguments={'input': 'A string character sequence', 'pattern': 'A string match http://lua-users.org/wiki/PatternsTutorial pattern (you can disable pattern matching by using the optional fourth argument plain)\n{{OptionalArg}}', 'startpos': 'An integer representing the beginning position.', 'plain': 'A boolean, if pattern matching should be turned off'}, result="Returns two ''number'' values for the beginning and ending position of the matched string, ''nil'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/Utf8.find', name='utf8.find', category='UTF8 Library', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='find', return_types=['int,', 'int', 'utf8.'], arguments=[FunctionArgument(name='input', argument_type='string', default_value=None, optional=False), FunctionArgument(name='pattern', argument_type='string', default_value=None, optional=False), FunctionArgument(name='startpos', argument_type='int', default_value='1', optional=True), FunctionArgument(name='plain', argument_type='boolean', default_value='false', optional=True)]), docs=FunctionDoc(description='Finds the first occurrence of the [http://lua-users.org/wiki/PatternsTutorial pattern] in the string passed. If an instance of the pattern is found, a pair of values representing the start and the end of the matched string is returned.', arguments={'input': 'A string character sequence', 'pattern': 'A string match http://lua-users.org/wiki/PatternsTutorial pattern (you can disable pattern matching by using the optional fourth argument plain)\n{{OptionalArg}}', 'startpos': 'An integer representing the beginning position.', 'plain': 'A boolean, if pattern matching should be turned off'}, result="Returns two ''number'' values for the beginning and ending position of the matched string, ''nil'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/Utf8.find', name='utf8.find', category='UTF8 Library', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='lower', return_types=['string|int', 'utf8.'], arguments=[FunctionArgument(name='int', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description="Converts a UTF-8 string to folded case (lowercase), which can be used to compare two strings. If ''input'' is an integer, it's treat as a codepoint and a convert codepoint (integer) is returned.", arguments={'input': 'A string character sequence OR an integer value'}, result="Returns a ''string'' in lowercase OR returns an ''integer'' (see description)."), oop=None, url=FunctionUrl(url='/wiki/Utf8.fold', name='utf8.fold', category='UTF8 Library', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='lower', return_types=['string|int', 'utf8.'], arguments=[FunctionArgument(name='int', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description="Converts a UTF-8 string to folded case (lowercase), which can be used to compare two strings. If ''input'' is an integer, it's treat as a codepoint and a convert codepoint (integer) is returned.", arguments={'input': 'A string character sequence OR an integer value'}, result="Returns a ''string'' in lowercase OR returns an ''integer'' (see description)."), oop=None, url=FunctionUrl(url='/wiki/Utf8.fold', name='utf8.fold', category='UTF8 Library', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='gmatch', return_types=['iterator', 'utf8.'], arguments=[FunctionArgument(name='input', argument_type='string', default_value=None, optional=False), FunctionArgument(name='pattern', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description="This function returns a pattern finding iterator for UTF-8 strings. The iterator will search through the string '''input''' looking for instances of the pattern you passed. For more information on iterators read the [http://lua-users.org/wiki/ForTutorial ForTutorial] and [http://lua-users.org/wiki/IteratorsTutorial IteratorsTutorial].", arguments={'input': 'A string character sequence', 'pattern': 'A string match http://lua-users.org/wiki/PatternsTutorial pattern'}, result="Returns an ''function'' for iterations on the '''input''' string by using the passed '''pattern''' string."), oop=None, url=FunctionUrl(url='/wiki/Utf8.gmatch', name='utf8.gmatch', category='UTF8 Library', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='gmatch', return_types=['iterator', 'utf8.'], arguments=[FunctionArgument(name='input', argument_type='string', default_value=None, optional=False), FunctionArgument(name='pattern', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description="This function returns a pattern finding iterator for UTF-8 strings. The iterator will search through the string '''input''' looking for instances of the pattern you passed. For more information on iterators read the [http://lua-users.org/wiki/ForTutorial ForTutorial] and [http://lua-users.org/wiki/IteratorsTutorial IteratorsTutorial].", arguments={'input': 'A string character sequence', 'pattern': 'A string match http://lua-users.org/wiki/PatternsTutorial pattern'}, result="Returns an ''function'' for iterations on the '''input''' string by using the passed '''pattern''' string."), oop=None, url=FunctionUrl(url='/wiki/Utf8.gmatch', name='utf8.gmatch', category='UTF8 Library', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='gsub', return_types=['string', 'utf8.'], arguments=[FunctionArgument(name='input', argument_type='string', default_value=None, optional=False), FunctionArgument(name='pattern', argument_type='string', default_value=None, optional=False), FunctionArgument(name='replace', argument_type='mixed', default_value=None, optional=False), FunctionArgument(name='match', argument_type='int', default_value=None, optional=True)]), docs=FunctionDoc(description='Returns a copy of the original input string with replaced matches from the pattern by the replacement value.', arguments={'input': 'A string character sequence', 'pattern': 'A string match http://lua-users.org/wiki/PatternsTutorial pattern', 'replace': 'A string literal OR an integer value OR a function (see examples below) OR a table ({ match = replacement })\n{{OptionalArg}}', 'match_limit': 'An integer to limit the number of substitutions made'}, result="Returns a pair of values, the modified ''string'' and the ''integer'' number of substitutions made."), oop=None, url=FunctionUrl(url='/wiki/Utf8.gsub', name='utf8.gsub', category='UTF8 Library', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='gsub', return_types=['string', 'utf8.'], arguments=[FunctionArgument(name='input', argument_type='string', default_value=None, optional=False), FunctionArgument(name='pattern', argument_type='string', default_value=None, optional=False), FunctionArgument(name='replace', argument_type='mixed', default_value=None, optional=False), FunctionArgument(name='match', argument_type='int', default_value=None, optional=True)]), docs=FunctionDoc(description='Returns a copy of the original input string with replaced matches from the pattern by the replacement value.', arguments={'input': 'A string character sequence', 'pattern': 'A string match http://lua-users.org/wiki/PatternsTutorial pattern', 'replace': 'A string literal OR an integer value OR a function (see examples below) OR a table ({ match = replacement })\n{{OptionalArg}}', 'match_limit': 'An integer to limit the number of substitutions made'}, result="Returns a pair of values, the modified ''string'' and the ''integer'' number of substitutions made."), oop=None, url=FunctionUrl(url='/wiki/Utf8.gsub', name='utf8.gsub', category='UTF8 Library', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='insert', return_types=['string', 'utf8.'], arguments=[FunctionArgument(name='input', argument_type='string', default_value=None, optional=False), FunctionArgument(name='insert', argument_type='int', default_value=None, optional=True), FunctionArgument(name='substring', argument_type='string', default_value=None, optional=True)]), docs=FunctionDoc(description='Inserts a substring into input string. If insert-position is given, the substring will be inserted before the character at this index, otherwise the substring will concatenate to input. The insert position may be negative.', arguments={'input': 'A string character sequence', 'substring': 'A string character sequence which should be inserted\n{{OptionalArg}}', 'insert_pos': 'An integer representing the position, where the substring will be inserted at.'}, result="Returns a ''string'' with the inserted substring value."), oop=None, url=FunctionUrl(url='/wiki/Utf8.insert', name='utf8.insert', category='UTF8 Library', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='insert', return_types=['string', 'utf8.'], arguments=[FunctionArgument(name='input', argument_type='string', default_value=None, optional=False), FunctionArgument(name='insert', argument_type='int', default_value=None, optional=True), FunctionArgument(name='substring', argument_type='string', default_value=None, optional=True)]), docs=FunctionDoc(description='Inserts a substring into input string. If insert-position is given, the substring will be inserted before the character at this index, otherwise the substring will concatenate to input. The insert position may be negative.', arguments={'input': 'A string character sequence', 'substring': 'A string character sequence which should be inserted\n{{OptionalArg}}', 'insert_pos': 'An integer representing the position, where the substring will be inserted at.'}, result="Returns a ''string'' with the inserted substring value."), oop=None, url=FunctionUrl(url='/wiki/Utf8.insert', name='utf8.insert', category='UTF8 Library', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='len', return_types=['int', 'utf8.'], arguments=[FunctionArgument(name='input', argument_type='string', default_value=None, optional=False), FunctionArgument(name='i', argument_type='int', default_value='1', optional=True), FunctionArgument(name='j', argument_type='int', default_value='utf8.len( input', optional=True)]), docs=FunctionDoc(description='Returns the length of the string passed.', arguments={'input': 'A string character sequence\n{{OptionalArg}}', 'i': 'An integer representing the beginning position for measuring the length of the section (may be negative).', 'j': 'An integer representing the ending position for measuring the length of the section (may be negative).'}, result="Returns the length of the string as an ''integer''."), oop=None, url=FunctionUrl(url='/wiki/Utf8.len', name='utf8.len', category='UTF8 Library', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='len', return_types=['int', 'utf8.'], arguments=[FunctionArgument(name='input', argument_type='string', default_value=None, optional=False), FunctionArgument(name='i', argument_type='int', default_value='1', optional=True), FunctionArgument(name='j', argument_type='int', default_value='utf8.len( input', optional=True)]), docs=FunctionDoc(description='Returns the length of the string passed.', arguments={'input': 'A string character sequence\n{{OptionalArg}}', 'i': 'An integer representing the beginning position for measuring the length of the section (may be negative).', 'j': 'An integer representing the ending position for measuring the length of the section (may be negative).'}, result="Returns the length of the string as an ''integer''."), oop=None, url=FunctionUrl(url='/wiki/Utf8.len', name='utf8.len', category='UTF8 Library', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='match', return_types=['string,...', 'utf8.'], arguments=[FunctionArgument(name='input', argument_type='string', default_value=None, optional=False), FunctionArgument(name='pattern', argument_type='string', default_value=None, optional=False), FunctionArgument(name='index', argument_type='int', default_value='1', optional=True)]), docs=FunctionDoc(description='Extract substrings by matching patterns in the input string. This function can be used to extract specific information from a string.', arguments={'input': 'A string character sequence', 'pattern': 'A string match http://lua-users.org/wiki/PatternsTutorial pattern\n{{OptionalArg}}', 'index': 'An integer representing the beginning position for the pattern matching'}, result="Returns a sequence of ''string'' matches from the '''input''' string, ''nil'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/Utf8.match', name='utf8.match', category='UTF8 Library', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='match', return_types=['string,...', 'utf8.'], arguments=[FunctionArgument(name='input', argument_type='string', default_value=None, optional=False), FunctionArgument(name='pattern', argument_type='string', default_value=None, optional=False), FunctionArgument(name='index', argument_type='int', default_value='1', optional=True)]), docs=FunctionDoc(description='Extract substrings by matching patterns in the input string. This function can be used to extract specific information from a string.', arguments={'input': 'A string character sequence', 'pattern': 'A string match http://lua-users.org/wiki/PatternsTutorial pattern\n{{OptionalArg}}', 'index': 'An integer representing the beginning position for the pattern matching'}, result="Returns a sequence of ''string'' matches from the '''input''' string, ''nil'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/Utf8.match', name='utf8.match', category='UTF8 Library', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='ncasecmp', return_types=['int', 'utf8.'], arguments=[FunctionArgument(name='a', argument_type='string', default_value=None, optional=False), FunctionArgument(name='b', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='Compares two strings in lower-case and returns the difference indicator (see table below) as an integer value.', arguments={'a': 'A string character sequence', 'b': 'A string character sequence'}, result="Returns an ''integer'', which indicates the difference, see the table below for further information."), oop=None, url=FunctionUrl(url='/wiki/Utf8.ncasecmp', name='utf8.ncasecmp', category='UTF8 Library', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='ncasecmp', return_types=['int', 'utf8.'], arguments=[FunctionArgument(name='a', argument_type='string', default_value=None, optional=False), FunctionArgument(name='b', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='Compares two strings in lower-case and returns the difference indicator (see table below) as an integer value.', arguments={'a': 'A string character sequence', 'b': 'A string character sequence'}, result="Returns an ''integer'', which indicates the difference, see the table below for further information."), oop=None, url=FunctionUrl(url='/wiki/Utf8.ncasecmp', name='utf8.ncasecmp', category='UTF8 Library', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='next', return_types=['int,', 'int', 'utf8.'], arguments=[FunctionArgument(name='input', argument_type='string', default_value=None, optional=False), FunctionArgument(name='charpos', argument_type='int', default_value='0', optional=True), FunctionArgument(name='offset', argument_type='int', default_value='1', optional=True)]), docs=FunctionDoc(description='This is an iteration function to traverse each single codepoint of a UTF-8 string.', arguments={'input': 'A string character sequence\n{{OptionalArg}}', 'charpos': 'An integer representing the beginning position (offset will be added/subtracted).', 'offset': 'An integer representing the offset to charpos.'}, result="Returns the ''integer'' position in bytes and the ''integer'' codepoint at this position, ''nil'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/Utf8.next', name='utf8.next', category='UTF8 Library', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='next', return_types=['int,', 'int', 'utf8.'], arguments=[FunctionArgument(name='input', argument_type='string', default_value=None, optional=False), FunctionArgument(name='charpos', argument_type='int', default_value='0', optional=True), FunctionArgument(name='offset', argument_type='int', default_value='1', optional=True)]), docs=FunctionDoc(description='This is an iteration function to traverse each single codepoint of a UTF-8 string.', arguments={'input': 'A string character sequence\n{{OptionalArg}}', 'charpos': 'An integer representing the beginning position (offset will be added/subtracted).', 'offset': 'An integer representing the offset to charpos.'}, result="Returns the ''integer'' position in bytes and the ''integer'' codepoint at this position, ''nil'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/Utf8.next', name='utf8.next', category='UTF8 Library', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='remove', return_types=['string', 'utf8.'], arguments=[FunctionArgument(name='input', argument_type='string', default_value=None, optional=False), FunctionArgument(name='start', argument_type='int', default_value='1 [', optional=False), FunctionArgument(name='stop', argument_type='int', default_value='-1', optional=True)]), docs=FunctionDoc(description='This function removes a substring in a UTF-8 string by using a position range.', arguments={'input': 'A string character sequence', 'start': 'An integer representing the beginning position.\n{{OptionalArg}}', 'stop': 'An integer representing the ending position.'}, result="Returns the ''string'' with the removed substring from the range."), oop=None, url=FunctionUrl(url='/wiki/Utf8.remove', name='utf8.remove', category='UTF8 Library', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='remove', return_types=['string', 'utf8.'], arguments=[FunctionArgument(name='input', argument_type='string', default_value=None, optional=False), FunctionArgument(name='start', argument_type='int', default_value='1 [', optional=False), FunctionArgument(name='stop', argument_type='int', default_value='-1', optional=True)]), docs=FunctionDoc(description='This function removes a substring in a UTF-8 string by using a position range.', arguments={'input': 'A string character sequence', 'start': 'An integer representing the beginning position.\n{{OptionalArg}}', 'stop': 'An integer representing the ending position.'}, result="Returns the ''string'' with the removed substring from the range."), oop=None, url=FunctionUrl(url='/wiki/Utf8.remove', name='utf8.remove', category='UTF8 Library', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='reverse', return_types=['string', 'utf8.'], arguments=[FunctionArgument(name='input', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='Reverses the input string.', arguments={'input': 'A string character sequence'}, result="Returns a ''string'' containing the reversed original UTF-8 string."), oop=None, url=FunctionUrl(url='/wiki/Utf8.reverse', name='utf8.reverse', category='UTF8 Library', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='reverse', return_types=['string', 'utf8.'], arguments=[FunctionArgument(name='input', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='Reverses the input string.', arguments={'input': 'A string character sequence'}, result="Returns a ''string'' containing the reversed original UTF-8 string."), oop=None, url=FunctionUrl(url='/wiki/Utf8.reverse', name='utf8.reverse', category='UTF8 Library', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='sub', return_types=['string', 'utf8.'], arguments=[FunctionArgument(name='input', argument_type='string', default_value=None, optional=False), FunctionArgument(name='i', argument_type='int', default_value='1', optional=True), FunctionArgument(name='j', argument_type='int', default_value='utf8.len( input', optional=True)]), docs=FunctionDoc(description="Returns a substring of the string passed. The substring starts at ''i''. If the third argument ''j'' is not given, the substring will end at the end of the string. If the third argument is given, the substring ends at and includes ''j''.", arguments={'input': 'A string character sequence\n{{OptionalArg}}', 'i': 'An integer representing the beginning position (may be negative).', 'j': 'An integer representing the ending position (may be negative).'}, result="Returns a ''string'' substring of the original string, containing the selected range from the original string."), oop=None, url=FunctionUrl(url='/wiki/Utf8.sub', name='utf8.sub', category='UTF8 Library', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='sub', return_types=['string', 'utf8.'], arguments=[FunctionArgument(name='input', argument_type='string', default_value=None, optional=False), FunctionArgument(name='i', argument_type='int', default_value='1', optional=True), FunctionArgument(name='j', argument_type='int', default_value='utf8.len( input', optional=True)]), docs=FunctionDoc(description="Returns a substring of the string passed. The substring starts at ''i''. If the third argument ''j'' is not given, the substring will end at the end of the string. If the third argument is given, the substring ends at and includes ''j''.", arguments={'input': 'A string character sequence\n{{OptionalArg}}', 'i': 'An integer representing the beginning position (may be negative).', 'j': 'An integer representing the ending position (may be negative).'}, result="Returns a ''string'' substring of the original string, containing the selected range from the original string."), oop=None, url=FunctionUrl(url='/wiki/Utf8.sub', name='utf8.sub', category='UTF8 Library', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='upper', return_types=['string', 'utf8.'], arguments=[FunctionArgument(name='int', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description="Converts a UTF-8 string to title case (uppercase). If ''input'' is an integer, it is treated as a codepoint and a converted codepoint (integer) is returned.", arguments={'input': 'A string character sequence OR an integer value'}, result="Returns a ''string'' in uppercase OR returns an ''integer'' (see description)."), oop=None, url=FunctionUrl(url='/wiki/Utf8.title', name='utf8.title', category='UTF8 Library', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='upper', return_types=['string', 'utf8.'], arguments=[FunctionArgument(name='int', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description="Converts a UTF-8 string to title case (uppercase). If ''input'' is an integer, it is treated as a codepoint and a converted codepoint (integer) is returned.", arguments={'input': 'A string character sequence OR an integer value'}, result="Returns a ''string'' in uppercase OR returns an ''integer'' (see description)."), oop=None, url=FunctionUrl(url='/wiki/Utf8.title', name='utf8.title', category='UTF8 Library', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='width', return_types=['int', 'utf8.'], arguments=[FunctionArgument(name='int', argument_type='string', default_value=None, optional=False), FunctionArgument(name='ambi', argument_type='bool', default_value=None, optional=True), FunctionArgument(name='default', argument_type='int', default_value=None, optional=True)]), docs=FunctionDoc(description='Calculates the width of UTF-8 strings with special/unprintable characters, which require special width treatment.', arguments={'input': 'A string character sequence OR a codepoint integer\n{{OptionalArg}}', 'ambi_is_double': 'A boolean, if set to true, ambiguous characters width is 2 (see example below).', 'default_width': 'An integer, if given, is used as width for unprintable characters.'}, result="Returns the ''integer'' width of the input string OR the width of the codepoint integer."), oop=None, url=FunctionUrl(url='/wiki/Utf8.width', name='utf8.width', category='UTF8 Library', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='width', return_types=['int', 'utf8.'], arguments=[FunctionArgument(name='int', argument_type='string', default_value=None, optional=False), FunctionArgument(name='ambi', argument_type='bool', default_value=None, optional=True), FunctionArgument(name='default', argument_type='int', default_value=None, optional=True)]), docs=FunctionDoc(description='Calculates the width of UTF-8 strings with special/unprintable characters, which require special width treatment.', arguments={'input': 'A string character sequence OR a codepoint integer\n{{OptionalArg}}', 'ambi_is_double': 'A boolean, if set to true, ambiguous characters width is 2 (see example below).', 'default_width': 'An integer, if given, is used as width for unprintable characters.'}, result="Returns the ''integer'' width of the input string OR the width of the codepoint integer."), oop=None, url=FunctionUrl(url='/wiki/Utf8.width', name='utf8.width', category='UTF8 Library', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='width', return_types=['int,', 'int,', 'int', 'utf8.'], arguments=[FunctionArgument(name='input', argument_type='string', default_value=None, optional=False), FunctionArgument(name='location', argument_type='int', default_value=None, optional=False), FunctionArgument(name='ambi', argument_type='bool', default_value=None, optional=True), FunctionArgument(name='default', argument_type='int', default_value=None, optional=True)]), docs=FunctionDoc(description='Returns the location, offset and width of the character at the given location in the UTF-8 string.', arguments={'input': 'A string character sequence\n{{OptionalArg}}', 'ambi_is_double': 'A boolean, if set to true, ambiguous characters width is 2 (see example).', 'default_width': 'An integer, if given, is used as width for unprintable characters.'}, result="Returns the given location, the offset in UTF-8 encoding (if cursor is in the middle of the wide char - offset will be 2) and the width of the character, otherwise only the location as ''integer'' will be returned."), oop=None, url=FunctionUrl(url='/wiki/Utf8.widthindex', name='utf8.widthindex', category='UTF8 Library', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='width', return_types=['int,', 'int,', 'int', 'utf8.'], arguments=[FunctionArgument(name='input', argument_type='string', default_value=None, optional=False), FunctionArgument(name='location', argument_type='int', default_value=None, optional=False), FunctionArgument(name='ambi', argument_type='bool', default_value=None, optional=True), FunctionArgument(name='default', argument_type='int', default_value=None, optional=True)]), docs=FunctionDoc(description='Returns the location, offset and width of the character at the given location in the UTF-8 string.', arguments={'input': 'A string character sequence\n{{OptionalArg}}', 'ambi_is_double': 'A boolean, if set to true, ambiguous characters width is 2 (see example).', 'default_width': 'An integer, if given, is used as width for unprintable characters.'}, result="Returns the given location, the offset in UTF-8 encoding (if cursor is in the middle of the wide char - offset will be 2) and the width of the character, otherwise only the location as ''integer'' will be returned."), oop=None, url=FunctionUrl(url='/wiki/Utf8.widthindex', name='utf8.widthindex', category='UTF8 Library', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='addVehicleUpgrade', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='upgrade', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function adds an upgrade to a [[vehicle]], e.g. nitrous, hydraulics.', arguments={'theVehicle': ': The element representing the vehicle you wish to add the upgrade to.', 'upgrade': ": The id of the upgrade you wish to add. (1000 to 1193), see Vehicle Upgrades\n'''Note:''' setCameraTarget will behave strangely if you use hydraulics (upgrade id: 1087) server sided and when your camera target is the player inside the vehicle with hydraulics and if the player is not you."}, result="Returns ''true'' if the upgrade was successfully added to the vehicle, otherwise ''false''."), oop=None, url=FunctionUrl(url='/wiki/AddVehicleUpgrade', name='addVehicleUpgrade', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='addVehicleUpgrade', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='upgrade', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function adds an upgrade to a [[vehicle]], e.g. nitrous, hydraulics.', arguments={'theVehicle': ': The element representing the vehicle you wish to add the upgrade to.', 'upgrade': ": The id of the upgrade you wish to add. (1000 to 1193), see Vehicle Upgrades\n'''Note:''' setCameraTarget will behave strangely if you use hydraulics (upgrade id: 1087) server sided and when your camera target is the player inside the vehicle with hydraulics and if the player is not you."}, result="Returns ''true'' if the upgrade was successfully added to the vehicle, otherwise ''false''."), oop=None, url=FunctionUrl(url='/wiki/AddVehicleUpgrade', name='addVehicleUpgrade', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='attachTrailerToVehicle', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='theTrailer', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description='This function attaches a trailer type vehicle to a trailer-towing-type vehicle.', arguments={'theVehicle': ': the vehicle you wish to attach a trailer to.', 'theTrailer': ': the trailer you wish to be attached.'}, result="Returns ''true'' if the vehicle's were successfully attached, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/AttachTrailerToVehicle', name='attachTrailerToVehicle', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='attachTrailerToVehicle', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='theTrailer', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description='This function attaches a trailer type vehicle to a trailer-towing-type vehicle.', arguments={'theVehicle': ': the vehicle you wish to attach a trailer to.', 'theTrailer': ': the trailer you wish to be attached.'}, result="Returns ''true'' if the vehicle's were successfully attached, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/AttachTrailerToVehicle', name='attachTrailerToVehicle', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='blowVehicle', return_types=['bool'], arguments=[FunctionArgument(name='vehicleToBlow', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='explode', argument_type='bool', default_value='true', optional=False)]), docs=FunctionDoc(description='This function will blow up a vehicle. This will cause an explosion and will kill the driver and any passengers inside it.', arguments={'vehicleToBlow': 'the vehicle that you wish to blow up.\n{{OptionalArg}} ', 'explode': 'if this argument is true then the vehicle will explode, otherwise it will just be blown up silently.'}, result="Returns ''true'' if the vehicle was blown up, ''false'' if invalid arguments were passed to the function."), oop=FunctionOOP(class_name='vehicle', method_name='blow', field='blown'), url=FunctionUrl(url='/wiki/BlowVehicle', name='blowVehicle', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='blowVehicle', return_types=['bool'], arguments=[FunctionArgument(name='vehicleToBlow', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description='This function will blow up a vehicle. This will cause an explosion and will kill the driver and any passengers inside it.', arguments={'vehicleToBlow': 'the vehicle that you wish to blow up.'}, result="Returns ''true'' if the vehicle was blown up, ''false'' if invalid arguments were passed to the function."), oop=None, url=FunctionUrl(url='/wiki/BlowVehicle', name='blowVehicle', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='createVehicle', return_types=['vehicle'], arguments=[FunctionArgument(name='model', argument_type='int', default_value=None, optional=False), FunctionArgument(name='x', argument_type='float', default_value=None, optional=False), FunctionArgument(name='y', argument_type='float', default_value=None, optional=False), FunctionArgument(name='z', argument_type='float', default_value=None, optional=False), FunctionArgument(name='rx', argument_type='float', default_value=None, optional=True), FunctionArgument(name='ry', argument_type='float', default_value=None, optional=True), FunctionArgument(name='rz', argument_type='float', default_value=None, optional=True), FunctionArgument(name='numberplate', argument_type='string', default_value=None, optional=True), FunctionArgument(name='bDirection', argument_type='bool', default_value=None, optional=True), FunctionArgument(name='variant1', argument_type='int', default_value=None, optional=True), FunctionArgument(name='variant2', argument_type='int', default_value=None, optional=True)]), docs=FunctionDoc(description='This function creates a vehicle at the specified location.\nIts worth nothing that the position of the vehicle is the center point of the vehicle, not its base. As such, you need to ensure that the z value (vertical axis) is some height above the ground. You can find the exact height using the client side function [[getElementDistanceFromCentreOfMassToBaseOfModel]], or you can estimate it yourself and just spawn the vehicle so it drops to the ground.', arguments={'model': ': The Vehicle IDs|vehicle ID of the vehicle being created.', 'x': ': A floating point number representing the X coordinate on the map.', 'y': ': A floating point number representing the Y coordinate on the map.', 'z': ': A floating point number representing the Z coordinate on the map.\n{{OptionalArg}}', 'rx': ': A floating point number representing the rotation about the X axis in degrees.', 'ry': ': A floating point number representing the rotation about the Y axis in degrees.', 'rz': ': A floating point number representing the rotation about the Z axis in degrees.', 'numberplate': ': A string that will go on the number plate of the vehicle (max 8 characters).', 'bDirection': '(serverside only): Placeholder boolean which provides backward compatibility with some scripts. It never had any effect, but it is read by the code. It is recommended to ignore this argument, passing false or the variant1 argument in its place.\n{{New feature/item|3.0120|1.2|| ', 'variant1': ': An integer for the first vehicle variant. See vehicle variants.', 'variant2': ': An integer for the second vehicle variant. See vehicle variants.\n}}'}, result="Returns the [[vehicle]] element that was created. Returns ''false'' if the arguments are incorrect, or if the vehicle limit of 65535 is exceeded."), oop=None, url=FunctionUrl(url='/wiki/CreateVehicle', name='createVehicle', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='createVehicle', return_types=['vehicle'], arguments=[FunctionArgument(name='model', argument_type='int', default_value=None, optional=False), FunctionArgument(name='x', argument_type='float', default_value=None, optional=False), FunctionArgument(name='y', argument_type='float', default_value=None, optional=False), FunctionArgument(name='z', argument_type='float', default_value=None, optional=False), FunctionArgument(name='rx', argument_type='float', default_value=None, optional=True), FunctionArgument(name='ry', argument_type='float', default_value=None, optional=True), FunctionArgument(name='rz', argument_type='float', default_value=None, optional=True), FunctionArgument(name='numberplate', argument_type='string', default_value=None, optional=True), FunctionArgument(name='bDirection', argument_type='bool', default_value=None, optional=True), FunctionArgument(name='variant1', argument_type='int', default_value=None, optional=True), FunctionArgument(name='variant2', argument_type='int', default_value=None, optional=True)]), docs=FunctionDoc(description='This function creates a vehicle at the specified location.\nIts worth nothing that the position of the vehicle is the center point of the vehicle, not its base. As such, you need to ensure that the z value (vertical axis) is some height above the ground. You can find the exact height using the client side function [[getElementDistanceFromCentreOfMassToBaseOfModel]], or you can estimate it yourself and just spawn the vehicle so it drops to the ground.', arguments={'model': ': The Vehicle IDs|vehicle ID of the vehicle being created.', 'x': ': A floating point number representing the X coordinate on the map.', 'y': ': A floating point number representing the Y coordinate on the map.', 'z': ': A floating point number representing the Z coordinate on the map.\n{{OptionalArg}}', 'rx': ': A floating point number representing the rotation about the X axis in degrees.', 'ry': ': A floating point number representing the rotation about the Y axis in degrees.', 'rz': ': A floating point number representing the rotation about the Z axis in degrees.', 'numberplate': ': A string that will go on the number plate of the vehicle (max 8 characters).', 'bDirection': '(serverside only): Placeholder boolean which provides backward compatibility with some scripts. It never had any effect, but it is read by the code. It is recommended to ignore this argument, passing false or the variant1 argument in its place.\n{{New feature/item|3.0120|1.2|| ', 'variant1': ': An integer for the first vehicle variant. See vehicle variants.', 'variant2': ': An integer for the second vehicle variant. See vehicle variants.\n}}'}, result="Returns the [[vehicle]] element that was created. Returns ''false'' if the arguments are incorrect, or if the vehicle limit of 65535 is exceeded."), oop=None, url=FunctionUrl(url='/wiki/CreateVehicle', name='createVehicle', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='detachTrailerFromVehicle', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='theTrailer', argument_type='vehicle', default_value='nil', optional=True)]), docs=FunctionDoc(description='This function detaches an already attached trailer from a vehicle.', arguments={'theVehicle': ': The vehicle you wish to detach a trailer from.', 'theTrailer': ": The trailer you wish to be detached.\n{{Note|If 'theTrailer' is specified, it will only detach if this matches. If it is not specified, any trailer attached to 'theVehicle' will be detached.}}"}, result="Returns 'true' if the vehicle's were successfully detached, 'false' otherwise."), oop=FunctionOOP(class_name='vehicle', method_name="detachTrailer}}\n===Required Arguments===\n*'''theVehicle''': The [[vehicle]] you wish to detach a trailer from.\n\n===Optional Arguments===\n*'''theTrailer''': The trailer you wish to be detached.\n{{Note", field="If 'theTrailer' is specified, it will only detach if this matches. If it is not specified, any trailer attached to 'theVehicle' will be detached.}}\n\n==Returns==\nReturns 'true' if the vehicle's were successfully detached, 'false' otherwise.\n\n"), url=FunctionUrl(url='/wiki/DetachTrailerFromVehicle', name='detachTrailerFromVehicle', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='detachTrailerFromVehicle', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='theTrailer', argument_type='vehicle', default_value='nil', optional=True)]), docs=FunctionDoc(description='This function detaches an already attached trailer from a vehicle.', arguments={'theVehicle': ': The vehicle you wish to detach a trailer from.', 'theTrailer': ": The trailer you wish to be detached.\n{{Note|If 'theTrailer' is specified, it will only detach if this matches. If it is not specified, any trailer attached to 'theVehicle' will be detached.}}"}, result="Returns 'true' if the vehicle's were successfully detached, 'false' otherwise."), oop=FunctionOOP(class_name='vehicle', method_name="detachTrailer}}\n===Required Arguments===\n*'''theVehicle''': The [[vehicle]] you wish to detach a trailer from.\n\n===Optional Arguments===\n*'''theTrailer''': The trailer you wish to be detached.\n{{Note", field="If 'theTrailer' is specified, it will only detach if this matches. If it is not specified, any trailer attached to 'theVehicle' will be detached.}}\n\n==Returns==\nReturns 'true' if the vehicle's were successfully detached, 'false' otherwise.\n\n"), url=FunctionUrl(url='/wiki/DetachTrailerFromVehicle', name='detachTrailerFromVehicle', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='fixVehicle', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description="This function will set a [[vehicle]]'s health to full and fix its damage model. If you wish to only change the vehicle's health, without affecting its damage model, use [[setElementHealth]].", arguments={'theVehicle': 'the vehicle you wish to fix'}, result="Returns ''true'' if the vehicle was fixed, ''false'' if '''theVehicle''' is invalid."), oop=None, url=FunctionUrl(url='/wiki/FixVehicle', name='fixVehicle', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='fixVehicle', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description="This function will set a [[vehicle]]'s health to full and fix its damage model. If you wish to only change the vehicle's health, without affecting its damage model, use [[setElementHealth]].", arguments={'theVehicle': 'the vehicle you wish to fix'}, result="Returns ''true'' if the vehicle was fixed, ''false'' if '''theVehicle''' is invalid."), oop=None, url=FunctionUrl(url='/wiki/FixVehicle', name='fixVehicle', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getOriginalHandling', return_types=['table'], arguments=[FunctionArgument(name='modelID', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns a table of the original vehicle handling. Use [[getVehicleHandling]] if you wish to get the current handling of a vehicle, or [[getModelHandling]] for a specific vehicle model.', arguments={'modelID': 'The vehicle ID you wish to get the original handling from.'}, result="Returns a ''table'' containing all the handling data, ''false'' otherwise. Here a list of valid table properties and what they return:\n{{Handling Properties}}"), oop=None, url=FunctionUrl(url='/wiki/GetOriginalHandling', name='getOriginalHandling', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getOriginalHandling', return_types=['table'], arguments=[FunctionArgument(name='modelID', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns a table of the original vehicle handling. Use [[getVehicleHandling]] if you wish to get the current handling of a vehicle, or [[getModelHandling]] for a specific vehicle model.', arguments={'modelID': 'The vehicle ID you wish to get the original handling from.'}, result="Returns a ''table'' containing all the handling data, ''false'' otherwise. Here a list of valid table properties and what they return:\n{{Handling Properties}}"), oop=None, url=FunctionUrl(url='/wiki/GetOriginalHandling', name='getOriginalHandling', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getTrainDirection', return_types=['bool'], arguments=[FunctionArgument(name='train', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description='Gets the direction in which a train is driving (clockwise or counterclockwise).', arguments={'train': 'the train of which to get the driving direction.'}, result="Returns ''true'' if the train is driving clockwise on the train track, ''false'' if it is going counterclockwise or a failure occured."), oop=FunctionOOP(class_name='vehicle', method_name='getDirection', field='direction'), url=FunctionUrl(url='/wiki/GetTrainDirection', name='getTrainDirection', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getTrainDirection', return_types=['bool'], arguments=[FunctionArgument(name='train', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description='Gets the direction in which a train is driving (clockwise or counterclockwise).', arguments={'train': 'the train of which to get the driving direction.'}, result="Returns ''true'' if the train is driving clockwise on the train track, ''false'' if it is going counterclockwise or a failure occured."), oop=FunctionOOP(class_name='vehicle', method_name='getDirection', field='direction'), url=FunctionUrl(url='/wiki/GetTrainDirection', name='getTrainDirection', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getTrainPosition', return_types=['float'], arguments=[FunctionArgument(name='train', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description='Gets the position the train is currently on the track\n}}', arguments={'train': 'the train to get the position of'}, result="Returns a float that represents how along the track it is, ''false'' if there is problem with train element."), oop=FunctionOOP(class_name='vehicle', method_name='getTrainPosition', field='trainPosition'), url=FunctionUrl(url='/wiki/GetTrainPosition', name='getTrainPosition', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getTrainPosition', return_types=['float'], arguments=[FunctionArgument(name='train', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description='Gets the position the train is currently on the track\n}}', arguments={'train': 'the train to get the position of'}, result="Returns a float that represents how along the track it is, ''false'' if there is problem with train element."), oop=FunctionOOP(class_name='vehicle', method_name='getTrainPosition', field='trainPosition'), url=FunctionUrl(url='/wiki/GetTrainPosition', name='getTrainPosition', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getTrainSpeed', return_types=['float'], arguments=[FunctionArgument(name='train', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description='Gets the speed at which a train is traveling on the rails.', arguments={'train': 'the train of which to retrieve the speed.'}, result="Returns the train's speed if successful, ''false'' otherwise."), oop=FunctionOOP(class_name='vehicle', method_name='getSpeed', field='trainSpeed'), url=FunctionUrl(url='/wiki/GetTrainSpeed', name='getTrainSpeed', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getTrainSpeed', return_types=['float'], arguments=[FunctionArgument(name='train', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description='Gets the speed at which a train is traveling on the rails.', arguments={'train': 'the train of which to retrieve the speed.'}, result="Returns the train's speed if successful, ''false'' otherwise."), oop=FunctionOOP(class_name='vehicle', method_name='getSpeed', field='trainSpeed'), url=FunctionUrl(url='/wiki/GetTrainSpeed', name='getTrainSpeed', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getTrainTrack', return_types=['int'], arguments=[FunctionArgument(name='train', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description='Gets the track of a train\n}}', arguments={'train': 'the train of which to get the track.'}, result="Returns an integer (whole number) that represents the train track, ''false'' if there is problem with train element."), oop=FunctionOOP(class_name='vehicle', method_name='getTrack', field='track'), url=FunctionUrl(url='/wiki/GetTrainTrack', name='getTrainTrack', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getTrainTrack', return_types=['int'], arguments=[FunctionArgument(name='train', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description='Gets the track of a train\n}}', arguments={'train': 'the train of which to get the track.'}, result="Returns an integer (whole number) that represents the train track, ''false'' if there is problem with train element."), oop=FunctionOOP(class_name='vehicle', method_name='getTrack', field='track'), url=FunctionUrl(url='/wiki/GetTrainTrack', name='getTrainTrack', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getVehicleColor', return_types=['int,', 'int,', 'int,', 'int,', 'int,', 'int,', 'int,', 'int,', 'int,', 'int,', 'int,', 'int'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='bRGB', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns the color of the specified vehicle. A vehicle can have up to four colors.', arguments={'theVehicle': 'The vehicle that you wish to get the color of.', 'bRGB ': 'A boolean specifying whether to return RGB values. A setting of false will result in the function returning color ids instead.'}, result="*Returns 12 [[int|ints]] (if bRGB is ''true'') indicating the red, green and blue components of each of the 4 vehicle colors.\n*Returns 4 [[int|ints]] (if bRGB is ''false'') indicating the color ids of each of the 4 vehicle colors.\n*Returns ''false'' if the vehicle doesn't exist.\nValid color ids if bRGB is set to false:\n{{Vehicle_colors}}\n<br>"), oop=FunctionOOP(class_name='vehicle', method_name="getColor}}\n\n===Required Arguments=== \n*'''theVehicle:''' The [[vehicle]] that you wish to get the color of.\n*'''bRGB :''' A boolean specifying whether to return RGB values. A setting of ''false'' will result in the function returning color ids instead.\n\n===Returns===\n*Returns 12 [[int", field="ints]] (if bRGB is ''true'') indicating the red, green and blue components of each of the 4 vehicle colors.\n*Returns 4 [[int"), url=FunctionUrl(url='/wiki/GetVehicleColor', name='getVehicleColor', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getVehicleColor', return_types=['int,', 'int,', 'int,', 'int,', 'int,', 'int,', 'int,', 'int,', 'int,', 'int,', 'int,', 'int'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='bRGB', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns the color of the specified vehicle. A vehicle can have up to four colors.', arguments={'theVehicle': 'The vehicle that you wish to get the color of.', 'bRGB ': 'A boolean specifying whether to return RGB values. A setting of false will result in the function returning color ids instead.'}, result="*Returns 12 [[int|ints]] (if bRGB is ''true'') indicating the red, green and blue components of each of the 4 vehicle colors.\n*Returns 4 [[int|ints]] (if bRGB is ''false'') indicating the color ids of each of the 4 vehicle colors.\n*Returns ''false'' if the vehicle doesn't exist.\nValid color ids if bRGB is set to false:\n{{Vehicle_colors}}\n<br>"), oop=FunctionOOP(class_name='vehicle', method_name="getColor}}\n\n===Required Arguments=== \n*'''theVehicle:''' The [[vehicle]] that you wish to get the color of.\n*'''bRGB :''' A boolean specifying whether to return RGB values. A setting of ''false'' will result in the function returning color ids instead.\n\n===Returns===\n*Returns 12 [[int", field="ints]] (if bRGB is ''true'') indicating the red, green and blue components of each of the 4 vehicle colors.\n*Returns 4 [[int"), url=FunctionUrl(url='/wiki/GetVehicleColor', name='getVehicleColor', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getVehicleCompatibleUpgrades', return_types=['table'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='slot', argument_type='int', default_value=None, optional=True)]), docs=FunctionDoc(description='This function returns a table of all the compatible upgrades (or all for a specified slot, optionally) for a specified vehicle.', arguments={'theVehicle': 'the vehicle you wish to retrieve the list of compatible upgrades of.', 'slot': 'the upgrade slot number for which youre getting the list (from 0 to 16). Compatible upgrades for all slots are listed if this is not specified.'}, result="Returns a ''table'' with all the compatible upgrades, or ''false'' if invalid arguments are passed."), oop=FunctionOOP(class_name='vehicle', method_name='getCompatibleUpgrades', field="compatibleUpgrades}}\n===Required Arguments=== \n*'''theVehicle:''' the [[vehicle]] you wish to retrieve the list of compatible upgrades of.\n\n===Optional Arguments=== \n*'''slot:''' the upgrade slot number for which you're getting the list (from 0 to 16). Compatible upgrades for all slots are listed if this is not specified.\n\n===Returns===\nReturns a ''table'' with all the compatible upgrades, or ''false'' if invalid arguments are passed.\n\n"), url=FunctionUrl(url='/wiki/GetVehicleCompatibleUpgrades', name='getVehicleCompatibleUpgrades', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getVehicleCompatibleUpgrades', return_types=['table'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='slot', argument_type='int', default_value=None, optional=True)]), docs=FunctionDoc(description='This function returns a table of all the compatible upgrades (or all for a specified slot, optionally) for a specified vehicle.', arguments={'theVehicle': 'the vehicle you wish to retrieve the list of compatible upgrades of.', 'slot': 'the upgrade slot number for which youre getting the list (from 0 to 16). Compatible upgrades for all slots are listed if this is not specified.'}, result="Returns a ''table'' with all the compatible upgrades, or ''false'' if invalid arguments are passed."), oop=FunctionOOP(class_name='vehicle', method_name='getCompatibleUpgrades', field="compatibleUpgrades}}\n===Required Arguments=== \n*'''theVehicle:''' the [[vehicle]] you wish to retrieve the list of compatible upgrades of.\n\n===Optional Arguments=== \n*'''slot:''' the upgrade slot number for which you're getting the list (from 0 to 16). Compatible upgrades for all slots are listed if this is not specified.\n\n===Returns===\nReturns a ''table'' with all the compatible upgrades, or ''false'' if invalid arguments are passed.\n\n"), url=FunctionUrl(url='/wiki/GetVehicleCompatibleUpgrades', name='getVehicleCompatibleUpgrades', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getVehicleController', return_types=['player'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is used to get the player in control of the specified vehicle which includes somebody who is trying to enter the drivers seat.', arguments={'theVehicle': 'the vehicle you want to get the controller of.'}, result="Returns a [[player]] object, if there isn't a driver, it will search the 'trailer chain' for the front driver, ''false'' otherwise."), oop=FunctionOOP(class_name='vehicle', method_name='getController', field="controller}}\n===Required Arguments=== \n*'''theVehicle:''' the [[vehicle]] you want to get the 'controller' of.\n\n===Returns===\nReturns a [[player]] object, if there isn't a driver, it will search the 'trailer chain' for the front driver, ''false'' otherwise.\n\n"), url=FunctionUrl(url='/wiki/GetVehicleController', name='getVehicleController', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getVehicleController', return_types=['player'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is used to get the player in control of the specified vehicle which includes somebody who is trying to enter the drivers seat.', arguments={'theVehicle': 'the vehicle you want to get the controller of.'}, result="Returns a [[player]] object, if there isn't a driver, it will search the 'trailer chain' for the front driver, ''false'' otherwise."), oop=FunctionOOP(class_name='vehicle', method_name='getController', field="controller}}\n===Required Arguments=== \n*'''theVehicle:''' the [[vehicle]] you want to get the 'controller' of.\n\n===Returns===\nReturns a [[player]] object, if there isn't a driver, it will search the 'trailer chain' for the front driver, ''false'' otherwise.\n\n"), url=FunctionUrl(url='/wiki/GetVehicleController', name='getVehicleController', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getVehicleDoorOpenRatio', return_types=['float'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='door', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description="This function tells you how open a door is (the 'open ratio'). Doors include boots/trunks and bonnets on vehicles that have them.", arguments={'theVehicle': 'The vehicle that you wish to get the door open ratio of.', 'door': 'A whole number, 0 (hood), 1 (trunk), 2 (front left), 3 (front right), 4 (rear left), 5 (rear right)'}, result="Returns a number between 0 and 1 that indicates how open the door is. 0 is closed, and 1 is fully open. Returns ''false'' if invalid arguments are passed."), oop=FunctionOOP(class_name='vehicle', method_name='getDoorOpenRatio', field=None), url=FunctionUrl(url='/wiki/GetVehicleDoorOpenRatio', name='getVehicleDoorOpenRatio', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getVehicleDoorOpenRatio', return_types=['float'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='door', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description="This function tells you how open a door is (the 'open ratio'). Doors include boots/trunks and bonnets on vehicles that have them.", arguments={'theVehicle': 'The vehicle that you wish to get the door open ratio of.', 'door': 'A whole number, 0 (hood), 1 (trunk), 2 (front left), 3 (front right), 4 (rear left), 5 (rear right)'}, result="Returns a number between 0 and 1 that indicates how open the door is. 0 is closed, and 1 is fully open. Returns ''false'' if invalid arguments are passed."), oop=FunctionOOP(class_name='vehicle', method_name='getDoorOpenRatio', field=None), url=FunctionUrl(url='/wiki/GetVehicleDoorOpenRatio', name='getVehicleDoorOpenRatio', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getVehicleDoorState', return_types=['int'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='door', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns the current state of the specifed door on the vehicle.', arguments={'theVehicle': 'the vehicle you want to get the door status of.', 'door': 'a whole number representing which door to get the status of. Valid values are:', '0': 'Hood', '1': 'Trunk', '2': 'Front left', '3': 'Front right', '4': 'Rear left', '5': 'Rear right'}, result="If successful, one of the following integers will be returned:\n* '''0:''' Shut, intact (also returned if the door does not exist)\n* '''1:''' Ajar, intact\n* '''2:''' Shut, damaged\n* '''3:''' Ajar, damaged\n* '''4:''' Missing"), oop=FunctionOOP(class_name='vehicle', method_name='getDoorState', field=None), url=FunctionUrl(url='/wiki/GetVehicleDoorState', name='getVehicleDoorState', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getVehicleDoorState', return_types=['int'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='door', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns the current state of the specifed door on the vehicle.', arguments={'theVehicle': 'the vehicle you want to get the door status of.', 'door': 'a whole number representing which door to get the status of. Valid values are:', '0': 'Hood', '1': 'Trunk', '2': 'Front left', '3': 'Front right', '4': 'Rear left', '5': 'Rear right'}, result="If successful, one of the following integers will be returned:\n* '''0:''' Shut, intact (also returned if the door does not exist)\n* '''1:''' Ajar, intact\n* '''2:''' Shut, damaged\n* '''3:''' Ajar, damaged\n* '''4:''' Missing"), oop=FunctionOOP(class_name='vehicle', method_name='getDoorState', field=None), url=FunctionUrl(url='/wiki/GetVehicleDoorState', name='getVehicleDoorState', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getVehicleEngineState', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'theVehicle': ': the vehicle you wish to get the engine state of.'}, result="Returns '''true''' if the vehicle's engine is started, '''false''' otherwise."), oop=FunctionOOP(class_name='vehicle', method_name='getEngineState', field='engineState'), url=FunctionUrl(url='/wiki/GetVehicleEngineState', name='getVehicleEngineState', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getVehicleEngineState', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'theVehicle': ': the vehicle you wish to get the engine state of.'}, result="Returns '''true''' if the vehicle's engine is started, '''false''' otherwise."), oop=FunctionOOP(class_name='vehicle', method_name='getEngineState', field='engineState'), url=FunctionUrl(url='/wiki/GetVehicleEngineState', name='getVehicleEngineState', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getVehicleHandling', return_types=['table'], arguments=[FunctionArgument(name='theVehicle', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns a table of the current vehicle handling data.', arguments={'theVehicle': 'the vehicle you wish to get the handling data of.'}, result="Returns a ''table'' containing all the handling data, ''false'' otherwise. Here's a list of valid table properties and what they return:\n{{Handling Properties}}"), oop=FunctionOOP(class_name='vehicle', method_name='getHandling', field="handling}}\n===Required Arguments=== \n*'''theVehicle:''' the vehicle you wish to get the handling data of.\n\n===Returns===\nReturns a ''table'' containing all the handling data, ''false'' otherwise. Here's a list of valid table properties and what they return:\n{{Handling Properties}}\n\n"), url=FunctionUrl(url='/wiki/GetVehicleHandling', name='getVehicleHandling', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getVehicleHandling', return_types=['table'], arguments=[FunctionArgument(name='theVehicle', argument_type='element', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns a table of the current vehicle handling data.', arguments={'theVehicle': 'the vehicle you wish to get the handling data of.'}, result="Returns a ''table'' containing all the handling data, ''false'' otherwise. Here's a list of valid table properties and what they return:\n{{Handling Properties}}"), oop=FunctionOOP(class_name='vehicle', method_name='getHandling', field="handling}}\n===Required Arguments=== \n*'''theVehicle:''' the vehicle you wish to get the handling data of.\n\n===Returns===\nReturns a ''table'' containing all the handling data, ''false'' otherwise. Here's a list of valid table properties and what they return:\n{{Handling Properties}}\n\n"), url=FunctionUrl(url='/wiki/GetVehicleHandling', name='getVehicleHandling', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getVehicleHeadLightColor', return_types=['int,', 'int,', 'int'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description='This function will get the headlight color of a vehicle.', arguments={'theVehicle': 'The vehicle that you wish to set the headlight color of.'}, result="Returns three ''integers'' for the red, green and blue of the headlight color for the specified vehicle, ''false'' if an invalid vehicle was specified."), oop=FunctionOOP(class_name='vehicle', method_name='getHeadLightColor', field=None), url=FunctionUrl(url='/wiki/GetVehicleHeadLightColor', name='getVehicleHeadLightColor', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getVehicleHeadLightColor', return_types=['int,', 'int,', 'int'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description='This function will get the headlight color of a vehicle.', arguments={'theVehicle': 'The vehicle that you wish to set the headlight color of.'}, result="Returns three ''integers'' for the red, green and blue of the headlight color for the specified vehicle, ''false'' if an invalid vehicle was specified."), oop=FunctionOOP(class_name='vehicle', method_name='getHeadLightColor', field=None), url=FunctionUrl(url='/wiki/GetVehicleHeadLightColor', name='getVehicleHeadLightColor', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getVehicleLandingGearDown', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description="This function is used to check whether a vehicle's landing gear is down or not. Only planes can be used with this function.", arguments={'theVehicle': 'the vehicle of which you wish to check the landing gear state.'}, result="Returns ''true'' if landing gear is down, ''false'' if the landing gear is up.<br />\nReturns ''nil'' if the vehicle has no landing gear, or is invalid."), oop=FunctionOOP(class_name='vehicle', method_name='getLangingGearDown', field='landingGearDown'), url=FunctionUrl(url='/wiki/GetVehicleLandingGearDown', name='getVehicleLandingGearDown', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getVehicleLandingGearDown', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description="This function is used to check whether a vehicle's landing gear is down or not. Only planes can be used with this function.", arguments={'theVehicle': 'the vehicle of which you wish to check the landing gear state.'}, result="Returns ''true'' if landing gear is down, ''false'' if the landing gear is up.<br />\nReturns ''nil'' if the vehicle has no landing gear, or is invalid."), oop=FunctionOOP(class_name='vehicle', method_name='getLangingGearDown', field='landingGearDown'), url=FunctionUrl(url='/wiki/GetVehicleLandingGearDown', name='getVehicleLandingGearDown', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getVehicleLightState', return_types=['int'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='light', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns the current state of the specified light on the vehicle.', arguments={'theVehicle': 'the vehicle that you wish to know the light state of.', 'light': 'A whole number determining the individual light:', '0': 'Front left', '1': 'Front right', '2': 'Rear right', '3': 'Rear left'}, result='Returns 0 (working) or 1 (broken)'), oop=FunctionOOP(class_name='vehicle', method_name='getLightState', field=None), url=FunctionUrl(url='/wiki/GetVehicleLightState', name='getVehicleLightState', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getVehicleLightState', return_types=['int'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='light', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns the current state of the specified light on the vehicle.', arguments={'theVehicle': 'the vehicle that you wish to know the light state of.', 'light': 'A whole number determining the individual light:', '0': 'Front left', '1': 'Front right', '2': 'Rear right', '3': 'Rear left'}, result='Returns 0 (working) or 1 (broken)'), oop=FunctionOOP(class_name='vehicle', method_name='getLightState', field=None), url=FunctionUrl(url='/wiki/GetVehicleLightState', name='getVehicleLightState', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getVehicleMaxPassengers', return_types=['int'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns the maximum number of passengers that a specified vehicle can hold. Only passenger seats are counted, the driver seat is excluded.', arguments={'theVehicle': 'the vehicle that you wish to know the maximum capacity of.\nOR', 'modelID': 'the model id that you wish to know the maximum capacity of.'}, result='Returns an [[int]] indicating the maximum number of passengers that can enter a vehicle.'), oop=FunctionOOP(class_name='vehicle', method_name='getMaxPassengers', field="maxPassengers}}\n===Required Arguments===\n*'''theVehicle:''' the [[vehicle]] that you wish to know the maximum capacity of.\nOR\n*'''modelID:''' the model id that you wish to know the maximum capacity of.\n\n===Returns===\nReturns an [[int]] indicating the maximum number of passengers that can enter a vehicle.\n\n"), url=FunctionUrl(url='/wiki/GetVehicleMaxPassengers', name='getVehicleMaxPassengers', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getVehicleMaxPassengers', return_types=['int'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns the maximum number of passengers that a specified vehicle can hold. Only passenger seats are counted, the driver seat is excluded.', arguments={'theVehicle': 'the vehicle that you wish to know the maximum capacity of.\nOR', 'modelID': 'the model id that you wish to know the maximum capacity of.'}, result='Returns an [[int]] indicating the maximum number of passengers that can enter a vehicle.'), oop=FunctionOOP(class_name='vehicle', method_name='getMaxPassengers', field="maxPassengers}}\n===Required Arguments===\n*'''theVehicle:''' the [[vehicle]] that you wish to know the maximum capacity of.\nOR\n*'''modelID:''' the model id that you wish to know the maximum capacity of.\n\n===Returns===\nReturns an [[int]] indicating the maximum number of passengers that can enter a vehicle.\n\n"), url=FunctionUrl(url='/wiki/GetVehicleMaxPassengers', name='getVehicleMaxPassengers', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getVehicleModelFromName', return_types=['int'], arguments=[FunctionArgument(name='name', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='This function retrieves the model ID of a vehicle as an [[int]]eger value from its name.', arguments={'name': 'A string containing the name of the vehicle.\n{{All Vehicle Types}}'}, result='Returns an [[int]]eger if the name exists, \'\'false\'\' otherwise.\nIf you use this function on vehicles with shared names, such as "police", it will return the earliest occurrence of that vehicle\'s ID.'), oop=None, url=FunctionUrl(url='/wiki/GetVehicleModelFromName', name='getVehicleModelFromName', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getVehicleModelFromName', return_types=['int'], arguments=[FunctionArgument(name='name', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='This function retrieves the model ID of a vehicle as an [[int]]eger value from its name.', arguments={'name': 'A string containing the name of the vehicle.\n{{All Vehicle Types}}'}, result='Returns an [[int]]eger if the name exists, \'\'false\'\' otherwise.\nIf you use this function on vehicles with shared names, such as "police", it will return the earliest occurrence of that vehicle\'s ID.'), oop=None, url=FunctionUrl(url='/wiki/GetVehicleModelFromName', name='getVehicleModelFromName', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getVehicleName', return_types=['string'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns a string containing the name of the vehicle', arguments={'theVehicle': 'the vehicle you want to get the name of.'}, result="Returns a string containing the requested vehicle's name, or ''false'' if the vehicle passed to the function is invalid."), oop=FunctionOOP(class_name='vehicle', method_name='getName', field="name}}\n===Required Arguments=== \n*'''theVehicle:''' the [[vehicle]] you want to get the name of. \n\n===Returns===\nReturns a string containing the requested vehicle's name, or ''false'' if the vehicle passed to the function is invalid.\n\n"), url=FunctionUrl(url='/wiki/GetVehicleName', name='getVehicleName', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getVehicleName', return_types=['string'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns a string containing the name of the vehicle', arguments={'theVehicle': 'the vehicle you want to get the name of.'}, result="Returns a string containing the requested vehicle's name, or ''false'' if the vehicle passed to the function is invalid."), oop=FunctionOOP(class_name='vehicle', method_name='getName', field="name}}\n===Required Arguments=== \n*'''theVehicle:''' the [[vehicle]] you want to get the name of. \n\n===Returns===\nReturns a string containing the requested vehicle's name, or ''false'' if the vehicle passed to the function is invalid.\n\n"), url=FunctionUrl(url='/wiki/GetVehicleName', name='getVehicleName', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getVehicleNameFromModel', return_types=['string'], arguments=[FunctionArgument(name='model', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='Gets the name of a vehicle by its model ID.', arguments={'model': 'This is the vehicle model ID. See vehicle IDs to see what values will return names.'}, result='Returns the name of the vehicle if the model ID was valid, empty string otherwise<ref>https://bugs.multitheftauto.com/view.php?id=8523</ref>.'), oop=None, url=FunctionUrl(url='/wiki/GetVehicleNameFromModel', name='getVehicleNameFromModel', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getVehicleNameFromModel', return_types=['string'], arguments=[FunctionArgument(name='model', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='Gets the name of a vehicle by its model ID.', arguments={'model': 'This is the vehicle model ID. See vehicle IDs to see what values will return names.'}, result='Returns the name of the vehicle if the model ID was valid, empty string otherwise<ref>https://bugs.multitheftauto.com/view.php?id=8523</ref>.'), oop=None, url=FunctionUrl(url='/wiki/GetVehicleNameFromModel', name='getVehicleNameFromModel', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getVehicleOccupant', return_types=['player'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='seat', argument_type='int', default_value='0', optional=False)]), docs=FunctionDoc(description='This function gets the player sitting/trying to enter the specified vehicle.', arguments={'theVehicle': 'the vehicle of which you wish to retrieve the driver or a passenger.\n{{OptionalArg}} ', 'seat': 'the seat where the player is sitting (0 for driver, 1+ for passengers).'}, result="Returns the [[player]] sitting in the vehicle, or ''false'' if the seat is unoccupied or doesn't exist."), oop=None, url=FunctionUrl(url='/wiki/GetVehicleOccupant', name='getVehicleOccupant', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getVehicleOccupant', return_types=['player'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='seat', argument_type='int', default_value='0', optional=False)]), docs=FunctionDoc(description='This function gets the player sitting/trying to enter the specified vehicle.', arguments={'theVehicle': 'the vehicle of which you wish to retrieve the driver or a passenger.\n{{OptionalArg}} ', 'seat': 'the seat where the player is sitting (0 for driver, 1+ for passengers).'}, result="Returns the [[player]] sitting in the vehicle, or ''false'' if the seat is unoccupied or doesn't exist."), oop=None, url=FunctionUrl(url='/wiki/GetVehicleOccupant', name='getVehicleOccupant', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getVehicleOccupants', return_types=['table'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description='This function gets all peds sitting in the specified vehicle.', arguments={'theVehicle': 'the vehicle of which you wish to retrieve the occupants.'}, result='Returns a [[table]] with seat ID as an index and the occupant as an element like this: table[seat] = occupant\nReturns \'\'false\'\' if an invalid vehicle was passed or if the vehicle has no seats (like a trailer)\n<div style=\'font-weight: bold;background:blue;color:white;padding:2px; padding-left:8px;\'>COUNTING PLAYERS IN A VEHICLE</div>\n<div style=\'border: 2px solid blue;padding: 5px;\'>Don\'t use an ipairs loop with the table returned by this function. It will skip the driver, as ipairs starts at 1 and the driver seat is ID 0. And if there\'s an empty seat, ipairs will stop looping. You should use a pairs loop instead.\n<syntaxhighlight lang="lua">\nlocal counter = 0\nfor seat, player in pairs(getVehicleOccupants(pseudoVehicle)) do\n    counter = counter + 1\nend\noutputDebugString("Players in your vehicle: ".. counter)\n</syntaxhighlight>\n</div>'), oop=FunctionOOP(class_name='vehicle', method_name='getOccupants', field='occupants}}\n===Required Arguments=== \n*\'\'\'theVehicle:\'\'\' the [[vehicle]] of which you wish to retrieve the occupants.\n\n===Returns===\nReturns a [[table]] with seat ID as an index and the occupant as an element like this: table[seat] = occupant\n\nReturns \'\'false\'\' if an invalid vehicle was passed or if the vehicle has no seats (like a trailer)\n\n<div style=\'font-weight: bold;background:blue;color:white;padding:2px; padding-left:8px;\'>COUNTING PLAYERS IN A VEHICLE</div>\n<div style=\'border: 2px solid blue;padding: 5px;\'>Don\'t use an ipairs loop with the table returned by this function. It will skip the driver, as ipairs starts at 1 and the driver seat is ID 0. And if there\'s an empty seat, ipairs will stop looping. You should use a pairs loop instead.\n<syntaxhighlight lang="lua">\nlocal counter = 0\n\nfor seat, player in pairs(getVehicleOccupants(pseudoVehicle)) do\n    counter = counter + 1\nend\n\noutputDebugString("Players in your vehicle: ".. counter)\n</syntaxhighlight>\n</div>\n\n'), url=FunctionUrl(url='/wiki/GetVehicleOccupants', name='getVehicleOccupants', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getVehicleOccupants', return_types=['table'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description='This function gets all peds sitting in the specified vehicle.', arguments={'theVehicle': 'the vehicle of which you wish to retrieve the occupants.'}, result='Returns a [[table]] with seat ID as an index and the occupant as an element like this: table[seat] = occupant\nReturns \'\'false\'\' if an invalid vehicle was passed or if the vehicle has no seats (like a trailer)\n<div style=\'font-weight: bold;background:blue;color:white;padding:2px; padding-left:8px;\'>COUNTING PLAYERS IN A VEHICLE</div>\n<div style=\'border: 2px solid blue;padding: 5px;\'>Don\'t use an ipairs loop with the table returned by this function. It will skip the driver, as ipairs starts at 1 and the driver seat is ID 0. And if there\'s an empty seat, ipairs will stop looping. You should use a pairs loop instead.\n<syntaxhighlight lang="lua">\nlocal counter = 0\nfor seat, player in pairs(getVehicleOccupants(pseudoVehicle)) do\n    counter = counter + 1\nend\noutputDebugString("Players in your vehicle: ".. counter)\n</syntaxhighlight>\n</div>'), oop=FunctionOOP(class_name='vehicle', method_name='getOccupants', field='occupants}}\n===Required Arguments=== \n*\'\'\'theVehicle:\'\'\' the [[vehicle]] of which you wish to retrieve the occupants.\n\n===Returns===\nReturns a [[table]] with seat ID as an index and the occupant as an element like this: table[seat] = occupant\n\nReturns \'\'false\'\' if an invalid vehicle was passed or if the vehicle has no seats (like a trailer)\n\n<div style=\'font-weight: bold;background:blue;color:white;padding:2px; padding-left:8px;\'>COUNTING PLAYERS IN A VEHICLE</div>\n<div style=\'border: 2px solid blue;padding: 5px;\'>Don\'t use an ipairs loop with the table returned by this function. It will skip the driver, as ipairs starts at 1 and the driver seat is ID 0. And if there\'s an empty seat, ipairs will stop looping. You should use a pairs loop instead.\n<syntaxhighlight lang="lua">\nlocal counter = 0\n\nfor seat, player in pairs(getVehicleOccupants(pseudoVehicle)) do\n    counter = counter + 1\nend\n\noutputDebugString("Players in your vehicle: ".. counter)\n</syntaxhighlight>\n</div>\n\n'), url=FunctionUrl(url='/wiki/GetVehicleOccupants', name='getVehicleOccupants', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getVehicleOverrideLights', return_types=['int'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is used to find out the current state of the override-lights setting of a vehicle.', arguments={'theVehicle': ': the vehicle you wish to retrieve the override lights setting of.'}, result='Returns an integer value: 0 (No override), 1 (Force off) or 2 (Force on).'), oop=FunctionOOP(class_name='vehicle', method_name='getOverrideLights', field='overrideLights'), url=FunctionUrl(url='/wiki/GetVehicleOverrideLights', name='getVehicleOverrideLights', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getVehicleOverrideLights', return_types=['int'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is used to find out the current state of the override-lights setting of a vehicle.', arguments={'theVehicle': ': the vehicle you wish to retrieve the override lights setting of.'}, result='Returns an integer value: 0 (No override), 1 (Force off) or 2 (Force on).'), oop=FunctionOOP(class_name='vehicle', method_name='getOverrideLights', field='overrideLights'), url=FunctionUrl(url='/wiki/GetVehicleOverrideLights', name='getVehicleOverrideLights', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getVehiclePaintjob', return_types=['int'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description='This function gets the current paintjob on the specified vehicle. <br />', arguments={'theVehicle': ': the vehicle you wish to get the paintjob of.'}, result="Returns an integer representing the current paintjob on the vehicle. <br />\n* '''0''': The first paintjob\n* '''1''': The second paintjob\n* '''2''': The third paintjob\n* '''3''': Default paintjob (no paintjob)\n{{Note|Always returns 3 if paintjobs are not supported for the vehicle.}}"), oop=FunctionOOP(class_name='vehicle', method_name='getPaintjob', field='paintjob'), url=FunctionUrl(url='/wiki/GetVehiclePaintjob', name='getVehiclePaintjob', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getVehiclePaintjob', return_types=['int'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description='This function gets the current paintjob on the specified vehicle. <br />', arguments={'theVehicle': ': the vehicle you wish to get the paintjob of.'}, result="Returns an integer representing the current paintjob on the vehicle. <br />\n* '''0''': The first paintjob\n* '''1''': The second paintjob\n* '''2''': The third paintjob\n* '''3''': Default paintjob (no paintjob)\n{{Note|Always returns 3 if paintjobs are not supported for the vehicle.}}"), oop=FunctionOOP(class_name='vehicle', method_name='getPaintjob', field='paintjob'), url=FunctionUrl(url='/wiki/GetVehiclePaintjob', name='getVehiclePaintjob', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getVehiclePanelState', return_types=['int'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='panel', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns the current state of a specifed panel on the vehicle. A vehicle can have up to 7 panels.', arguments={'theVehicle': 'the vehicle that you wish to know the panel state of.', 'panel': 'an integer specifying the panel you want to know the state of. Not every vehicle has every panel. Possible values are:', '0': 'Front-left panel', '1': 'Front-right panel', '2': 'Rear-left panel', '3': 'Rear-right panel', '4': 'Windscreen', '5': 'Front bumper', '6': 'Rear bumper'}, result='Returns an [[int]] indicating the state of the specified the panel. This is a value between 0 and 3, with 0 indicating the panel is undamaged and 3 indicating it is very damaged.'), oop=FunctionOOP(class_name='vehicle', method_name='getPanelState', field=None), url=FunctionUrl(url='/wiki/GetVehiclePanelState', name='getVehiclePanelState', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getVehiclePanelState', return_types=['int'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='panel', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns the current state of a specifed panel on the vehicle. A vehicle can have up to 7 panels.', arguments={'theVehicle': 'the vehicle that you wish to know the panel state of.', 'panel': 'an integer specifying the panel you want to know the state of. Not every vehicle has every panel. Possible values are:', '0': 'Front-left panel', '1': 'Front-right panel', '2': 'Rear-left panel', '3': 'Rear-right panel', '4': 'Windscreen', '5': 'Front bumper', '6': 'Rear bumper'}, result='Returns an [[int]] indicating the state of the specified the panel. This is a value between 0 and 3, with 0 indicating the panel is undamaged and 3 indicating it is very damaged.'), oop=FunctionOOP(class_name='vehicle', method_name='getPanelState', field=None), url=FunctionUrl(url='/wiki/GetVehiclePanelState', name='getVehiclePanelState', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getVehiclePlateText', return_types=['string'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is used to retrieve the text on the number plate of a specified vehicle.', arguments={'theVehicle': 'the vehicle that you wish to retrieve the plate text from.'}, result="Returns a ''string'' that corresponds to the plate on the text, ''false'' if a bad argument was passed or if it is not a vehicle. Every vehicle (including planes, boats, etc.) has a numberplate, even if it's not visible."), oop=FunctionOOP(class_name='vehicle', method_name='getPlateText', field='plateText'), url=FunctionUrl(url='/wiki/GetVehiclePlateText', name='getVehiclePlateText', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getVehiclePlateText', return_types=['string'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is used to retrieve the text on the number plate of a specified vehicle.', arguments={'theVehicle': 'the vehicle that you wish to retrieve the plate text from.'}, result="Returns a ''string'' that corresponds to the plate on the text, ''false'' if a bad argument was passed or if it is not a vehicle. Every vehicle (including planes, boats, etc.) has a numberplate, even if it's not visible."), oop=FunctionOOP(class_name='vehicle', method_name='getPlateText', field='plateText'), url=FunctionUrl(url='/wiki/GetVehiclePlateText', name='getVehiclePlateText', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getVehicleSirens', return_types=['table'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description="This function gets the properties of a vehicle's sirens.\n}}", arguments={'theVehicle': 'The vehicle to get siren information of.'}, result='If the vehicle is invalid, it returns \'\'false\'\'. Otherwise, returns a \'\'table\'\' with sub tables containing the properties of each siren point in the following manner:\n<syntaxhighlight lang="lua">\n[float]   SirenData[sirenPoint].x\n[float]   SirenData[sirenPoint].y\n[float]   SirenData[sirenPoint].z\n[int]     SirenData[sirenPoint].Red\n[int]     SirenData[sirenPoint].Green\n[int]     SirenData[sirenPoint].Blue\n[int]     SirenData[sirenPoint].Alpha\n[int]     SirenData[sirenPoint].Min_Alpha\n</syntaxhighlight>'), oop=FunctionOOP(class_name='vehicle', method_name='getSirens', field='sirens'), url=FunctionUrl(url='/wiki/GetVehicleSirens', name='getVehicleSirens', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getVehicleSirens', return_types=['table'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description="This function gets the properties of a vehicle's sirens.\n}}", arguments={'theVehicle': 'The vehicle to get siren information of.'}, result='If the vehicle is invalid, it returns \'\'false\'\'. Otherwise, returns a \'\'table\'\' with sub tables containing the properties of each siren point in the following manner:\n<syntaxhighlight lang="lua">\n[float]   SirenData[sirenPoint].x\n[float]   SirenData[sirenPoint].y\n[float]   SirenData[sirenPoint].z\n[int]     SirenData[sirenPoint].Red\n[int]     SirenData[sirenPoint].Green\n[int]     SirenData[sirenPoint].Blue\n[int]     SirenData[sirenPoint].Alpha\n[int]     SirenData[sirenPoint].Min_Alpha\n</syntaxhighlight>'), oop=FunctionOOP(class_name='vehicle', method_name='getSirens', field='sirens'), url=FunctionUrl(url='/wiki/GetVehicleSirens', name='getVehicleSirens', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getVehicleSirensOn', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns whether the sirens are turned on for the specified vehicle.', arguments={'theVehicle': 'The vehicle that will be checked.'}, result="Returns ''true'' if the sirens are turned on for the specified vehicle, ''false'' if the sirens are turned off for the specified vehicle, if the vehicle doesn't have sirens or if invalid arguments are specified."), oop=FunctionOOP(class_name='vehicle', method_name='areSirensOn', field='sirensOn'), url=FunctionUrl(url='/wiki/GetVehicleSirensOn', name='getVehicleSirensOn', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getVehicleSirensOn', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns whether the sirens are turned on for the specified vehicle.', arguments={'theVehicle': 'The vehicle that will be checked.'}, result="Returns ''true'' if the sirens are turned on for the specified vehicle, ''false'' if the sirens are turned off for the specified vehicle, if the vehicle doesn't have sirens or if invalid arguments are specified."), oop=FunctionOOP(class_name='vehicle', method_name='areSirensOn', field='sirensOn'), url=FunctionUrl(url='/wiki/GetVehicleSirensOn', name='getVehicleSirensOn', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getVehicleSirenParams', return_types=['table'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description='This function get the parameters of a vehicles siren.\n}}', arguments={'theVehicle': 'The vehicle to get the siren parameters of'}, result='Returns a \'\'table\'\' with the siren count, siren type and a sub table for the four flags. False otherwise.\n<syntaxhighlight lang="lua">\n[int]   SirenParams.SirenCount\n[int]   SirenParams.SirenType\n[table] SirenParams.Flags\n [bool] SirenParams.Flags["360"]\n [bool] SirenParams.Flags.DoLOSCheck\n [bool] SirenParams.Flags.UseRandomiser\n [bool] SirenParams.Flags.Silent\n</syntaxhighlight>'), oop=FunctionOOP(class_name='vehicle', method_name='getSirenParams', field='sirenParams}}\n===Required Arguments=== \n*\'\'\'theVehicle:\'\'\' The vehicle to get the siren parameters of\n\n===Returns===\nReturns a \'\'table\'\' with the siren count, siren type and a sub table for the four flags. False otherwise.\n\n<syntaxhighlight lang="lua">\n[int]   SirenParams.SirenCount\n[int]   SirenParams.SirenType\n[table] SirenParams.Flags\n [bool] SirenParams.Flags["360"]\n [bool] SirenParams.Flags.DoLOSCheck\n [bool] SirenParams.Flags.UseRandomiser\n [bool] SirenParams.Flags.Silent\n</syntaxhighlight>\n\n'), url=FunctionUrl(url='/wiki/GetVehicleSirenParams', name='getVehicleSirenParams', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getVehicleSirenParams', return_types=['table'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description='This function get the parameters of a vehicles siren.\n}}', arguments={'theVehicle': 'The vehicle to get the siren parameters of'}, result='Returns a \'\'table\'\' with the siren count, siren type and a sub table for the four flags. False otherwise.\n<syntaxhighlight lang="lua">\n[int]   SirenParams.SirenCount\n[int]   SirenParams.SirenType\n[table] SirenParams.Flags\n [bool] SirenParams.Flags["360"]\n [bool] SirenParams.Flags.DoLOSCheck\n [bool] SirenParams.Flags.UseRandomiser\n [bool] SirenParams.Flags.Silent\n</syntaxhighlight>'), oop=FunctionOOP(class_name='vehicle', method_name='getSirenParams', field='sirenParams}}\n===Required Arguments=== \n*\'\'\'theVehicle:\'\'\' The vehicle to get the siren parameters of\n\n===Returns===\nReturns a \'\'table\'\' with the siren count, siren type and a sub table for the four flags. False otherwise.\n\n<syntaxhighlight lang="lua">\n[int]   SirenParams.SirenCount\n[int]   SirenParams.SirenType\n[table] SirenParams.Flags\n [bool] SirenParams.Flags["360"]\n [bool] SirenParams.Flags.DoLOSCheck\n [bool] SirenParams.Flags.UseRandomiser\n [bool] SirenParams.Flags.Silent\n</syntaxhighlight>\n\n'), url=FunctionUrl(url='/wiki/GetVehicleSirenParams', name='getVehicleSirenParams', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getVehicleTowedByVehicle', return_types=['vehicle'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is used to get the vehicle being towed by another.', arguments={'theVehicle': ': The vehicle you wish to get the towed vehicle from.'}, result="Returns the vehicle that ''theVehicle'' is towing, ''false'' if it isn't towing a vehicle."), oop=FunctionOOP(class_name='vehicle', method_name='getTowedByVehicle', field="towedByVehicle}}\n===Required Arguments===\n*'''theVehicle''': The [[vehicle]] you wish to get the towed vehicle from.\n\n==Returns==\nReturns the vehicle that ''theVehicle'' is towing, ''false'' if it isn't towing a vehicle.\n\n"), url=FunctionUrl(url='/wiki/GetVehicleTowedByVehicle', name='getVehicleTowedByVehicle', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getVehicleTowedByVehicle', return_types=['vehicle'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is used to get the vehicle being towed by another.', arguments={'theVehicle': ': The vehicle you wish to get the towed vehicle from.'}, result="Returns the vehicle that ''theVehicle'' is towing, ''false'' if it isn't towing a vehicle."), oop=FunctionOOP(class_name='vehicle', method_name='getTowedByVehicle', field="towedByVehicle}}\n===Required Arguments===\n*'''theVehicle''': The [[vehicle]] you wish to get the towed vehicle from.\n\n==Returns==\nReturns the vehicle that ''theVehicle'' is towing, ''false'' if it isn't towing a vehicle.\n\n"), url=FunctionUrl(url='/wiki/GetVehicleTowedByVehicle', name='getVehicleTowedByVehicle', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getVehicleTowingVehicle', return_types=['vehicle'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is used to get the vehicle that is towing another.', arguments={'theVehicle': ': the vehicle being towed.'}, result="* The vehicle that ''theVehicle'' is being towed by.\n* ''false'' if it isn't being towed."), oop=FunctionOOP(class_name='vehicle', method_name='getTowingVehicle', field="towingVehicle}}\n===Required Arguments===\n*'''theVehicle''': the [[vehicle]] being towed.\n\n==Returns==\n* The vehicle that ''theVehicle'' is being towed by.\n* ''false'' if it isn't being towed.\n\n"), url=FunctionUrl(url='/wiki/GetVehicleTowingVehicle', name='getVehicleTowingVehicle', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getVehicleTowingVehicle', return_types=['vehicle'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is used to get the vehicle that is towing another.', arguments={'theVehicle': ': the vehicle being towed.'}, result="* The vehicle that ''theVehicle'' is being towed by.\n* ''false'' if it isn't being towed."), oop=FunctionOOP(class_name='vehicle', method_name='getTowingVehicle', field="towingVehicle}}\n===Required Arguments===\n*'''theVehicle''': the [[vehicle]] being towed.\n\n==Returns==\n* The vehicle that ''theVehicle'' is being towed by.\n* ''false'' if it isn't being towed.\n\n"), url=FunctionUrl(url='/wiki/GetVehicleTowingVehicle', name='getVehicleTowingVehicle', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getVehicleTurretPosition', return_types=['float,', 'float'], arguments=[FunctionArgument(name='turretVehicle', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description="This function gets the position of a vehicle's turret, if it has one. Vehicles with turrets include firetrucks and tanks.", arguments={'turretVehicle': ': The vehicle whose turret position you want to retrieve. This should be a vehicle with a turret.'}, result="Returns two [[float]]s for the X (horizontal) and Y (vertical) axis rotation respectively. These values are in radians. The function will return ''0, 0'' if the vehicle is not a vehicle with a turret. "), oop=FunctionOOP(class_name='vehicle', method_name='getTurretPosition', field='turretPosition'), url=FunctionUrl(url='/wiki/GetVehicleTurretPosition', name='getVehicleTurretPosition', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getVehicleTurretPosition', return_types=['float,', 'float'], arguments=[FunctionArgument(name='turretVehicle', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description="This function gets the position of a vehicle's turret, if it has one. Vehicles with turrets include firetrucks and tanks.", arguments={'turretVehicle': ': The vehicle whose turret position you want to retrieve. This should be a vehicle with a turret.'}, result="Returns two [[float]]s for the X (horizontal) and Y (vertical) axis rotation respectively. These values are in radians. The function will return ''0, 0'' if the vehicle is not a vehicle with a turret. "), oop=FunctionOOP(class_name='vehicle', method_name='getTurretPosition', field='turretPosition'), url=FunctionUrl(url='/wiki/GetVehicleTurretPosition', name='getVehicleTurretPosition', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getVehicleType', return_types=['string'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description='This function retrieves the type of a vehicle (such as if it is a car or a boat).\n}}', arguments={'vehicle': "The vehicle element to get the type of.\n'''OR'''", 'modelID': 'A vehicle model ID'}, result="Returns a ''string'' with vehicle type or ''false'' if an invalid modelID has been supplied, or an empty string if the vehicle is blocked internally (some trailers).\nPossible strings returned:\n{{VehicleTypes}}"), oop=FunctionOOP(class_name='vehicle', method_name='getVehicleType', field='vehicleType}}\n\'\'\'OR\'\'\'\n\n<syntaxhighlight lang="lua">\nstring getVehicleType ( int modelId )\n</syntaxhighlight>\n\n===Required Arguments=== \n*\'\'\'vehicle:\'\'\' The vehicle element to get the type of.\n\n\'\'\'OR\'\'\'\n\n*\'\'\'modelID:\'\'\' A vehicle model ID\n\n===Returns===\nReturns a \'\'string\'\' with vehicle type or \'\'false\'\' if an invalid modelID has been supplied, or an empty string if the vehicle is blocked internally (some trailers).\n\nPossible strings returned:\n{{VehicleTypes}}\n\n'), url=FunctionUrl(url='/wiki/GetVehicleType', name='getVehicleType', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getVehicleType', return_types=['string'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description='This function retrieves the type of a vehicle (such as if it is a car or a boat).\n}}', arguments={'vehicle': "The vehicle element to get the type of.\n'''OR'''", 'modelID': 'A vehicle model ID'}, result="Returns a ''string'' with vehicle type or ''false'' if an invalid modelID has been supplied, or an empty string if the vehicle is blocked internally (some trailers).\nPossible strings returned:\n{{VehicleTypes}}"), oop=FunctionOOP(class_name='vehicle', method_name='getVehicleType', field='vehicleType}}\n\'\'\'OR\'\'\'\n\n<syntaxhighlight lang="lua">\nstring getVehicleType ( int modelId )\n</syntaxhighlight>\n\n===Required Arguments=== \n*\'\'\'vehicle:\'\'\' The vehicle element to get the type of.\n\n\'\'\'OR\'\'\'\n\n*\'\'\'modelID:\'\'\' A vehicle model ID\n\n===Returns===\nReturns a \'\'string\'\' with vehicle type or \'\'false\'\' if an invalid modelID has been supplied, or an empty string if the vehicle is blocked internally (some trailers).\n\nPossible strings returned:\n{{VehicleTypes}}\n\n'), url=FunctionUrl(url='/wiki/GetVehicleType', name='getVehicleType', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getVehicleUpgradeOnSlot', return_types=['int'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='slot', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'theVehicle': ': The vehicle whose upgrade you want to retrieve.', 'slot': ': The slot id of the upgrade. (Upgrade list ordered by slot number)'}, result="Returns an ''integer'' with the upgrade on the slot if correct arguments were passed, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/GetVehicleUpgradeOnSlot', name='getVehicleUpgradeOnSlot', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getVehicleUpgradeOnSlot', return_types=['int'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='slot', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'theVehicle': ': The vehicle whose upgrade you want to retrieve.', 'slot': ': The slot id of the upgrade. (Upgrade list ordered by slot number)'}, result="Returns an ''integer'' with the upgrade on the slot if correct arguments were passed, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/GetVehicleUpgradeOnSlot', name='getVehicleUpgradeOnSlot', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getVehicleUpgradeSlotName', return_types=['string'], arguments=[FunctionArgument(name='slot', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns the name of an upgrade slot name (e.g. roof, spoiler).', arguments={'slot/upgrade': 'the slot ID or corresponding upgrade ID of which you want the name.\n{{Vehicle Upgrades}}'}, result="Returns a ''string'' with the slot name if a valid slot or upgrade ID was given, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/GetVehicleUpgradeSlotName', name='getVehicleUpgradeSlotName', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getVehicleUpgradeSlotName', return_types=['string'], arguments=[FunctionArgument(name='slot', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns the name of an upgrade slot name (e.g. roof, spoiler).', arguments={'slot/upgrade': 'the slot ID or corresponding upgrade ID of which you want the name.\n{{Vehicle Upgrades}}'}, result="Returns a ''string'' with the slot name if a valid slot or upgrade ID was given, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/GetVehicleUpgradeSlotName', name='getVehicleUpgradeSlotName', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getVehicleUpgrades', return_types=['table'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns a table of all the upgrades on a specifed vehicle.', arguments={'theVehicle': 'The vehicle you wish to retrieve the upgrades of.'}, result="Returns a ''table'' of all the upgrades on each slot of a vehicle, which may be empty, or ''false'' if a valid vehicle is not passed."), oop=FunctionOOP(class_name='vehicle', method_name='getUpgrades', field="upgrades}}\n===Required Arguments=== \n*'''theVehicle:''' The [[vehicle]] you wish to retrieve the upgrades of.\n\n===Returns===\nReturns a ''table'' of all the upgrades on each slot of a vehicle, which may be empty, or ''false'' if a valid vehicle is not passed.\n\n"), url=FunctionUrl(url='/wiki/GetVehicleUpgrades', name='getVehicleUpgrades', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getVehicleUpgrades', return_types=['table'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns a table of all the upgrades on a specifed vehicle.', arguments={'theVehicle': 'The vehicle you wish to retrieve the upgrades of.'}, result="Returns a ''table'' of all the upgrades on each slot of a vehicle, which may be empty, or ''false'' if a valid vehicle is not passed."), oop=FunctionOOP(class_name='vehicle', method_name='getUpgrades', field="upgrades}}\n===Required Arguments=== \n*'''theVehicle:''' The [[vehicle]] you wish to retrieve the upgrades of.\n\n===Returns===\nReturns a ''table'' of all the upgrades on each slot of a vehicle, which may be empty, or ''false'' if a valid vehicle is not passed.\n\n"), url=FunctionUrl(url='/wiki/GetVehicleUpgrades', name='getVehicleUpgrades', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getVehicleVariant', return_types=['int,', 'int'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description='This function gets the variant of a specified vehicle. In GTA SA some vehicles are different for example the labelling on trucks or the contents of a pick-up truck and the varying types of a motor bike. For the default GTA SA variant list see: [[Vehicle variants]]', arguments={'theVehicle': 'A handle to the vehicle that you want to get the variant of.'}, result="On success:\n* '''int''': An integer for the first vehicle variant see [[Vehicle variants]]\n* '''int''': An integer for the second vehicle variant see [[Vehicle variants]]\nOn failure:\n* '''bool''': False because the specified vehicle didn't exist"), oop=FunctionOOP(class_name='vehicle', method_name='getVariant', field=None), url=FunctionUrl(url='/wiki/GetVehicleVariant', name='getVehicleVariant', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getVehicleVariant', return_types=['int,', 'int'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description='This function gets the variant of a specified vehicle. In GTA SA some vehicles are different for example the labelling on trucks or the contents of a pick-up truck and the varying types of a motor bike. For the default GTA SA variant list see: [[Vehicle variants]]', arguments={'theVehicle': 'A handle to the vehicle that you want to get the variant of.'}, result="On success:\n* '''int''': An integer for the first vehicle variant see [[Vehicle variants]]\n* '''int''': An integer for the second vehicle variant see [[Vehicle variants]]\nOn failure:\n* '''bool''': False because the specified vehicle didn't exist"), oop=FunctionOOP(class_name='vehicle', method_name='getVariant', field=None), url=FunctionUrl(url='/wiki/GetVehicleVariant', name='getVehicleVariant', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getVehicleWheelStates', return_types=['int,', 'int,', 'int,', 'int'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns the current states of all the wheels on the vehicle.\nNo vehicles have more than 4 wheels, if they appear to they will be duplicating other wheels.', arguments={'theVehicle': 'A handle to the vehicle that you wish to know the wheel states of.'}, result="Returns 4 [[int]]s indicating the states of the wheels (front left, rear left, front right, rear right). These values can be:\n* '''0:''' Inflated\n* '''1:''' Flat\n* '''2:''' Fallen off\n* '''3:''' Collisionless "), oop=FunctionOOP(class_name='vehicle', method_name='getWheelStates', field=None), url=FunctionUrl(url='/wiki/GetVehicleWheelStates', name='getVehicleWheelStates', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getVehicleWheelStates', return_types=['int,', 'int,', 'int,', 'int'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns the current states of all the wheels on the vehicle.\nNo vehicles have more than 4 wheels, if they appear to they will be duplicating other wheels.', arguments={'theVehicle': 'A handle to the vehicle that you wish to know the wheel states of.'}, result="Returns 4 [[int]]s indicating the states of the wheels (front left, rear left, front right, rear right). These values can be:\n* '''0:''' Inflated\n* '''1:''' Flat\n* '''2:''' Fallen off\n* '''3:''' Collisionless "), oop=FunctionOOP(class_name='vehicle', method_name='getWheelStates', field=None), url=FunctionUrl(url='/wiki/GetVehicleWheelStates', name='getVehicleWheelStates', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='isTrainDerailable', return_types=['bool'], arguments=[FunctionArgument(name='vehicleToCheck', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description='This function will check if a train or tram is derailable.', arguments={'vehicleToCheck': 'The vehicle you wish to check.'}, result="Returns ''true'' if the train is derailable, ''false'' otherwise."), oop=FunctionOOP(class_name='vehicle', method_name='isDerailable', field='derailable'), url=FunctionUrl(url='/wiki/IsTrainDerailable', name='isTrainDerailable', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='isTrainDerailable', return_types=['bool'], arguments=[FunctionArgument(name='vehicleToCheck', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description='This function will check if a train or tram is derailable.', arguments={'vehicleToCheck': 'The vehicle you wish to check.'}, result="Returns ''true'' if the train is derailable, ''false'' otherwise."), oop=FunctionOOP(class_name='vehicle', method_name='isDerailable', field='derailable'), url=FunctionUrl(url='/wiki/IsTrainDerailable', name='isTrainDerailable', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='isTrainDerailed', return_types=['bool'], arguments=[FunctionArgument(name='vehicleToCheck', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description='This function will check if a train or tram is derailed.', arguments={'vehicleToCheck': 'the vehicle that you wish to check is derailed.'}, result="Returns ''true'' if the train is derailed, ''false'' if the train is still on the rails"), oop=FunctionOOP(class_name='vehicle', method_name='isDerailed', field='derailed'), url=FunctionUrl(url='/wiki/IsTrainDerailed', name='isTrainDerailed', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='isTrainDerailed', return_types=['bool'], arguments=[FunctionArgument(name='vehicleToCheck', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description='This function will check if a train or tram is derailed.', arguments={'vehicleToCheck': 'the vehicle that you wish to check is derailed.'}, result="Returns ''true'' if the train is derailed, ''false'' if the train is still on the rails"), oop=FunctionOOP(class_name='vehicle', method_name='isDerailed', field='derailed'), url=FunctionUrl(url='/wiki/IsTrainDerailed', name='isTrainDerailed', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='isVehicleBlown', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description='This function allows you to determine whether a vehicle is blown or still intact.', arguments={'theVehicle': 'The vehicle that you want to obtain the blown status of.'}, result="Returns ''true'' if the vehicle specified has blown up, ''false'' if it is still intact or the vehicle specified is invalid."), oop=FunctionOOP(class_name='vehicle', method_name='isBlown', field='blown'), url=FunctionUrl(url='/wiki/IsVehicleBlown', name='isVehicleBlown', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='isVehicleBlown', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description='This function allows you to determine whether a vehicle is blown or still intact.', arguments={'theVehicle': 'The vehicle that you want to obtain the blown status of.'}, result="Returns ''true'' if the vehicle specified has blown up, ''false'' if it is still intact or the vehicle specified is invalid."), oop=FunctionOOP(class_name='vehicle', method_name='isBlown', field='blown'), url=FunctionUrl(url='/wiki/IsVehicleBlown', name='isVehicleBlown', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='isVehicleDamageProof', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description='This function checks if a vehicle is damage proof (set with [[setVehicleDamageProof]]).', arguments={'theVehicle': 'the vehicle whose invincibility status we want to check.'}, result="Returns ''true'' if the vehicle is damage proof, ''false'' if it isn't or if invalid arguments were passed."), oop=FunctionOOP(class_name='vehicle', method_name='isDamageProof', field='damageProof'), url=FunctionUrl(url='/wiki/IsVehicleDamageProof', name='isVehicleDamageProof', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='isVehicleDamageProof', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description='This function checks if a vehicle is damage proof (set with [[setVehicleDamageProof]]).', arguments={'theVehicle': 'the vehicle whose invincibility status we want to check.'}, result="Returns ''true'' if the vehicle is damage proof, ''false'' if it isn't or if invalid arguments were passed."), oop=FunctionOOP(class_name='vehicle', method_name='isDamageProof', field='damageProof'), url=FunctionUrl(url='/wiki/IsVehicleDamageProof', name='isVehicleDamageProof', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='isVehicleFuelTankExplodable', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description="This will tell you if a vehicle's petrol tank is explodable.", arguments={'theVehicle': 'The vehicle that you want to obtain the fuel tank status of.'}, result="Returns ''true'' if the specified vehicle is valid and its fuel tank is explodable, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/IsVehicleFuelTankExplodable', name='isVehicleFuelTankExplodable', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='isVehicleFuelTankExplodable', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description="This will tell you if a vehicle's petrol tank is explodable.", arguments={'theVehicle': 'The vehicle that you want to obtain the fuel tank status of.'}, result="Returns ''true'' if the specified vehicle is valid and its fuel tank is explodable, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/IsVehicleFuelTankExplodable', name='isVehicleFuelTankExplodable', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='isVehicleLocked', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description='This will tell you if a vehicle is locked.', arguments={'theVehicle': 'The vehicle that you want to obtain the locked status of.'}, result="Returns ''true'' if the vehicle specified is locked, ''false'' if is unlocked or the vehicle specified is invalid."), oop=FunctionOOP(class_name='vehicle', method_name='isLocked', field='locked'), url=FunctionUrl(url='/wiki/IsVehicleLocked', name='isVehicleLocked', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='isVehicleLocked', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description='This will tell you if a vehicle is locked.', arguments={'theVehicle': 'The vehicle that you want to obtain the locked status of.'}, result="Returns ''true'' if the vehicle specified is locked, ''false'' if is unlocked or the vehicle specified is invalid."), oop=FunctionOOP(class_name='vehicle', method_name='isLocked', field='locked'), url=FunctionUrl(url='/wiki/IsVehicleLocked', name='isVehicleLocked', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='isVehicleOnGround', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description='Checks to see if a vehicle has contact with the ground.', arguments={'theVehicle': 'The vehicle you wish to check.'}, result="Returns ''true'' if vehicle is on the ground, ''false'' if it is not."), oop=FunctionOOP(class_name='vehicle', method_name='isOnGround', field="onGround}}\n===Required Arguments=== \n*'''theVehicle:''' The vehicle you wish to check.\n\n===Returns===\nReturns ''true'' if vehicle is on the ground, ''false'' if it is not.\n\n"), url=FunctionUrl(url='/wiki/IsVehicleOnGround', name='isVehicleOnGround', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='isVehicleOnGround', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description='Checks to see if a vehicle has contact with the ground.', arguments={'theVehicle': 'The vehicle you wish to check.'}, result="Returns ''true'' if vehicle is on the ground, ''false'' if it is not."), oop=FunctionOOP(class_name='vehicle', method_name='isOnGround', field="onGround}}\n===Required Arguments=== \n*'''theVehicle:''' The vehicle you wish to check.\n\n===Returns===\nReturns ''true'' if vehicle is on the ground, ''false'' if it is not.\n\n"), url=FunctionUrl(url='/wiki/IsVehicleOnGround', name='isVehicleOnGround', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='isVehicleTaxiLightOn', return_types=['bool'], arguments=[FunctionArgument(name='taxi', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description='This function will get the taxi light state of a taxi (vehicle IDs 420 and 438)', arguments={'taxi': 'The vehicle element of the taxi that you wish to get the light state of.'}, result="Returns ''true'' if the light is on, ''false'' otherwise."), oop=FunctionOOP(class_name='vehicle', method_name='isTaxiLightOn', field='taxiLightOn'), url=FunctionUrl(url='/wiki/IsVehicleTaxiLightOn', name='isVehicleTaxiLightOn', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='isVehicleTaxiLightOn', return_types=['bool'], arguments=[FunctionArgument(name='taxi', argument_type='vehicle', default_value=None, optional=False)]), docs=FunctionDoc(description='This function will get the taxi light state of a taxi (vehicle IDs 420 and 438)', arguments={'taxi': 'The vehicle element of the taxi that you wish to get the light state of.'}, result="Returns ''true'' if the light is on, ''false'' otherwise."), oop=FunctionOOP(class_name='vehicle', method_name='isTaxiLightOn', field='taxiLightOn'), url=FunctionUrl(url='/wiki/IsVehicleTaxiLightOn', name='isVehicleTaxiLightOn', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='removeVehicleUpgrade', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='upgrade', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'theVehicle': ': The element representing the vehicle you wish to remove the upgrade from', 'upgrade': ': The ID of the upgrade you wish to remove.'}, result="Returns ''true'' if the upgrade was successfully removed from the vehicle, otherwise ''false''."), oop=None, url=FunctionUrl(url='/wiki/RemoveVehicleUpgrade', name='removeVehicleUpgrade', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='removeVehicleUpgrade', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='upgrade', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'theVehicle': ': The element representing the vehicle you wish to remove the upgrade from', 'upgrade': ': The ID of the upgrade you wish to remove.'}, result="Returns ''true'' if the upgrade was successfully removed from the vehicle, otherwise ''false''."), oop=None, url=FunctionUrl(url='/wiki/RemoveVehicleUpgrade', name='removeVehicleUpgrade', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setTrainDerailable', return_types=['bool'], arguments=[FunctionArgument(name='derailableVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='derailable', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description='This function will set a train or tram as derailable. This is, if it can derail when it goes above the maximum speed.', arguments={'derailableVehicle': 'The vehicle that you wish to set derailable.', 'derailable': 'whether the train or tram is derailable. True as derailable, False as non-derailable.'}, result="Returns ''true'' if the state was successfully set, ''false'' otherwise."), oop=FunctionOOP(class_name='vehicle', method_name='setDerailable', field='derailable'), url=FunctionUrl(url='/wiki/SetTrainDerailable', name='setTrainDerailable', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setTrainDerailable', return_types=['bool'], arguments=[FunctionArgument(name='derailableVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='derailable', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description='This function will set a train or tram as derailable. This is, if it can derail when it goes above the maximum speed.', arguments={'derailableVehicle': 'The vehicle that you wish to set derailable.', 'derailable': 'whether the train or tram is derailable. True as derailable, False as non-derailable.'}, result="Returns ''true'' if the state was successfully set, ''false'' otherwise."), oop=FunctionOOP(class_name='vehicle', method_name='setDerailable', field='derailable'), url=FunctionUrl(url='/wiki/SetTrainDerailable', name='setTrainDerailable', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setTrainDerailed', return_types=['bool'], arguments=[FunctionArgument(name='vehicleToDerail', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='derailed', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description='This function will set a train or tram as derailed.', arguments={'vehicleToDerail': 'The vehicle that you wish to derail.', 'derailed': 'whether the train is derailed.'}, result="Returns ''true'' if the state was successfully set"), oop=FunctionOOP(class_name='vehicle', method_name='setDerailed', field='derailed'), url=FunctionUrl(url='/wiki/SetTrainDerailed', name='setTrainDerailed', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setTrainDerailed', return_types=['bool'], arguments=[FunctionArgument(name='vehicleToDerail', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='derailed', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description='This function will set a train or tram as derailed.', arguments={'vehicleToDerail': 'The vehicle that you wish to derail.', 'derailed': 'whether the train is derailed.'}, result="Returns ''true'' if the state was successfully set"), oop=FunctionOOP(class_name='vehicle', method_name='setDerailed', field='derailed'), url=FunctionUrl(url='/wiki/SetTrainDerailed', name='setTrainDerailed', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setTrainDirection', return_types=['bool'], arguments=[FunctionArgument(name='train', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='clockwise', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description='Sets the direction in which a train or tram drives over the rails (clockwise or counterclockwise).', arguments={'train': 'the train whose direction to change.', 'clockwise': 'if true, will make the train go clockwise. If false, makes it go counterclockwise.'}, result="Returns ''true'' if successful, ''false'' otherwise."), oop=FunctionOOP(class_name='vehicle', method_name='setDirection', field='direction'), url=FunctionUrl(url='/wiki/SetTrainDirection', name='setTrainDirection', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setTrainDirection', return_types=['bool'], arguments=[FunctionArgument(name='train', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='clockwise', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description='Sets the direction in which a train or tram drives over the rails (clockwise or counterclockwise).', arguments={'train': 'the train whose direction to change.', 'clockwise': 'if true, will make the train go clockwise. If false, makes it go counterclockwise.'}, result="Returns ''true'' if successful, ''false'' otherwise."), oop=FunctionOOP(class_name='vehicle', method_name='setDirection', field='direction'), url=FunctionUrl(url='/wiki/SetTrainDirection', name='setTrainDirection', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setTrainPosition', return_types=['bool'], arguments=[FunctionArgument(name='train', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='position', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='Sets the position the train is currently on the track\n}}', arguments={'train': 'the train of which to set the track', 'position': 'the position along the track (0 - 18107 a complete way round)'}, result="Returns ''true'' if the train position was set, ''false'' otherwise."), oop=FunctionOOP(class_name='vehicle', method_name='setTrainPosition', field='trainPosition'), url=FunctionUrl(url='/wiki/SetTrainPosition', name='setTrainPosition', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setTrainPosition', return_types=['bool'], arguments=[FunctionArgument(name='train', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='position', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='Sets the position the train is currently on the track\n}}', arguments={'train': 'the train of which to set the track', 'position': 'the position along the track (0 - 18107 a complete way round)'}, result="Returns ''true'' if the train position was set, ''false'' otherwise."), oop=FunctionOOP(class_name='vehicle', method_name='setTrainPosition', field='trainPosition'), url=FunctionUrl(url='/wiki/SetTrainPosition', name='setTrainPosition', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setTrainSpeed', return_types=['bool'], arguments=[FunctionArgument(name='train', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='speed', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='Sets the on-track speed of a train.', arguments={'train': 'the train whose speed to change.', 'speed': 'the new on-track speed of the train. A positive value will make it go clockwise, a negative value counter clockwise.'}, result="Returns ''true'' if successful, ''false'' otherwise."), oop=FunctionOOP(class_name='vehicle', method_name='setSpeed', field='trainSpeed'), url=FunctionUrl(url='/wiki/SetTrainSpeed', name='setTrainSpeed', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setTrainSpeed', return_types=['bool'], arguments=[FunctionArgument(name='train', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='speed', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='Sets the on-track speed of a train.', arguments={'train': 'the train whose speed to change.', 'speed': 'the new on-track speed of the train. A positive value will make it go clockwise, a negative value counter clockwise.'}, result="Returns ''true'' if successful, ''false'' otherwise."), oop=FunctionOOP(class_name='vehicle', method_name='setSpeed', field='trainSpeed'), url=FunctionUrl(url='/wiki/SetTrainSpeed', name='setTrainSpeed', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setTrainTrack', return_types=['bool'], arguments=[FunctionArgument(name='train', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='track', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='Sets the track of a train\n}}', arguments={'train': 'the train of which to set the track', 'track': 'the track where you want to set the train. It can be 0, 1, 2 or 3.'}, result="Returns ''true'' if the track was set to the train, ''false'' otherwise."), oop=FunctionOOP(class_name='vehicle', method_name='setTrack', field='track'), url=FunctionUrl(url='/wiki/SetTrainTrack', name='setTrainTrack', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setTrainTrack', return_types=['bool'], arguments=[FunctionArgument(name='train', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='track', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='Sets the track of a train\n}}', arguments={'train': 'the train of which to set the track', 'track': 'the track where you want to set the train. It can be 0, 1, 2 or 3.'}, result="Returns ''true'' if the track was set to the train, ''false'' otherwise."), oop=FunctionOOP(class_name='vehicle', method_name='setTrack', field='track'), url=FunctionUrl(url='/wiki/SetTrainTrack', name='setTrainTrack', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setVehicleColor', return_types=['bool'], arguments=[FunctionArgument(name='veh', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='r1', argument_type='int', default_value=None, optional=False), FunctionArgument(name='g1', argument_type='int', default_value=None, optional=False), FunctionArgument(name='b1', argument_type='int', default_value=None, optional=False), FunctionArgument(name='r2', argument_type='int', default_value=None, optional=False), FunctionArgument(name='g2', argument_type='int', default_value=None, optional=False), FunctionArgument(name='b2', argument_type='int', default_value=None, optional=False), FunctionArgument(name='r3', argument_type='int', default_value=None, optional=False), FunctionArgument(name='g3', argument_type='int', default_value=None, optional=False), FunctionArgument(name='b3', argument_type='int', default_value=None, optional=False), FunctionArgument(name='r4', argument_type='int', default_value=None, optional=False), FunctionArgument(name='g4', argument_type='int', default_value=None, optional=False), FunctionArgument(name='b4', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function will set the color of a vehicle using either a RGB format, or the [[Vehicle Colors|standard San Andreas color IDs.]] Vehicles can have up to 4 colors, most of the vehicles have 2 colors only. ', arguments={'theVehicle': 'The vehicle that you wish to set the color of.\n* RGB format:', 'r1, g1, b1': 'Three integers indicating the red, green and blue components of the first (main) color for the vehicle\n* Palette format:', 'p1, p2, p3, p4': 'Exactly four integers indicating the Vehicle Colors|vehicle color IDs from the palette. <br> If a vehicle has fewer than four colours, you must still provide four colours, otherwise the RGB format will be used.', 'r2, g2, b2': 'Three integers indicating the red, green and blue components of the second color for the vehicle', 'r3, g3, b3': 'Three integers indicating the red, green and blue components of the third color for the vehicle', 'r4, g4, b4': 'Three integers indicating the red, green and blue components of the fourth color for the vehicle\n}}'}, result="Returns ''true'' if vehicle's color was set, ''false'' if an invalid vehicle or invalid colors were specified."), oop=FunctionOOP(class_name='vehicle', method_name="setColor}}\n\n===Required Arguments=== \n*'''theVehicle:''' The [[vehicle]] that you wish to set the color of.\n* RGB format:\n** '''r1, g1, b1:''' Three integers indicating the red, green and blue components of the first (main) color for the vehicle\n* Palette format:\n** '''p1, p2, p3, p4:''' Exactly four integers indicating the [[Vehicle Colors", field="vehicle color IDs]] from the palette. <br> If a vehicle has fewer than four colours, you must still provide four colours, otherwise the RGB format will be used.\n===Optional Arguments (RGB format only)===\n*'''r2, g2, b2:''' Three integers indicating the red, green and blue components of the second color for the vehicle\n*'''r3, g3, b3:''' Three integers indicating the red, green and blue components of the third color for the vehicle\n*'''r4, g4, b4:''' Three integers indicating the red, green and blue components of the fourth color for the vehicle\n}}\n===Returns===\nReturns ''true'' if vehicle's color was set, ''false'' if an invalid vehicle or invalid colors were specified.\n\n"), url=FunctionUrl(url='/wiki/SetVehicleColor', name='setVehicleColor', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setVehicleColor', return_types=['bool'], arguments=[FunctionArgument(name='veh', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='r1', argument_type='int', default_value=None, optional=False), FunctionArgument(name='g1', argument_type='int', default_value=None, optional=False), FunctionArgument(name='b1', argument_type='int', default_value=None, optional=False), FunctionArgument(name='r2', argument_type='int', default_value=None, optional=False), FunctionArgument(name='g2', argument_type='int', default_value=None, optional=False), FunctionArgument(name='b2', argument_type='int', default_value=None, optional=False), FunctionArgument(name='r3', argument_type='int', default_value=None, optional=False), FunctionArgument(name='g3', argument_type='int', default_value=None, optional=False), FunctionArgument(name='b3', argument_type='int', default_value=None, optional=False), FunctionArgument(name='r4', argument_type='int', default_value=None, optional=False), FunctionArgument(name='g4', argument_type='int', default_value=None, optional=False), FunctionArgument(name='b4', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function will set the color of a vehicle using either a RGB format, or the [[Vehicle Colors|standard San Andreas color IDs.]] Vehicles can have up to 4 colors, most of the vehicles have 2 colors only. ', arguments={'theVehicle': 'The vehicle that you wish to set the color of.\n* RGB format:', 'r1, g1, b1': 'Three integers indicating the red, green and blue components of the first (main) color for the vehicle\n* Palette format:', 'p1, p2, p3, p4': 'Exactly four integers indicating the Vehicle Colors|vehicle color IDs from the palette. <br> If a vehicle has fewer than four colours, you must still provide four colours, otherwise the RGB format will be used.', 'r2, g2, b2': 'Three integers indicating the red, green and blue components of the second color for the vehicle', 'r3, g3, b3': 'Three integers indicating the red, green and blue components of the third color for the vehicle', 'r4, g4, b4': 'Three integers indicating the red, green and blue components of the fourth color for the vehicle\n}}'}, result="Returns ''true'' if vehicle's color was set, ''false'' if an invalid vehicle or invalid colors were specified."), oop=FunctionOOP(class_name='vehicle', method_name="setColor}}\n\n===Required Arguments=== \n*'''theVehicle:''' The [[vehicle]] that you wish to set the color of.\n* RGB format:\n** '''r1, g1, b1:''' Three integers indicating the red, green and blue components of the first (main) color for the vehicle\n* Palette format:\n** '''p1, p2, p3, p4:''' Exactly four integers indicating the [[Vehicle Colors", field="vehicle color IDs]] from the palette. <br> If a vehicle has fewer than four colours, you must still provide four colours, otherwise the RGB format will be used.\n===Optional Arguments (RGB format only)===\n*'''r2, g2, b2:''' Three integers indicating the red, green and blue components of the second color for the vehicle\n*'''r3, g3, b3:''' Three integers indicating the red, green and blue components of the third color for the vehicle\n*'''r4, g4, b4:''' Three integers indicating the red, green and blue components of the fourth color for the vehicle\n}}\n===Returns===\nReturns ''true'' if vehicle's color was set, ''false'' if an invalid vehicle or invalid colors were specified.\n\n"), url=FunctionUrl(url='/wiki/SetVehicleColor', name='setVehicleColor', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setVehicleDamageProof', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='damageProof', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description="This functions makes a vehicle damage proof, so it won't take damage from bullets, hits, explosions or fire. A damage proof's vehicle health can still be changed via script.", arguments={'theVehicle': 'The vehicle you wish to make damage proof.', 'damageProof': 'true is damage proof, false is damageable.'}, result="Returns ''true'' if the vehicle was set damage proof succesfully, ''false'' if the arguments are invalid or it failed."), oop=FunctionOOP(class_name='vehicle', method_name='setDamageProof', field='damageProof'), url=FunctionUrl(url='/wiki/SetVehicleDamageProof', name='setVehicleDamageProof', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setVehicleDamageProof', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='damageProof', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description="This functions makes a vehicle damage proof, so it won't take damage from bullets, hits, explosions or fire. A damage proof's vehicle health can still be changed via script.", arguments={'theVehicle': 'The vehicle you wish to make damage proof.', 'damageProof': 'true is damage proof, false is damageable.'}, result="Returns ''true'' if the vehicle was set damage proof succesfully, ''false'' if the arguments are invalid or it failed."), oop=FunctionOOP(class_name='vehicle', method_name='setDamageProof', field='damageProof'), url=FunctionUrl(url='/wiki/SetVehicleDamageProof', name='setVehicleDamageProof', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setVehicleDirtLevel', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='dirtLevel', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function sets the dirt level on a vehicle.', arguments={'theVehicle': 'The vehicle that you want to set the dirt level from', 'dirtLevel': 'The dirt level'}, result="Returns ''true'' if the dirt level was set on the vehicle, ''false'' if the dirt level was not set or if invalid arguments are specified."), oop=None, url=FunctionUrl(url='/wiki/SetVehicleDirtLevel', name='setVehicleDirtLevel', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setVehicleDirtLevel', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='dirtLevel', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function sets the dirt level on a vehicle.', arguments={'theVehicle': 'The vehicle that you want to set the dirt level from', 'dirtLevel': 'The dirt level'}, result="Returns ''true'' if the dirt level was set on the vehicle, ''false'' if the dirt level was not set or if invalid arguments are specified."), oop=None, url=FunctionUrl(url='/wiki/SetVehicleDirtLevel', name='setVehicleDirtLevel', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setVehicleDoorOpenRatio', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='door', argument_type='int', default_value=None, optional=False), FunctionArgument(name='ratio', argument_type='float', default_value=None, optional=False), FunctionArgument(name='time', argument_type='int', default_value='0', optional=True)]), docs=FunctionDoc(description="This function sets how much a vehicle's door is open. Doors include the boot/trunk and the bonnet of the vehicle.", arguments={'theVehicle': 'The vehicle that you wish to change the door open ratio of.', 'door': 'A whole number, 0 (hood), 1 (trunk), 2 (front left), 3 (front right), 4 (rear left), 5 (rear right)', 'ratio': 'The ratio value, ranging from 0 (fully closed) to 1 (fully open).\n{{OptionalArg}} ', 'time': 'The number of milliseconds the door should take to reach the value you have specified. A value of 0 will change the door open ratio instantly.'}, result="Returns ''true'' if the door open ratio was successfully set, ''false'' if invalid arguments are passed."), oop=FunctionOOP(class_name='vehicle', method_name='setDoorOpenRatio', field=None), url=FunctionUrl(url='/wiki/SetVehicleDoorOpenRatio', name='setVehicleDoorOpenRatio', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setVehicleDoorOpenRatio', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='door', argument_type='int', default_value=None, optional=False), FunctionArgument(name='ratio', argument_type='float', default_value=None, optional=False), FunctionArgument(name='time', argument_type='int', default_value='0', optional=True)]), docs=FunctionDoc(description="This function sets how much a vehicle's door is open. Doors include the boot/trunk and the bonnet of the vehicle.", arguments={'theVehicle': 'The vehicle that you wish to change the door open ratio of.', 'door': 'A whole number, 0 (hood), 1 (trunk), 2 (front left), 3 (front right), 4 (rear left), 5 (rear right)', 'ratio': 'The ratio value, ranging from 0 (fully closed) to 1 (fully open).\n{{OptionalArg}} ', 'time': 'The number of milliseconds the door should take to reach the value you have specified. A value of 0 will change the door open ratio instantly.'}, result="Returns ''true'' if the door open ratio was successfully set, ''false'' if invalid arguments are passed."), oop=FunctionOOP(class_name='vehicle', method_name='setDoorOpenRatio', field=None), url=FunctionUrl(url='/wiki/SetVehicleDoorOpenRatio', name='setVehicleDoorOpenRatio', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setVehicleDoorState', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='door', argument_type='int', default_value=None, optional=False), FunctionArgument(name='state', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function sets the state of the specified door on a vehicle.', arguments={'theVehicle': 'The vehicle that you wish to change the door state of.', 'door': 'An integer representing which door to set the state of. Valid values are:', '0': 'Shut, intact (aka Closed, undamaged)', '1': 'Ajar, intact (aka Slightly open, undamaged)', '2': 'Shut, damaged (aka Closed, damaged)', '3': 'Ajar, damaged (aka Slightly open, damaged)', '4': 'Missing\n{{OptionalArg}}\n{{New feature/item|9.0158|1.5.8|20319|', '5': 'Rear right', 'state': 'An integer representing the state to set the door to. Valid values are:', 'spawnFlyingComponent': 'A boolean, if set to true, spawns flying doors etc. if you remove a component with <nowiki>state == 4</nowiki>.\n}}'}, result="Returns ''true'' if the door state was successfully set, ''false'' otherwise."), oop=FunctionOOP(class_name='vehicle', method_name='setDoorState', field=None), url=FunctionUrl(url='/wiki/SetVehicleDoorState', name='setVehicleDoorState', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setVehicleDoorState', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='door', argument_type='int', default_value=None, optional=False), FunctionArgument(name='state', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function sets the state of the specified door on a vehicle.', arguments={'theVehicle': 'The vehicle that you wish to change the door state of.', 'door': 'An integer representing which door to set the state of. Valid values are:', '0': 'Shut, intact (aka Closed, undamaged)', '1': 'Ajar, intact (aka Slightly open, undamaged)', '2': 'Shut, damaged (aka Closed, damaged)', '3': 'Ajar, damaged (aka Slightly open, damaged)', '4': 'Missing\n{{OptionalArg}}\n{{New feature/item|9.0158|1.5.8|20319|', '5': 'Rear right', 'state': 'An integer representing the state to set the door to. Valid values are:', 'spawnFlyingComponent': 'A boolean, if set to true, spawns flying doors etc. if you remove a component with <nowiki>state == 4</nowiki>.\n}}'}, result="Returns ''true'' if the door state was successfully set, ''false'' otherwise."), oop=FunctionOOP(class_name='vehicle', method_name='setDoorState', field=None), url=FunctionUrl(url='/wiki/SetVehicleDoorState', name='setVehicleDoorState', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setVehicleDoorsUndamageable', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='state', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description="This function makes a vehicle's doors undamageable, so they won't fall off when they're hit. Note that the vehicle '''has''' to be locked using [[setVehicleLocked]] for this setting to have any effect.", arguments={'theVehicle': 'The vehicle of which you wish to set the car door damageability.', 'state': 'A boolean denoting whether the vehicles doors are undamageable (true) or damageable (false).'}, result="Returns ''true'' if the damageability state was successfully changed, ''false'' if invalid arguments were passed."), oop=FunctionOOP(class_name='vehicle', method_name='setDoorsUndamageable', field="doorsUndamageable}}\n===Required Arguments===\n*'''theVehicle:''' The [[vehicle]] of which you wish to set the car door damageability.\n*'''state:''' A boolean denoting whether the vehicle's doors are undamageable (''true'') or damageable (''false'').\n\n===Returns===\nReturns ''true'' if the damageability state was successfully changed, ''false'' if invalid arguments were passed.\n\n"), url=FunctionUrl(url='/wiki/SetVehicleDoorsUndamageable', name='setVehicleDoorsUndamageable', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setVehicleDoorsUndamageable', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='state', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description="This function makes a vehicle's doors undamageable, so they won't fall off when they're hit. Note that the vehicle '''has''' to be locked using [[setVehicleLocked]] for this setting to have any effect.", arguments={'theVehicle': 'The vehicle of which you wish to set the car door damageability.', 'state': 'A boolean denoting whether the vehicles doors are undamageable (true) or damageable (false).'}, result="Returns ''true'' if the damageability state was successfully changed, ''false'' if invalid arguments were passed."), oop=FunctionOOP(class_name='vehicle', method_name='setDoorsUndamageable', field="doorsUndamageable}}\n===Required Arguments===\n*'''theVehicle:''' The [[vehicle]] of which you wish to set the car door damageability.\n*'''state:''' A boolean denoting whether the vehicle's doors are undamageable (''true'') or damageable (''false'').\n\n===Returns===\nReturns ''true'' if the damageability state was successfully changed, ''false'' if invalid arguments were passed.\n\n"), url=FunctionUrl(url='/wiki/SetVehicleDoorsUndamageable', name='setVehicleDoorsUndamageable', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setVehicleEngineState', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='engineState', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description="This function turns a vehicle's engine on or off. Note that the engine will always be turned on when someone enters the driver seat, unless you override that behaviour with scripts.", arguments={'theVehicle': ': The vehicle you wish to change the engine state of.', 'engineState': ': A boolean value representing whether the engine will be turned on (true) or off (false).'}, result="Returns ''true'' if the vehicle's engine state was successfully changed, ''false'' otherwise."), oop=FunctionOOP(class_name='vehicle', method_name='setEngineState', field='engineState'), url=FunctionUrl(url='/wiki/SetVehicleEngineState', name='setVehicleEngineState', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setVehicleEngineState', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='engineState', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description="This function turns a vehicle's engine on or off. Note that the engine will always be turned on when someone enters the driver seat, unless you override that behaviour with scripts.", arguments={'theVehicle': ': The vehicle you wish to change the engine state of.', 'engineState': ': A boolean value representing whether the engine will be turned on (true) or off (false).'}, result="Returns ''true'' if the vehicle's engine state was successfully changed, ''false'' otherwise."), oop=FunctionOOP(class_name='vehicle', method_name='setEngineState', field='engineState'), url=FunctionUrl(url='/wiki/SetVehicleEngineState', name='setVehicleEngineState', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setVehicleFuelTankExplodable', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='explodable', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description="This function changes the 'explodable state' of a vehicle's fuel tank, which toggles the ability to blow the vehicle up by shooting the tank. This function will have no effect on vehicles with tanks that cannot be shot in single player.", arguments={'theVehicle': ': The vehicle you wish to change the fuel tank explodable state of.', 'explodable': ': A boolean value representing whether or not the fuel tank will be explodable.'}, result="Returns ''true'' if the vehicle's fuel tank explodable state was successfully changed, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/SetVehicleFuelTankExplodable', name='setVehicleFuelTankExplodable', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setVehicleFuelTankExplodable', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='explodable', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description="This function changes the 'explodable state' of a vehicle's fuel tank, which toggles the ability to blow the vehicle up by shooting the tank. This function will have no effect on vehicles with tanks that cannot be shot in single player.", arguments={'theVehicle': ': The vehicle you wish to change the fuel tank explodable state of.', 'explodable': ': A boolean value representing whether or not the fuel tank will be explodable.'}, result="Returns ''true'' if the vehicle's fuel tank explodable state was successfully changed, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/SetVehicleFuelTankExplodable', name='setVehicleFuelTankExplodable', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setVehicleHandling', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='element', default_value=None, optional=False), FunctionArgument(name='property', argument_type='string', default_value=None, optional=False), FunctionArgument(name='value', argument_type='var', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is used to change the handling data of a vehicle.', arguments={'theVehicle': 'The vehicle you wish to set the handling of.', 'property': 'The property you wish to set the handling of the vehicle to.\n{{Note|For functionality reasons suspension modification is disabled on monster trucks, trains, boats and trailers.}}\n{{Handling Properties}}', 'value': 'The value of the property you wish to set the handling of the vehicle to.'}, result="Returns ''true'' if the handling was set successfully, ''false'' otherwise. See below a list of valid properties and their required values:"), oop=None, url=FunctionUrl(url='/wiki/SetVehicleHandling', name='setVehicleHandling', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setVehicleHandling', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='element', default_value=None, optional=False), FunctionArgument(name='property', argument_type='string', default_value=None, optional=False), FunctionArgument(name='value', argument_type='var', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is used to change the handling data of a vehicle.', arguments={'theVehicle': 'The vehicle you wish to set the handling of.', 'property': 'The property you wish to set the handling of the vehicle to.\n{{Note|For functionality reasons suspension modification is disabled on monster trucks, trains, boats and trailers.}}\n{{Handling Properties}}', 'value': 'The value of the property you wish to set the handling of the vehicle to.'}, result="Returns ''true'' if the handling was set successfully, ''false'' otherwise. See below a list of valid properties and their required values:"), oop=None, url=FunctionUrl(url='/wiki/SetVehicleHandling', name='setVehicleHandling', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setVehicleHeadLightColor', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='red', argument_type='int', default_value=None, optional=False), FunctionArgument(name='green', argument_type='int', default_value=None, optional=False), FunctionArgument(name='blue', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function will set the headlight color of a vehicle. valid Red Green and Blue arguments range from 0-255', arguments={'theVehicle': 'The vehicle that you wish to set the headlight color of.', 'red': 'An integer indicating the amount of red for the vehicles headlights', 'green': 'An integer indicating the amount of green for the vehicles headlights', 'blue': 'An integer indicating the amount of blue for the vehicles headlights'}, result="Returns ''true'' if vehicle's headlight color was set, ''false'' if an invalid vehicle or invalid color ranges were specified for red,green or blue."), oop=FunctionOOP(class_name='vehicle', method_name='setHeadLightColor', field=None), url=FunctionUrl(url='/wiki/SetVehicleHeadLightColor', name='setVehicleHeadLightColor', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setVehicleHeadLightColor', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='red', argument_type='int', default_value=None, optional=False), FunctionArgument(name='green', argument_type='int', default_value=None, optional=False), FunctionArgument(name='blue', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function will set the headlight color of a vehicle. valid Red Green and Blue arguments range from 0-255', arguments={'theVehicle': 'The vehicle that you wish to set the headlight color of.', 'red': 'An integer indicating the amount of red for the vehicles headlights', 'green': 'An integer indicating the amount of green for the vehicles headlights', 'blue': 'An integer indicating the amount of blue for the vehicles headlights'}, result="Returns ''true'' if vehicle's headlight color was set, ''false'' if an invalid vehicle or invalid color ranges were specified for red,green or blue."), oop=FunctionOOP(class_name='vehicle', method_name='setHeadLightColor', field=None), url=FunctionUrl(url='/wiki/SetVehicleHeadLightColor', name='setVehicleHeadLightColor', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setVehicleLandingGearDown', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='gearState', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is used to set the landing gear state of certain vehicles.', arguments={'theVehicle': 'The vehicle of which you wish to set the landing gear state.', 'gearState': 'A bool representing the state of the landing gear.  true represents a collapsed landing gear, while false represents a disabled landing gear.'}, result="Returns ''true'' if the landing gear was set successfully, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/SetVehicleLandingGearDown', name='setVehicleLandingGearDown', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setVehicleLandingGearDown', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='gearState', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is used to set the landing gear state of certain vehicles.', arguments={'theVehicle': 'The vehicle of which you wish to set the landing gear state.', 'gearState': 'A bool representing the state of the landing gear.  true represents a collapsed landing gear, while false represents a disabled landing gear.'}, result="Returns ''true'' if the landing gear was set successfully, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/SetVehicleLandingGearDown', name='setVehicleLandingGearDown', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setVehicleLightState', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='light', argument_type='int', default_value=None, optional=False), FunctionArgument(name='state', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function sets the state of the light on the vehicle.', arguments={'theVehicle': 'A handle to the vehicle that you wish to change the light state of.', 'light': 'A whole number determining the individual light:', '0': 'Front left', '1': 'Front right', '2': 'Rear right', '3': 'Rear left', 'state': 'A whole number determining the new state of the light. 0 represents normal lights, and 1 represents broken lights.'}, result="Returns ''true'' if the light state was set successfully, ''false'' if invalid arguments were passed to the function."), oop=FunctionOOP(class_name='vehicle', method_name='setLightState', field=None), url=FunctionUrl(url='/wiki/SetVehicleLightState', name='setVehicleLightState', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setVehicleLightState', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='light', argument_type='int', default_value=None, optional=False), FunctionArgument(name='state', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function sets the state of the light on the vehicle.', arguments={'theVehicle': 'A handle to the vehicle that you wish to change the light state of.', 'light': 'A whole number determining the individual light:', '0': 'Front left', '1': 'Front right', '2': 'Rear right', '3': 'Rear left', 'state': 'A whole number determining the new state of the light. 0 represents normal lights, and 1 represents broken lights.'}, result="Returns ''true'' if the light state was set successfully, ''false'' if invalid arguments were passed to the function."), oop=FunctionOOP(class_name='vehicle', method_name='setLightState', field=None), url=FunctionUrl(url='/wiki/SetVehicleLightState', name='setVehicleLightState', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setVehicleLocked', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='locked', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description="This function can be used to set the vehicle's doors to be locked or unlocked.  Locking a vehicle restricts access to the vehicle.", arguments={'theVehicle': 'The vehicle which you wish to change the lock status of', 'locked': 'Boolean for the status you wish to set. Set true to lock, false to unlock'}, result="Returns ''true'' if the operation was successful, ''false'' otherwise."), oop=FunctionOOP(class_name='vehicle', method_name='setLocked', field='locked'), url=FunctionUrl(url='/wiki/SetVehicleLocked', name='setVehicleLocked', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setVehicleLocked', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='locked', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description="This function can be used to set the vehicle's doors to be locked or unlocked.  Locking a vehicle restricts access to the vehicle.", arguments={'theVehicle': 'The vehicle which you wish to change the lock status of', 'locked': 'Boolean for the status you wish to set. Set true to lock, false to unlock'}, result="Returns ''true'' if the operation was successful, ''false'' otherwise."), oop=FunctionOOP(class_name='vehicle', method_name='setLocked', field='locked'), url=FunctionUrl(url='/wiki/SetVehicleLocked', name='setVehicleLocked', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setVehicleOverrideLights', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='value', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function changes the light overriding setting on a vehicle.', arguments={'theVehicle': ': The vehicle you wish to change the override lights setting of.', 'value': ': A whole number representing the state of the lights:', '0': ': No override, lights are set to default.', '1': ': Lights are forced off.', '2': ': Lights are forced on.'}, result="Returns ''true'' if the vehicle's lights setting was changed. Otherwise ''false''."), oop=FunctionOOP(class_name='vehicle', method_name='setOverrideLights', field='overrideLights'), url=FunctionUrl(url='/wiki/SetVehicleOverrideLights', name='setVehicleOverrideLights', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setVehicleOverrideLights', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='value', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function changes the light overriding setting on a vehicle.', arguments={'theVehicle': ': The vehicle you wish to change the override lights setting of.', 'value': ': A whole number representing the state of the lights:', '0': ': No override, lights are set to default.', '1': ': Lights are forced off.', '2': ': Lights are forced on.'}, result="Returns ''true'' if the vehicle's lights setting was changed. Otherwise ''false''."), oop=FunctionOOP(class_name='vehicle', method_name='setOverrideLights', field='overrideLights'), url=FunctionUrl(url='/wiki/SetVehicleOverrideLights', name='setVehicleOverrideLights', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setVehiclePaintjob', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='value', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function changes the paintjob on the specified vehicle. <br/>\nSee [[Paintjob|paintjob]] for list of supported vehicles.', arguments={'theVehicle': ': The vehicle you wish to change the paintjob of.', 'value': ': A whole number representing the new paintjob id. Ranges from 0 up to 3.'}, result="Returns ''true'' if the vehicle's paintjob was changed. Otherwise ''false''."), oop=None, url=FunctionUrl(url='/wiki/SetVehiclePaintjob', name='setVehiclePaintjob', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setVehiclePaintjob', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='value', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function changes the paintjob on the specified vehicle. <br/>\nSee [[Paintjob|paintjob]] for list of supported vehicles.', arguments={'theVehicle': ': The vehicle you wish to change the paintjob of.', 'value': ': A whole number representing the new paintjob id. Ranges from 0 up to 3.'}, result="Returns ''true'' if the vehicle's paintjob was changed. Otherwise ''false''."), oop=None, url=FunctionUrl(url='/wiki/SetVehiclePaintjob', name='setVehiclePaintjob', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setVehiclePanelState', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='panelID', argument_type='int', default_value=None, optional=False), FunctionArgument(name='state', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description="This function allows you to change the state of one of the six panels vehicle's can have. When executed on the server-side resources, the damage will be synched for all players, whereas the change is only client-side if the function is used in a client resource. ", arguments={'theVehicle': 'The vehicle you would like to modify the panel of.', 'panelID': 'An ID specifying the part of the vehicle. Possible values are:', 'Cars': '', '0': 'Engine Smoke (left engine for a Nevada or a Beagle)', '1': 'Engine Smoke (right engine for a Nevada or a Beagle)', '2': 'Rudder', '3': 'Elevators', '4': 'Ailerons', '5': 'Unknown', '6': "Unknown\n''NOTE:'' Settings are not applicable for all vehicles of these types, for instance panel 0 effects a Dodo, but does nothing to a hydra.", 'Planes': '', 'state': 'How damaged the part is on the scale of 0 to 3, with 0 being undamaged and 3 being very damaged. How this is manifested depends on the panel and the vehicle.'}, result="Returns ''true'' if the panel state has been updated, ''false'' otherwise"), oop=FunctionOOP(class_name='vehicle', method_name='setPanelState', field=None), url=FunctionUrl(url='/wiki/SetVehiclePanelState', name='setVehiclePanelState', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setVehiclePanelState', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='panelID', argument_type='int', default_value=None, optional=False), FunctionArgument(name='state', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description="This function allows you to change the state of one of the six panels vehicle's can have. When executed on the server-side resources, the damage will be synched for all players, whereas the change is only client-side if the function is used in a client resource. ", arguments={'theVehicle': 'The vehicle you would like to modify the panel of.', 'panelID': 'An ID specifying the part of the vehicle. Possible values are:', 'Cars': '', '0': 'Engine Smoke (left engine for a Nevada or a Beagle)', '1': 'Engine Smoke (right engine for a Nevada or a Beagle)', '2': 'Rudder', '3': 'Elevators', '4': 'Ailerons', '5': 'Unknown', '6': "Unknown\n''NOTE:'' Settings are not applicable for all vehicles of these types, for instance panel 0 effects a Dodo, but does nothing to a hydra.", 'Planes': '', 'state': 'How damaged the part is on the scale of 0 to 3, with 0 being undamaged and 3 being very damaged. How this is manifested depends on the panel and the vehicle.'}, result="Returns ''true'' if the panel state has been updated, ''false'' otherwise"), oop=FunctionOOP(class_name='vehicle', method_name='setPanelState', field=None), url=FunctionUrl(url='/wiki/SetVehiclePanelState', name='setVehiclePanelState', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setVehiclePlateText', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='element', default_value=None, optional=False), FunctionArgument(name='numberplate', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='This function can be used to set the numberplate text of a car.\n}}\nIt now also changes the numberplate text of any vehicle that has visual numberplates.\n}}', arguments={'theVehicle': 'the vehicle whose numberplate you want to change.', 'numberplate': 'a string that will go on the number plate of the car (max 8 characters).'}, result="Returns ''true'' if the numberplate was changed successfully, or ''false'' if invalid arguments were passed"), oop=FunctionOOP(class_name='vehicle', method_name='setPlateText', field='plateText'), url=FunctionUrl(url='/wiki/SetVehiclePlateText', name='setVehiclePlateText', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setVehiclePlateText', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='element', default_value=None, optional=False), FunctionArgument(name='numberplate', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='This function can be used to set the numberplate text of a car.\n}}\nIt now also changes the numberplate text of any vehicle that has visual numberplates.\n}}', arguments={'theVehicle': 'the vehicle whose numberplate you want to change.', 'numberplate': 'a string that will go on the number plate of the car (max 8 characters).'}, result="Returns ''true'' if the numberplate was changed successfully, or ''false'' if invalid arguments were passed"), oop=FunctionOOP(class_name='vehicle', method_name='setPlateText', field='plateText'), url=FunctionUrl(url='/wiki/SetVehiclePlateText', name='setVehiclePlateText', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setVehicleSirens', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='sirenPoint', argument_type='int', default_value=None, optional=False), FunctionArgument(name='posX', argument_type='float', default_value=None, optional=False), FunctionArgument(name='posY', argument_type='float', default_value=None, optional=False), FunctionArgument(name='posZ', argument_type='float', default_value=None, optional=False), FunctionArgument(name='red', argument_type='float', default_value=None, optional=False), FunctionArgument(name='green', argument_type='float', default_value=None, optional=False), FunctionArgument(name='blue', argument_type='float', default_value=None, optional=False), FunctionArgument(name='alpha', argument_type='float', default_value='255', optional=False), FunctionArgument(name='minAlpha', argument_type='float', default_value='0.0', optional=False)]), docs=FunctionDoc(description='This function changes the properties of a vehicles siren point.\n}}', arguments={'theVehicle': 'The vehicle to modify', 'sirenPoint': 'The siren point to modify', 'posX': 'The x position of this siren point from the center of the vehicle', 'posY': 'The y position of this siren point from the center of the vehicle', 'posZ': 'The z position of this siren point from the center of the vehicle', 'red': 'The amount of red from 0 to 255', 'green': 'The amount of green from 0 to 255', 'blue': 'The amount of blue from 0 to 255', 'alpha': 'The alpha of the siren from 0 to 255', 'minAlpha': 'The minimum alpha of the light during day time'}, result="Returns ''true'' if the siren point was successfully changed on the vehicle, ''false'' otherwise. "), oop=FunctionOOP(class_name='vehicle', method_name='setSirens', field=None), url=FunctionUrl(url='/wiki/SetVehicleSirens', name='setVehicleSirens', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setVehicleSirens', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='sirenPoint', argument_type='int', default_value=None, optional=False), FunctionArgument(name='posX', argument_type='float', default_value=None, optional=False), FunctionArgument(name='posY', argument_type='float', default_value=None, optional=False), FunctionArgument(name='posZ', argument_type='float', default_value=None, optional=False), FunctionArgument(name='red', argument_type='float', default_value=None, optional=False), FunctionArgument(name='green', argument_type='float', default_value=None, optional=False), FunctionArgument(name='blue', argument_type='float', default_value=None, optional=False), FunctionArgument(name='alpha', argument_type='float', default_value='255', optional=False), FunctionArgument(name='minAlpha', argument_type='float', default_value='0.0', optional=False)]), docs=FunctionDoc(description='This function changes the properties of a vehicles siren point.\n}}', arguments={'theVehicle': 'The vehicle to modify', 'sirenPoint': 'The siren point to modify', 'posX': 'The x position of this siren point from the center of the vehicle', 'posY': 'The y position of this siren point from the center of the vehicle', 'posZ': 'The z position of this siren point from the center of the vehicle', 'red': 'The amount of red from 0 to 255', 'green': 'The amount of green from 0 to 255', 'blue': 'The amount of blue from 0 to 255', 'alpha': 'The alpha of the siren from 0 to 255', 'minAlpha': 'The minimum alpha of the light during day time'}, result="Returns ''true'' if the siren point was successfully changed on the vehicle, ''false'' otherwise. "), oop=FunctionOOP(class_name='vehicle', method_name='setSirens', field=None), url=FunctionUrl(url='/wiki/SetVehicleSirens', name='setVehicleSirens', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setVehicleSirensOn', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='sirensOn', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description='This function changes the state of the sirens on the specified vehicle.', arguments={'theVehicle': 'The vehicle that will have the sirens set', 'sirensOn': 'The state to set the sirens to'}, result="Returns ''true'' if the sirens are set for the specified vehicle, ''false'' if the sirens can't be set for the specified vehicle, if the vehicle doesn't have sirens or if invalid arguments are specified."), oop=FunctionOOP(class_name='vehicle', method_name='setSirensOn', field='sirensOn'), url=FunctionUrl(url='/wiki/SetVehicleSirensOn', name='setVehicleSirensOn', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setVehicleSirensOn', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='sirensOn', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description='This function changes the state of the sirens on the specified vehicle.', arguments={'theVehicle': 'The vehicle that will have the sirens set', 'sirensOn': 'The state to set the sirens to'}, result="Returns ''true'' if the sirens are set for the specified vehicle, ''false'' if the sirens can't be set for the specified vehicle, if the vehicle doesn't have sirens or if invalid arguments are specified."), oop=FunctionOOP(class_name='vehicle', method_name='setSirensOn', field='sirensOn'), url=FunctionUrl(url='/wiki/SetVehicleSirensOn', name='setVehicleSirensOn', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setVehicleTaxiLightOn', return_types=['bool'], arguments=[FunctionArgument(name='taxi', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='LightState', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description="This function will set the taxi light on in a taxi (vehicle ID's 420 and 438)", arguments={'taxi': 'The vehicle element of the taxi that you wish to turn the light on.', 'LightState': 'whether the light is on. True for on, False for off.'}, result="Returns ''true'' if the state was successfully set, ''false'' otherwise."), oop=FunctionOOP(class_name='vehicle', method_name='setTaxiLightOn', field='taxiLightOn'), url=FunctionUrl(url='/wiki/SetVehicleTaxiLightOn', name='setVehicleTaxiLightOn', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setVehicleTaxiLightOn', return_types=['bool'], arguments=[FunctionArgument(name='taxi', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='LightState', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description="This function will set the taxi light on in a taxi (vehicle ID's 420 and 438)", arguments={'taxi': 'The vehicle element of the taxi that you wish to turn the light on.', 'LightState': 'whether the light is on. True for on, False for off.'}, result="Returns ''true'' if the state was successfully set, ''false'' otherwise."), oop=FunctionOOP(class_name='vehicle', method_name='setTaxiLightOn', field='taxiLightOn'), url=FunctionUrl(url='/wiki/SetVehicleTaxiLightOn', name='setVehicleTaxiLightOn', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setVehicleTurretPosition', return_types=['bool'], arguments=[FunctionArgument(name='turretVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='positionX', argument_type='float', default_value=None, optional=False), FunctionArgument(name='positionY', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description="This function sets the position of a vehicle's turret, if it has one. This can be used to influence the turret's rotation, so it doesn't follow the camera. Vehicles with turrets include firetrucks and tanks.", arguments={'turretVehicle': ': The vehicle whose turret position you want to retrieve. This should be a vehicle with a turret.', 'positionX': ': The horizontal position of the turret. In radians', 'positionY': ': The vertical position of the turret. In radians'}, result="Returns a ''true'' if a valid vehicle element and valid positions were passed, ''false'' otherwise."), oop=FunctionOOP(class_name='vehicle', method_name='setTurretPosition', field='turretPosition'), url=FunctionUrl(url='/wiki/SetVehicleTurretPosition', name='setVehicleTurretPosition', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setVehicleTurretPosition', return_types=['bool'], arguments=[FunctionArgument(name='turretVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='positionX', argument_type='float', default_value=None, optional=False), FunctionArgument(name='positionY', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description="This function sets the position of a vehicle's turret, if it has one. This can be used to influence the turret's rotation, so it doesn't follow the camera. Vehicles with turrets include firetrucks and tanks.", arguments={'turretVehicle': ': The vehicle whose turret position you want to retrieve. This should be a vehicle with a turret.', 'positionX': ': The horizontal position of the turret. In radians', 'positionY': ': The vertical position of the turret. In radians'}, result="Returns a ''true'' if a valid vehicle element and valid positions were passed, ''false'' otherwise."), oop=FunctionOOP(class_name='vehicle', method_name='setTurretPosition', field='turretPosition'), url=FunctionUrl(url='/wiki/SetVehicleTurretPosition', name='setVehicleTurretPosition', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setVehicleVariant', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='variant1', argument_type='int', default_value=None, optional=True), FunctionArgument(name='variant2', argument_type='int', default_value=None, optional=True)]), docs=FunctionDoc(description="This function sets the variant of a specified vehicle. In GTA SA some vehicles are different for example the labelling on trucks or the contents of a pick-up truck and the varying types of a motor bike. For the default GTA SA variant list see: [[Vehicle variants]]\n {{Tip|Both variant arguments need to be supplied, otherwise random ones will be picked.}} \n {{Tip|If you only want one variant, set ''''variant2'''' to ''255''. If you want no variants, then set both ''''variant1'''' and ''''variant2'''' to ''255''}} \n {{Note|The fairings on the NRG-500 and BF-400 are both variants, so unless you explicitly ask for 3 or 4, your bike will have no fairings which some people may find offensive.\n}} ", arguments={'theVehicle': 'A handle to the vehicle that you want to get the variant of.\nBoth arguments need to be supplied, otherwise random variants will be picked.', 'variant1': ': An integer for the first variant see Vehicle variants', 'variant2': ': An integer for the second variant see Vehicle variants'}, result="On success:\n* '''bool''': Returns true as the vehicle variants were successfully set.\nOn failure:\n* '''bool''': False because the specified vehicle didn't exist or specified variants were invalid."), oop=FunctionOOP(class_name='vehicle', method_name='setVariant', field=None), url=FunctionUrl(url='/wiki/SetVehicleVariant', name='setVehicleVariant', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setVehicleVariant', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='variant1', argument_type='int', default_value=None, optional=True), FunctionArgument(name='variant2', argument_type='int', default_value=None, optional=True)]), docs=FunctionDoc(description="This function sets the variant of a specified vehicle. In GTA SA some vehicles are different for example the labelling on trucks or the contents of a pick-up truck and the varying types of a motor bike. For the default GTA SA variant list see: [[Vehicle variants]]\n {{Tip|Both variant arguments need to be supplied, otherwise random ones will be picked.}} \n {{Tip|If you only want one variant, set ''''variant2'''' to ''255''. If you want no variants, then set both ''''variant1'''' and ''''variant2'''' to ''255''}} \n {{Note|The fairings on the NRG-500 and BF-400 are both variants, so unless you explicitly ask for 3 or 4, your bike will have no fairings which some people may find offensive.\n}} ", arguments={'theVehicle': 'A handle to the vehicle that you want to get the variant of.\nBoth arguments need to be supplied, otherwise random variants will be picked.', 'variant1': ': An integer for the first variant see Vehicle variants', 'variant2': ': An integer for the second variant see Vehicle variants'}, result="On success:\n* '''bool''': Returns true as the vehicle variants were successfully set.\nOn failure:\n* '''bool''': False because the specified vehicle didn't exist or specified variants were invalid."), oop=FunctionOOP(class_name='vehicle', method_name='setVariant', field=None), url=FunctionUrl(url='/wiki/SetVehicleVariant', name='setVehicleVariant', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setVehicleWheelStates', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='frontLeft', argument_type='int', default_value=None, optional=False), FunctionArgument(name='rearLeft', argument_type='int', default_value='-1', optional=False), FunctionArgument(name='frontRight', argument_type='int', default_value='-1', optional=False), FunctionArgument(name='rearRight', argument_type='int', default_value='-1', optional=False)]), docs=FunctionDoc(description='This function sets the state of wheels on the vehicle.\nInternally, no vehicles have more than 4 wheels. If they appear to, they will be duplicating other wheels.', arguments={'theVehicle': 'A handle to the vehicle that you wish to change the wheel states of.', 'frontLeft': 'A whole number representing the wheel state (-1 for no change)', 'rearLeft': 'A whole number representing the wheel state (-1 for no change)', 'frontRight': 'A whole number representing the wheel state (-1 for no change)', 'rearRight': 'A whole number representing the wheel state (-1 for no change)'}, result="Returns a boolean value ''true'' or ''false'' that tells you if it was successful or not."), oop=FunctionOOP(class_name='vehicle', method_name='setWheelStates', field=None), url=FunctionUrl(url='/wiki/SetVehicleWheelStates', name='setVehicleWheelStates', category='Vehicle functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setVehicleWheelStates', return_types=['bool'], arguments=[FunctionArgument(name='theVehicle', argument_type='vehicle', default_value=None, optional=False), FunctionArgument(name='frontLeft', argument_type='int', default_value=None, optional=False), FunctionArgument(name='rearLeft', argument_type='int', default_value='-1', optional=False), FunctionArgument(name='frontRight', argument_type='int', default_value='-1', optional=False), FunctionArgument(name='rearRight', argument_type='int', default_value='-1', optional=False)]), docs=FunctionDoc(description='This function sets the state of wheels on the vehicle.\nInternally, no vehicles have more than 4 wheels. If they appear to, they will be duplicating other wheels.', arguments={'theVehicle': 'A handle to the vehicle that you wish to change the wheel states of.', 'frontLeft': 'A whole number representing the wheel state (-1 for no change)', 'rearLeft': 'A whole number representing the wheel state (-1 for no change)', 'frontRight': 'A whole number representing the wheel state (-1 for no change)', 'rearRight': 'A whole number representing the wheel state (-1 for no change)'}, result="Returns a boolean value ''true'' or ''false'' that tells you if it was successful or not."), oop=FunctionOOP(class_name='vehicle', method_name='setWheelStates', field=None), url=FunctionUrl(url='/wiki/SetVehicleWheelStates', name='setVehicleWheelStates', category='Vehicle functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='createWater', return_types=['water'], arguments=[FunctionArgument(name='x1', argument_type='float', default_value=None, optional=False), FunctionArgument(name='y1', argument_type='float', default_value=None, optional=False), FunctionArgument(name='z1', argument_type='float', default_value=None, optional=False), FunctionArgument(name='x2', argument_type='float', default_value=None, optional=False), FunctionArgument(name='y2', argument_type='float', default_value=None, optional=False), FunctionArgument(name='z2', argument_type='float', default_value=None, optional=False), FunctionArgument(name='x3', argument_type='float', default_value=None, optional=False), FunctionArgument(name='y3', argument_type='float', default_value=None, optional=False), FunctionArgument(name='z3', argument_type='float', default_value=None, optional=False), FunctionArgument(name='x4', argument_type='float', default_value=None, optional=True), FunctionArgument(name='y4', argument_type='float', default_value=None, optional=True), FunctionArgument(name='z4', argument_type='float', default_value=None, optional=True), FunctionArgument(name='bShallow', argument_type='bool', default_value='false', optional=True)]), docs=FunctionDoc(description='Creates an area of [[water]].\nThe largest possible size of a water area is 5996&#0215;5996. Also be aware that the function will change all x and y coordinates you specify into even integer numbers if necessary: this is because of a limitation of San Andreas.\nYou are able to give the water a shallow water effect, which practically changes the water invisible to the eye. However, all elements still work the same way as without the shallow effect - allowing swimming, diving, vehicles to sink, etc.', arguments={'x1, y1, z1': 'position of bottom left (south-west) corner.', 'x2, y2, z2': 'position of bottom right (south-east) corner.', 'x3, y3, z3': "position of top left (north-west) corner.\n''Note: Only 3 coords creates a triangle''", 'x4, y4, z4': 'position of top right (north-east) corner.', 'bShallow': 'gives the water a shallow water effect.'}, result="Returns a water element if successful, ''false'' otherwise. The water element can be repositioned with [[setElementPosition]] and destroyed with [[destroyElement]]."), oop=None, url=FunctionUrl(url='/wiki/CreateWater', name='createWater', category='Water functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='createWater', return_types=['water'], arguments=[FunctionArgument(name='x1', argument_type='float', default_value=None, optional=False), FunctionArgument(name='y1', argument_type='float', default_value=None, optional=False), FunctionArgument(name='z1', argument_type='float', default_value=None, optional=False), FunctionArgument(name='x2', argument_type='float', default_value=None, optional=False), FunctionArgument(name='y2', argument_type='float', default_value=None, optional=False), FunctionArgument(name='z2', argument_type='float', default_value=None, optional=False), FunctionArgument(name='x3', argument_type='float', default_value=None, optional=False), FunctionArgument(name='y3', argument_type='float', default_value=None, optional=False), FunctionArgument(name='z3', argument_type='float', default_value=None, optional=False), FunctionArgument(name='x4', argument_type='float', default_value=None, optional=True), FunctionArgument(name='y4', argument_type='float', default_value=None, optional=True), FunctionArgument(name='z4', argument_type='float', default_value=None, optional=True), FunctionArgument(name='bShallow', argument_type='bool', default_value='false', optional=True)]), docs=FunctionDoc(description='Creates an area of [[water]].\nThe largest possible size of a water area is 5996&#0215;5996. Also be aware that the function will change all x and y coordinates you specify into even integer numbers if necessary: this is because of a limitation of San Andreas.\nYou are able to give the water a shallow water effect, which practically changes the water invisible to the eye. However, all elements still work the same way as without the shallow effect - allowing swimming, diving, vehicles to sink, etc.', arguments={'x1, y1, z1': 'position of bottom left (south-west) corner.', 'x2, y2, z2': 'position of bottom right (south-east) corner.', 'x3, y3, z3': "position of top left (north-west) corner.\n''Note: Only 3 coords creates a triangle''", 'x4, y4, z4': 'position of top right (north-east) corner.', 'bShallow': 'gives the water a shallow water effect.'}, result="Returns a water element if successful, ''false'' otherwise. The water element can be repositioned with [[setElementPosition]] and destroyed with [[destroyElement]]."), oop=None, url=FunctionUrl(url='/wiki/CreateWater', name='createWater', category='Water functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getWaterColor', return_types=['int,', 'int,', 'int,', 'int'], arguments=[]), docs=FunctionDoc(description="This function returns the water color of the GTA world.\n'''Note:''' The server can only return the water color, if it has actually been set by script.", arguments={}, result='Returns 4 [[int|ints]], indicating the color of the water. (RGBA)'), oop=FunctionOOP(class_name='water', method_name='getColor', field=None), url=FunctionUrl(url='/wiki/GetWaterColor', name='getWaterColor', category='Water functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getWaterColor', return_types=['int,', 'int,', 'int,', 'int'], arguments=[]), docs=FunctionDoc(description="This function returns the water color of the GTA world.\n'''Note:''' The server can only return the water color, if it has actually been set by script.", arguments={}, result='Returns 4 [[int|ints]], indicating the color of the water. (RGBA)'), oop=FunctionOOP(class_name='water', method_name='getColor', field=None), url=FunctionUrl(url='/wiki/GetWaterColor', name='getWaterColor', category='Water functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getWaterVertexPosition', return_types=['int', 'int', 'float'], arguments=[FunctionArgument(name='theWater', argument_type='water', default_value=None, optional=False), FunctionArgument(name='vertexIndex', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='Gets the world position of a vertex (i.e. corner) of a [[water]] area. Each water area is either a triangle or quad (rectangle) so each has 3 or 4 corners.', arguments={'theWater': 'the water element to get the vertex of', 'vertexIndex': 'the index of the vertex whose position to get. Values range from 1 to 4 for a water quad, or 1 to 3 for a triangle.'}, result="Returns the x, y and z coordinates of the specified vertex if successful, ''false'' otherwise."), oop=FunctionOOP(class_name='water', method_name='getVertexPosition', field=None), url=FunctionUrl(url='/wiki/GetWaterVertexPosition', name='getWaterVertexPosition', category='Water functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getWaterVertexPosition', return_types=['int', 'int', 'float'], arguments=[FunctionArgument(name='theWater', argument_type='water', default_value=None, optional=False), FunctionArgument(name='vertexIndex', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='Gets the world position of a vertex (i.e. corner) of a [[water]] area. Each water area is either a triangle or quad (rectangle) so each has 3 or 4 corners.', arguments={'theWater': 'the water element to get the vertex of', 'vertexIndex': 'the index of the vertex whose position to get. Values range from 1 to 4 for a water quad, or 1 to 3 for a triangle.'}, result="Returns the x, y and z coordinates of the specified vertex if successful, ''false'' otherwise."), oop=FunctionOOP(class_name='water', method_name='getVertexPosition', field=None), url=FunctionUrl(url='/wiki/GetWaterVertexPosition', name='getWaterVertexPosition', category='Water functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getWaveHeight', return_types=['float'], arguments=[]), docs=FunctionDoc(description='This function returns the current wave height.', arguments={}, result="Returns the height as a [[float]], ''false'' otherwise."), oop=FunctionOOP(class_name='Water', method_name='getWaveHeight', field=None), url=FunctionUrl(url='/wiki/GetWaveHeight', name='getWaveHeight', category='Water functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getWaveHeight', return_types=['float'], arguments=[]), docs=FunctionDoc(description='This function returns the current wave height.', arguments={}, result="Returns the height as a [[float]], ''false'' otherwise."), oop=FunctionOOP(class_name='Water', method_name='getWaveHeight', field=None), url=FunctionUrl(url='/wiki/GetWaveHeight', name='getWaveHeight', category='Water functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='resetWaterColor', return_types=['bool'], arguments=[]), docs=FunctionDoc(description='This function reset the water color of the GTA world to default.', arguments={}, result="Returns ''true'' if water color was reset correctly, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/ResetWaterColor', name='resetWaterColor', category='Water functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='resetWaterColor', return_types=['bool'], arguments=[]), docs=FunctionDoc(description='This function reset the water color of the GTA world to default.', arguments={}, result="Returns ''true'' if water color was reset correctly, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/ResetWaterColor', name='resetWaterColor', category='Water functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='resetWaterLevel', return_types=['bool'], arguments=[]), docs=FunctionDoc(description='This function resets the water of the GTA world back to its default level. [[water|Water elements]] are not affected.', arguments={}, result="Returns ''true'' if water level was reset correctly, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/ResetWaterLevel', name='resetWaterLevel', category='Water functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='resetWaterLevel', return_types=['bool'], arguments=[]), docs=FunctionDoc(description='This function resets the water of the GTA world back to its default level. [[water|Water elements]] are not affected.', arguments={}, result="Returns ''true'' if water level was reset correctly, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/ResetWaterLevel', name='resetWaterLevel', category='Water functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setWaterColor', return_types=['bool'], arguments=[FunctionArgument(name='red', argument_type='int', default_value=None, optional=False), FunctionArgument(name='green', argument_type='int', default_value=None, optional=False), FunctionArgument(name='blue', argument_type='int', default_value=None, optional=False), FunctionArgument(name='alpha', argument_type='int', default_value='200', optional=False)]), docs=FunctionDoc(description='This function changes the water color of the GTA world.', arguments={'red': 'The red value of the water, from 0 to 255.', 'green': 'The green value of the water, from 0 to 255.', 'blue': 'The blue value of the water, from 0 to 255.\n{{OptionalArg}} ', 'alpha': 'The alpha (visibility) value of the water, from 0 to 255. Defaults to 200 if not declared.'}, result="Returns ''true'' if water color was set correctly, ''false'' if invalid values were passed."), oop=FunctionOOP(class_name='water', method_name='setColor', field=None), url=FunctionUrl(url='/wiki/SetWaterColor', name='setWaterColor', category='Water functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setWaterColor', return_types=['bool'], arguments=[FunctionArgument(name='red', argument_type='int', default_value=None, optional=False), FunctionArgument(name='green', argument_type='int', default_value=None, optional=False), FunctionArgument(name='blue', argument_type='int', default_value=None, optional=False), FunctionArgument(name='alpha', argument_type='int', default_value='200', optional=False)]), docs=FunctionDoc(description='This function changes the water color of the GTA world.', arguments={'red': 'The red value of the water, from 0 to 255.', 'green': 'The green value of the water, from 0 to 255.', 'blue': 'The blue value of the water, from 0 to 255.\n{{OptionalArg}} ', 'alpha': 'The alpha (visibility) value of the water, from 0 to 255. Defaults to 200 if not declared.'}, result="Returns ''true'' if water color was set correctly, ''false'' if invalid values were passed."), oop=FunctionOOP(class_name='water', method_name='setColor', field=None), url=FunctionUrl(url='/wiki/SetWaterColor', name='setWaterColor', category='Water functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setWaterVertexPosition', return_types=['bool'], arguments=[FunctionArgument(name='theWater', argument_type='water', default_value=None, optional=False), FunctionArgument(name='vertexIndex', argument_type='int', default_value=None, optional=False), FunctionArgument(name='x', argument_type='int', default_value=None, optional=False), FunctionArgument(name='y', argument_type='int', default_value=None, optional=False), FunctionArgument(name='z', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='Sets the world position of a corner point of a water area.', arguments={'theWater': 'the water element of which to change a vertex.', 'vertexIndex': 'the index of the vertex to move. Values range from 1 to 4 for water quads, and 1 to 3 for triangles.', 'x': 'the X coordinate to set for the vertex.', 'y': 'the Y coordinate to set for the vertex.', 'z': 'the Z coordinate to set for the vertex.'}, result="Returns ''true'' if successful, ''false'' otherwise."), oop=FunctionOOP(class_name='water', method_name='setVertexPosition', field=None), url=FunctionUrl(url='/wiki/SetWaterVertexPosition', name='setWaterVertexPosition', category='Water functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setWaterVertexPosition', return_types=['bool'], arguments=[FunctionArgument(name='theWater', argument_type='water', default_value=None, optional=False), FunctionArgument(name='vertexIndex', argument_type='int', default_value=None, optional=False), FunctionArgument(name='x', argument_type='int', default_value=None, optional=False), FunctionArgument(name='y', argument_type='int', default_value=None, optional=False), FunctionArgument(name='z', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='Sets the world position of a corner point of a water area.', arguments={'theWater': 'the water element of which to change a vertex.', 'vertexIndex': 'the index of the vertex to move. Values range from 1 to 4 for water quads, and 1 to 3 for triangles.', 'x': 'the X coordinate to set for the vertex.', 'y': 'the Y coordinate to set for the vertex.', 'z': 'the Z coordinate to set for the vertex.'}, result="Returns ''true'' if successful, ''false'' otherwise."), oop=FunctionOOP(class_name='water', method_name='setVertexPosition', field=None), url=FunctionUrl(url='/wiki/SetWaterVertexPosition', name='setWaterVertexPosition', category='Water functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setWaveHeight', return_types=['bool'], arguments=[FunctionArgument(name='height', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='This function sets the wave height to the desired value, the default is 0.', arguments={'height': 'A float between 0 and 100.'}, result="Returns a boolean value ''true'' or ''false'' that tells you if it was successful or not."), oop=FunctionOOP(class_name='Water', method_name='setWaveHeight', field=None), url=FunctionUrl(url='/wiki/SetWaveHeight', name='setWaveHeight', category='Water functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setWaveHeight', return_types=['bool'], arguments=[FunctionArgument(name='height', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='This function sets the wave height to the desired value, the default is 0.', arguments={'height': 'A float between 0 and 100.'}, result="Returns a boolean value ''true'' or ''false'' that tells you if it was successful or not."), oop=FunctionOOP(class_name='Water', method_name='setWaveHeight', field=None), url=FunctionUrl(url='/wiki/SetWaveHeight', name='setWaveHeight', category='Water functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getOriginalWeaponProperty', return_types=['int'], arguments=[FunctionArgument(name='weaponID', argument_type='int', default_value=None, optional=False), FunctionArgument(name='weaponSkill', argument_type='string', default_value=None, optional=False), FunctionArgument(name='property', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='This function gets the original weapon property of the specified weapons specified weapon type.', arguments={'weaponID or weaponName': 'The ID or name of the weapon you want to get info of. Names can be:\n{{Some Weapon Types}}', 'weaponSkill': 'Either: pro, std or poor', 'property': 'The property you want to get the value of:\n{{Weapon Properties Writable}}\nThe following properties are get only:\n{{Weapon Properties ReadOnly}}'}, result="On success:\n'''int:''' The weapon property\nOn failure:\n'''bool:''' False if the passed arguments were invalid"), oop=None, url=FunctionUrl(url='/wiki/GetOriginalWeaponProperty', name='getOriginalWeaponProperty', category='Weapon functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getOriginalWeaponProperty', return_types=['int'], arguments=[FunctionArgument(name='weaponID', argument_type='int', default_value=None, optional=False), FunctionArgument(name='weaponSkill', argument_type='string', default_value=None, optional=False), FunctionArgument(name='property', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='This function gets the original weapon property of the specified weapons specified weapon type.', arguments={'weaponID or weaponName': 'The ID or name of the weapon you want to get info of. Names can be:\n{{Some Weapon Types}}', 'weaponSkill': 'Either: pro, std or poor', 'property': 'The property you want to get the value of:\n{{Weapon Properties Writable}}\nThe following properties are get only:\n{{Weapon Properties ReadOnly}}'}, result="On success:\n'''int:''' The weapon property\nOn failure:\n'''bool:''' False if the passed arguments were invalid"), oop=None, url=FunctionUrl(url='/wiki/GetOriginalWeaponProperty', name='getOriginalWeaponProperty', category='Weapon functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getSlotFromWeapon', return_types=['int'], arguments=[FunctionArgument(name='weaponid', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function allows you to identify the weapon slot that a weapon belongs to.', arguments={'weaponid': 'Weapon to find the weapon slot of.'}, result="Returns an integer representing the given weapon ID's associated weapon slot, ''false'' if the ID was invalid."), oop=None, url=FunctionUrl(url='/wiki/GetSlotFromWeapon', name='getSlotFromWeapon', category='Weapon functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getSlotFromWeapon', return_types=['int'], arguments=[FunctionArgument(name='weaponid', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function allows you to identify the weapon slot that a weapon belongs to.', arguments={'weaponid': 'Weapon to find the weapon slot of.'}, result="Returns an integer representing the given weapon ID's associated weapon slot, ''false'' if the ID was invalid."), oop=None, url=FunctionUrl(url='/wiki/GetSlotFromWeapon', name='getSlotFromWeapon', category='Weapon functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getWeaponIDFromName', return_types=['int'], arguments=[FunctionArgument(name='name', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='This function will obtain the ID of a particular weapon from its name.', arguments={'name': 'A string containing the name of the weapon. Names can be: (Case is ignored)\n{{All Weapon Types}}'}, result="Returns an [[int]] if the name matches that of a weapon, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/GetWeaponIDFromName', name='getWeaponIDFromName', category='Weapon functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getWeaponIDFromName', return_types=['int'], arguments=[FunctionArgument(name='name', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='This function will obtain the ID of a particular weapon from its name.', arguments={'name': 'A string containing the name of the weapon. Names can be: (Case is ignored)\n{{All Weapon Types}}'}, result="Returns an [[int]] if the name matches that of a weapon, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/GetWeaponIDFromName', name='getWeaponIDFromName', category='Weapon functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getWeaponNameFromID', return_types=['string'], arguments=[FunctionArgument(name='id', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function allows you to retrieve the name of a weapon from an ID.', arguments={'id': 'The ID you wish to retrieve the name of'}, result="Returns a string of the name of the weapon or death type, ''false'' otherwise. Names will be like these: (Ignoring case)\n{{All Weapon Types}}"), oop=None, url=FunctionUrl(url='/wiki/GetWeaponNameFromID', name='getWeaponNameFromID', category='Weapon functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getWeaponNameFromID', return_types=['string'], arguments=[FunctionArgument(name='id', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function allows you to retrieve the name of a weapon from an ID.', arguments={'id': 'The ID you wish to retrieve the name of'}, result="Returns a string of the name of the weapon or death type, ''false'' otherwise. Names will be like these: (Ignoring case)\n{{All Weapon Types}}"), oop=None, url=FunctionUrl(url='/wiki/GetWeaponNameFromID', name='getWeaponNameFromID', category='Weapon functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getWeaponProperty', return_types=['int'], arguments=[FunctionArgument(name='weaponID', argument_type='int', default_value=None, optional=False), FunctionArgument(name='weaponSkill', argument_type='string', default_value=None, optional=False), FunctionArgument(name='property', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='This function gets a weapon property of the specified [[Element/Weapon|custom weapon]] (clientside only) or specified [[Weapons|player-held weapon]] (both client and server).', arguments={'weaponID or weaponName': 'The ID or name of the weapon you want to get info of. Names can be:\n{{Some Weapon Types}}', 'weaponSkill': 'Either: pro, std or poor', 'property': 'The property you want to get the value of:\n{{Weapon Properties Writable}}\nThe following properties are get only:\n{{Weapon Properties ReadOnly}}'}, result="On success:\n'''int:''' The weapon property\nOn failure:\n'''bool:''' False if the passed arguments were invalid"), oop=None, url=FunctionUrl(url='/wiki/GetWeaponProperty', name='getWeaponProperty', category='Weapon functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getWeaponProperty', return_types=['int'], arguments=[FunctionArgument(name='weaponID', argument_type='int', default_value=None, optional=False), FunctionArgument(name='weaponSkill', argument_type='string', default_value=None, optional=False), FunctionArgument(name='property', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='This function gets a weapon property of the specified [[Element/Weapon|custom weapon]] (clientside only) or specified [[Weapons|player-held weapon]] (both client and server).', arguments={'weaponID or weaponName': 'The ID or name of the weapon you want to get info of. Names can be:\n{{Some Weapon Types}}', 'weaponSkill': 'Either: pro, std or poor', 'property': 'The property you want to get the value of:\n{{Weapon Properties Writable}}\nThe following properties are get only:\n{{Weapon Properties ReadOnly}}'}, result="On success:\n'''int:''' The weapon property\nOn failure:\n'''bool:''' False if the passed arguments were invalid"), oop=None, url=FunctionUrl(url='/wiki/GetWeaponProperty', name='getWeaponProperty', category='Weapon functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getWeaponProperty', return_types=['int'], arguments=[FunctionArgument(name='weaponID', argument_type='int', default_value=None, optional=False), FunctionArgument(name='weaponSkill', argument_type='string', default_value=None, optional=False), FunctionArgument(name='property', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='This function gets a weapon property of the specified [[Element/Weapon|custom weapon]] (clientside only) or specified [[Weapons|player-held weapon]] (both client and server).', arguments={'weaponID or weaponName': 'The ID or name of the weapon you want to get info of. Names can be:\n{{Some Weapon Types}}', 'weaponSkill': 'Either: pro, std or poor', 'property': 'The property you want to get the value of:\n{{Weapon Properties Writable}}\nThe following properties are get only:\n{{Weapon Properties ReadOnly}}'}, result="On success:\n'''int:''' The weapon property\nOn failure:\n'''bool:''' False if the passed arguments were invalid"), oop=None, url=FunctionUrl(url='/wiki/GetWeaponProperty', name='getWeaponProperty', category='Weapon creation functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getWeaponProperty', return_types=['int'], arguments=[FunctionArgument(name='weaponID', argument_type='int', default_value=None, optional=False), FunctionArgument(name='weaponSkill', argument_type='string', default_value=None, optional=False), FunctionArgument(name='property', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='This function gets a weapon property of the specified [[Element/Weapon|custom weapon]] (clientside only) or specified [[Weapons|player-held weapon]] (both client and server).', arguments={'weaponID or weaponName': 'The ID or name of the weapon you want to get info of. Names can be:\n{{Some Weapon Types}}', 'weaponSkill': 'Either: pro, std or poor', 'property': 'The property you want to get the value of:\n{{Weapon Properties Writable}}\nThe following properties are get only:\n{{Weapon Properties ReadOnly}}'}, result="On success:\n'''int:''' The weapon property\nOn failure:\n'''bool:''' False if the passed arguments were invalid"), oop=None, url=FunctionUrl(url='/wiki/GetWeaponProperty', name='getWeaponProperty', category='Weapon creation functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setWeaponProperty', return_types=['bool'], arguments=[FunctionArgument(name='weaponID', argument_type='int', default_value=None, optional=False), FunctionArgument(name='weaponSkill', argument_type='string', default_value=None, optional=False), FunctionArgument(name='property', argument_type='string', default_value=None, optional=False), FunctionArgument(name='float', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='<section name="Server" class="server" show="true">\nThis function sets the weapon property of the specified weapons specified weapon type. See lower down the page for documentation related to weapon creation.', arguments={'weaponID': 'The ID or name of the Weapons|weapon you want to set a property of. Names can be:\n{{Some Weapon Types}}', 'weaponSkill': 'Either: pro, std or poor. The player must have this skill level set to have the effect.', 'property': 'The property you want to set the value of:\n{{Weapon Properties Writable}}', 'theValue': 'The value to set the property to.'}, result="On success:\n'''bool:''' Returns true if the weapon property was successfully set\nOn failure:\n'''bool:''' Returns false if the weapon property was unable to be set"), oop=None, url=FunctionUrl(url='/wiki/SetWeaponProperty', name='setWeaponProperty', category='Weapon creation functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setWeaponProperty', return_types=['bool'], arguments=[FunctionArgument(name='theWeapon', argument_type='weapon', default_value=None, optional=False), FunctionArgument(name='strProperty', argument_type='string', default_value=None, optional=False), FunctionArgument(name='theValue', argument_type='value', default_value=None, optional=False)]), docs=FunctionDoc(description='<section name="Server" class="server" show="true">\nThis function sets the weapon property of the specified weapons specified weapon type. See lower down the page for documentation related to weapon creation.', arguments={'theWeapon': 'the weapon to change the property of.', 'strProperty': 'the property to edit:\n{{Custom Weapon Properties Writable}}', 'theValue': 'The value to set the property to.'}, result="Returns ''true'' if the property was set."), oop=FunctionOOP(class_name='weapon', method_name='setProperty', field=None), url=FunctionUrl(url='/wiki/SetWeaponProperty', name='setWeaponProperty', category='Weapon creation functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='areTrafficLightsLocked', return_types=['bool'], arguments=[]), docs=FunctionDoc(description="Gets whether the traffic lights are currently locked or not. If the lights are locked, it means they won't change unless you do [[setTrafficLightState]].", arguments={}, result="Returns ''true'' the traffic lights are currently locked, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/AreTrafficLightsLocked', name='areTrafficLightsLocked', category='World functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='areTrafficLightsLocked', return_types=['bool'], arguments=[]), docs=FunctionDoc(description="Gets whether the traffic lights are currently locked or not. If the lights are locked, it means they won't change unless you do [[setTrafficLightState]].", arguments={}, result="Returns ''true'' the traffic lights are currently locked, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/AreTrafficLightsLocked', name='areTrafficLightsLocked', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getAircraftMaxHeight', return_types=['float'], arguments=[]), docs=FunctionDoc(description='This function gets the maximum height at which aircraft can fly without their engines turning off.', arguments={}, result='Returns a float containing the max aircraft height.'), oop=None, url=FunctionUrl(url='/wiki/GetAircraftMaxHeight', name='getAircraftMaxHeight', category='World functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getAircraftMaxHeight', return_types=['float'], arguments=[]), docs=FunctionDoc(description='This function gets the maximum height at which aircraft can fly without their engines turning off.', arguments={}, result='Returns a float containing the max aircraft height.'), oop=None, url=FunctionUrl(url='/wiki/GetAircraftMaxHeight', name='getAircraftMaxHeight', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getAircraftMaxVelocity', return_types=['float'], arguments=[]), docs=FunctionDoc(description='This function returns the maximum velocity at which aircrafts could fly. Using this function server-side will return the server-side value, not necessarily the same that is set client-side.\n}}', arguments={}, result='Returns a float being the max velocity that is currently set, depending on which side it is used.'), oop=None, url=FunctionUrl(url='/wiki/GetAircraftMaxVelocity', name='getAircraftMaxVelocity', category='World functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getAircraftMaxVelocity', return_types=['float'], arguments=[]), docs=FunctionDoc(description='This function returns the maximum velocity at which aircrafts could fly. Using this function server-side will return the server-side value, not necessarily the same that is set client-side.\n}}', arguments={}, result='Returns a float being the max velocity that is currently set, depending on which side it is used.'), oop=None, url=FunctionUrl(url='/wiki/GetAircraftMaxVelocity', name='getAircraftMaxVelocity', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getCloudsEnabled', return_types=['bool'], arguments=[]), docs=FunctionDoc(description='This function will tell you if clouds are enabled or disabled.', arguments={}, result="Returns ''true'' if the clouds are enabled or ''false'' if clouds are disabled."), oop=None, url=FunctionUrl(url='/wiki/GetCloudsEnabled', name='getCloudsEnabled', category='World functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getCloudsEnabled', return_types=['bool'], arguments=[]), docs=FunctionDoc(description='This function will tell you if clouds are enabled or disabled.', arguments={}, result="Returns ''true'' if the clouds are enabled or ''false'' if clouds are disabled."), oop=None, url=FunctionUrl(url='/wiki/GetCloudsEnabled', name='getCloudsEnabled', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getFarClipDistance', return_types=['float'], arguments=[]), docs=FunctionDoc(description='This function will tell you what is the current render distance.', arguments={}, result="Returns a ''float'' with the current render distance, ''false'' if the operation could not be completed."), oop=None, url=FunctionUrl(url='/wiki/GetFarClipDistance', name='getFarClipDistance', category='World functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getFarClipDistance', return_types=['float'], arguments=[]), docs=FunctionDoc(description='This function will tell you what is the current render distance.', arguments={}, result="Returns a ''float'' with the current render distance, ''false'' if the operation could not be completed."), oop=None, url=FunctionUrl(url='/wiki/GetFarClipDistance', name='getFarClipDistance', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getFogDistance', return_types=['float'], arguments=[]), docs=FunctionDoc(description='This function will tell you what is the current fog render distance.', arguments={}, result="Returns a ''float'' with the current fog render distance, ''false'' if the operation could not be completed."), oop=None, url=FunctionUrl(url='/wiki/GetFogDistance', name='getFogDistance', category='World functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getFogDistance', return_types=['float'], arguments=[]), docs=FunctionDoc(description='This function will tell you what is the current fog render distance.', arguments={}, result="Returns a ''float'' with the current fog render distance, ''false'' if the operation could not be completed."), oop=None, url=FunctionUrl(url='/wiki/GetFogDistance', name='getFogDistance', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getGameSpeed', return_types=['float'], arguments=[]), docs=FunctionDoc(description='This function gets the current game speed value.', arguments={}, result="Returns a ''float'' representing the speed of the game."), oop=None, url=FunctionUrl(url='/wiki/GetGameSpeed', name='getGameSpeed', category='World functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getGameSpeed', return_types=['float'], arguments=[]), docs=FunctionDoc(description='This function gets the current game speed value.', arguments={}, result="Returns a ''float'' representing the speed of the game."), oop=None, url=FunctionUrl(url='/wiki/GetGameSpeed', name='getGameSpeed', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getGravity', return_types=['float'], arguments=[]), docs=FunctionDoc(description='This function returns the current gravity level for the context in which it is called (server or client).', arguments={}, result='Returns a float with the current server or client (depending on where you call the function) gravity level.'), oop=None, url=FunctionUrl(url='/wiki/GetGravity', name='getGravity', category='World functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getGravity', return_types=['float'], arguments=[]), docs=FunctionDoc(description='This function returns the current gravity level for the context in which it is called (server or client).', arguments={}, result='Returns a float with the current server or client (depending on where you call the function) gravity level.'), oop=None, url=FunctionUrl(url='/wiki/GetGravity', name='getGravity', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getHeatHaze', return_types=['int,', 'int,', 'int,', 'int,', 'int,', 'int,', 'int,', 'int,', 'bool'], arguments=[]), docs=FunctionDoc(description="This function will return the current heat haze effect settings.\n'''Note:''' The server can only return the heat haze settings if it has actually been set by script.", arguments={}, result='Returns 9 values, which are the same used as arguments in [[SetHeatHaze]]:\n{{HeatHazeValues}}'), oop=None, url=FunctionUrl(url='/wiki/GetHeatHaze', name='getHeatHaze', category='World functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getHeatHaze', return_types=['int,', 'int,', 'int,', 'int,', 'int,', 'int,', 'int,', 'int,', 'bool'], arguments=[]), docs=FunctionDoc(description="This function will return the current heat haze effect settings.\n'''Note:''' The server can only return the heat haze settings if it has actually been set by script.", arguments={}, result='Returns 9 values, which are the same used as arguments in [[SetHeatHaze]]:\n{{HeatHazeValues}}'), oop=None, url=FunctionUrl(url='/wiki/GetHeatHaze', name='getHeatHaze', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getJetpackMaxHeight', return_types=['float'], arguments=[]), docs=FunctionDoc(description='This function gets the maximum height at which your jetpack can fly without failing to go higher.', arguments={}, result='Returns a float containing the max jetpack height.'), oop=None, url=FunctionUrl(url='/wiki/GetJetpackMaxHeight', name='getJetpackMaxHeight', category='World functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getJetpackMaxHeight', return_types=['float'], arguments=[]), docs=FunctionDoc(description='This function gets the maximum height at which your jetpack can fly without failing to go higher.', arguments={}, result='Returns a float containing the max jetpack height.'), oop=None, url=FunctionUrl(url='/wiki/GetJetpackMaxHeight', name='getJetpackMaxHeight', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getMinuteDuration', return_types=['int'], arguments=[]), docs=FunctionDoc(description='Tells you how long an ingame minute takes in real-world milliseconds. The default GTA value is 1000.', arguments={}, result='Returns the number of real-world milliseconds that go in an ingame minute.'), oop=None, url=FunctionUrl(url='/wiki/GetMinuteDuration', name='getMinuteDuration', category='World functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getMinuteDuration', return_types=['int'], arguments=[]), docs=FunctionDoc(description='Tells you how long an ingame minute takes in real-world milliseconds. The default GTA value is 1000.', arguments={}, result='Returns the number of real-world milliseconds that go in an ingame minute.'), oop=None, url=FunctionUrl(url='/wiki/GetMinuteDuration', name='getMinuteDuration', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getMoonSize', return_types=['int'], arguments=[]), docs=FunctionDoc(description='This function returns the moon size.\n}}', arguments={}, result='Returns a integer being the moon size that is currently set, depending on which side it is used.'), oop=None, url=FunctionUrl(url='/wiki/GetMoonSize', name='getMoonSize', category='World functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getMoonSize', return_types=['int'], arguments=[]), docs=FunctionDoc(description='This function returns the moon size.\n}}', arguments={}, result='Returns a integer being the moon size that is currently set, depending on which side it is used.'), oop=None, url=FunctionUrl(url='/wiki/GetMoonSize', name='getMoonSize', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getOcclusionsEnabled', return_types=['bool'], arguments=[]), docs=FunctionDoc(description='This function is used to get "occlusions enabled" state.', arguments={}, result="Returns ''true'' if occlusions are enabled, or ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/GetOcclusionsEnabled', name='getOcclusionsEnabled', category='World functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getOcclusionsEnabled', return_types=['bool'], arguments=[]), docs=FunctionDoc(description='This function is used to get "occlusions enabled" state.', arguments={}, result="Returns ''true'' if occlusions are enabled, or ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/GetOcclusionsEnabled', name='getOcclusionsEnabled', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getPlayerBlurLevel', return_types=['int'], arguments=[FunctionArgument(name='thePlayer', argument_type='player', default_value=None, optional=False)]), docs=FunctionDoc(description='This function allows you to check the current blur level of a specified [[player]].', arguments={'thePlayer': 'The player whose blur level you want to check.'}, result="Returns the player's blur level if successful, ''false'' if an invalid player was given."), oop=FunctionOOP(class_name='player', method_name='getBlurLevel', field=None), url=FunctionUrl(url='/wiki/GetPlayerBlurLevel', name='getPlayerBlurLevel', category='World functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getBlurLevel', return_types=['int'], arguments=[]), docs=FunctionDoc(description='This function allows you to check the current blur level of a specified [[player]].', arguments={}, result='Returns the local blur level.'), oop=FunctionOOP(class_name='Player', method_name='getBlurLevel', field='blurLevel'), url=FunctionUrl(url='/wiki/GetPlayerBlurLevel', name='getPlayerBlurLevel', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getRainLevel', return_types=['float'], arguments=[]), docs=FunctionDoc(description='This function is used to get the current rain level.', arguments={}, result='Returns the rain level as a number.'), oop=None, url=FunctionUrl(url='/wiki/GetRainLevel', name='getRainLevel', category='World functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getRainLevel', return_types=['float'], arguments=[]), docs=FunctionDoc(description='This function is used to get the current rain level.', arguments={}, result='Returns the rain level as a number.'), oop=None, url=FunctionUrl(url='/wiki/GetRainLevel', name='getRainLevel', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getSunColor', return_types=['int,', 'int,', 'int,', 'int,', 'int,', 'int'], arguments=[]), docs=FunctionDoc(description='This function is used to get the color of the sun.', arguments={}, result='Returns the color of the sun as six numbers, false if its default.'), oop=None, url=FunctionUrl(url='/wiki/GetSunColor', name='getSunColor', category='World functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getSunColor', return_types=['int,', 'int,', 'int,', 'int,', 'int,', 'int'], arguments=[]), docs=FunctionDoc(description='This function is used to get the color of the sun.', arguments={}, result='Returns the color of the sun as six numbers, false if its default.'), oop=None, url=FunctionUrl(url='/wiki/GetSunColor', name='getSunColor', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getSunSize', return_types=['float'], arguments=[]), docs=FunctionDoc(description='This function is used to get the size of the sun.', arguments={}, result='Returns the size of the sun as a number, false if the size of the sun is at its default.'), oop=None, url=FunctionUrl(url='/wiki/GetSunSize', name='getSunSize', category='World functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getSunSize', return_types=['float'], arguments=[]), docs=FunctionDoc(description='This function is used to get the size of the sun.', arguments={}, result='Returns the size of the sun as a number, false if the size of the sun is at its default.'), oop=None, url=FunctionUrl(url='/wiki/GetSunSize', name='getSunSize', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getTime', return_types=['int', 'int'], arguments=[]), docs=FunctionDoc(description='This function is used to get the current time in the game. If you want to get the real server time, use [[getRealTime]].', arguments={}, result="Returns two ''ints'' that represent hours and minutes."), oop=None, url=FunctionUrl(url='/wiki/GetTime', name='getTime', category='World functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getTime', return_types=['int', 'int'], arguments=[]), docs=FunctionDoc(description='This function is used to get the current time in the game. If you want to get the real server time, use [[getRealTime]].', arguments={}, result="Returns two ''ints'' that represent hours and minutes."), oop=None, url=FunctionUrl(url='/wiki/GetTime', name='getTime', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getTrafficLightState', return_types=['int'], arguments=[]), docs=FunctionDoc(description="Gets the current traffic light state. This state controls the traffic light colors. For instance, state '''1''' will cause the north and south traffic lights to be amber, and the ones left and east will turn red.", arguments={}, result='Returns the current [[Traffic_light_states|state]] of the traffic lights.'), oop=None, url=FunctionUrl(url='/wiki/GetTrafficLightState', name='getTrafficLightState', category='World functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getTrafficLightState', return_types=['int'], arguments=[]), docs=FunctionDoc(description="Gets the current traffic light state. This state controls the traffic light colors. For instance, state '''1''' will cause the north and south traffic lights to be amber, and the ones left and east will turn red.", arguments={}, result='Returns the current [[Traffic_light_states|state]] of the traffic lights.'), oop=None, url=FunctionUrl(url='/wiki/GetTrafficLightState', name='getTrafficLightState', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getWeather', return_types=['int,', 'int'], arguments=[]), docs=FunctionDoc(description='This function returns the current [[Weather]] ID.', arguments={}, result="Returns two integers indicating the weather type that is currently active. The first integer says what weather is currently considered to be active. The second integer is the weather id that is being blended into if any, otherwise it is ''nil''."), oop=None, url=FunctionUrl(url='/wiki/GetWeather', name='getWeather', category='World functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getWeather', return_types=['int,', 'int'], arguments=[]), docs=FunctionDoc(description='This function returns the current [[Weather]] ID.', arguments={}, result="Returns two integers indicating the weather type that is currently active. The first integer says what weather is currently considered to be active. The second integer is the weather id that is being blended into if any, otherwise it is ''nil''."), oop=None, url=FunctionUrl(url='/wiki/GetWeather', name='getWeather', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getWindVelocity', return_types=['int,', 'int,', 'int'], arguments=[]), docs=FunctionDoc(description='This function gets the wind velocity in San Andreas.', arguments={}, result="*'''velocityX''': The velocity on the x-coordinate or false if the wind velocity is default.\n*'''velocityY''': The velocity on the y-coordinate or nil if the wind velocity is default.\n*'''velocityZ''': The velocity on the z-coordinate or nil if the wind velocity is default."), oop=None, url=FunctionUrl(url='/wiki/GetWindVelocity', name='getWindVelocity', category='World functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getWindVelocity', return_types=['int,', 'int,', 'int'], arguments=[]), docs=FunctionDoc(description='This function gets the wind velocity in San Andreas.', arguments={}, result="*'''velocityX''': The velocity on the x-coordinate or false if the wind velocity is default.\n*'''velocityY''': The velocity on the y-coordinate or nil if the wind velocity is default.\n*'''velocityZ''': The velocity on the z-coordinate or nil if the wind velocity is default."), oop=None, url=FunctionUrl(url='/wiki/GetWindVelocity', name='getWindVelocity', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='getZoneName', return_types=['string'], arguments=[FunctionArgument(name='x', argument_type='float', default_value=None, optional=False), FunctionArgument(name='y', argument_type='float', default_value=None, optional=False), FunctionArgument(name='z', argument_type='float', default_value=None, optional=False), FunctionArgument(name='citiesonly', argument_type='bool', default_value='false', optional=False)]), docs=FunctionDoc(description='This function allows you to retrieve the zone name of a certain location.\n ', arguments={'x': 'The X axis position', 'y': 'The Y axis position', 'z': 'The Z axis position\n{{OptionalArg}}', 'citiesonly': ': An optional argument to choose if you want to return one of the following city names:\n** Tierra Robada\n** Bone County\n** Las Venturas\n** San Fierro\n** Red County\n** Whetstone\n** Flint County\n** Los Santos'}, result='Returns the string of the zone name'), oop=None, url=FunctionUrl(url='/wiki/GetZoneName', name='getZoneName', category='World functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='getZoneName', return_types=['string'], arguments=[FunctionArgument(name='x', argument_type='float', default_value=None, optional=False), FunctionArgument(name='y', argument_type='float', default_value=None, optional=False), FunctionArgument(name='z', argument_type='float', default_value=None, optional=False), FunctionArgument(name='citiesonly', argument_type='bool', default_value='false', optional=False)]), docs=FunctionDoc(description='This function allows you to retrieve the zone name of a certain location.\n ', arguments={'x': 'The X axis position', 'y': 'The Y axis position', 'z': 'The Z axis position\n{{OptionalArg}}', 'citiesonly': ': An optional argument to choose if you want to return one of the following city names:\n** Tierra Robada\n** Bone County\n** Las Venturas\n** San Fierro\n** Red County\n** Whetstone\n** Flint County\n** Los Santos'}, result='Returns the string of the zone name'), oop=None, url=FunctionUrl(url='/wiki/GetZoneName', name='getZoneName', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='isGarageOpen', return_types=['bool'], arguments=[FunctionArgument(name='garageID', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function checks whether or not a specific garage door is open.', arguments={'garageID': 'The Garage|garage ID that represents the garage door that is being checked.'}, result="Returns ''true'' if the garage is open, ''false'' if it is closed or an invalid garage ID was given."), oop=None, url=FunctionUrl(url='/wiki/IsGarageOpen', name='isGarageOpen', category='World functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='isGarageOpen', return_types=['bool'], arguments=[FunctionArgument(name='garageID', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function checks whether or not a specific garage door is open.', arguments={'garageID': 'The Garage|garage ID that represents the garage door that is being checked.'}, result="Returns ''true'' if the garage is open, ''false'' if it is closed or an invalid garage ID was given."), oop=None, url=FunctionUrl(url='/wiki/IsGarageOpen', name='isGarageOpen', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='removeWorldModel', return_types=['bool'], arguments=[FunctionArgument(name='modelID', argument_type='int', default_value=None, optional=False), FunctionArgument(name='radius', argument_type='float', default_value=None, optional=False), FunctionArgument(name='x', argument_type='float', default_value=None, optional=False), FunctionArgument(name='y', argument_type='float', default_value=None, optional=False), FunctionArgument(name='z', argument_type='float', default_value=None, optional=False), FunctionArgument(name='interior', argument_type='int', default_value='-1', optional=True)]), docs=FunctionDoc(description='<!--\n-->\nThis function is used to remove a world object.\n<!--\n-->', arguments={'modelID': 'A whole integer specifying the GTASA object model ID.', 'radius': 'A floating point number representing the radius that will be eliminated.', 'x': 'A floating point number representing the X coordinate on the map.', 'y': 'A floating point number representing the Y coordinate on the map.', 'z': 'A floating point number representing the Z coordinate on the map.\n{{New items|3.0132|1.3.2|', 'interior': 'The interior ID to apply the removal to. Some objects in interior 13 show in all interiors so if you want to remove everything in interior 0 also remove everything in interior 13. A value of -1 here will affect all interiors.}}'}, result="Returns ''true'' if the [[object]] was removed, ''false'' if invalid arguments were passed."), oop=None, url=FunctionUrl(url='/wiki/RemoveWorldModel', name='removeWorldModel', category='World functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='removeWorldModel', return_types=['bool'], arguments=[FunctionArgument(name='modelID', argument_type='int', default_value=None, optional=False), FunctionArgument(name='radius', argument_type='float', default_value=None, optional=False), FunctionArgument(name='x', argument_type='float', default_value=None, optional=False), FunctionArgument(name='y', argument_type='float', default_value=None, optional=False), FunctionArgument(name='z', argument_type='float', default_value=None, optional=False), FunctionArgument(name='interior', argument_type='int', default_value='-1', optional=True)]), docs=FunctionDoc(description='<!--\n-->\nThis function is used to remove a world object.\n<!--\n-->', arguments={'modelID': 'A whole integer specifying the GTASA object model ID.', 'radius': 'A floating point number representing the radius that will be eliminated.', 'x': 'A floating point number representing the X coordinate on the map.', 'y': 'A floating point number representing the Y coordinate on the map.', 'z': 'A floating point number representing the Z coordinate on the map.\n{{New items|3.0132|1.3.2|', 'interior': 'The interior ID to apply the removal to. Some objects in interior 13 show in all interiors so if you want to remove everything in interior 0 also remove everything in interior 13. A value of -1 here will affect all interiors.}}'}, result="Returns ''true'' if the [[object]] was removed, ''false'' if invalid arguments were passed."), oop=None, url=FunctionUrl(url='/wiki/RemoveWorldModel', name='removeWorldModel', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='resetFarClipDistance', return_types=['bool'], arguments=[]), docs=FunctionDoc(description='This function resets the far clip distance to its default state.', arguments={}, result="Returns ''true'' if operation was successful, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/ResetFarClipDistance', name='resetFarClipDistance', category='World functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='resetFarClipDistance', return_types=['bool'], arguments=[]), docs=FunctionDoc(description='This function resets the far clip distance to its default state.', arguments={}, result="Returns ''true'' if operation was successful, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/ResetFarClipDistance', name='resetFarClipDistance', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='resetFogDistance', return_types=['bool'], arguments=[]), docs=FunctionDoc(description='This function resets the fog render distance to its default state.', arguments={}, result="Returns ''true'' if operation was successful, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/ResetFogDistance', name='resetFogDistance', category='World functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='resetFogDistance', return_types=['bool'], arguments=[]), docs=FunctionDoc(description='This function resets the fog render distance to its default state.', arguments={}, result="Returns ''true'' if operation was successful, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/ResetFogDistance', name='resetFogDistance', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='resetHeatHaze', return_types=['bool'], arguments=[]), docs=FunctionDoc(description='This function restores the default heat haze.', arguments={}, result="Returns ''true'' if the heat haze was reset correctly, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/ResetHeatHaze', name='resetHeatHaze', category='World functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='resetHeatHaze', return_types=['bool'], arguments=[]), docs=FunctionDoc(description='This function restores the default heat haze.', arguments={}, result="Returns ''true'' if the heat haze was reset correctly, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/ResetHeatHaze', name='resetHeatHaze', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='resetMoonSize', return_types=['bool'], arguments=[]), docs=FunctionDoc(description='This function is used to reset the size of the moon to its normal size.\n}}', arguments={}, result='Returns true if the size of the moon was reset, false otherwise.'), oop=None, url=FunctionUrl(url='/wiki/ResetMoonSize', name='resetMoonSize', category='World functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='resetMoonSize', return_types=['bool'], arguments=[]), docs=FunctionDoc(description='This function is used to reset the size of the moon to its normal size.\n}}', arguments={}, result='Returns true if the size of the moon was reset, false otherwise.'), oop=None, url=FunctionUrl(url='/wiki/ResetMoonSize', name='resetMoonSize', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='resetRainLevel', return_types=['bool'], arguments=[]), docs=FunctionDoc(description='This function resets the rain level of the current weather to its default.', arguments={}, result='Returns true if the rain level was reset.'), oop=None, url=FunctionUrl(url='/wiki/ResetRainLevel', name='resetRainLevel', category='World functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='resetRainLevel', return_types=['bool'], arguments=[]), docs=FunctionDoc(description='This function resets the rain level of the current weather to its default.', arguments={}, result='Returns true if the rain level was reset.'), oop=None, url=FunctionUrl(url='/wiki/ResetRainLevel', name='resetRainLevel', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='resetSkyGradient', return_types=['bool'], arguments=[]), docs=FunctionDoc(description='This function allows restoring of a changed sky gradient as a result of [[setSkyGradient]].', arguments={}, result="Returns ''true'' if sky color was reset correctly, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/ResetSkyGradient', name='resetSkyGradient', category='World functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='resetSkyGradient', return_types=['bool'], arguments=[]), docs=FunctionDoc(description='This function allows restoring of a changed sky gradient as a result of [[setSkyGradient]].', arguments={}, result="Returns ''true'' if sky color was reset correctly, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/ResetSkyGradient', name='resetSkyGradient', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='resetSunColor', return_types=['bool'], arguments=[]), docs=FunctionDoc(description='This function is used to reset the color of the sun to its normal color.', arguments={}, result='Returns true if the color of the sun was reset, false otherwise.'), oop=None, url=FunctionUrl(url='/wiki/ResetSunColor', name='resetSunColor', category='World functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='resetSunColor', return_types=['bool'], arguments=[]), docs=FunctionDoc(description='This function is used to reset the color of the sun to its normal color.', arguments={}, result='Returns true if the color of the sun was reset, false otherwise.'), oop=None, url=FunctionUrl(url='/wiki/ResetSunColor', name='resetSunColor', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='resetSunSize', return_types=['bool'], arguments=[]), docs=FunctionDoc(description='This function is used to reset the size of the sun to its normal size.', arguments={}, result='Returns true if the size of the sun was reset, false otherwise.'), oop=None, url=FunctionUrl(url='/wiki/ResetSunSize', name='resetSunSize', category='World functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='resetSunSize', return_types=['bool'], arguments=[]), docs=FunctionDoc(description='This function is used to reset the size of the sun to its normal size.', arguments={}, result='Returns true if the size of the sun was reset, false otherwise.'), oop=None, url=FunctionUrl(url='/wiki/ResetSunSize', name='resetSunSize', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='resetWindVelocity', return_types=['bool'], arguments=[]), docs=FunctionDoc(description='This function resets the wind velocity in San Andreas to its default state.', arguments={}, result='Returns true if successful, false otherwise.'), oop=None, url=FunctionUrl(url='/wiki/ResetWindVelocity', name='resetWindVelocity', category='World functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='resetWindVelocity', return_types=['bool'], arguments=[]), docs=FunctionDoc(description='This function resets the wind velocity in San Andreas to its default state.', arguments={}, result='Returns true if successful, false otherwise.'), oop=None, url=FunctionUrl(url='/wiki/ResetWindVelocity', name='resetWindVelocity', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='restoreAllWorldModels', return_types=['bool'], arguments=[]), docs=FunctionDoc(description='This function allows restoring of all world objects,which were removed with [[RemoveWorldModel]].', arguments={}, result="Returns ''true'' if the world objects were restored, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/RestoreAllWorldModels', name='restoreAllWorldModels', category='World functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='restoreAllWorldModels', return_types=['bool'], arguments=[]), docs=FunctionDoc(description='This function allows restoring of all world objects,which were removed with [[RemoveWorldModel]].', arguments={}, result="Returns ''true'' if the world objects were restored, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/RestoreAllWorldModels', name='restoreAllWorldModels', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='restoreWorldModel', return_types=['bool'], arguments=[FunctionArgument(name='modelID', argument_type='int', default_value=None, optional=False), FunctionArgument(name='radius', argument_type='float', default_value=None, optional=False), FunctionArgument(name='x', argument_type='float', default_value=None, optional=False), FunctionArgument(name='y', argument_type='float', default_value=None, optional=False), FunctionArgument(name='z', argument_type='float', default_value=None, optional=False), FunctionArgument(name='iInterior', argument_type='int', default_value='-1', optional=True)]), docs=FunctionDoc(description='This function allows restoring of world object,which was removed with [[RemoveWorldModel]].', arguments={'modelID': 'A whole integer specifying the GTASA object model ID.', 'radius': 'A floating point number representing the radius that will be eliminated.', 'x': 'A floating point number representing the X coordinate on the map.', 'y': 'A floating point number representing the Y coordinate on the map.', 'z': 'A floating point number representing the Z coordinate on the map.\n{{New items|3.0132|1.3.2|', 'iInterior': '\n}}'}, result="Returns ''true'' if the world object was restored, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/RestoreWorldModel', name='restoreWorldModel', category='World functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='restoreWorldModel', return_types=['bool'], arguments=[FunctionArgument(name='modelID', argument_type='int', default_value=None, optional=False), FunctionArgument(name='radius', argument_type='float', default_value=None, optional=False), FunctionArgument(name='x', argument_type='float', default_value=None, optional=False), FunctionArgument(name='y', argument_type='float', default_value=None, optional=False), FunctionArgument(name='z', argument_type='float', default_value=None, optional=False), FunctionArgument(name='iInterior', argument_type='int', default_value='-1', optional=True)]), docs=FunctionDoc(description='This function allows restoring of world object,which was removed with [[RemoveWorldModel]].', arguments={'modelID': 'A whole integer specifying the GTASA object model ID.', 'radius': 'A floating point number representing the radius that will be eliminated.', 'x': 'A floating point number representing the X coordinate on the map.', 'y': 'A floating point number representing the Y coordinate on the map.', 'z': 'A floating point number representing the Z coordinate on the map.\n{{New items|3.0132|1.3.2|', 'iInterior': '\n}}'}, result="Returns ''true'' if the world object was restored, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/RestoreWorldModel', name='restoreWorldModel', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setAircraftMaxHeight', return_types=['bool'], arguments=[FunctionArgument(name='Height', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='This function changes the maximum flying height of aircraft.', arguments={'Height': 'The height you want aircraft to be able to go.'}, result="Returns ''true'' if successful, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/SetAircraftMaxHeight', name='setAircraftMaxHeight', category='World functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setAircraftMaxHeight', return_types=['bool'], arguments=[FunctionArgument(name='Height', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='This function changes the maximum flying height of aircraft.', arguments={'Height': 'The height you want aircraft to be able to go.'}, result="Returns ''true'' if successful, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/SetAircraftMaxHeight', name='setAircraftMaxHeight', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setAircraftMaxVelocity', return_types=['bool'], arguments=[FunctionArgument(name='velocity', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='This function sets the maximum velocity at which aircrafts could fly. Using this function server-side will overwrite the value that was previously set client-side.\n}}', arguments={'velocity': 'The max velocity, can be 0 or any positive value. Default is 1.5.'}, result='Returns true if the max velocity was set correctly, false otherwise.'), oop=None, url=FunctionUrl(url='/wiki/SetAircraftMaxVelocity', name='setAircraftMaxVelocity', category='World functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setAircraftMaxVelocity', return_types=['bool'], arguments=[FunctionArgument(name='velocity', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='This function sets the maximum velocity at which aircrafts could fly. Using this function server-side will overwrite the value that was previously set client-side.\n}}', arguments={'velocity': 'The max velocity, can be 0 or any positive value. Default is 1.5.'}, result='Returns true if the max velocity was set correctly, false otherwise.'), oop=None, url=FunctionUrl(url='/wiki/SetAircraftMaxVelocity', name='setAircraftMaxVelocity', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setCloudsEnabled', return_types=['bool'], arguments=[FunctionArgument(name='enabled', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description='This function will enable or disable clouds. This is useful for race maps which are placed high up as clouds can cause low FPS.', arguments={'enabled': 'A boolean value determining if clouds should be shown. Use true to show clouds and false to hide them.'}, result="Returns ''true'' if the cloud state was changed succesfully, ''false'' if an invalid argument was specified."), oop=None, url=FunctionUrl(url='/wiki/SetCloudsEnabled', name='setCloudsEnabled', category='World functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setCloudsEnabled', return_types=['bool'], arguments=[FunctionArgument(name='enabled', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description='This function will enable or disable clouds. This is useful for race maps which are placed high up as clouds can cause low FPS.', arguments={'enabled': 'A boolean value determining if clouds should be shown. Use true to show clouds and false to hide them.'}, result="Returns ''true'' if the cloud state was changed succesfully, ''false'' if an invalid argument was specified."), oop=None, url=FunctionUrl(url='/wiki/SetCloudsEnabled', name='setCloudsEnabled', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setFarClipDistance', return_types=['bool'], arguments=[FunctionArgument(name='distance', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is used to set the distance of render. Areas beyond the specified distance will not be rendered.', arguments={'distance': 'A float specifying the distance of render. Setting this less than 5 will cause problems to the client.'}, result="Returns ''true'' if the distance was set correctly, ''false'' if invalid arguments were passed."), oop=None, url=FunctionUrl(url='/wiki/SetFarClipDistance', name='setFarClipDistance', category='World functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setFarClipDistance', return_types=['bool'], arguments=[FunctionArgument(name='distance', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is used to set the distance of render. Areas beyond the specified distance will not be rendered.', arguments={'distance': 'A float specifying the distance of render. Setting this less than 5 will cause problems to the client.'}, result="Returns ''true'' if the distance was set correctly, ''false'' if invalid arguments were passed."), oop=None, url=FunctionUrl(url='/wiki/SetFarClipDistance', name='setFarClipDistance', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setFogDistance', return_types=['bool'], arguments=[FunctionArgument(name='distance', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description="This function changes the distance at which fog appears. Keep in mind that this function doesn't change the distance of render.", arguments={'distance': 'distance in GTA units at which fog will appear. Very short or negative distances will cause graphical bugs to the players.'}, result="Returns ''true'' if the distance changed successfully, ''false'' if bad arguments were passed."), oop=None, url=FunctionUrl(url='/wiki/SetFogDistance', name='setFogDistance', category='World functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setFogDistance', return_types=['bool'], arguments=[FunctionArgument(name='distance', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description="This function changes the distance at which fog appears. Keep in mind that this function doesn't change the distance of render.", arguments={'distance': 'distance in GTA units at which fog will appear. Very short or negative distances will cause graphical bugs to the players.'}, result="Returns ''true'' if the distance changed successfully, ''false'' if bad arguments were passed."), oop=None, url=FunctionUrl(url='/wiki/SetFogDistance', name='setFogDistance', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setGameSpeed', return_types=['bool'], arguments=[FunctionArgument(name='value', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='This function sets the game speed to the given value.', arguments={'value': ': The float value of the game speed (Range 0 - 10)'}, result="Returns ''true'' if the gamespeed was set successfully, ''false'' otherwise.\nThe normal game speed is '1'."), oop=None, url=FunctionUrl(url='/wiki/SetGameSpeed', name='setGameSpeed', category='World functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setGameSpeed', return_types=['bool'], arguments=[FunctionArgument(name='value', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='This function sets the game speed to the given value.', arguments={'value': ': The float value of the game speed (Range 0 - 10)'}, result="Returns ''true'' if the gamespeed was set successfully, ''false'' otherwise.\nThe normal game speed is '1'."), oop=None, url=FunctionUrl(url='/wiki/SetGameSpeed', name='setGameSpeed', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setGarageOpen', return_types=['bool'], arguments=[FunctionArgument(name='garageID', argument_type='int', default_value=None, optional=False), FunctionArgument(name='open', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description='This function opens or closes the specified garage door in the world.', arguments={'garageID': 'The Garage|garage ID that represents the garage door being opened or closed.', 'isOpen': 'A boolean indicating whether or not to open the door.'}, result="Returns ''true'' if successful, ''false'' if an invalid garage id was given."), oop=None, url=FunctionUrl(url='/wiki/SetGarageOpen', name='setGarageOpen', category='World functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setGarageOpen', return_types=['bool'], arguments=[FunctionArgument(name='garageID', argument_type='int', default_value=None, optional=False), FunctionArgument(name='open', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description='This function opens or closes the specified garage door in the world.', arguments={'garageID': 'The Garage|garage ID that represents the garage door being opened or closed.', 'isOpen': 'A boolean indicating whether or not to open the door.'}, result="Returns ''true'' if successful, ''false'' if an invalid garage id was given."), oop=None, url=FunctionUrl(url='/wiki/SetGarageOpen', name='setGarageOpen', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setGravity', return_types=['bool'], arguments=[FunctionArgument(name='level', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description="This function sets the server's gravity level.\n*This will override [[setPedGravity]] applied to peds/players.\n*Setting the gravity level to different values on clients can cause animation bugs (players floating across ground because players see different fall animation.)}}", arguments={'level': ': The level of gravity (default is 0.008).'}, result="Returns ''true'' if gravity was changed, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/SetGravity', name='setGravity', category='World functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setGravity', return_types=['bool'], arguments=[FunctionArgument(name='level', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description="This function sets the server's gravity level.\n*This will override [[setPedGravity]] applied to peds/players.\n*Setting the gravity level to different values on clients can cause animation bugs (players floating across ground because players see different fall animation.)}}", arguments={'level': ': The level of gravity (default is 0.008).'}, result="Returns ''true'' if gravity was changed, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/SetGravity', name='setGravity', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setHeatHaze', return_types=['bool'], arguments=[FunctionArgument(name='intensity', argument_type='int', default_value=None, optional=False), FunctionArgument(name='randomShift', argument_type='int', default_value='0', optional=False), FunctionArgument(name='speedMin', argument_type='int', default_value='12', optional=False), FunctionArgument(name='speedMax', argument_type='int', default_value='18', optional=False), FunctionArgument(name='scanSizeX', argument_type='int', default_value='75', optional=False), FunctionArgument(name='scanSizeY', argument_type='int', default_value='80', optional=False), FunctionArgument(name='renderSizeX', argument_type='int', default_value='80', optional=False), FunctionArgument(name='renderSizeY', argument_type='int', default_value='85', optional=False), FunctionArgument(name='bShowInside', argument_type='bool', default_value='false', optional=False)]), docs=FunctionDoc(description='This function changes the heat haze effect.', arguments={}, result="Returns ''true'' if the heat haze effect was set correctly, ''false'' if invalid values were passed."), oop=None, url=FunctionUrl(url='/wiki/SetHeatHaze', name='setHeatHaze', category='World functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setHeatHaze', return_types=['bool'], arguments=[FunctionArgument(name='intensity', argument_type='int', default_value=None, optional=False), FunctionArgument(name='randomShift', argument_type='int', default_value='0', optional=False), FunctionArgument(name='speedMin', argument_type='int', default_value='12', optional=False), FunctionArgument(name='speedMax', argument_type='int', default_value='18', optional=False), FunctionArgument(name='scanSizeX', argument_type='int', default_value='75', optional=False), FunctionArgument(name='scanSizeY', argument_type='int', default_value='80', optional=False), FunctionArgument(name='renderSizeX', argument_type='int', default_value='80', optional=False), FunctionArgument(name='renderSizeY', argument_type='int', default_value='85', optional=False), FunctionArgument(name='bShowInside', argument_type='bool', default_value='false', optional=False)]), docs=FunctionDoc(description='This function changes the heat haze effect.', arguments={}, result="Returns ''true'' if the heat haze effect was set correctly, ''false'' if invalid values were passed."), oop=None, url=FunctionUrl(url='/wiki/SetHeatHaze', name='setHeatHaze', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setInteriorSoundsEnabled', return_types=['bool'], arguments=[FunctionArgument(name='enabled', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description='This function disables or enables the ambient sounds played by GTA in most interiors, like restaurants, casinos, clubs, houses, etc.', arguments={}, result="If a boolean was passed to the function, it always succeeds and returns ''true''."), oop=None, url=FunctionUrl(url='/wiki/SetInteriorSoundsEnabled', name='setInteriorSoundsEnabled', category='World functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setInteriorSoundsEnabled', return_types=['bool'], arguments=[FunctionArgument(name='enabled', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description='This function disables or enables the ambient sounds played by GTA in most interiors, like restaurants, casinos, clubs, houses, etc.', arguments={}, result="If a boolean was passed to the function, it always succeeds and returns ''true''."), oop=None, url=FunctionUrl(url='/wiki/SetInteriorSoundsEnabled', name='setInteriorSoundsEnabled', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setJetpackMaxHeight', return_types=['bool'], arguments=[FunctionArgument(name='Height', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='This function changes the maximum flying height of jetpack.', arguments={'Height': ': The max height starting at approximately -20.'}, result="Returns ''true'' if successful, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/SetJetpackMaxHeight', name='setJetpackMaxHeight', category='World functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setJetpackMaxHeight', return_types=['bool'], arguments=[FunctionArgument(name='Height', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='This function changes the maximum flying height of jetpack.', arguments={'Height': ': The max height starting at approximately -20.'}, result="Returns ''true'' if successful, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/SetJetpackMaxHeight', name='setJetpackMaxHeight', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setMinuteDuration', return_types=['bool'], arguments=[FunctionArgument(name='milliseconds', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='Sets the real-world duration of an ingame minute. The GTA default is 1000.', arguments={'milliseconds': ': the new duration of an ingame minute, accepted values 0 - 2147483647.'}, result="Returns ''true'' if successful, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/SetMinuteDuration', name='setMinuteDuration', category='World functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setMinuteDuration', return_types=['bool'], arguments=[FunctionArgument(name='milliseconds', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='Sets the real-world duration of an ingame minute. The GTA default is 1000.', arguments={'milliseconds': ': the new duration of an ingame minute, accepted values 0 - 2147483647.'}, result="Returns ''true'' if successful, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/SetMinuteDuration', name='setMinuteDuration', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setMoonSize', return_types=['bool'], arguments=[FunctionArgument(name='size', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function sets the moon size. Using this function server-side will overwrite the value that was previously set client-side.\n}}', arguments={'size': 'The size, can be 0 or any positive value. Default is 3.'}, result='Returns true if the moon size was set correctly, false otherwise.'), oop=None, url=FunctionUrl(url='/wiki/SetMoonSize', name='setMoonSize', category='World functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setMoonSize', return_types=['bool'], arguments=[FunctionArgument(name='size', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function sets the moon size. Using this function server-side will overwrite the value that was previously set client-side.\n}}', arguments={'size': 'The size, can be 0 or any positive value. Default is 3.'}, result='Returns true if the moon size was set correctly, false otherwise.'), oop=None, url=FunctionUrl(url='/wiki/SetMoonSize', name='setMoonSize', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setOcclusionsEnabled', return_types=['bool'], arguments=[FunctionArgument(name='enabled', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is used to enable or disable occlusions. Occlusions are used by GTA to enhance performance by hiding objects that are (normally) obscured by certain large buildings. However when [[removeWorldModel]] is used they may also have the undesired effect of making parts of the map disappear. Disabling occlusions will fix that.', arguments={'enabled': 'A bool specifying if GTA occlusions should be enabled'}, result="Returns ''true'' if the setting was set correctly, ''false'' if invalid arguments were passed."), oop=None, url=FunctionUrl(url='/wiki/SetOcclusionsEnabled', name='setOcclusionsEnabled', category='World functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setOcclusionsEnabled', return_types=['bool'], arguments=[FunctionArgument(name='enabled', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is used to enable or disable occlusions. Occlusions are used by GTA to enhance performance by hiding objects that are (normally) obscured by certain large buildings. However when [[removeWorldModel]] is used they may also have the undesired effect of making parts of the map disappear. Disabling occlusions will fix that.', arguments={'enabled': 'A bool specifying if GTA occlusions should be enabled'}, result="Returns ''true'' if the setting was set correctly, ''false'' if invalid arguments were passed."), oop=None, url=FunctionUrl(url='/wiki/SetOcclusionsEnabled', name='setOcclusionsEnabled', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setPlayerBlurLevel', return_types=['bool'], arguments=[FunctionArgument(name='thePlayer', argument_type='player', default_value=None, optional=False), FunctionArgument(name='level', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='Sets the motion blur level on the clients screen. Accepts a value between 0 and 255.', arguments={'thePlayer': 'The player whose blur level will be changed.', 'level': 'The level to set the blur to (default: 36)'}, result=''), oop=FunctionOOP(class_name='player', method_name='setBlurLevel', field='blurLevel'), url=FunctionUrl(url='/wiki/SetPlayerBlurLevel', name='setPlayerBlurLevel', category='World functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setBlurLevel', return_types=['bool'], arguments=[FunctionArgument(name='level', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='Sets the motion blur level on the clients screen. Accepts a value between 0 and 255.', arguments={'level': 'The level to set the blur to (default: 36)'}, result=''), oop=FunctionOOP(class_name='Player', method_name='setBlurLevel', field=None), url=FunctionUrl(url='/wiki/SetPlayerBlurLevel', name='setPlayerBlurLevel', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setRainLevel', return_types=['bool'], arguments=[FunctionArgument(name='level', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='This function sets the rain level to any weather available in GTA. Use [[resetRainLevel]] to undo the changes.', arguments={'level': 'A floating point number representing the rain level. 1 represents the maximum rain level usually available in GTA, but higher values are accepted.', 'Note': 'The level value is clamped between 0.0 and 10.0 to avoid gameplay issues.'}, result="Returns ''true'' if the rain level was set, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/SetRainLevel', name='setRainLevel', category='World functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setRainLevel', return_types=['bool'], arguments=[FunctionArgument(name='level', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='This function sets the rain level to any weather available in GTA. Use [[resetRainLevel]] to undo the changes.', arguments={'level': 'A floating point number representing the rain level. 1 represents the maximum rain level usually available in GTA, but higher values are accepted.', 'Note': 'The level value is clamped between 0.0 and 10.0 to avoid gameplay issues.'}, result="Returns ''true'' if the rain level was set, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/SetRainLevel', name='setRainLevel', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setSkyGradient', return_types=['bool'], arguments=[FunctionArgument(name='topRed', argument_type='int', default_value='0', optional=False), FunctionArgument(name='topGreen', argument_type='int', default_value='0', optional=False), FunctionArgument(name='topBlue', argument_type='int', default_value='0', optional=False), FunctionArgument(name='bottomRed', argument_type='int', default_value='0', optional=False), FunctionArgument(name='bottomGreen', argument_type='int', default_value='0', optional=False), FunctionArgument(name='bottomBlue', argument_type='int', default_value='0', optional=False)]), docs=FunctionDoc(description='This function changes the sky color to a two-color gradient.', arguments={'topRed': 'The red value of the upper part of the sky, from 0 to 255.', 'topGreen': 'The green value of the upper part of the sky, from 0 to 255.', 'topBlue': 'The blue value of the upper part of the sky, from 0 to 255.', 'bottomRed': 'The red value of the lower part of the sky, from 0 to 255.', 'bottomGreen': 'The green value of the lower part of the sky, from 0 to 255.', 'bottomBlue': 'The blue value of the lower part of the sky, from 0 to 255.'}, result="Returns ''true'' if sky color was set correctly, ''false'' if invalid values were passed."), oop=None, url=FunctionUrl(url='/wiki/SetSkyGradient', name='setSkyGradient', category='World functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setSkyGradient', return_types=['bool'], arguments=[FunctionArgument(name='topRed', argument_type='int', default_value='0', optional=False), FunctionArgument(name='topGreen', argument_type='int', default_value='0', optional=False), FunctionArgument(name='topBlue', argument_type='int', default_value='0', optional=False), FunctionArgument(name='bottomRed', argument_type='int', default_value='0', optional=False), FunctionArgument(name='bottomGreen', argument_type='int', default_value='0', optional=False), FunctionArgument(name='bottomBlue', argument_type='int', default_value='0', optional=False)]), docs=FunctionDoc(description='This function changes the sky color to a two-color gradient.', arguments={'topRed': 'The red value of the upper part of the sky, from 0 to 255.', 'topGreen': 'The green value of the upper part of the sky, from 0 to 255.', 'topBlue': 'The blue value of the upper part of the sky, from 0 to 255.', 'bottomRed': 'The red value of the lower part of the sky, from 0 to 255.', 'bottomGreen': 'The green value of the lower part of the sky, from 0 to 255.', 'bottomBlue': 'The blue value of the lower part of the sky, from 0 to 255.'}, result="Returns ''true'' if sky color was set correctly, ''false'' if invalid values were passed."), oop=None, url=FunctionUrl(url='/wiki/SetSkyGradient', name='setSkyGradient', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setSunColor', return_types=['bool'], arguments=[FunctionArgument(name='aRed', argument_type='int', default_value=None, optional=False), FunctionArgument(name='aGreen', argument_type='int', default_value=None, optional=False), FunctionArgument(name='aBlue', argument_type='int', default_value=None, optional=False), FunctionArgument(name='bRed', argument_type='int', default_value=None, optional=False), FunctionArgument(name='bGreen', argument_type='int', default_value=None, optional=False), FunctionArgument(name='bBlue', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is used to set the color of the sun.', arguments={'aRed': 'The amount of red (0-255) you want the sun to be.', 'aGreen': 'The amount of green (0-255) you want the sun to be.', 'aBlue': 'The amount of blue (0-255) you want the sun to be.', 'bRed': 'The amount of red (0-255) you want the sun to be.', 'bGreen': 'The amount of green (0-255) you want the sun to be.', 'bBlue': 'The amount of blue (0-255) you want the sun to be.'}, result='Returns true if the color of the sun was set, false otherwise.'), oop=None, url=FunctionUrl(url='/wiki/SetSunColor', name='setSunColor', category='World functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setSunColor', return_types=['bool'], arguments=[FunctionArgument(name='aRed', argument_type='int', default_value=None, optional=False), FunctionArgument(name='aGreen', argument_type='int', default_value=None, optional=False), FunctionArgument(name='aBlue', argument_type='int', default_value=None, optional=False), FunctionArgument(name='bRed', argument_type='int', default_value=None, optional=False), FunctionArgument(name='bGreen', argument_type='int', default_value=None, optional=False), FunctionArgument(name='bBlue', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is used to set the color of the sun.', arguments={'aRed': 'The amount of red (0-255) you want the sun to be.', 'aGreen': 'The amount of green (0-255) you want the sun to be.', 'aBlue': 'The amount of blue (0-255) you want the sun to be.', 'bRed': 'The amount of red (0-255) you want the sun to be.', 'bGreen': 'The amount of green (0-255) you want the sun to be.', 'bBlue': 'The amount of blue (0-255) you want the sun to be.'}, result='Returns true if the color of the sun was set, false otherwise.'), oop=None, url=FunctionUrl(url='/wiki/SetSunColor', name='setSunColor', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setSunSize', return_types=['bool'], arguments=[FunctionArgument(name='Size', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is used to set the size of the sun.', arguments={'Size': 'The size you want the sun to be in the sky.'}, result='Returns true if the size of the sun was set, false otherwise.'), oop=None, url=FunctionUrl(url='/wiki/SetSunSize', name='setSunSize', category='World functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setSunSize', return_types=['bool'], arguments=[FunctionArgument(name='Size', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is used to set the size of the sun.', arguments={'Size': 'The size you want the sun to be in the sky.'}, result='Returns true if the size of the sun was set, false otherwise.'), oop=None, url=FunctionUrl(url='/wiki/SetSunSize', name='setSunSize', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setTime', return_types=['bool'], arguments=[FunctionArgument(name='hour', argument_type='int', default_value=None, optional=False), FunctionArgument(name='minute', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function sets the current GTA time to the given time.', arguments={'hour': ': The hour of the new time (range 0-23).', 'minute': ': The minute of the new time (range 0-59).'}, result="Returns ''true'' if the new time was successfully set, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/SetTime', name='setTime', category='World functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setTime', return_types=['bool'], arguments=[FunctionArgument(name='hour', argument_type='int', default_value=None, optional=False), FunctionArgument(name='minute', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function sets the current GTA time to the given time.', arguments={'hour': ': The hour of the new time (range 0-23).', 'minute': ': The minute of the new time (range 0-59).'}, result="Returns ''true'' if the new time was successfully set, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/SetTime', name='setTime', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setTrafficLightState', return_types=['bool'], arguments=[FunctionArgument(name='state', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description="Sets the current traffic light state. This state controls the traffic light colors. For instance, state '''1''' will cause the north and south traffic lights to be amber, and the ones left and east will turn red.", arguments={'state': ': If an integer is provided, the Traffic_light_states|state you wish to use (possible values: 0-9). Else, one of the following strings:', 'auto': ': Sets the traffic lights default behavior (switches the colors automatically).', 'disabled': ": Turns traffic lights off.\nAlternatively, you can provide two string parameters ('''colorNS''' and '''colorEW''') with the colors for north-south and east-west traffic lights respectively. Valid colors are:", 'green': '', 'yellow': '', 'red': ''}, result="Returns ''true'' if the state was successfully set, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/SetTrafficLightState', name='setTrafficLightState', category='World functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setTrafficLightState', return_types=['bool'], arguments=[FunctionArgument(name='state', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description="Sets the current traffic light state. This state controls the traffic light colors. For instance, state '''1''' will cause the north and south traffic lights to be amber, and the ones left and east will turn red.", arguments={'state': ': If an integer is provided, the Traffic_light_states|state you wish to use (possible values: 0-9). Else, one of the following strings:', 'auto': ': Sets the traffic lights default behavior (switches the colors automatically).', 'disabled': ": Turns traffic lights off.\nAlternatively, you can provide two string parameters ('''colorNS''' and '''colorEW''') with the colors for north-south and east-west traffic lights respectively. Valid colors are:", 'green': '', 'yellow': '', 'red': ''}, result="Returns ''true'' if the state was successfully set, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/SetTrafficLightState', name='setTrafficLightState', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setTrafficLightsLocked', return_types=['bool'], arguments=[FunctionArgument(name='toggle', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description="Toggles whether you want the traffic lights to be locked. If the lights are locked, it means they won't change unless you do [[setTrafficLightState]].", arguments={'toggle': ': A bool indicating whether you want the traffic lights to change automatically, or not'}, result="Returns ''true'' if the successful, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/SetTrafficLightsLocked', name='setTrafficLightsLocked', category='World functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setTrafficLightsLocked', return_types=['bool'], arguments=[FunctionArgument(name='toggle', argument_type='bool', default_value=None, optional=False)]), docs=FunctionDoc(description="Toggles whether you want the traffic lights to be locked. If the lights are locked, it means they won't change unless you do [[setTrafficLightState]].", arguments={'toggle': ': A bool indicating whether you want the traffic lights to change automatically, or not'}, result="Returns ''true'' if the successful, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/SetTrafficLightsLocked', name='setTrafficLightsLocked', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setWeather', return_types=['bool'], arguments=[FunctionArgument(name='weatherID', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function sets the current [[weather]] to the given valid value. To change the weather gradually, see [[setWeatherBlended]].', arguments={'weatherID': ': The ID of new weather. Valid values are 0 to 255 inclusive.'}, result="Returns ''true'' if the weather was set succesfully, ''false'' if an invalid ''weatherID'' was specified."), oop=None, url=FunctionUrl(url='/wiki/SetWeather', name='setWeather', category='World functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setWeather', return_types=['bool'], arguments=[FunctionArgument(name='weatherID', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function sets the current [[weather]] to the given valid value. To change the weather gradually, see [[setWeatherBlended]].', arguments={'weatherID': ': The ID of new weather. Valid values are 0 to 255 inclusive.'}, result="Returns ''true'' if the weather was set succesfully, ''false'' if an invalid ''weatherID'' was specified."), oop=None, url=FunctionUrl(url='/wiki/SetWeather', name='setWeather', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setWeatherBlended', return_types=['bool'], arguments=[FunctionArgument(name='weatherID', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function will change the current [[weather]] to another in a smooth manner, over the period of 1-2 in-game hours (unlike [[setWeather]], which sets a new weather instantly). To ensure this transition performs as expected, you should not call this function until [[getWeather]] indicates that no transition is already being done.', arguments={'weatherID': 'The ID of the weather state you wish to set. Valid values are 0 to 255 inclusive.'}, result="Returns ''true'' if successful, ''false'' if an invalid ''weatherID'' is passed."), oop=None, url=FunctionUrl(url='/wiki/SetWeatherBlended', name='setWeatherBlended', category='World functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setWeatherBlended', return_types=['bool'], arguments=[FunctionArgument(name='weatherID', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function will change the current [[weather]] to another in a smooth manner, over the period of 1-2 in-game hours (unlike [[setWeather]], which sets a new weather instantly). To ensure this transition performs as expected, you should not call this function until [[getWeather]] indicates that no transition is already being done.', arguments={'weatherID': 'The ID of the weather state you wish to set. Valid values are 0 to 255 inclusive.'}, result="Returns ''true'' if successful, ''false'' if an invalid ''weatherID'' is passed."), oop=None, url=FunctionUrl(url='/wiki/SetWeatherBlended', name='setWeatherBlended', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='setWindVelocity', return_types=['bool'], arguments=[FunctionArgument(name='velocityX', argument_type='float', default_value=None, optional=False), FunctionArgument(name='velocityY', argument_type='float', default_value=None, optional=False), FunctionArgument(name='velocityZ', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='This function changes the wind velocity. The wind shakes the vegetation and makes particles fly in a direction. The intensity and direction of the effect deppends of the wind velocity in each axis.', arguments={'velocityX': ': The velocity of the wind along the x axis.', 'velocityY': ': The velocity of the wind along the y axis.', 'velocityZ': ': The velocity of the wind along the z axis.'}, result="Returns ''true'' if successful, ''false'' if bad arguments were passed."), oop=None, url=FunctionUrl(url='/wiki/SetWindVelocity', name='setWindVelocity', category='World functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='setWindVelocity', return_types=['bool'], arguments=[FunctionArgument(name='velocityX', argument_type='float', default_value=None, optional=False), FunctionArgument(name='velocityY', argument_type='float', default_value=None, optional=False), FunctionArgument(name='velocityZ', argument_type='float', default_value=None, optional=False)]), docs=FunctionDoc(description='This function changes the wind velocity. The wind shakes the vegetation and makes particles fly in a direction. The intensity and direction of the effect deppends of the wind velocity in each axis.', arguments={'velocityX': ': The velocity of the wind along the x axis.', 'velocityY': ': The velocity of the wind along the y axis.', 'velocityZ': ': The velocity of the wind along the z axis.'}, result="Returns ''true'' if successful, ''false'' if bad arguments were passed."), oop=None, url=FunctionUrl(url='/wiki/SetWindVelocity', name='setWindVelocity', category='World functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='xmlCopyFile', return_types=['xmlnode'], arguments=[FunctionArgument(name='nodeToCopy', argument_type='xmlnode', default_value=None, optional=False), FunctionArgument(name='newFilePath', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description="This function copies all contents of a certain node in a XML document to a new document file, so the copied node becomes the new file's root node.\nThe new file will not be saved to file system until [[xmlSaveFile]]() is called", arguments={'nodeToCopy': 'the xmlnode that is to be copied to a new document.', 'newFilePath': 'the path of the file that is to be created, in the following format: :resourceName/path. resourceName is the name of the resource the file is in, and path is the path from the root directory of the resource to the file.\n:For example, to create a file named \'newfile.xml\' with myNode as the root node in the resource \'ctf\', it can be done from another resource this way: \'\'xmlCopyFile(myNode, ":ctf/newfile.xml")\'\'.\n:If the file is to be in the current resource, only the file path is necessary, e.g. \'\'xmlCopyFile(myNode, "newfile.xml")\'\'.'}, result="Returns the [[xmlnode]] of the copy if the node was successfully copied, ''false'' if invalid arguments were passed."), oop=FunctionOOP(class_name='xmlnode', method_name='copy', field=None), url=FunctionUrl(url='/wiki/XmlCopyFile', name='xmlCopyFile', category='XML functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='xmlCopyFile', return_types=['xmlnode'], arguments=[FunctionArgument(name='nodeToCopy', argument_type='xmlnode', default_value=None, optional=False), FunctionArgument(name='newFilePath', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description="This function copies all contents of a certain node in a XML document to a new document file, so the copied node becomes the new file's root node.\nThe new file will not be saved to file system until [[xmlSaveFile]]() is called", arguments={'nodeToCopy': 'the xmlnode that is to be copied to a new document.', 'newFilePath': 'the path of the file that is to be created, in the following format: :resourceName/path. resourceName is the name of the resource the file is in, and path is the path from the root directory of the resource to the file.\n:For example, to create a file named \'newfile.xml\' with myNode as the root node in the resource \'ctf\', it can be done from another resource this way: \'\'xmlCopyFile(myNode, ":ctf/newfile.xml")\'\'.\n:If the file is to be in the current resource, only the file path is necessary, e.g. \'\'xmlCopyFile(myNode, "newfile.xml")\'\'.'}, result="Returns the [[xmlnode]] of the copy if the node was successfully copied, ''false'' if invalid arguments were passed."), oop=FunctionOOP(class_name='xmlnode', method_name='copy', field=None), url=FunctionUrl(url='/wiki/XmlCopyFile', name='xmlCopyFile', category='XML functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='xmlCreateChild', return_types=['xmlnode'], arguments=[FunctionArgument(name='parentNode', argument_type='xmlnode', default_value=None, optional=False), FunctionArgument(name='tagName', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='This function creates a new child node under an XML node.', arguments={'parentNode': 'the xmlnode you want to create a new child node under.', 'tagName': 'the type of the child node that will be created.'}, result="Returns the created [[xmlnode]] if successful, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/XmlCreateChild', name='xmlCreateChild', category='XML functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='xmlCreateChild', return_types=['xmlnode'], arguments=[FunctionArgument(name='parentNode', argument_type='xmlnode', default_value=None, optional=False), FunctionArgument(name='tagName', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='This function creates a new child node under an XML node.', arguments={'parentNode': 'the xmlnode you want to create a new child node under.', 'tagName': 'the type of the child node that will be created.'}, result="Returns the created [[xmlnode]] if successful, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/XmlCreateChild', name='xmlCreateChild', category='XML functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='xmlCreateFile', return_types=['xmlnode'], arguments=[FunctionArgument(name='filePath', argument_type='string', default_value=None, optional=False), FunctionArgument(name='rootNodeName', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='This function creates a new XML document, which can later be saved to a file by using [[xmlSaveFile]]. This function will overwrite the file specified if it already exists.', arguments={'filePath': 'The filepath of the file in the following format: :resourceName/path. resourceName is the name of the resource the file will be in, and path is the path from the root directory of the resource to the file.\n:For example, if you want to create a file named \'new.xml\' in the resource \'ctf\', it can be created from another resource this way: \'\'xmlCreateFile(":ctf/new.xml", "newroot")\'\'.\n:If the file is in the current resource, only the file path is necessary, e.g. \'\'xmlCreateFile("new.xml", "newroot")\'\'.\n:Note that if a different resource than default is being accessed, the caller resource needs access to general.ModifyOtherObjects in the [[ACL]].', 'rootNodeName': 'the name of the root node in the XML document.'}, result="Returns the root [[xmlnode]] object of the new XML file if successful, or ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/XmlCreateFile', name='xmlCreateFile', category='XML functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='xmlCreateFile', return_types=['xmlnode'], arguments=[FunctionArgument(name='filePath', argument_type='string', default_value=None, optional=False), FunctionArgument(name='rootNodeName', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='This function creates a new XML document, which can later be saved to a file by using [[xmlSaveFile]]. This function will overwrite the file specified if it already exists.', arguments={'filePath': 'The filepath of the file in the following format: :resourceName/path. resourceName is the name of the resource the file will be in, and path is the path from the root directory of the resource to the file.\n:For example, if you want to create a file named \'new.xml\' in the resource \'ctf\', it can be created from another resource this way: \'\'xmlCreateFile(":ctf/new.xml", "newroot")\'\'.\n:If the file is in the current resource, only the file path is necessary, e.g. \'\'xmlCreateFile("new.xml", "newroot")\'\'.\n:Note that if a different resource than default is being accessed, the caller resource needs access to general.ModifyOtherObjects in the [[ACL]].', 'rootNodeName': 'the name of the root node in the XML document.'}, result="Returns the root [[xmlnode]] object of the new XML file if successful, or ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/XmlCreateFile', name='xmlCreateFile', category='XML functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='xmlDestroyNode', return_types=['bool'], arguments=[FunctionArgument(name='theXMLNode', argument_type='xmlnode', default_value=None, optional=False)]), docs=FunctionDoc(description='This function destroys a XML node from the XML node tree.', arguments={'theXMLNode': 'The xml node you want to destroy.'}, result="Returns ''true'' if the [[xml node]] was successfully destroyed, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/XmlDestroyNode', name='xmlDestroyNode', category='XML functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='xmlDestroyNode', return_types=['bool'], arguments=[FunctionArgument(name='theXMLNode', argument_type='xmlnode', default_value=None, optional=False)]), docs=FunctionDoc(description='This function destroys a XML node from the XML node tree.', arguments={'theXMLNode': 'The xml node you want to destroy.'}, result="Returns ''true'' if the [[xml node]] was successfully destroyed, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/XmlDestroyNode', name='xmlDestroyNode', category='XML functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='xmlFindChild', return_types=['xmlnode'], arguments=[FunctionArgument(name='parent', argument_type='xmlnode', default_value=None, optional=False), FunctionArgument(name='tagName', argument_type='string', default_value=None, optional=False), FunctionArgument(name='index', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns a named child node of an XML node.', arguments={'parent': ': This is an xmlnode that you want to find the child node under.', 'tagName': ': This is the name of the child node you wish to find (case-sensitive).', 'index': ': This is the 0-based index of the node you wish to find. For example, to find the 5th subnode with a particular name, you would use 4 as the index value. To find the first occurence, use 0.'}, result="Returns an [[xmlnode]] if the node was found, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/XmlFindChild', name='xmlFindChild', category='XML functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='xmlFindChild', return_types=['xmlnode'], arguments=[FunctionArgument(name='parent', argument_type='xmlnode', default_value=None, optional=False), FunctionArgument(name='tagName', argument_type='string', default_value=None, optional=False), FunctionArgument(name='index', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns a named child node of an XML node.', arguments={'parent': ': This is an xmlnode that you want to find the child node under.', 'tagName': ': This is the name of the child node you wish to find (case-sensitive).', 'index': ': This is the 0-based index of the node you wish to find. For example, to find the 5th subnode with a particular name, you would use 4 as the index value. To find the first occurence, use 0.'}, result="Returns an [[xmlnode]] if the node was found, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/XmlFindChild', name='xmlFindChild', category='XML functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='xmlLoadFile', return_types=['xmlnode'], arguments=[FunctionArgument(name='filePath', argument_type='string', default_value=None, optional=False), FunctionArgument(name='readOnly', argument_type='bool', default_value='false', optional=True)]), docs=FunctionDoc(description='This function provides an alternative way to load XML files to [[getResourceConfig]].\nThis function loads an XML file and returns the node by specifying a specific file path, while [[getResourceConfig]] allows for loading an XML file from a resource.', arguments={'filePath': 'The filepath of the file in the following format: :resourceName/path. resourceName is the name of the resource the file is in, and path is the path from the root directory of the resource to the file.\n:For example, if there is a file named \'settings.xml\' in the resource \'ctf\', it can be accessed from another resource this way: \'\'xmlLoadFile(":ctf/settings.xml")\'\'.\n:If the file is in the current resource, only the file path is necessary, e.g. \'\'xmlLoadFile("settings.xml")\'\'.', 'readOnly': 'By default, the XML file is opened with reading and writing access. You can specify true for this parameter if you only need reading access.'}, result="Returns the root [[xmlnode]] object of an xml file if successful, or ''false'' otherwise.\n{{New items|3.0152|1.5|\nPrint error if something wrong with xml.\n|7485}}"), oop=FunctionOOP(class_name='XML', method_name='load', field=None), url=FunctionUrl(url='/wiki/XmlLoadFile', name='xmlLoadFile', category='XML functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='xmlLoadFile', return_types=['xmlnode'], arguments=[FunctionArgument(name='filePath', argument_type='string', default_value=None, optional=False), FunctionArgument(name='readOnly', argument_type='bool', default_value='false', optional=True)]), docs=FunctionDoc(description='This function provides an alternative way to load XML files to [[getResourceConfig]].\nThis function loads an XML file and returns the node by specifying a specific file path, while [[getResourceConfig]] allows for loading an XML file from a resource.', arguments={'filePath': 'The filepath of the file in the following format: :resourceName/path. resourceName is the name of the resource the file is in, and path is the path from the root directory of the resource to the file.\n:For example, if there is a file named \'settings.xml\' in the resource \'ctf\', it can be accessed from another resource this way: \'\'xmlLoadFile(":ctf/settings.xml")\'\'.\n:If the file is in the current resource, only the file path is necessary, e.g. \'\'xmlLoadFile("settings.xml")\'\'.', 'readOnly': 'By default, the XML file is opened with reading and writing access. You can specify true for this parameter if you only need reading access.'}, result="Returns the root [[xmlnode]] object of an xml file if successful, or ''false'' otherwise.\n{{New items|3.0152|1.5|\nPrint error if something wrong with xml.\n|7485}}"), oop=FunctionOOP(class_name='XML', method_name='load', field=None), url=FunctionUrl(url='/wiki/XmlLoadFile', name='xmlLoadFile', category='XML functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='xmlLoadString', return_types=['xmlnode'], arguments=[FunctionArgument(name='xmlString', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'xmlString': 'A string containing XML data'}, result="Returns the root [[xmlnode]] object of an xml string if successful, or ''false'' otherwise (invalid XML string)."), oop=FunctionOOP(class_name='XML', method_name='loadstring', field=None), url=FunctionUrl(url='/wiki/XmlLoadString', name='xmlLoadString', category='XML functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='xmlLoadString', return_types=['xmlnode'], arguments=[FunctionArgument(name='xmlString', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='', arguments={'xmlString': 'A string containing XML data'}, result="Returns the root [[xmlnode]] object of an xml string if successful, or ''false'' otherwise (invalid XML string)."), oop=FunctionOOP(class_name='XML', method_name='loadstring', field=None), url=FunctionUrl(url='/wiki/XmlLoadString', name='xmlLoadString', category='XML functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='xmlNodeGetAttribute', return_types=['string'], arguments=[FunctionArgument(name='node', argument_type='xmlnode', default_value=None, optional=False), FunctionArgument(name='name', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is used to return an attribute of a node in a configuration file.', arguments={'node': 'The node from which you wish to return the attribute', 'name': 'The name of the attribute.'}, result="Returns the attribute in string form or ''false'', if the attribute is not defined."), oop=FunctionOOP(class_name='xmlnode', method_name='getAttribute', field=None), url=FunctionUrl(url='/wiki/XmlNodeGetAttribute', name='xmlNodeGetAttribute', category='XML functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='xmlNodeGetAttribute', return_types=['string'], arguments=[FunctionArgument(name='node', argument_type='xmlnode', default_value=None, optional=False), FunctionArgument(name='name', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is used to return an attribute of a node in a configuration file.', arguments={'node': 'The node from which you wish to return the attribute', 'name': 'The name of the attribute.'}, result="Returns the attribute in string form or ''false'', if the attribute is not defined."), oop=FunctionOOP(class_name='xmlnode', method_name='getAttribute', field=None), url=FunctionUrl(url='/wiki/XmlNodeGetAttribute', name='xmlNodeGetAttribute', category='XML functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='xmlNodeGetAttributes', return_types=['table'], arguments=[FunctionArgument(name='node', argument_type='xmlnode', default_value=None, optional=False)]), docs=FunctionDoc(description='Returns all the attributes of a specific XML node.', arguments={'node': 'the XML node to get the attributes of.'}, result="If successful, returns a table with as keys the names of the attributes and as values the corresponding attribute values. If the node has no attributes, returns an empty table. In case of failure, returns ''false''."), oop=FunctionOOP(class_name='xmlnode', method_name='getAttributes', field="attributes}}\n===Required Arguments===\n*'''node:''' the XML node to get the attributes of.\n\n===Returns===\nIf successful, returns a table with as keys the names of the attributes and as values the corresponding attribute values. If the node has no attributes, returns an empty table. In case of failure, returns ''false''.\n\n"), url=FunctionUrl(url='/wiki/XmlNodeGetAttributes', name='xmlNodeGetAttributes', category='XML functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='xmlNodeGetAttributes', return_types=['table'], arguments=[FunctionArgument(name='node', argument_type='xmlnode', default_value=None, optional=False)]), docs=FunctionDoc(description='Returns all the attributes of a specific XML node.', arguments={'node': 'the XML node to get the attributes of.'}, result="If successful, returns a table with as keys the names of the attributes and as values the corresponding attribute values. If the node has no attributes, returns an empty table. In case of failure, returns ''false''."), oop=FunctionOOP(class_name='xmlnode', method_name='getAttributes', field="attributes}}\n===Required Arguments===\n*'''node:''' the XML node to get the attributes of.\n\n===Returns===\nIf successful, returns a table with as keys the names of the attributes and as values the corresponding attribute values. If the node has no attributes, returns an empty table. In case of failure, returns ''false''.\n\n"), url=FunctionUrl(url='/wiki/XmlNodeGetAttributes', name='xmlNodeGetAttributes', category='XML functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='xmlNodeGetChildren', return_types=['table/xmlnode'], arguments=[FunctionArgument(name='parent', argument_type='xmlnode', default_value=None, optional=False), FunctionArgument(name='index', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns all children of a particular XML node, or a particular child node.', arguments={'parent': 'This is the xmlnode you want to retrieve one or all child nodes of.', 'index': 'If you only want to retrieve one particular child node, specify its (0-based) index here. For example if you only want the first node, specify 0; the fifth node has index 4, etc.'}, result="If '''index''' isn't specified, returns a table containing all child nodes. If '''index''' is specified, returns the corresponding child node if it exists. If no nodes are found, it returns an empty table. Returns ''false'' in case of failure."), oop=FunctionOOP(class_name='xmlnode', method_name='getChildren', field="children}}\n\n===Required Arguments===\n* '''parent:''' This is the [[xmlnode]] you want to retrieve one or all child nodes of. \n\n===Optional Arguments=== \n* '''index:''' If you only want to retrieve one particular child node, specify its (0-based) index here. For example if you only want the first node, specify 0; the fifth node has index 4, etc.\n\n===Returns===\nIf '''index''' isn't specified, returns a table containing all child nodes. If '''index''' is specified, returns the corresponding child node if it exists. If no nodes are found, it returns an empty table. Returns ''false'' in case of failure.\n\n"), url=FunctionUrl(url='/wiki/XmlNodeGetChildren', name='xmlNodeGetChildren', category='XML functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='xmlNodeGetChildren', return_types=['table/xmlnode'], arguments=[FunctionArgument(name='parent', argument_type='xmlnode', default_value=None, optional=False), FunctionArgument(name='index', argument_type='int', default_value=None, optional=False)]), docs=FunctionDoc(description='This function returns all children of a particular XML node, or a particular child node.', arguments={'parent': 'This is the xmlnode you want to retrieve one or all child nodes of.', 'index': 'If you only want to retrieve one particular child node, specify its (0-based) index here. For example if you only want the first node, specify 0; the fifth node has index 4, etc.'}, result="If '''index''' isn't specified, returns a table containing all child nodes. If '''index''' is specified, returns the corresponding child node if it exists. If no nodes are found, it returns an empty table. Returns ''false'' in case of failure."), oop=FunctionOOP(class_name='xmlnode', method_name='getChildren', field="children}}\n\n===Required Arguments===\n* '''parent:''' This is the [[xmlnode]] you want to retrieve one or all child nodes of. \n\n===Optional Arguments=== \n* '''index:''' If you only want to retrieve one particular child node, specify its (0-based) index here. For example if you only want the first node, specify 0; the fifth node has index 4, etc.\n\n===Returns===\nIf '''index''' isn't specified, returns a table containing all child nodes. If '''index''' is specified, returns the corresponding child node if it exists. If no nodes are found, it returns an empty table. Returns ''false'' in case of failure.\n\n"), url=FunctionUrl(url='/wiki/XmlNodeGetChildren', name='xmlNodeGetChildren', category='XML functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='xmlNodeGetName', return_types=['string'], arguments=[FunctionArgument(name='node', argument_type='xmlnode', default_value=None, optional=False)]), docs=FunctionDoc(description='Gets the tag name of the specified XML node.', arguments={'node': 'the node to get the tag name of.'}, result="Returns the tag name of the node if successful, ''false'' otherwise."), oop=FunctionOOP(class_name='xmlnode', method_name='getName', field='name'), url=FunctionUrl(url='/wiki/XmlNodeGetName', name='xmlNodeGetName', category='XML functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='xmlNodeGetName', return_types=['string'], arguments=[FunctionArgument(name='node', argument_type='xmlnode', default_value=None, optional=False)]), docs=FunctionDoc(description='Gets the tag name of the specified XML node.', arguments={'node': 'the node to get the tag name of.'}, result="Returns the tag name of the node if successful, ''false'' otherwise."), oop=FunctionOOP(class_name='xmlnode', method_name='getName', field='name'), url=FunctionUrl(url='/wiki/XmlNodeGetName', name='xmlNodeGetName', category='XML functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='xmlNodeGetParent', return_types=['xmlnode'], arguments=[FunctionArgument(name='node', argument_type='xmlnode', default_value=None, optional=False)]), docs=FunctionDoc(description='Returns the parent node of an xml node.', arguments={'node': 'the node of which you want to know the parent.'}, result="Returns the parent node of the specified node if successful. Returns ''false'' if the specified node is the root node or an invalid node was passed."), oop=FunctionOOP(class_name='xmlnode', method_name='getParent', field="parent}}\n\n===Required Arguments===\n*'''node:''' the node of which you want to know the parent.\n\n===Returns===\nReturns the parent node of the specified node if successful. Returns ''false'' if the specified node is the root node or an invalid node was passed.\n\n"), url=FunctionUrl(url='/wiki/XmlNodeGetParent', name='xmlNodeGetParent', category='XML functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='xmlNodeGetParent', return_types=['xmlnode'], arguments=[FunctionArgument(name='node', argument_type='xmlnode', default_value=None, optional=False)]), docs=FunctionDoc(description='Returns the parent node of an xml node.', arguments={'node': 'the node of which you want to know the parent.'}, result="Returns the parent node of the specified node if successful. Returns ''false'' if the specified node is the root node or an invalid node was passed."), oop=FunctionOOP(class_name='xmlnode', method_name='getParent', field="parent}}\n\n===Required Arguments===\n*'''node:''' the node of which you want to know the parent.\n\n===Returns===\nReturns the parent node of the specified node if successful. Returns ''false'' if the specified node is the root node or an invalid node was passed.\n\n"), url=FunctionUrl(url='/wiki/XmlNodeGetParent', name='xmlNodeGetParent', category='XML functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='xmlNodeGetValue', return_types=['string'], arguments=[FunctionArgument(name='theXMLNode', argument_type='xmlnode', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is made to be able to read tag values in XML files (eg. <something>anything</something>).', arguments={'theXMLNode': 'The xml node of which you need to know the value.'}, result="Returns the value of the node as a [[string]] if it was received successfully, ''false'' otherwise."), oop=FunctionOOP(class_name='xmlnode', method_name='getValue', field='value'), url=FunctionUrl(url='/wiki/XmlNodeGetValue', name='xmlNodeGetValue', category='XML functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='xmlNodeGetValue', return_types=['string'], arguments=[FunctionArgument(name='theXMLNode', argument_type='xmlnode', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is made to be able to read tag values in XML files (eg. <something>anything</something>).', arguments={'theXMLNode': 'The xml node of which you need to know the value.'}, result="Returns the value of the node as a [[string]] if it was received successfully, ''false'' otherwise."), oop=FunctionOOP(class_name='xmlnode', method_name='getValue', field='value'), url=FunctionUrl(url='/wiki/XmlNodeGetValue', name='xmlNodeGetValue', category='XML functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='xmlNodeSetAttribute', return_types=['bool'], arguments=[FunctionArgument(name='node', argument_type='xmlnode', default_value=None, optional=False), FunctionArgument(name='name', argument_type='string', default_value=None, optional=False), FunctionArgument(name='float', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is used to edit an attribute of a node in a configuration file.', arguments={'node': 'The node of which you wish to edit an attribute.', 'name': 'The name of the attribute.', 'value': 'The value which you wish to change the attribute to. (Note: nil will delete the attribute)'}, result="Returns ''true'' if the attribute was set successfully, ''false'' if the node and/or attribute do not exist, or if they're faulty."), oop=FunctionOOP(class_name='xmlnode', method_name='setAttribute', field=None), url=FunctionUrl(url='/wiki/XmlNodeSetAttribute', name='xmlNodeSetAttribute', category='XML functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='xmlNodeSetAttribute', return_types=['bool'], arguments=[FunctionArgument(name='node', argument_type='xmlnode', default_value=None, optional=False), FunctionArgument(name='name', argument_type='string', default_value=None, optional=False), FunctionArgument(name='float', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='This function is used to edit an attribute of a node in a configuration file.', arguments={'node': 'The node of which you wish to edit an attribute.', 'name': 'The name of the attribute.', 'value': 'The value which you wish to change the attribute to. (Note: nil will delete the attribute)'}, result="Returns ''true'' if the attribute was set successfully, ''false'' if the node and/or attribute do not exist, or if they're faulty."), oop=FunctionOOP(class_name='xmlnode', method_name='setAttribute', field=None), url=FunctionUrl(url='/wiki/XmlNodeSetAttribute', name='xmlNodeSetAttribute', category='XML functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='xmlNodeSetName', return_types=['bool'], arguments=[FunctionArgument(name='node', argument_type='xmlnode', default_value=None, optional=False), FunctionArgument(name='name', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='Sets the tag name of the specified XML node.', arguments={'node': 'the node to change the tag name of.', 'name': 'the new tag name to set.'}, result="Returns ''true'' if successful, ''false'' otherwise."), oop=FunctionOOP(class_name='xmlnode', method_name='setName', field='name'), url=FunctionUrl(url='/wiki/XmlNodeSetName', name='xmlNodeSetName', category='XML functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='xmlNodeSetName', return_types=['bool'], arguments=[FunctionArgument(name='node', argument_type='xmlnode', default_value=None, optional=False), FunctionArgument(name='name', argument_type='string', default_value=None, optional=False)]), docs=FunctionDoc(description='Sets the tag name of the specified XML node.', arguments={'node': 'the node to change the tag name of.', 'name': 'the new tag name to set.'}, result="Returns ''true'' if successful, ''false'' otherwise."), oop=FunctionOOP(class_name='xmlnode', method_name='setName', field='name'), url=FunctionUrl(url='/wiki/XmlNodeSetName', name='xmlNodeSetName', category='XML functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='xmlNodeSetValue', return_types=['bool'], arguments=[FunctionArgument(name='theXMLNode', argument_type='xmlnode', default_value=None, optional=False), FunctionArgument(name='value', argument_type='string', default_value=None, optional=False), FunctionArgument(name='setCDATA', argument_type='bool', default_value='false', optional=True)]), docs=FunctionDoc(description='This function is made to be able to assign values to tags in XML files (eg. <something>anything</something>).', arguments={'theXMLNode': 'The xml node you want to set the value of.', 'value': 'The string value you want the node to have.\n{{New feature/item|4.0140|1.4.0|6782|', 'setCDATA': 'A boolean indicating if you want the value to be enclosed inside CDATA tags.\n}}'}, result="Returns ''true'' if value was successfully set, ''false'' otherwise."), oop=FunctionOOP(class_name='xmlnode', method_name='setValue', field='value'), url=FunctionUrl(url='/wiki/XmlNodeSetValue', name='xmlNodeSetValue', category='XML functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='xmlNodeSetValue', return_types=['bool'], arguments=[FunctionArgument(name='theXMLNode', argument_type='xmlnode', default_value=None, optional=False), FunctionArgument(name='value', argument_type='string', default_value=None, optional=False), FunctionArgument(name='setCDATA', argument_type='bool', default_value='false', optional=True)]), docs=FunctionDoc(description='This function is made to be able to assign values to tags in XML files (eg. <something>anything</something>).', arguments={'theXMLNode': 'The xml node you want to set the value of.', 'value': 'The string value you want the node to have.\n{{New feature/item|4.0140|1.4.0|6782|', 'setCDATA': 'A boolean indicating if you want the value to be enclosed inside CDATA tags.\n}}'}, result="Returns ''true'' if value was successfully set, ''false'' otherwise."), oop=FunctionOOP(class_name='xmlnode', method_name='setValue', field='value'), url=FunctionUrl(url='/wiki/XmlNodeSetValue', name='xmlNodeSetValue', category='XML functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='xmlSaveFile', return_types=['bool'], arguments=[FunctionArgument(name='rootNode', argument_type='xmlnode', default_value=None, optional=False)]), docs=FunctionDoc(description='This function saves a loaded XML file.', arguments={'rootNode': 'the root xmlnode of the loaded XML file.'}, result="Returns ''true'' if save was successful, ''false'' if the XML file does not exist."), oop=None, url=FunctionUrl(url='/wiki/XmlSaveFile', name='xmlSaveFile', category='XML functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='xmlSaveFile', return_types=['bool'], arguments=[FunctionArgument(name='rootNode', argument_type='xmlnode', default_value=None, optional=False)]), docs=FunctionDoc(description='This function saves a loaded XML file.', arguments={'rootNode': 'the root xmlnode of the loaded XML file.'}, result="Returns ''true'' if save was successful, ''false'' if the XML file does not exist."), oop=None, url=FunctionUrl(url='/wiki/XmlSaveFile', name='xmlSaveFile', category='XML functions', function_type=ListType.CLIENT))),
CompoundFunctionData(server=FunctionData(signature=FunctionType(name='xmlUnloadFile', return_types=['bool'], arguments=[FunctionArgument(name='node', argument_type='xmlnode', default_value=None, optional=False)]), docs=FunctionDoc(description='Unloads an XML document from memory.', arguments={'node': 'root of the XML document to unload'}, result="Returns ''true'' if the document was unloaded successfully, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/XmlUnloadFile', name='xmlUnloadFile', category='XML functions', function_type=ListType.CLIENT)), client=FunctionData(signature=FunctionType(name='xmlUnloadFile', return_types=['bool'], arguments=[FunctionArgument(name='node', argument_type='xmlnode', default_value=None, optional=False)]), docs=FunctionDoc(description='Unloads an XML document from memory.', arguments={'node': 'root of the XML document to unload'}, result="Returns ''true'' if the document was unloaded successfully, ''false'' otherwise."), oop=None, url=FunctionUrl(url='/wiki/XmlUnloadFile', name='xmlUnloadFile', category='XML functions', function_type=ListType.CLIENT))),
]